{"version":"0.2.8","files":{"/Users/voloko/code/esprima/test/test.js":{"stats":{"percentage":0.9955033870590984,"lines":[{"lineno":16837},{"lineno":16838},{"lineno":16839},{"lineno":16840},{"lineno":16850},{"lineno":16851},{"lineno":16896},{"lineno":16899},{"lineno":16938},{"lineno":16939},{"lineno":16940},{"lineno":16944},{"lineno":16963},{"lineno":16966},{"lineno":16983},{"lineno":16984},{"lineno":16985},{"lineno":16996},{"lineno":16997},{"lineno":16999},{"lineno":17004},{"lineno":17005},{"lineno":17006},{"lineno":17007},{"lineno":17008},{"lineno":17012},{"lineno":17013},{"lineno":17014},{"lineno":17015},{"lineno":17016},{"lineno":17017},{"lineno":17021},{"lineno":17023},{"lineno":17025},{"lineno":17026},{"lineno":17027},{"lineno":17029},{"lineno":17030},{"lineno":17031},{"lineno":17032},{"lineno":17034},{"lineno":17035},{"lineno":17036},{"lineno":17038},{"lineno":17039},{"lineno":17040},{"lineno":17041},{"lineno":17043},{"lineno":17044},{"lineno":17045},{"lineno":17047},{"lineno":17048},{"lineno":17049},{"lineno":17050},{"lineno":17053},{"lineno":17055},{"lineno":17057},{"lineno":17058},{"lineno":17059},{"lineno":17061},{"lineno":17062},{"lineno":17063},{"lineno":17065},{"lineno":17066},{"lineno":17068},{"lineno":17069},{"lineno":17075},{"lineno":17077},{"lineno":17078},{"lineno":17081},{"lineno":17102},{"lineno":17103},{"lineno":17112},{"lineno":17113},{"lineno":17114},{"lineno":17115},{"lineno":17121}],"missing":77,"seen":17047,"total":17124,"coverage":{"16837":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"16838":{"partial":false,"source":"    Error.call(this, 'Expected ');","missing":[{"startCol":4,"endCol":33}]},"16839":{"partial":false,"source":"    this.expected = expected;","missing":[{"startCol":4,"endCol":29}]},"16840":{"partial":false,"source":"    this.actual = actual;","missing":[{"startCol":4,"endCol":25}]},"16850":{"partial":false,"source":"        if (typeof e.message === 'string') {","missing":[{"startCol":12,"endCol":41}]},"16851":{"partial":false,"source":"            msg = 'Error: ' + e.message;","missing":[{"startCol":12,"endCol":40},{"startCol":18,"endCol":39}]},"16896":{"partial":false,"source":"        throw new NotMatchingError(expected, e.toString());","missing":[{"startCol":8,"endCol":59},{"startCol":45,"endCol":57}]},"16899":{"partial":false,"source":"        throw new NotMatchingError(expected, actual);","missing":[{"startCol":8,"endCol":53}]},"16938":{"partial":false,"source":"            if (exception.message.indexOf('Invalid regular expression') > 0) {","missing":[{"startCol":16,"endCol":71}]},"16939":{"partial":false,"source":"                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {","missing":[{"startCol":20,"endCol":49}]},"16940":{"partial":false,"source":"                    return;","missing":[{"startCol":20,"endCol":27}]},"16944":{"partial":false,"source":"            throw new NotMatchingError(expected, actual);","missing":[{"startCol":12,"endCol":57}]},"16963":{"partial":false,"source":"        throw new NotMatchingError(expected, e.toString());","missing":[{"startCol":8,"endCol":59},{"startCol":45,"endCol":57}]},"16966":{"partial":false,"source":"        throw new NotMatchingError(expected, actual);","missing":[{"startCol":8,"endCol":53}]},"16983":{"partial":false,"source":"    runTests = function () {","missing":[{}]},"16984":{"partial":false,"source":"        'use strict';","missing":[{},{"startCol":8,"endCol":21}]},"16985":{"partial":false,"source":"        var total = 0,","missing":[{}]},"16986":{"partial":false,"source":"            failures = 0,","missing":[{}]},"16987":{"partial":false,"source":"            category,","missing":[{}]},"16988":{"partial":false,"source":"            fixture,","missing":[{}]},"16989":{"partial":false,"source":"            source,","missing":[{}]},"16990":{"partial":false,"source":"            tick,","missing":[{}]},"16991":{"partial":false,"source":"            expected,","missing":[{}]},"16992":{"partial":false,"source":"            index,","missing":[{}]},"16993":{"partial":false,"source":"            len;","missing":[{}]},"16994":{"partial":false,"source":"","missing":[{}]},"16995":{"partial":false,"source":"        function setText(el, str) {","missing":[{}]},"16996":{"partial":false,"source":"            if (typeof el.innerText === 'string') {","missing":[{"startCol":16,"endCol":48},{}]},"16997":{"partial":false,"source":"                el.innerText = str;","missing":[{},{"startCol":16,"endCol":35}]},"16998":{"partial":false,"source":"            } else {","missing":[{}]},"16999":{"partial":false,"source":"                el.textContent = str;","missing":[{"startCol":16,"endCol":37},{}]},"17000":{"partial":false,"source":"            }","missing":[{}]},"17001":{"partial":false,"source":"        }","missing":[{}]},"17002":{"partial":false,"source":"","missing":[{}]},"17003":{"partial":false,"source":"        function startCategory(category) {","missing":[{}]},"17004":{"partial":false,"source":"            var report, e;","missing":[{},{"startCol":12,"endCol":26}]},"17005":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{},{"startCol":12,"endCol":55},{"startCol":21,"endCol":54}]},"17006":{"partial":false,"source":"            e = document.createElement('h4');","missing":[{"startCol":12,"endCol":45},{},{"startCol":16,"endCol":44}]},"17007":{"partial":false,"source":"            setText(e, category);","missing":[{"startCol":12,"endCol":33},{}]},"17008":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"17009":{"partial":false,"source":"        }","missing":[{}]},"17010":{"partial":false,"source":"","missing":[{}]},"17011":{"partial":false,"source":"        function reportSuccess(code) {","missing":[{}]},"17012":{"partial":false,"source":"            var report, e;","missing":[{},{"startCol":12,"endCol":26}]},"17013":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{"startCol":12,"endCol":55},{},{"startCol":21,"endCol":54}]},"17014":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":16,"endCol":45},{},{"startCol":12,"endCol":46}]},"17015":{"partial":false,"source":"            e.setAttribute('class', 'code');","missing":[{"startCol":12,"endCol":43},{}]},"17016":{"partial":false,"source":"            setText(e, code);","missing":[{"startCol":12,"endCol":28},{}]},"17017":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"17018":{"partial":false,"source":"        }","missing":[{}]},"17019":{"partial":false,"source":"","missing":[{}]},"17020":{"partial":false,"source":"        function reportFailure(code, expected, actual) {","missing":[{}]},"17021":{"partial":false,"source":"            var report, e;","missing":[{"startCol":12,"endCol":26},{}]},"17022":{"partial":false,"source":"","missing":[{}]},"17023":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{"startCol":12,"endCol":55},{"startCol":21,"endCol":54},{}]},"17024":{"partial":false,"source":"","missing":[{}]},"17025":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{"startCol":16,"endCol":43},{}]},"17026":{"partial":false,"source":"            setText(e, 'Code:');","missing":[{"startCol":12,"endCol":31},{}]},"17027":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"17028":{"partial":false,"source":"","missing":[{}]},"17029":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":12,"endCol":46},{},{"startCol":16,"endCol":45}]},"17030":{"partial":false,"source":"            e.setAttribute('class', 'code');","missing":[{},{"startCol":12,"endCol":43}]},"17031":{"partial":false,"source":"            setText(e, code);","missing":[{},{"startCol":12,"endCol":28}]},"17032":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"17033":{"partial":false,"source":"","missing":[{}]},"17034":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{"startCol":16,"endCol":43},{}]},"17035":{"partial":false,"source":"            setText(e, 'Expected');","missing":[{"startCol":12,"endCol":34},{}]},"17036":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"17037":{"partial":false,"source":"","missing":[{}]},"17038":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{},{"startCol":12,"endCol":46},{"startCol":16,"endCol":45}]},"17039":{"partial":false,"source":"            e.setAttribute('class', 'expected');","missing":[{"startCol":12,"endCol":47},{}]},"17040":{"partial":false,"source":"            setText(e, expected);","missing":[{},{"startCol":12,"endCol":32}]},"17041":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"17042":{"partial":false,"source":"","missing":[{}]},"17043":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{},{"startCol":16,"endCol":43}]},"17044":{"partial":false,"source":"            setText(e, 'Actual');","missing":[{"startCol":12,"endCol":32},{}]},"17045":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"17046":{"partial":false,"source":"","missing":[{}]},"17047":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":12,"endCol":46},{"startCol":16,"endCol":45},{}]},"17048":{"partial":false,"source":"            e.setAttribute('class', 'actual');","missing":[{"startCol":12,"endCol":45},{}]},"17049":{"partial":false,"source":"            setText(e, actual);","missing":[{"startCol":12,"endCol":30},{}]},"17050":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"17051":{"partial":false,"source":"        }","missing":[{}]},"17052":{"partial":false,"source":"","missing":[{}]},"17053":{"partial":false,"source":"        setText(document.getElementById('version'), esprima.version);","missing":[{},{"startCol":8,"endCol":68},{"startCol":16,"endCol":50}]},"17054":{"partial":false,"source":"","missing":[{}]},"17055":{"partial":false,"source":"        tick = new Date();","missing":[{},{"startCol":8,"endCol":26}]},"17056":{"partial":false,"source":"        for (category in data) {","missing":[{}]},"17057":{"partial":false,"source":"            if (data.hasOwnProperty(category)) {","missing":[{"startCol":16,"endCol":45},{}]},"17058":{"partial":false,"source":"                startCategory(category);","missing":[{"startCol":16,"endCol":39},{}]},"17059":{"partial":false,"source":"                fixture = data[category];","missing":[{},{"startCol":16,"endCol":41}]},"17060":{"partial":false,"source":"                for (source in fixture) {","missing":[{}]},"17061":{"partial":false,"source":"                    if (fixture.hasOwnProperty(source)) {","missing":[{},{"startCol":24,"endCol":54}]},"17062":{"partial":false,"source":"                        expected = fixture[source];","missing":[{},{"startCol":24,"endCol":51}]},"17063":{"partial":false,"source":"                        total += 1;","missing":[{},{"startCol":24,"endCol":35}]},"17064":{"partial":false,"source":"                        try {","missing":[{}]},"17065":{"partial":false,"source":"                            runTest(source, expected);","missing":[{"startCol":28,"endCol":53},{}]},"17066":{"partial":false,"source":"                            reportSuccess(source, JSON.stringify(expected, null, 4));","missing":[{},{"startCol":28,"endCol":84},{"startCol":50,"endCol":83}]},"17067":{"partial":false,"source":"                        } catch (e) {","missing":[{}]},"17068":{"partial":false,"source":"                            failures += 1;","missing":[{},{"startCol":28,"endCol":42}]},"17069":{"partial":false,"source":"                            reportFailure(source, e.expected, e.actual);","missing":[{"startCol":28,"endCol":71},{}]},"17070":{"partial":false,"source":"                        }","missing":[{}]},"17071":{"partial":false,"source":"                    }","missing":[{}]},"17072":{"partial":false,"source":"                }","missing":[{}]},"17073":{"partial":false,"source":"            }","missing":[{}]},"17074":{"partial":false,"source":"        }","missing":[{}]},"17075":{"partial":false,"source":"        tick = (new Date()) - tick;","missing":[{},{"startCol":8,"endCol":35},{"startCol":15,"endCol":34}]},"17076":{"partial":false,"source":"","missing":[{}]},"17077":{"partial":false,"source":"        if (failures > 0) {","missing":[{},{"startCol":12,"endCol":24}]},"17078":{"partial":false,"source":"            setText(document.getElementById('status'), total + ' tests. ' +","missing":[{},{"startCol":20,"endCol":53},{"startCol":55,"endCol":73}]},"17079":{"partial":false,"source":"                'Failures: ' + failures + '. ' + tick + ' ms');","missing":[{}]},"17080":{"partial":false,"source":"        } else {","missing":[{}]},"17081":{"partial":false,"source":"            setText(document.getElementById('status'), total + ' tests. ' +","missing":[{"startCol":20,"endCol":53},{},{"startCol":55,"endCol":73}]},"17082":{"partial":false,"source":"                'No failure. ' + tick + ' ms');","missing":[{}]},"17083":{"partial":false,"source":"        }","missing":[{}]},"17084":{"partial":false,"source":"    };","missing":[{}]},"17102":{"partial":false,"source":"                    e.source = source;","missing":[{"startCol":20,"endCol":38}]},"17103":{"partial":false,"source":"                    failures.push(e);","missing":[{"startCol":20,"endCol":36}]},"17112":{"partial":false,"source":"            console.error(header);","missing":[{"startCol":12,"endCol":33}]},"17113":{"partial":false,"source":"            failures.forEach(function (failure) {","missing":[{}]},"17114":{"partial":false,"source":"                console.error(failure.source + ': Expected\\n    ' +","missing":[{},{"startCol":30,"endCol":65}]},"17115":{"partial":false,"source":"                    failure.expected.split('\\n').join('\\n    ') +","missing":[{},{"startCol":20,"endCol":63},{"startCol":42,"endCol":48}]},"17116":{"partial":false,"source":"                    '\\nto match\\n    ' + failure.actual);","missing":[{}]},"17117":{"partial":false,"source":"            });","missing":[{}]},"17121":{"partial":true,"source":"        process.exit(failures.length === 0 ? 0 : 1);","missing":[{"startCol":49,"endCol":50}]}},"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2011 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2011 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint browser:true node:true */\n/*global esprima:true */\n\nvar runTests, data;\n\ndata = {\n\n    'Primary Expression': {\n\n        'this\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'ThisExpression',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 0 }\n                }\n            }],\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 0 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'this',\n                range: [0, 4]\n            }]\n        },\n\n        'null\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: null,\n                    raw: 'null',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 0 }\n                }\n            }],\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 0 }\n            },\n            tokens: [{\n                type: 'Null',\n                value: 'null',\n                range: [0, 4]\n            }]\n        },\n\n        '\\n    42\\n\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [5, 9],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 4, column: 0 }\n                }\n            }],\n            range: [5, 9],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 4, column: 0 }\n            },\n            tokens: [{\n                type: 'Numeric',\n                value: '42',\n                range: [5, 7]\n            }]\n        },\n\n        '(1 + 2 ) * 3': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [1, 2],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 2 }\n                        }\n                    },\n                    right: {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 3,\n                    raw: '3',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        }\n\n    },\n\n    'Array Initializer': {\n\n        'x = []': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'ArrayExpression',\n                        elements: [],\n                        range: [4, 6],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            },\n            tokens: [{\n                type: 'Identifier',\n                value: 'x',\n                range: [0, 1]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [2, 3]\n            }, {\n                type: 'Punctuator',\n                value: '[',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: ']',\n                range: [5, 6]\n            }]\n        },\n\n        'x = [ ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x = [ 42 ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [6, 8],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 8 }\n                        }\n                    }],\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'x = [ 42, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [6, 8],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 8 }\n                        }\n                    }],\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x = [ ,, 42 ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [\n                        null,\n                        null,\n                        {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [9, 11],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 11 }\n                            }\n                        }],\n                    range: [4, 13],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'x = [ 1, 2, 3, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = [ 1, 2,, 3, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    }, null, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [13, 14],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        '日本語 = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '日本語',\n                    range: [0, 3],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'T\\u203F = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u203F',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'T\\u200C = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u200C',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'T\\u200D = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u200D',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\u2163\\u2161 = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '\\u2163\\u2161',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\u2163\\u2161\\u200A=\\u2009[]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '\\u2163\\u2161',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Object Initializer': {\n\n        'x = {}': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x = { }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x = { answer: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'answer',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [14, 16],\n                            loc: {\n                                start: { line: 1, column: 14 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 16],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 16 }\n                        }\n                    }],\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'x = { if: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [6, 8],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 8 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 12],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 12 }\n                        }\n                    }],\n                    range: [4, 14],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'x = { true: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [12, 14],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = { false: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [6, 11],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 11 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [13, 15],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 15],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 15 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'x = { null: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [12, 14],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = { \"answer\": 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'answer',\n                            raw: '\"answer\"',\n                            range: [6, 14],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [16, 18],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 18 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 18],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 18 }\n                        }\n                    }],\n                    range: [4, 20],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                range: [0, 20],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'x = { x: 1, x: 2 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [\n                        {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [6, 7],\n                                loc: {\n                                    start: { line: 1, column: 6 },\n                                    end: { line: 1, column: 7 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [9, 10],\n                                loc: {\n                                    start: { line: 1, column: 9 },\n                                    end: { line: 1, column: 10 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [12, 13],\n                                loc: {\n                                    start: { line: 1, column: 12 },\n                                    end: { line: 1, column: 13 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 2,\n                                raw: '2',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [12, 16],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 16 }\n                            }\n                        }\n                    ],\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'x = { get width() { return m_width } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'width',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ReturnStatement',\n                                    argument: {\n                                        type: 'Identifier',\n                                        name: 'm_width',\n                                        range: [27, 34],\n                                        loc: {\n                                            start: { line: 1, column: 27 },\n                                            end: { line: 1, column: 34 }\n                                        }\n                                    },\n                                    range: [20, 35],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 35 }\n                                    }\n                                }],\n                                range: [18, 36],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 36 }\n                                }\n                            },\n                            range: [18, 36],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 36],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 36 }\n                        }\n                    }],\n                    range: [4, 38],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [0, 38],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 38 }\n                }\n            },\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'x = { get undef() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'undef',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [18, 20],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            },\n                            range: [18, 20],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 20],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 20 }\n                        }\n                    }],\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'x = { get if() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [15, 17],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            range: [15, 17],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 17],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { get true() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [17, 19],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            range: [17, 19],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 19],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }],\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'x = { get false() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [18, 20],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            },\n                            range: [18, 20],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 20],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 20 }\n                        }\n                    }],\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'x = { get null() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [17, 19],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            range: [17, 19],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 19],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }],\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'x = { get \"undef\"() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'undef',\n                            raw: '\"undef\"',\n                            range: [10, 17],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [20, 22],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 22 }\n                                }\n                            },\n                            range: [20, 22],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 22 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 22],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 22 }\n                        }\n                    }],\n                    range: [4, 24],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 24],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'x = { get 10() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 10,\n                            raw: '10',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [15, 17],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            range: [15, 17],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 17],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { set width(w) { m_width = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'width',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_width',\n                                            range: [21, 28],\n                                            loc: {\n                                                start: { line: 1, column: 21 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [21, 32],\n                                        loc: {\n                                            start: { line: 1, column: 21 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [21, 33],\n                                    loc: {\n                                        start: { line: 1, column: 21 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [19, 34],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [19, 34],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set if(w) { m_if = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [13, 14],\n                                loc: {\n                                    start: { line: 1, column: 13 },\n                                    end: { line: 1, column: 14 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_if',\n                                            range: [18, 22],\n                                            loc: {\n                                                start: { line: 1, column: 18 },\n                                                end: { line: 1, column: 22 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [25, 26],\n                                            loc: {\n                                                start: { line: 1, column: 25 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        range: [18, 26],\n                                        loc: {\n                                            start: { line: 1, column: 18 },\n                                            end: { line: 1, column: 26 }\n                                        }\n                                    },\n                                    range: [18, 27],\n                                    loc: {\n                                        start: { line: 1, column: 18 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                }],\n                                range: [16, 28],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            },\n                            range: [16, 28],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 28 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 28],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 28 }\n                        }\n                    }],\n                    range: [4, 30],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [0, 30],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'x = { set true(w) { m_true = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_true',\n                                            range: [20, 26],\n                                            loc: {\n                                                start: { line: 1, column: 20 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [29, 30],\n                                            loc: {\n                                                start: { line: 1, column: 29 },\n                                                end: { line: 1, column: 30 }\n                                            }\n                                        },\n                                        range: [20, 30],\n                                        loc: {\n                                            start: { line: 1, column: 20 },\n                                            end: { line: 1, column: 30 }\n                                        }\n                                    },\n                                    range: [20, 31],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 31 }\n                                    }\n                                }],\n                                range: [18, 32],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 32 }\n                                }\n                            },\n                            range: [18, 32],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 32 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 32],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 32 }\n                        }\n                    }],\n                    range: [4, 34],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [0, 34],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'x = { set false(w) { m_false = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_false',\n                                            range: [21, 28],\n                                            loc: {\n                                                start: { line: 1, column: 21 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [21, 32],\n                                        loc: {\n                                            start: { line: 1, column: 21 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [21, 33],\n                                    loc: {\n                                        start: { line: 1, column: 21 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [19, 34],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [19, 34],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set null(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [20, 26],\n                                            loc: {\n                                                start: { line: 1, column: 20 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [29, 30],\n                                            loc: {\n                                                start: { line: 1, column: 29 },\n                                                end: { line: 1, column: 30 }\n                                            }\n                                        },\n                                        range: [20, 30],\n                                        loc: {\n                                            start: { line: 1, column: 20 },\n                                            end: { line: 1, column: 30 }\n                                        }\n                                    },\n                                    range: [20, 31],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 31 }\n                                    }\n                                }],\n                                range: [18, 32],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 32 }\n                                }\n                            },\n                            range: [18, 32],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 32 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 32],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 32 }\n                        }\n                    }],\n                    range: [4, 34],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [0, 34],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'x = { set \"null\"(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'null',\n                            raw: '\"null\"',\n                            range: [10, 16],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [17, 18],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 18 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [22, 28],\n                                            loc: {\n                                                start: { line: 1, column: 22 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [22, 32],\n                                        loc: {\n                                            start: { line: 1, column: 22 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [22, 33],\n                                    loc: {\n                                        start: { line: 1, column: 22 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [20, 34],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [20, 34],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set 10(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 10,\n                            raw: '10',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [13, 14],\n                                loc: {\n                                    start: { line: 1, column: 13 },\n                                    end: { line: 1, column: 14 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [18, 24],\n                                            loc: {\n                                                start: { line: 1, column: 18 },\n                                                end: { line: 1, column: 24 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [27, 28],\n                                            loc: {\n                                                start: { line: 1, column: 27 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        range: [18, 28],\n                                        loc: {\n                                            start: { line: 1, column: 18 },\n                                            end: { line: 1, column: 28 }\n                                        }\n                                    },\n                                    range: [18, 29],\n                                    loc: {\n                                        start: { line: 1, column: 18 },\n                                        end: { line: 1, column: 29 }\n                                    }\n                                }],\n                                range: [16, 30],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 30 }\n                                }\n                            },\n                            range: [16, 30],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 30 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 30],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 30 }\n                        }\n                    }],\n                    range: [4, 32],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 32 }\n                    }\n                },\n                range: [0, 32],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 32 }\n                }\n            },\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 32 }\n            }\n        },\n\n        'x = { get: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'get',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [11, 13],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 13 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 13],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 15],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 15 }\n                    }\n                },\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        'x = { set: 43 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'set',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 43,\n                            raw: '43',\n                            range: [11, 13],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 13 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 13],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 15],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 15 }\n                    }\n                },\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        }\n\n    },\n\n    'Comments': {\n\n        '/* block comment */ 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [20, 22],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [20, 22],\n            loc: {\n                start: { line: 1, column: 20 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '42 /*The*/ /*Answer*/': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            },\n            comments: [{\n                range: [3, 10],\n                type: 'Block',\n                value: 'The'\n            }, {\n                range: [11, 21],\n                type: 'Block',\n                value: 'Answer'\n            }]\n        },\n\n        '/* multiline\\ncomment\\nshould\\nbe\\nignored */ 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [42, 44],\n                loc: {\n                    start: { line: 5, column: 11 },\n                    end: { line: 5, column: 13 }\n                }\n            },\n            range: [42, 44],\n            loc: {\n                start: { line: 5, column: 11 },\n                end: { line: 5, column: 13 }\n            }\n        },\n\n        '/*a\\r\\nb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [9, 11],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [9, 11],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [9, 11],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 8],\n                type: 'Block',\n                value: 'a\\r\\nb'\n            }]\n        },\n\n        '/*a\\rb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [8, 10],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [8, 10],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 7],\n                type: 'Block',\n                value: 'a\\rb'\n            }]\n        },\n\n        '/*a\\nb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [8, 10],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [8, 10],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 7],\n                type: 'Block',\n                value: 'a\\nb'\n            }]\n        },\n\n        '// line comment\\n42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [16, 18],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            },\n            range: [16, 18],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            }\n        },\n\n        '42 // line comment': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            comments: [{\n                range: [3, 18],\n                type: 'Line',\n                value: ' line comment'\n            }]\n        },\n\n        '// Hello, world!\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [17, 19],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 2 }\n                    }\n                },\n                range: [17, 19],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [17, 19],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            },\n            comments: [{\n                range: [0, 17],\n                type: 'Line',\n                value: ' Hello, world!'\n            }]\n        },\n\n        '//\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [3, 5],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 2 }\n                    }\n                },\n                range: [3, 5],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [3, 5],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            },\n            comments: [{\n                range: [0, 3],\n                type: 'Line',\n                value: ''\n            }]\n        },\n\n        '/**/42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [4, 6],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [4, 6],\n            loc: {\n                start: { line: 1, column: 4 },\n                end: { line: 1, column: 6 }\n            },\n            comments: [{\n                range: [0, 4],\n                type: 'Block',\n                value: ''\n            }]\n        },\n\n        '// Hello, world!\\n\\n//   Another hello\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [37, 39],\n                    loc: {\n                        start: { line: 4, column: 0 },\n                        end: { line: 4, column: 2 }\n                    }\n                },\n                range: [37, 39],\n                loc: {\n                    start: { line: 4, column: 0 },\n                    end: { line: 4, column: 2 }\n                }\n            }],\n            range: [37, 39],\n            loc: {\n                start: { line: 4, column: 0 },\n                end: { line: 4, column: 2 }\n            },\n            comments: [{\n                range: [0, 17],\n                type: 'Line',\n                value: ' Hello, world!'\n            }, {\n                range: [18, 37],\n                type: 'Line',\n                value: '   Another hello'\n            }]\n        },\n\n        'if (x) { // Some comment\\ndoThat(); }': {\n            type: 'Program',\n            body: [{\n                type: 'IfStatement',\n                test: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                consequent: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'doThat',\n                                range: [25, 31],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 6 }\n                                }\n                            },\n                            'arguments': [],\n                            range: [25, 33],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 8 }\n                            }\n                        },\n                        range: [25, 34],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 9 }\n                        }\n                    }],\n                    range: [7, 36],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 2, column: 11 }\n                    }\n                },\n                alternate: null,\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 11 }\n                }\n            }],\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 11 }\n            },\n            comments: [{\n                range: [9, 25],\n                type: 'Line',\n                value: ' Some comment'\n            }]\n        },\n\n        'switch (answer) { case 42: /* perfect */ bingo() }': {\n            type: 'Program',\n            body: [{\n                type: 'SwitchStatement',\n                discriminant: {\n                    type: 'Identifier',\n                    name: 'answer',\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                cases: [{\n                    type: 'SwitchCase',\n                    test: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [23, 25],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    consequent: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'bingo',\n                                range: [41, 46],\n                                loc: {\n                                    start: { line: 1, column: 41 },\n                                    end: { line: 1, column: 46 }\n                                }\n                            },\n                            'arguments': [],\n                            range: [41, 48],\n                            loc: {\n                                start: { line: 1, column: 41 },\n                                end: { line: 1, column: 48 }\n                            }\n                        },\n                        range: [41, 49],\n                        loc: {\n                            start: { line: 1, column: 41 },\n                            end: { line: 1, column: 49 }\n                        }\n                    }],\n                    range: [18, 49],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 49 }\n                    }\n                }],\n                range: [0, 50],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 50 }\n                }\n            }],\n            range: [0, 50],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 50 }\n            },\n            comments: [{\n                range: [27, 40],\n                type: 'Block',\n                value: ' perfect '\n            }]\n        }\n\n    },\n\n    'Numeric Literals': {\n\n        '0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0',\n                range: [0, 1],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 1 }\n                }\n            },\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        },\n\n        '42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '.14': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0.14,\n                raw: '.14',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '3.14159': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 3.14159,\n                raw: '3.14159',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '6.02214179e+23': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 6.02214179e+23,\n                raw: '6.02214179e+23',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '1.492417830e-10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 1.49241783e-10,\n                raw: '1.492417830e-10',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        '0x0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0x0',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0e+100': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0e+100',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '0xabc': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0xabc,\n                raw: '0xabc',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0xdef': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0xdef,\n                raw: '0xdef',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0X1A': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x1A,\n                raw: '0X1A',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0x10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x10,\n                raw: '0x10',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0x100': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x100,\n                raw: '0x100',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0X04': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0X04,\n                raw: '0X04',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '02': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 2,\n                raw: '02',\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '012': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '012',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0012': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '0012',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        }\n\n    },\n\n    'String Literals': {\n\n        '\"Hello\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello',\n                raw: '\"Hello\"',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\"\\\\n\\\\r\\\\t\\\\v\\\\b\\\\f\\\\\\\\\\\\\\'\\\\\"\\\\0\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: '\\n\\r\\t\\v\\b\\f\\\\\\'\"\\x00',\n                raw: '\"\\\\n\\\\r\\\\t\\\\v\\\\b\\\\f\\\\\\\\\\\\\\'\\\\\"\\\\0\"',\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '\"\\\\u0061\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'a',\n                raw: '\"\\\\u0061\"',\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        '\"\\\\x61\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'a',\n                raw: '\"\\\\x61\"',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '\"\\\\u00\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'u00',\n                raw: '\"\\\\u00\"',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '\"\\\\xt\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'xt',\n                raw: '\"\\\\xt\"',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '\"Hello\\\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\nworld',\n                raw: '\"Hello\\\\nworld\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Helloworld',\n                raw: '\"Hello\\\\\\nworld\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\02World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0002World',\n                raw: '\"Hello\\\\02World\"',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        '\"Hello\\\\012World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u000AWorld',\n                raw: '\"Hello\\\\012World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\122World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\122World',\n                raw: '\"Hello\\\\122World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\0122World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u000A2World',\n                raw: '\"Hello\\\\0122World\"',\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        '\"Hello\\\\312World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u00CAWorld',\n                raw: '\"Hello\\\\312World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\412World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\412World',\n                raw: '\"Hello\\\\412World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\812World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello812World',\n                raw: '\"Hello\\\\812World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\712World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\712World',\n                raw: '\"Hello\\\\712World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\0World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0000World',\n                raw: '\"Hello\\\\0World\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\\\r\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Helloworld',\n                raw: '\"Hello\\\\\\r\\nworld\"',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 15 }\n            }\n        },\n\n        '\"Hello\\\\1World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0001World',\n                raw: '\"Hello\\\\1World\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n    },\n\n    'Regular Expression Literals': {\n\n        'var x = /[a-z]/i': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[a-z]/i',\n                        raw: '/[a-z]/i',\n                        range: [8, 16],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 16 }\n                        }\n                    },\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            }],\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[a-z]/i',\n                range: [8, 16]\n            }]\n        },\n\n        'var x = /[P QR]/i': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/i',\n                        raw: '/[P QR]/i',\n                        range: [8, 17],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            }],\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/i',\n                range: [8, 17]\n            }]\n        },\n\n        'var x = /foo\\\\/bar/': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/foo\\\\/bar/',\n                        raw: '/foo\\\\/bar/',\n                        range: [8, 18],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/foo\\\\/bar/',\n                range: [8, 18]\n            }]\n        },\n\n        'var x = /=([^=\\\\s])+/g': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/=([^=\\\\s])+/g',\n                        raw: '/=([^=\\\\s])+/g',\n                        range: [8, 21],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/=([^=\\\\s])+/g',\n                range: [8, 21]\n            }]\n        },\n\n        'var x = /[P QR]/\\\\u0067': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/g',\n                        raw: '/[P QR]/\\\\u0067',\n                        range: [8, 22],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/\\\\u0067',\n                range: [8, 22]\n            }]\n        },\n\n        'var x = /[P QR]/\\\\g': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/g',\n                        raw: '/[P QR]/\\\\g',\n                        range: [8, 18],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/\\\\g',\n                range: [8, 18]\n            }]\n        }\n\n    },\n\n    'Left-Hand-Side Expression': {\n\n        'new Button': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'Button',\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'new Button()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'Button',\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        'new new foo': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'NewExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'new new foo()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'NewExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [4, 13],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'new foo().bar()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'NewExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'foo',\n                            range: [4, 7],\n                            loc: {\n                                start: { line: 1, column: 4 },\n                                end: { line: 1, column: 7 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [0, 9],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [10, 13],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        'new foo[bar]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: true,\n                    object: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [4, 7],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [4, 12],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n\n        'new foo.bar()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [4, 7],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'foo(bar, baz)': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [0, 3],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                'arguments': [{\n                    type: 'Identifier',\n                    name: 'bar',\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'baz',\n                    range: [9, 12],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 12 }\n                    }\n                }],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'universe.milkyway': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'milkyway',\n                    range: [9, 17],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'universe.milkyway.solarsystem': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'milkyway',\n                        range: [9, 17],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    range: [0, 17],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'solarsystem',\n                    range: [18, 29],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [0, 29],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 29 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'universe.milkyway.solarsystem.Earth': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'Identifier',\n                            name: 'universe',\n                            range: [0, 8],\n                            loc: {\n                                start: { line: 1, column: 0 },\n                                end: { line: 1, column: 8 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'milkyway',\n                            range: [9, 17],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        range: [0, 17],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'solarsystem',\n                        range: [18, 29],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [0, 29],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'Earth',\n                    range: [30, 35],\n                    loc: {\n                        start: { line: 1, column: 30 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [0, 35],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 35 }\n                }\n            },\n            range: [0, 35],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 35 }\n            }\n        },\n\n        'universe[galaxyName, otherUselessName]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: true,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'SequenceExpression',\n                    expressions: [{\n                        type: 'Identifier',\n                        name: 'galaxyName',\n                        range: [9, 19],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }, {\n                        type: 'Identifier',\n                        name: 'otherUselessName',\n                        range: [21, 37],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [9, 37],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [0, 38],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 38 }\n                }\n            },\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'universe[galaxyName]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: true,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxyName',\n                    range: [9, 19],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 20],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'universe[42].galaxies': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: true,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [9, 11],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxies',\n                    range: [13, 21],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'universe(42).galaxies': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [9, 11],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 11 }\n                        }\n                    }],\n                    range: [8, 12],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxies',\n                    range: [13, 21],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [8, 21],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'universe(42).galaxies(14, 3, 77).milkyway': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'universe',\n                                range: [0, 8],\n                                loc: {\n                                    start: { line: 1, column: 0 },\n                                    end: { line: 1, column: 8 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Literal',\n                                value: 42,\n                                raw: '42',\n                                range: [9, 11],\n                                loc: {\n                                    start: { line: 1, column: 9 },\n                                    end: { line: 1, column: 11 }\n                                }\n                            }],\n                            range: [8, 12],\n                            loc: {\n                                start: { line: 1, column: 8 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'galaxies',\n                            range: [13, 21],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 21 }\n                            }\n                        },\n                        range: [8, 21],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [22, 24],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [26, 27],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 27 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 77,\n                        raw: '77',\n                        range: [29, 31],\n                        loc: {\n                            start: { line: 1, column: 29 },\n                            end: { line: 1, column: 31 }\n                        }\n                    }],\n                    range: [21, 32],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 32 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'milkyway',\n                    range: [33, 41],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 41 }\n                    }\n                },\n                range: [21, 41],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 41 }\n                }\n            },\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            }\n        },\n\n        'earth.asia.Indonesia.prepareForElection(2014)': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'MemberExpression',\n                            computed: false,\n                            object: {\n                                type: 'Identifier',\n                                name: 'earth',\n                                range: [0, 5],\n                                loc: {\n                                    start: { line: 1, column: 0 },\n                                    end: { line: 1, column: 5 }\n                                }\n                            },\n                            property: {\n                                type: 'Identifier',\n                                name: 'asia',\n                                range: [6, 10],\n                                loc: {\n                                    start: { line: 1, column: 6 },\n                                    end: { line: 1, column: 10 }\n                                }\n                            },\n                            range: [0, 10],\n                            loc: {\n                                start: { line: 1, column: 0 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'Indonesia',\n                            range: [11, 20],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        range: [0, 20],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'prepareForElection',\n                        range: [21, 39],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 39 }\n                        }\n                    },\n                    range: [0, 39],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 39 }\n                    }\n                },\n                'arguments': [{\n                    type: 'Literal',\n                    value: 2014,\n                    raw: '2014',\n                    range: [40, 44],\n                    loc: {\n                        start: { line: 1, column: 40 },\n                        end: { line: 1, column: 44 }\n                    }\n                }],\n                range: [0, 45],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 45 }\n                }\n            },\n            range: [0, 45],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 45 }\n            }\n        },\n\n        'universe.if': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'if',\n                    range: [9, 11],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'universe.true': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'true',\n                    range: [9, 13],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'universe.false': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'false',\n                    range: [9, 14],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'universe.null': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'null',\n                    range: [9, 13],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        }\n\n    },\n\n    'Postfix Expressions': {\n\n        'x++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                prefix: false,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'x--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                prefix: false,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'eval++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                prefix: false,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'eval--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                prefix: false,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'arguments++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                prefix: false,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'arguments--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                prefix: false,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        }\n\n    },\n\n    'Unary Operators': {\n\n        '++x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                prefix: true,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '--x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                prefix: true,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '++eval': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [2, 6],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                prefix: true,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '--eval': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [2, 6],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                prefix: true,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '++arguments': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [2, 11],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                prefix: true,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        '--arguments': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [2, 11],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                prefix: true,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        '+x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '+',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '-x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '-',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '~x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '~',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '!x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '!',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        'void x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'void',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'delete x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'delete',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'typeof x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'typeof',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        }\n\n    },\n\n    'Multiplicative Operators': {\n\n        'x * y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x / y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '/',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x % y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '%',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Additive Operators': {\n\n        'x + y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x - y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Bitwise Shift Operator': {\n\n        'x << y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >> y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >>> y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>>>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Relational Operators': {\n\n        'x < y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x > y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x <= y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >= y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x in y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'in',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x instanceof y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'instanceof',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [13, 14],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Equality Operators': {\n\n        'x == y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '==',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x != y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '!=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x === y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '===',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x !== y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '!==',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Binary Bitwise Operators': {\n\n        'x & y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '&',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x ^ y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '^',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x | y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Binary Expressions': {\n\n        'x + y + z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y + z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '-',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y - z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y - z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '-',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y / z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '/',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y % z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '%',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y / z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '/',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y % z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '%',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x % y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '%',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x << y << z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<<',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '<<',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x | y | z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '|',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x & y & z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '&',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x ^ y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '^',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x & y | z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x | y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x | y & z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        }\n\n    },\n\n    'Binary Logical Operators': {\n\n        'x || y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x && y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '&&',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x || y || z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x && y && z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '&&',\n                left: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x || y && z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [10, 11],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [5, 11],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x || y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    range: [5, 10],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        }\n\n    },\n\n    'Conditional Operator': {\n\n        'y ? 1 : 2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ConditionalExpression',\n                test: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                consequent: {\n                    type: 'Literal',\n                    value: 1,\n                    raw: '1',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                alternate: {\n                    type: 'Literal',\n                    value: 2,\n                    raw: '2',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x && y ? 1 : 2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ConditionalExpression',\n                test: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                consequent: {\n                    type: 'Literal',\n                    value: 1,\n                    raw: '1',\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                alternate: {\n                    type: 'Literal',\n                    value: 2,\n                    raw: '2',\n                    range: [13, 14],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Assignment Operators': {\n\n        'x = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'eval = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [7, 9],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'arguments = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [12, 14],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'x *= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '*=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x /= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '/=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x %= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '%=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x += 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '+=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x -= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '-=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x <<= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '<<=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'x >>= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '>>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'x >>>= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '>>>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [7, 9],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x &= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '&=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x ^= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '^=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x |= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '|=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Block': {\n\n        '{ foo }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [2, 5],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [2, 6],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '{ doThis(); doThat(); }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doThis',\n                        range: [2, 8],\n                        loc: {\n                            start: { line: 1, column: 2 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [2, 10],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [2, 11],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 11 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doThat',\n                        range: [12, 18],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [12, 20],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                range: [12, 21],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '{}': {\n            type: 'BlockStatement',\n            body: [],\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        }\n\n    },\n\n    'Variable Statement': {\n\n        'var x': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'var x, y;': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                init: null,\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'var x = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [4, 10],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 10 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'var eval = 42, arguments = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [4, 8],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [15, 24],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [27, 29],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [15, 29],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'var x = 14, y = 3, z = 1977': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 14,\n                    raw: '14',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [4, 10],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 10 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [12, 13],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 3,\n                    raw: '3',\n                    range: [16, 17],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [12, 17],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 17 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 1977,\n                    raw: '1977',\n                    range: [23, 27],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [19, 27],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 27 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'var implements, interface, package': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'implements',\n                    range: [4, 14],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                init: null,\n                range: [4, 14],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 14 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'interface',\n                    range: [16, 25],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                init: null,\n                range: [16, 25],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 25 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'package',\n                    range: [27, 34],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                init: null,\n                range: [27, 34],\n                loc: {\n                    start: { line: 1, column: 27 },\n                    end: { line: 1, column: 34 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'var private, protected, public, static': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'private',\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                init: null,\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'protected',\n                    range: [13, 22],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                init: null,\n                range: [13, 22],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 22 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'public',\n                    range: [24, 30],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                init: null,\n                range: [24, 30],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 30 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'static',\n                    range: [32, 38],\n                    loc: {\n                        start: { line: 1, column: 32 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                init: null,\n                range: [32, 38],\n                loc: {\n                    start: { line: 1, column: 32 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        }\n\n    },\n\n    'Let Statement': {\n\n        'let x': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'let',\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '{ let x }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: null,\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 8],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        '{ let x = 42 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 13],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 13 }\n                }\n            }],\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '{ let x = 14, y = 3, z = 1977 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [14, 15],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [18, 19],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 19 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1977,\n                        raw: '1977',\n                        range: [25, 29],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [21, 29],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 29 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 30],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 30 }\n                }\n            }],\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        }\n\n    },\n\n    'Const Statement': {\n\n        'const x = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [10, 12],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [6, 12],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 12 }\n                }\n            }],\n            kind: 'const',\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        '{ const x = 42 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [12, 14],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                }],\n                kind: 'const',\n                range: [2, 15],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 15 }\n                }\n            }],\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '{ const x = 14, y = 3, z = 1977 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [12, 14],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [16, 17],\n                        loc: {\n                            start: { line: 1, column: 16 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [20, 21],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    range: [16, 21],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [23, 24],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1977,\n                        raw: '1977',\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [23, 31],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 31 }\n                    }\n                }],\n                kind: 'const',\n                range: [2, 32],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 32 }\n                }\n            }],\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        }\n\n    },\n\n    'Empty Statement': {\n\n        ';': {\n            type: 'EmptyStatement',\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        }\n\n    },\n\n    'Expression Statement': {\n\n        'x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'x',\n                range: [0, 1],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 1 }\n                }\n            },\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        },\n\n        'x, y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'SequenceExpression',\n                expressions: [{\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [3, 4],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 4 }\n                    }\n                }],\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '\\\\u0061': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'a',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'a\\\\u0061': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'aa',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\\\ua': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'ua',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'a\\\\u': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'au',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        }\n\n    },\n\n    'If Statement': {\n\n        'if (morning) goodMorning()': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodMorning',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            alternate: null,\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'if (morning) (function(){})': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'FunctionExpression',\n                    id: null,\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [24, 26],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 26 }\n                        }\n                    },\n                    range: [13, 27],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: null,\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'if (morning) var x = 0;': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [17, 18],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [17, 22],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [13, 23],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            alternate: null,\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'if (morning) function a(){}': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'FunctionDeclaration',\n                id: {\n                    type: 'Identifier',\n                    name: 'a',\n                    range: [22, 23],\n                    loc: {\n                        start: { line: 1, column: 22 },\n                        end: { line: 1, column: 23 }\n                    }\n                },\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [25, 27],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: null,\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'if (morning) goodMorning(); else goodDay()': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodMorning',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodDay',\n                        range: [33, 40],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 40 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [33, 42],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 42 }\n                    }\n                },\n                range: [33, 42],\n                loc: {\n                    start: { line: 1, column: 33 },\n                    end: { line: 1, column: 42 }\n                }\n            },\n            range: [0, 42],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 42 }\n            }\n        }\n\n    },\n\n    'Iteration Statements': {\n\n        'do keep(); while (true)': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'keep',\n                        range: [3, 7],\n                        loc: {\n                            start: { line: 1, column: 3 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [3, 9],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [3, 10],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [18, 22],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'do keep(); while (true);': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'keep',\n                        range: [3, 7],\n                        loc: {\n                            start: { line: 1, column: 3 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [3, 9],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [3, 10],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [18, 22],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'do { x++; y--; } while (x < 10)': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '++',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'x',\n                            range: [5, 6],\n                            loc: {\n                                start: { line: 1, column: 5 },\n                                end: { line: 1, column: 6 }\n                            }\n                        },\n                        prefix: false,\n                        range: [5, 8],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    range: [5, 9],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 9 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '--',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [10, 11],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 11 }\n                            }\n                        },\n                        prefix: false,\n                        range: [10, 13],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [10, 14],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 14 }\n                    }\n                }],\n                range: [3, 16],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [24, 25],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 10,\n                    raw: '10',\n                    range: [28, 30],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [24, 30],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        '{ do { } while (false) false }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'DoWhileStatement',\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [5, 8],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                test: {\n                    type: 'Literal',\n                    value: false,\n                    raw: 'false',\n                    range: [16, 21],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [2, 22],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 22 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: false,\n                    raw: 'false',\n                    range: [23, 28],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [23, 29],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'while (true) doSomething()': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doSomething',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'while (x < 10) { x++; y--; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 10,\n                    raw: '10',\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [7, 13],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '++',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'x',\n                            range: [17, 18],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 18 }\n                            }\n                        },\n                        prefix: false,\n                        range: [17, 20],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [17, 21],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 21 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '--',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [22, 23],\n                            loc: {\n                                start: { line: 1, column: 22 },\n                                end: { line: 1, column: 23 }\n                            }\n                        },\n                        prefix: false,\n                        range: [22, 25],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    range: [22, 26],\n                    loc: {\n                        start: { line: 1, column: 22 },\n                        end: { line: 1, column: 26 }\n                    }\n                }],\n                range: [15, 28],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 28 }\n                }\n            },\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        },\n\n        'for(;;);': {\n            type: 'ForStatement',\n            init: null,\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'for(;;){}': {\n            type: 'ForStatement',\n            init: null,\n            test: null,\n            update: null,\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [7, 9],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'for(x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [12, 13],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'for(var x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }],\n                kind: 'var',\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [16, 17],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'for(let x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }],\n                kind: 'let',\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [16, 17],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'for(var x = 0, y = 1;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [15, 16],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 16 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [19, 20],\n                        loc: {\n                            start: { line: 1, column: 19 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }],\n                kind: 'var',\n                range: [4, 20],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [23, 24],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'for(x = 0; x < 42;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [19, 20],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'for(x = 0; x < 42; x++);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                prefix: false,\n                range: [19, 22],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            body: {\n                type: 'EmptyStatement',\n                range: [23, 24],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'for(x = 0; x < 42; x++) process(x);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                prefix: false,\n                range: [19, 22],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [24, 31],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [32, 33],\n                        loc: {\n                            start: { line: 1, column: 32 },\n                            end: { line: 1, column: 33 }\n                        }\n                    }],\n                    range: [24, 34],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [24, 35],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 35 }\n                }\n            },\n            range: [0, 35],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 35 }\n            }\n        },\n\n        'for(x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'Identifier',\n                name: 'x',\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [15, 22],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [23, 24],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }],\n                    range: [15, 25],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                range: [15, 26],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            each: false,\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'for (var x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for (var x = 42 in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [13, 15],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    range: [9, 15],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 15],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [19, 23],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [25, 32],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [33, 34],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [25, 35],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [25, 36],\n                loc: {\n                    start: { line: 1, column: 25 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            each: false,\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'for (let x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'let',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for (let x = 42 in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [13, 15],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    range: [9, 15],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                kind: 'let',\n                range: [5, 15],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [19, 23],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [25, 32],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [33, 34],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [25, 35],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [25, 36],\n                loc: {\n                    start: { line: 1, column: 25 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            each: false,\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'for (var i = function() { return 10 in [] } in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'i',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ReturnStatement',\n                                argument: {\n                                    type: 'BinaryExpression',\n                                    operator: 'in',\n                                    left: {\n                                        type: 'Literal',\n                                        value: 10,\n                                        raw: '10',\n                                        range: [33, 35],\n                                        loc: {\n                                            start: { line: 1, column: 33 },\n                                            end: { line: 1, column: 35 }\n                                        }\n                                    },\n                                    right: {\n                                        type: 'ArrayExpression',\n                                        elements: [],\n                                        range: [39, 41],\n                                        loc: {\n                                            start: { line: 1, column: 39 },\n                                            end: { line: 1, column: 41 }\n                                        }\n                                    },\n                                    range: [33, 41],\n                                    loc: {\n                                        start: { line: 1, column: 33 },\n                                        end: { line: 1, column: 41 }\n                                    }\n                                },\n                                range: [26, 42],\n                                loc: {\n                                    start: { line: 1, column: 26 },\n                                    end: { line: 1, column: 42 }\n                                }\n                            }],\n                            range: [24, 43],\n                            loc: {\n                                start: { line: 1, column: 24 },\n                                end: { line: 1, column: 43 }\n                            }\n                        },\n                        range: [13, 43],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 43 }\n                        }\n                    },\n                    range: [9, 43],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 43 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 43],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 43 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [47, 51],\n                loc: {\n                    start: { line: 1, column: 47 },\n                    end: { line: 1, column: 51 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [53, 60],\n                        loc: {\n                            start: { line: 1, column: 53 },\n                            end: { line: 1, column: 60 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [61, 62],\n                        loc: {\n                            start: { line: 1, column: 61 },\n                            end: { line: 1, column: 62 }\n                        }\n                    }],\n                    range: [53, 63],\n                    loc: {\n                        start: { line: 1, column: 53 },\n                        end: { line: 1, column: 63 }\n                    }\n                },\n                range: [53, 64],\n                loc: {\n                    start: { line: 1, column: 53 },\n                    end: { line: 1, column: 64 }\n                }\n            },\n            each: false,\n            range: [0, 64],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 64 }\n            }\n        }\n\n    },\n\n    'continue statement': {\n\n        'while (true) { continue; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'ContinueStatement',\n                        label: null,\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }\n                ],\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'while (true) { continue }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'ContinueStatement',\n                        label: null,\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }\n                ],\n                range: [13, 25],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'done: while (true) { continue done }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ContinueStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [30, 34],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [21, 35],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 35 }\n                            }\n                        }\n                    ],\n                    range: [19, 36],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [6, 36],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'done: while (true) { continue done; }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ContinueStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [30, 34],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [21, 35],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 35 }\n                            }\n                        }\n                    ],\n                    range: [19, 37],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [6, 37],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 37 }\n                }\n            },\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            }\n        }\n\n    },\n\n    'break statement': {\n\n        'while (true) { break }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'BreakStatement',\n                        label: null,\n                        range: [15, 21],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 21 }\n                        }\n                    }\n                ],\n                range: [13, 22],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'done: while (true) { break done }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'BreakStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [27, 31],\n                                loc: {\n                                    start: { line: 1, column: 27 },\n                                    end: { line: 1, column: 31 }\n                                }\n                            },\n                            range: [21, 32],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 32 }\n                            }\n                        }\n                    ],\n                    range: [19, 33],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 33 }\n                    }\n                },\n                range: [6, 33],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 33 }\n                }\n            },\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        },\n\n        'done: while (true) { break done; }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'BreakStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [27, 31],\n                                loc: {\n                                    start: { line: 1, column: 27 },\n                                    end: { line: 1, column: 31 }\n                                }\n                            },\n                            range: [21, 32],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 32 }\n                            }\n                        }\n                    ],\n                    range: [19, 34],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [6, 34],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        }\n\n    },\n\n    'return statement': {\n\n        '(function(){ return })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 20],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 20 }\n                            }\n                        }\n                    ],\n                    range: [11, 21],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '(function(){ return; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 20],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 20 }\n                            }\n                        }\n                    ],\n                    range: [11, 22],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 23],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '(function(){ return x; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 21 }\n                                }\n                            },\n                            range: [13, 22],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 22 }\n                            }\n                        }\n                    ],\n                    range: [11, 24],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        '(function(){ return x * y })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: {\n                                type: 'BinaryExpression',\n                                operator: '*',\n                                left: {\n                                    type: 'Identifier',\n                                    name: 'x',\n                                    range: [20, 21],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 21 }\n                                    }\n                                },\n                                right: {\n                                    type: 'Identifier',\n                                    name: 'y',\n                                    range: [24, 25],\n                                    loc: {\n                                        start: { line: 1, column: 24 },\n                                        end: { line: 1, column: 25 }\n                                    }\n                                },\n                                range: [20, 25],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 25 }\n                                }\n                            },\n                            range: [13, 26],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 26 }\n                            }\n                        }\n                    ],\n                    range: [11, 27],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [0, 28],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 28 }\n                }\n            },\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        }\n    },\n\n    'with statement': {\n\n        'with (x) foo = bar': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [9, 12],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [15, 18],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [9, 18],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [9, 18],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'with (x) foo = bar;': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [9, 12],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [15, 18],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [9, 18],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [9, 19],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'with (x) { foo = bar }': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'AssignmentExpression',\n                        operator: '=',\n                        left: {\n                            type: 'Identifier',\n                            name: 'foo',\n                            range: [11, 14],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        right: {\n                            type: 'Identifier',\n                            name: 'bar',\n                            range: [17, 20],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        range: [11, 20],\n                        loc: {\n                            start: { line: 1, column: 11 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [11, 21],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 21 }\n                    }\n                }],\n                range: [9, 22],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        }\n\n    },\n\n    'switch statement': {\n\n        'switch (x) {}': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'x',\n                range: [8, 9],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'switch (answer) { case 42: hi(); break; }': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'answer',\n                range: [8, 14],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            cases: [{\n                type: 'SwitchCase',\n                test: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [23, 25],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                consequent: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'hi',\n                            range: [27, 29],\n                            loc: {\n                                start: { line: 1, column: 27 },\n                                end: { line: 1, column: 29 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [27, 32],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 32 }\n                    }\n                }, {\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [33, 39],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 39 }\n                    }\n                }],\n                range: [18, 39],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 39 }\n                }\n            }],\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            }\n        },\n\n        'switch (answer) { case 42: hi(); break; default: break }': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'answer',\n                range: [8, 14],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            cases: [{\n                type: 'SwitchCase',\n                test: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [23, 25],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                consequent: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'hi',\n                            range: [27, 29],\n                            loc: {\n                                start: { line: 1, column: 27 },\n                                end: { line: 1, column: 29 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [27, 32],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 32 }\n                    }\n                }, {\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [33, 39],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 39 }\n                    }\n                }],\n                range: [18, 39],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 39 }\n                }\n            }, {\n                type: 'SwitchCase',\n                test: null,\n                consequent: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [49, 55],\n                    loc: {\n                        start: { line: 1, column: 49 },\n                        end: { line: 1, column: 55 }\n                    }\n                }],\n                range: [40, 55],\n                loc: {\n                    start: { line: 1, column: 40 },\n                    end: { line: 1, column: 55 }\n                }\n            }],\n            range: [0, 56],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 56 }\n            }\n        }\n\n    },\n\n    'Labelled Statements': {\n\n        'start: for (;;) break start': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'start',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            body: {\n                type: 'ForStatement',\n                init: null,\n                test: null,\n                update: null,\n                body: {\n                    type: 'BreakStatement',\n                    label: {\n                        type: 'Identifier',\n                        name: 'start',\n                        range: [22, 27],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    range: [16, 27],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [7, 27],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'start: while (true) break start': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'start',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [14, 18],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                body: {\n                    type: 'BreakStatement',\n                    label: {\n                        type: 'Identifier',\n                        name: 'start',\n                        range: [26, 31],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [20, 31],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 31 }\n                    }\n                },\n                range: [7, 31],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        }\n\n    },\n\n    'throw statement': {\n\n        'throw x;': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'throw x * y': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [6, 11],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'throw { message: \"Error\" }': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'ObjectExpression',\n                properties: [{\n                    type: 'Property',\n                    key: {\n                        type: 'Identifier',\n                        name: 'message',\n                        range: [8, 15],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    value: {\n                        type: 'Literal',\n                        value: 'Error',\n                        raw: '\"Error\"',\n                        range: [17, 24],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    kind: 'init',\n                    range: [8, 24],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 24 }\n                    }\n                }],\n                range: [6, 26],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        }\n\n    },\n\n    'try statement': {\n\n        'try { } catch (e) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 21],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [8, 21],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'try { } catch (eval) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [15, 19],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [21, 24],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [8, 24],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 24 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'try { } catch (arguments) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [15, 24],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [26, 29],\n                    loc: {\n                        start: { line: 1, column: 26 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [8, 29],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'try { } catch (e) { say(e) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [20, 23],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 23 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [24, 25],\n                                loc: {\n                                    start: { line: 1, column: 24 },\n                                    end: { line: 1, column: 25 }\n                                }\n                            }],\n                            range: [20, 26],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 26 }\n                            }\n                        },\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    }],\n                    range: [18, 28],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [8, 28],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        },\n\n        'try { } finally { cleanup(stuff) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [],\n            finalizer: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'cleanup',\n                            range: [18, 25],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 25 }\n                            }\n                        },\n                        'arguments': [{\n                            type: 'Identifier',\n                            name: 'stuff',\n                            range: [26, 31],\n                            loc: {\n                                start: { line: 1, column: 26 },\n                                end: { line: 1, column: 31 }\n                            }\n                        }],\n                        range: [18, 32],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    range: [18, 33],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 33 }\n                    }\n                }],\n                range: [16, 34],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'try { doThat(); } catch (e) { say(e) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'doThat',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [6, 15],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                range: [4, 17],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [25, 26],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [30, 33],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [34, 35],\n                                loc: {\n                                    start: { line: 1, column: 34 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            }],\n                            range: [30, 36],\n                            loc: {\n                                start: { line: 1, column: 30 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        range: [30, 37],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [28, 38],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [18, 38],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'try { doThat(); } catch (e) { say(e) } finally { cleanup(stuff) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'doThat',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [6, 15],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                range: [4, 17],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [25, 26],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [30, 33],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [34, 35],\n                                loc: {\n                                    start: { line: 1, column: 34 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            }],\n                            range: [30, 36],\n                            loc: {\n                                start: { line: 1, column: 30 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        range: [30, 37],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [28, 38],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [18, 38],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            finalizer: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'cleanup',\n                            range: [49, 56],\n                            loc: {\n                                start: { line: 1, column: 49 },\n                                end: { line: 1, column: 56 }\n                            }\n                        },\n                        'arguments': [{\n                            type: 'Identifier',\n                            name: 'stuff',\n                            range: [57, 62],\n                            loc: {\n                                start: { line: 1, column: 57 },\n                                end: { line: 1, column: 62 }\n                            }\n                        }],\n                        range: [49, 63],\n                        loc: {\n                            start: { line: 1, column: 49 },\n                            end: { line: 1, column: 63 }\n                        }\n                    },\n                    range: [49, 64],\n                    loc: {\n                        start: { line: 1, column: 49 },\n                        end: { line: 1, column: 64 }\n                    }\n                }],\n                range: [47, 65],\n                loc: {\n                    start: { line: 1, column: 47 },\n                    end: { line: 1, column: 65 }\n                }\n            },\n            range: [0, 65],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 65 }\n            }\n        }\n\n    },\n\n    'debugger statement': {\n\n        'debugger;': {\n            type: 'DebuggerStatement',\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        }\n\n    },\n\n    'Function Definition': {\n\n        'function hello() { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [19, 24],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 24 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [19, 26],\n                        loc: {\n                            start: { line: 1, column: 19 },\n                            end: { line: 1, column: 26 }\n                        }\n                    },\n                    range: [19, 27],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                range: [17, 29],\n                loc: {\n                    start: { line: 1, column: 17 },\n                    end: { line: 1, column: 29 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'function eval() { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'eval',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [16, 19],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'function arguments() { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'arguments',\n                range: [9, 18],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [21, 24],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'function test(t, t) { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'test',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 't',\n                range: [14, 15],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 15 }\n                }\n            }, {\n                type: 'Identifier',\n                name: 't',\n                range: [17, 18],\n                loc: {\n                    start: { line: 1, column: 17 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [20, 23],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '(function test(t, t) { })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: {\n                    type: 'Identifier',\n                    name: 'test',\n                    range: [10, 14],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                params: [{\n                    type: 'Identifier',\n                    name: 't',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 't',\n                    range: [18, 19],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [21, 24],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'function eval() { function inner() { \"use strict\" } }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'eval',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'FunctionDeclaration',\n                    id: {\n                        type: 'Identifier',\n                        name: 'inner',\n                        range: [27, 32],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Literal',\n                                value: 'use strict',\n                                raw: '\\\"use strict\\\"',\n                                range: [37, 49],\n                                loc: {\n                                    start: { line: 1, column: 37 },\n                                    end: { line: 1, column: 49 }\n                                }\n                            },\n                            range: [37, 50],\n                            loc: {\n                                start: { line: 1, column: 37 },\n                                end: { line: 1, column: 50 }\n                            }\n                        }],\n                        range: [35, 51],\n                        loc: {\n                            start: { line: 1, column: 35 },\n                            end: { line: 1, column: 51 }\n                        }\n                    },\n                    range: [18, 51],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 51 }\n                    }\n                }],\n                range: [16, 53],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 53 }\n                }\n            },\n            range: [0, 53],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 53 }\n            }\n        },\n\n        'function hello(a) { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 'a',\n                range: [15, 16],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 16 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [20, 25],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 25 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    range: [20, 28],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 28 }\n                    }\n                }],\n                range: [18, 30],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'function hello(a, b) { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 'a',\n                range: [15, 16],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 16 }\n                }\n            }, {\n                type: 'Identifier',\n                name: 'b',\n                range: [18, 19],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 19 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [23, 28],\n                            loc: {\n                                start: { line: 1, column: 23 },\n                                end: { line: 1, column: 28 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [23, 30],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 30 }\n                        }\n                    },\n                    range: [23, 31],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 31 }\n                    }\n                }],\n                range: [21, 33],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 33 }\n                }\n            },\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        },\n\n        'var hi = function() { sayHi() };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: null,\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'CallExpression',\n                                callee: {\n                                    type: 'Identifier',\n                                    name: 'sayHi',\n                                    range: [22, 27],\n                                    loc: {\n                                        start: { line: 1, column: 22 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                'arguments': [],\n                                range: [22, 29],\n                                loc: {\n                                    start: { line: 1, column: 22 },\n                                    end: { line: 1, column: 29 }\n                                }\n                            },\n                            range: [22, 30],\n                            loc: {\n                                start: { line: 1, column: 22 },\n                                end: { line: 1, column: 30 }\n                            }\n                        }],\n                        range: [20, 31],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [9, 31],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 31 }\n                    }\n                },\n                range: [4, 31],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 31 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 32 }\n            }\n        },\n\n        'var hi = function eval() { };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [18, 22],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [25, 28],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 28 }\n                        }\n                    },\n                    range: [9, 28],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [4, 28],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'var hi = function arguments() { };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [18, 27],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [30, 33],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 33 }\n                        }\n                    },\n                    range: [9, 33],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 33 }\n                    }\n                },\n                range: [4, 33],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 33 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'var hello = function hi() { sayHi() };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hello',\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'hi',\n                        range: [21, 23],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 23 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'CallExpression',\n                                callee: {\n                                    type: 'Identifier',\n                                    name: 'sayHi',\n                                    range: [28, 33],\n                                    loc: {\n                                        start: { line: 1, column: 28 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                },\n                                'arguments': [],\n                                range: [28, 35],\n                                loc: {\n                                    start: { line: 1, column: 28 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            },\n                            range: [28, 36],\n                            loc: {\n                                start: { line: 1, column: 28 },\n                                end: { line: 1, column: 36 }\n                            }\n                        }],\n                        range: [26, 37],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 37 }\n                        }\n                    },\n                    range: [12, 37],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [4, 37],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 37 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        '(function(){})': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Automatic semicolon insertion': {\n\n        '{ x\\n++y }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                range: [2, 4],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UpdateExpression',\n                    operator: '++',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 2, column: 2 },\n                            end: { line: 2, column: 3 }\n                        }\n                    },\n                    prefix: true,\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 3 }\n                    }\n                },\n                range: [4, 8],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 4 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '{ x\\n--y }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                range: [2, 4],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UpdateExpression',\n                    operator: '--',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 2, column: 2 },\n                            end: { line: 2, column: 3 }\n                        }\n                    },\n                    prefix: true,\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 3 }\n                    }\n                },\n                range: [4, 8],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 4 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        'var x /* comment */;': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        '{ var x = 14, y = 3\\nz; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [14, 15],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [18, 19],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                kind: 'var',\n                range: [2, 20],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [20, 21],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 1 }\n                    }\n                },\n                range: [20, 22],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 4 }\n            }\n        },\n\n        'while (true) { continue\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [24, 29],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [24, 30],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 32],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { continue // Comment\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [35, 40],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [35, 41],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 43],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 43],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { continue /* Multiline\\nComment */there; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [47, 52],\n                        loc: {\n                            start: { line: 2, column: 10 },\n                            end: { line: 2, column: 15 }\n                        }\n                    },\n                    range: [47, 53],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 16 }\n                    }\n                }],\n                range: [13, 55],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 18 }\n                }\n            },\n            range: [0, 55],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        },\n\n        'while (true) { break\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [21, 26],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [21, 27],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 29],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { break // Comment\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [32, 37],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [32, 38],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 40],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 40],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { break /* Multiline\\nComment */there; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [44, 49],\n                        loc: {\n                            start: { line: 2, column: 10 },\n                            end: { line: 2, column: 15 }\n                        }\n                    },\n                    range: [44, 50],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 16 }\n                    }\n                }],\n                range: [13, 52],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 18 }\n                }\n            },\n            range: [0, 52],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        },\n\n        '(function(){ return\\nx; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 1 }\n                                }\n                            },\n                            range: [20, 22],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 2 }\n                            }\n                        }\n                    ],\n                    range: [11, 24],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 4 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 5 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '(function(){ return // Comment\\nx; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [31, 32],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 1 }\n                                }\n                            },\n                            range: [31, 33],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 2 }\n                            }\n                        }\n                    ],\n                    range: [11, 35],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 4 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 5 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '(function(){ return/* Multiline\\nComment */x; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [42, 43],\n                                loc: {\n                                    start: { line: 2, column: 10 },\n                                    end: { line: 2, column: 11 }\n                                }\n                            },\n                            range: [42, 44],\n                            loc: {\n                                start: { line: 2, column: 10 },\n                                end: { line: 2, column: 12 }\n                            }\n                        }\n                    ],\n                    range: [11, 46],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 14 }\n                    }\n                },\n                range: [0, 47],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 15 }\n                }\n            },\n            range: [0, 47],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 15 }\n            }\n        },\n\n        '{ throw error\\nerror; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 14],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 5 }\n                    }\n                },\n                range: [14, 20],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        '{ throw error// Comment\\nerror; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 24],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [24, 29],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 5 }\n                    }\n                },\n                range: [24, 30],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        '{ throw error/* Multiline\\nComment */error; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 36],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 10 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [36, 41],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 15 }\n                    }\n                },\n                range: [36, 42],\n                loc: {\n                    start: { line: 2, column: 10 },\n                    end: { line: 2, column: 16 }\n                }\n            }],\n            range: [0, 44],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        }\n\n    },\n\n    'Source elements': {\n\n        '': {\n            type: 'Program',\n            body: [],\n            range: [0, 0],\n            loc: {\n                start: { line: 0, column: 0 },\n                end: { line: 0, column: 0 }\n            },\n            tokens: []\n        }\n    },\n\n    'Invalid syntax': {\n\n        '{': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '}': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token }'\n        },\n\n        '3ea': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3in []': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e+': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e-': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3x': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3x0': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0x': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '09': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '018': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '01a': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3in[]': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0x3in[]': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"Hello\\nWorld\"': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\u005c': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\u002a': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'var x = /(s/g': {\n            index: 13,\n            lineNumber: 1,\n            column: 14,\n            message: 'Error: Line 1: Invalid regular expression'\n        },\n\n        '/': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n\n        'var x = /[a-z]/\\\\ux': {\n            index: 18,\n            lineNumber: 1,\n            column: 19,\n            message: 'Error: Line 1: Invalid regular expression'\n        },\n\n        '3 = 4': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '(1 + 1) = 10': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '1++': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '1--': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '++1': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '--1': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        'for((1 + 1) in list) process(x);': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        '[': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '[,': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + {': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + { t:t ': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + { t:t,': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'var x = /\\n/': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n\n        'var x = \"\\n': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'var if = 42': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'i + 2 = 42': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '+i = 42': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '1 + (': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '\\n\\n\\n{': {\n            index: 4,\n            lineNumber: 4,\n            column: 2,\n            message: 'Error: Line 4: Unexpected end of input'\n        },\n\n        '\\n/* Some multiline\\ncomment */\\n)': {\n            index: 30,\n            lineNumber: 4,\n            column: 1,\n            message: 'Error: Line 4: Unexpected token )'\n        },\n\n        '{ set 1 }': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        '{ get 2 }': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        '({ set: s(if) { } })': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        '({ set s(.) { } })': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token .'\n        },\n\n        '({ set: s() { } })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ set: s(a, b) { } })': {\n            index: 16,\n            lineNumber: 1,\n            column: 17,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ get: g(d) { } })': {\n            index: 13,\n            lineNumber: 1,\n            column: 14,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ get i() { }, i: 42 })': {\n            index: 21,\n            lineNumber: 1,\n            column: 22,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ i: 42, get i() { } })': {\n            index: 21,\n            lineNumber: 1,\n            column: 22,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ set i(x) { }, i: 42 })': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ i: 42, set i(x) { } })': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ get i() { }, get i() { } })': {\n            index: 27,\n            lineNumber: 1,\n            column: 28,\n            message: 'Error: Line 1: Object literal may not have multiple get/set accessors with the same name'\n        },\n\n        '({ set i(x) { }, set i(x) { } })': {\n            index: 29,\n            lineNumber: 1,\n            column: 30,\n            message: 'Error: Line 1: Object literal may not have multiple get/set accessors with the same name'\n        },\n\n        'function t(if) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'function t(true) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token true'\n        },\n\n        'function t(false) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token false'\n        },\n\n        'function t(null) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token null'\n        },\n\n        'function null() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token null'\n        },\n\n        'function true() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token true'\n        },\n\n        'function false() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token false'\n        },\n\n        'function if() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'a b;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected identifier'\n        },\n\n        'if.a;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token .'\n        },\n\n        'a if;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'a class;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected reserved word'\n        },\n\n        'break\\n': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'break 1;': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        'continue\\n': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'continue 2;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        'throw': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'throw;': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'throw\\n': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal newline after throw'\n        },\n\n        'for (var i, i2 in {});': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Unexpected token in'\n        },\n\n        'for ((i in {}));': {\n            index: 14,\n            lineNumber: 1,\n            column: 15,\n            message: 'Error: Line 1: Unexpected token )'\n        },\n\n        'for (i + 1 in {});': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        'for (+i in {});': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        'if(false)': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'if(false) doThis(); else': {\n            index: 24,\n            lineNumber: 1,\n            column: 25,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'do': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'while(false)': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'for(;;)': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'with(x)': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'try { }': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Missing catch or finally after try'\n        },\n\n        '\\u203F = 10': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'const x = 12, y;': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'const x, y = 12;': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ,'\n        },\n\n        'const x;': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'if(true) let a = 1;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token let'\n        },\n\n        'if(true) const a = 1;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token const'\n        },\n\n        'new X().\"s\"': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Unexpected string'\n        },\n\n        '/*': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*\\n\\n\\n': {\n            index: 5,\n            lineNumber: 4,\n            column: 1,\n            message: 'Error: Line 4: Unexpected token ILLEGAL'\n        },\n\n        '/**': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*\\n\\n*': {\n            index: 5,\n            lineNumber: 3,\n            column: 2,\n            message: 'Error: Line 3: Unexpected token ILLEGAL'\n        },\n\n        '/*hello': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*hello  *': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\n]': {\n            index: 1,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\r]': {\n            index: 1,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\r\\n]': {\n            index: 2,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\n\\r]': {\n            index: 2,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '//\\r\\n]': {\n            index: 4,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '//\\n\\r]': {\n            index: 4,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/a\\\\\\n/': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n        \n        '//\\r \\n]': {\n            index: 5,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/*\\r\\n*/]': {\n            index: 6,\n            lineNumber: 2,\n            column: 3,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '/*\\n\\r*/]': {\n            index: 6,\n            lineNumber: 3,\n            column: 3,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/*\\r \\n*/]': {\n            index: 7,\n            lineNumber: 3,\n            column: 3,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '\\\\\\\\': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\\\u005c': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n\n        '\\\\x': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\\\u0000': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\u200C = []': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\u200D = []': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"\\\\': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"\\\\u': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'return': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Illegal return statement'\n        },\n\n        'break': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'continue': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'switch (x) { default: continue; }': {\n            index: 31,\n            lineNumber: 1,\n            column: 32,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'do { x } *': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token *'\n        },\n\n        'while (true) { break x; }': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'while (true) { continue x; }': {\n            index: 25,\n            lineNumber: 1,\n            column: 26,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { break x; }); }': {\n            index: 40,\n            lineNumber: 1,\n            column: 41,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { continue x; }); }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { break; }); }': {\n            index: 39,\n            lineNumber: 1,\n            column: 40,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'x: while (true) { (function () { continue; }); }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'x: while (true) { x: while (true) { } }': {\n            index: 20,\n            lineNumber: 1,\n            column: 21,\n            message: 'Error: Line 1: Label \\'x\\' has already been declared'\n        },\n\n        '(function () { \\'use strict\\'; delete i; }())': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Delete of an unqualified identifier in strict mode.'\n        },\n\n        '(function () { \\'use strict\\'; with (i); }())': {\n            index: 28,\n            lineNumber: 1,\n            column: 29,\n            message: 'Error: Line 1: Strict mode code may not include a with statement'\n        },\n\n        'function hello() {\\'use strict\\'; ({ i: 42, i: 42 }) }': {\n            index: 47,\n            lineNumber: 1,\n            column: 48,\n            message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ hasOwnProperty: 42, hasOwnProperty: 42 }) }': {\n            index: 73,\n            lineNumber: 1,\n            column: 74,\n            message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; var eval = 10; }': {\n            index: 40,\n            lineNumber: 1,\n            column: 41,\n            message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; var arguments = 10; }': {\n            index: 45,\n            lineNumber: 1,\n            column: 46,\n            message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; try { } catch (eval) { } }': {\n            index: 51,\n            lineNumber: 1,\n            column: 52,\n            message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; try { } catch (arguments) { } }': {\n            index: 56,\n            lineNumber: 1,\n            column: 57,\n            message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval = 10; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Assignment to eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments = 10; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Assignment to eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ++eval; }': {\n            index: 38,\n            lineNumber: 1,\n            column: 39,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; --eval; }': {\n            index: 38,\n            lineNumber: 1,\n            column: 39,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ++arguments; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; --arguments; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval++; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval--; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments++; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments--; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; function eval() { } }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; function arguments() { } }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function eval() {\\'use strict\\'; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function arguments() {\\'use strict\\'; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; (function eval() { }()) }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; (function arguments() { }()) }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function eval() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function arguments() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ s: function eval() { } }); }': {\n            index: 47,\n            lineNumber: 1,\n            column: 48,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function package() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ i: 10, set s(eval) { } }); }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ set s(eval) { } }); }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ s: function s(eval) { } }); }': {\n            index: 49,\n            lineNumber: 1,\n            column: 50,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello(eval) {\\'use strict\\';}': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello(arguments) {\\'use strict\\';}': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() { \\'use strict\\'; function inner(eval) {} }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() { \\'use strict\\'; function inner(arguments) {} }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        ' \"\\\\1\"; \\'use strict\\';': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; \"\\\\1\"; }': {\n            index: 33,\n            lineNumber: 1,\n            column: 34,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; 021; }': {\n            index: 33,\n            lineNumber: 1,\n            column: 34,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; ({ \"\\\\1\": 42 }); }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; ({ 021: 42 }); }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"octal directive\\\\1\"; \"use strict\"; }': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"octal directive\\\\1\"; \"octal directive\\\\2\"; \"use strict\"; }': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"use strict\"; function inner() { \"octal directive\\\\1\"; } }': {\n            index: 52,\n            lineNumber: 1,\n            column: 53,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"use strict\"; var implements; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var interface; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var package; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var private; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var protected; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var public; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var static; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var yield; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var let; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello(static) { \"use strict\"; }': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function static() { \"use strict\"; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'var yield': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token yield'\n        },\n\n        'var let': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token let'\n        },\n\n        '\"use strict\"; function static() { }': {\n            index: 23,\n            lineNumber: 1,\n            column: 24,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function a(t, t) { \"use strict\"; }': {\n            index: 14,\n            lineNumber: 1,\n            column: 15,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        'function a(eval) { \"use strict\"; }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function a(package) { \"use strict\"; }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function a() { \"use strict\"; function b(t, t) { }; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        '(function a(t, t) { \"use strict\"; })': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        'function a() { \"use strict\"; (function b(t, t) { }); }': {\n            index: 44,\n            lineNumber: 1,\n            column: 45,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        '(function a(eval) { \"use strict\"; })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        '(function a(package) { \"use strict\"; })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        }\n\n    },\n\n    'API': {\n        'parse()': {\n            call: 'parse',\n            args: [],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'undefined'\n                    }\n                }]\n            }\n        },\n\n        'parse(null)': {\n            call: 'parse',\n            args: [null],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: null\n                    }\n                }]\n            }\n        },\n\n        'parse(42)': {\n            call: 'parse',\n            args: [42],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 42\n                    }\n                }]\n            }\n        },\n\n        'parse(true)': {\n            call: 'parse',\n            args: [true],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: true\n                    }\n                }]\n            }\n        },\n\n        'parse(undefined)': {\n            call: 'parse',\n            args: [void 0],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'undefined'\n                    }\n                }]\n            }\n        },\n\n        'parse(new String(\"test\"))': {\n            call: 'parse',\n            args: [new String('test')],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'test'\n                    }\n                }]\n            }\n        },\n\n        'parse(new Number(42))': {\n            call: 'parse',\n            args: [new Number(42)],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 42\n                    }\n                }]\n            }\n        },\n\n        'parse(new Boolean(true))': {\n            call: 'parse',\n            args: [new Boolean(true)],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: true\n                    }\n                }]\n            }\n        },\n\n        'Syntax': {\n            property: 'Syntax',\n            result: {\n                AssignmentExpression: 'AssignmentExpression',\n                ArrayExpression: 'ArrayExpression',\n                BlockStatement: 'BlockStatement',\n                BinaryExpression: 'BinaryExpression',\n                BreakStatement: 'BreakStatement',\n                CallExpression: 'CallExpression',\n                CatchClause: 'CatchClause',\n                ConditionalExpression: 'ConditionalExpression',\n                ContinueStatement: 'ContinueStatement',\n                DoWhileStatement: 'DoWhileStatement',\n                DebuggerStatement: 'DebuggerStatement',\n                EmptyStatement: 'EmptyStatement',\n                ExpressionStatement: 'ExpressionStatement',\n                ForStatement: 'ForStatement',\n                ForInStatement: 'ForInStatement',\n                FunctionDeclaration: 'FunctionDeclaration',\n                FunctionExpression: 'FunctionExpression',\n                Identifier: 'Identifier',\n                IfStatement: 'IfStatement',\n                Literal: 'Literal',\n                LabeledStatement: 'LabeledStatement',\n                LogicalExpression: 'LogicalExpression',\n                MemberExpression: 'MemberExpression',\n                NewExpression: 'NewExpression',\n                ObjectExpression: 'ObjectExpression',\n                Program: 'Program',\n                Property: 'Property',\n                ReturnStatement: 'ReturnStatement',\n                SequenceExpression: 'SequenceExpression',\n                SwitchStatement: 'SwitchStatement',\n                SwitchCase: 'SwitchCase',\n                ThisExpression: 'ThisExpression',\n                ThrowStatement: 'ThrowStatement',\n                TryStatement: 'TryStatement',\n                UnaryExpression: 'UnaryExpression',\n                UpdateExpression: 'UpdateExpression',\n                VariableDeclaration: 'VariableDeclaration',\n                VariableDeclarator: 'VariableDeclarator',\n                WhileStatement: 'WhileStatement',\n                WithStatement: 'WithStatement'\n            }\n        }\n\n    },\n\n    'Tolerant parse': {\n        'return': {\n            type: 'Program',\n            body: [{\n                type: 'ReturnStatement',\n                'argument': null,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            },\n            errors: [{\n                index: 6,\n                lineNumber: 1,\n                column: 7,\n                message: 'Error: Line 1: Illegal return statement'\n            }]\n        },\n\n        '(function () { \\'use strict\\'; with (i); }())': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 'use strict',\n                                    raw: '\\'use strict\\'',\n                                    range: [15, 27],\n                                    loc: {\n                                        start: { line: 1, column: 15 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                range: [15, 28],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            }, {\n                                type: 'WithStatement',\n                                object: {\n                                    type: 'Identifier',\n                                    name: 'i',\n                                    range: [35, 36],\n                                    loc: {\n                                        start: { line: 1, column: 35 },\n                                        end: { line: 1, column: 36 }\n                                    }\n                                },\n                                body: {\n                                    type: 'EmptyStatement',\n                                    range: [37, 38],\n                                    loc: {\n                                        start: { line: 1, column: 37 },\n                                        end: { line: 1, column: 38 }\n                                    }\n                                },\n                                range: [29, 38],\n                                loc: {\n                                    start: { line: 1, column: 29 },\n                                    end: { line: 1, column: 38 }\n                                }\n                            }],\n                            range: [13, 40],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 40 }\n                            }\n                        },\n                        range: [1, 40],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 40 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [0, 43],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 43 }\n                    }\n                },\n                range: [0, 43],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 43 }\n                }\n            }],\n            range: [0, 43],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 43 }\n            },\n            errors: [{\n                index: 29,\n                lineNumber: 1,\n                column: 30,\n                message: 'Error: Line 1: Strict mode code may not include a with statement'\n            }]\n        },\n\n        '(function () { \\'use strict\\'; 021 }())': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 'use strict',\n                                    raw: '\\'use strict\\'',\n                                    range: [15, 27],\n                                    loc: {\n                                        start: { line: 1, column: 15 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                range: [15, 28],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            }, {\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 17,\n                                    raw: \"021\",\n                                    range: [29, 32],\n                                    loc: {\n                                        start: { line: 1, column: 29 },\n                                        end: { line: 1, column: 32 }\n                                    }\n                                },\n                                range: [29, 33],\n                                loc: {\n                                    start: { line: 1, column: 29 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            }],\n                            range: [13, 34],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        range: [1, 34],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 34 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [0, 37],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [0, 37],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 37 }\n                }\n            }],\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            },\n            errors: [{\n                index: 29,\n                lineNumber: 1,\n                column: 30,\n                message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n            }]\n        },\n\n        '\"use strict\"; delete x': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UnaryExpression',\n                    operator: 'delete',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [14, 22],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [14, 22],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 22 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            },\n            errors: [{\n                index: 22,\n                lineNumber: 1,\n                column: 23,\n                message: 'Error: Line 1: Delete of an unqualified identifier in strict mode.'\n            }]\n        },\n\n        '\"use strict\"; try {} catch (eval) {}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'TryStatement',\n                block: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 20],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                handlers: [{\n                    type: 'CatchClause',\n                    param: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [28, 32],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    guard: null,\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [34, 36],\n                        loc: {\n                            start: { line: 1, column: 34 },\n                            end: { line: 1, column: 36 }\n                        }\n                    },\n                    range: [21, 36],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 36 }\n                    }\n                }],\n                finalizer: null,\n                range: [14, 36],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 36 }\n                }\n            }],\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            },\n            errors: [{\n                index: 32,\n                lineNumber: 1,\n                column: 33,\n                message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; try {} catch (arguments) {}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'TryStatement',\n                block: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 20],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                handlers: [{\n                    type: 'CatchClause',\n                    param: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [28, 37],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 37 }\n                        }\n                    },\n                    guard: null,\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [39, 41],\n                        loc: {\n                            start: { line: 1, column: 39 },\n                            end: { line: 1, column: 41 }\n                        }\n                    },\n                    range: [21, 41],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 41 }\n                    }\n                }],\n                finalizer: null,\n                range: [14, 41],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 41 }\n                }\n            }],\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            },\n            errors: [{\n                index: 37,\n                lineNumber: 1,\n                column: 38,\n                message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; var eval;': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [18, 22],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    init: null,\n                    range: [18, 22],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [14, 23],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 23 }\n                }\n            }],\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            },\n            errors: [{\n                index: 22,\n                lineNumber: 1,\n                column: 23,\n                message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; var arguments;': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [18, 27],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    init: null,\n                    range: [18, 27],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                kind: 'var',\n                range: [14, 28],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            },\n            errors: [{\n                index: 27,\n                lineNumber: 1,\n                column: 28,\n                message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\";x={y:1,y:1}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [13, 14],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    right: {\n                        type: 'ObjectExpression',\n                        properties: [{\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'y',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [18, 19],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [16, 19],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 19 }\n                            }\n                        }, {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'y',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 21 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [22, 23],\n                                loc: {\n                                    start: { line: 1, column: 22 },\n                                    end: { line: 1, column: 23 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [20, 23],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 23 }\n                            }\n                        }],\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    range: [13, 24],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [13, 24],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 24 }\n                }\n            }],\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            },\n            errors: [{\n                index: 23,\n                lineNumber: 1,\n                column: 24,\n                message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n            }]\n        }\n\n    }\n};\n\n// Special handling for regular expression literal since we need to\n// convert it to a string literal, otherwise it will be decoded\n// as object \"{}\" and the regular expression would be lost.\nfunction adjustRegexLiteral(key, value) {\n    'use strict';\n    if (key === 'value' && value instanceof RegExp) {\n        value = value.toString();\n    }\n    return value;\n}\n\nif (typeof window === 'undefined') {\n    var esprima = require('../esprima');\n}\n\nfunction NotMatchingError(expected, actual) {\n    'use strict';\n    Error.call(this, 'Expected ');\n    this.expected = expected;\n    this.actual = actual;\n}\nNotMatchingError.prototype = new Error();\n\nfunction errorToObject(e) {\n    'use strict';\n    var msg = e.toString();\n\n    // Opera 9.64 produces an non-standard string in toString().\n    if (msg.substr(0, 6) !== 'Error:') {\n        if (typeof e.message === 'string') {\n            msg = 'Error: ' + e.message;\n        }\n    }\n\n    return {\n        index: e.index,\n        lineNumber: e.lineNumber,\n        column: e.column,\n        message: msg\n    };\n}\n\nfunction testParse(code, syntax) {\n    'use strict';\n    var expected, tree, actual, options, StringObject, i, len, err;\n\n    // alias, so that JSLint does not complain.\n    StringObject = String;\n\n    options = {\n        comment: (typeof syntax.comments !== 'undefined'),\n        range: true,\n        loc: true,\n        tokens: (typeof syntax.tokens !== 'undefined'),\n        raw: true,\n        tolerant: (typeof syntax.errors !== 'undefined')\n    };\n\n    expected = JSON.stringify(syntax, null, 4);\n    try {\n        tree = esprima.parse(code, options);\n        tree = (options.comment || options.tokens || options.tolerant) ? tree : tree.body[0];\n\n        if (options.tolerant) {\n            for (i = 0, len = tree.errors.length; i < len; i += 1) {\n                tree.errors[i] = errorToObject(tree.errors[i]);\n            }\n        }\n\n        actual = JSON.stringify(tree, adjustRegexLiteral, 4);\n\n        // Only to ensure that there is no error when using string object.\n        esprima.parse(new StringObject(code), options);\n\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction testError(code, exception) {\n    'use strict';\n    var i, options, expected, actual, handleInvalidRegexFlag;\n\n    // Different parsing options should give the same error.\n    options = [\n        {},\n        { comment: true },\n        { raw: true },\n        { raw: true, comment: true }\n    ];\n\n    // If handleInvalidRegexFlag is true, an invalid flag in a regular expression\n    // will throw an exception. In some old version V8, this is not the case\n    // and hence handleInvalidRegexFlag is false.\n    handleInvalidRegexFlag = false;\n    try {\n        'test'.match(new RegExp('[a-z]', 'x'));\n    } catch (e) {\n        handleInvalidRegexFlag = true;\n    }\n\n    expected = JSON.stringify(exception);\n\n    for (i = 0; i < options.length; i += 1) {\n\n        try {\n            esprima.parse(code, options[i]);\n        } catch (e) {\n            actual = JSON.stringify(errorToObject(e));\n        }\n\n        if (expected !== actual) {\n\n            // Compensate for old V8 which does not handle invalid flag.\n            if (exception.message.indexOf('Invalid regular expression') > 0) {\n                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {\n                    return;\n                }\n            }\n\n            throw new NotMatchingError(expected, actual);\n        }\n\n    }\n}\n\nfunction testAPI(code, result) {\n    'use strict';\n    var expected, res, actual;\n\n    expected = JSON.stringify(result.result, null, 4);\n    try {\n        if (typeof result.property !== 'undefined') {\n            res = esprima[result.property];\n        } else {\n            res = esprima[result.call].apply(esprima, result.args);\n        }\n        actual = JSON.stringify(res, adjustRegexLiteral, 4);\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction runTest(code, result) {\n    'use strict';\n    if (result.hasOwnProperty('lineNumber')) {\n        testError(code, result);\n    } else if (result.hasOwnProperty('result')) {\n        testAPI(code, result);\n    } else {\n        testParse(code, result);\n    }\n}\n\nif (typeof window !== 'undefined') {\n    // Run all tests in a browser environment.\n    runTests = function () {\n        'use strict';\n        var total = 0,\n            failures = 0,\n            category,\n            fixture,\n            source,\n            tick,\n            expected,\n            index,\n            len;\n\n        function setText(el, str) {\n            if (typeof el.innerText === 'string') {\n                el.innerText = str;\n            } else {\n                el.textContent = str;\n            }\n        }\n\n        function startCategory(category) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('h4');\n            setText(e, category);\n            report.appendChild(e);\n        }\n\n        function reportSuccess(code) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n        }\n\n        function reportFailure(code, expected, actual) {\n            var report, e;\n\n            report = document.getElementById('report');\n\n            e = document.createElement('p');\n            setText(e, 'Code:');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Expected');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'expected');\n            setText(e, expected);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Actual');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'actual');\n            setText(e, actual);\n            report.appendChild(e);\n        }\n\n        setText(document.getElementById('version'), esprima.version);\n\n        tick = new Date();\n        for (category in data) {\n            if (data.hasOwnProperty(category)) {\n                startCategory(category);\n                fixture = data[category];\n                for (source in fixture) {\n                    if (fixture.hasOwnProperty(source)) {\n                        expected = fixture[source];\n                        total += 1;\n                        try {\n                            runTest(source, expected);\n                            reportSuccess(source, JSON.stringify(expected, null, 4));\n                        } catch (e) {\n                            failures += 1;\n                            reportFailure(source, e.expected, e.actual);\n                        }\n                    }\n                }\n            }\n        }\n        tick = (new Date()) - tick;\n\n        if (failures > 0) {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'Failures: ' + failures + '. ' + tick + ' ms');\n        } else {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'No failure. ' + tick + ' ms');\n        }\n    };\n} else {\n    (function () {\n        'use strict';\n\n        var total = 0,\n            failures = [],\n            tick = new Date(),\n            expected,\n            header;\n\n        Object.keys(data).forEach(function (category) {\n            Object.keys(data[category]).forEach(function (source) {\n                total += 1;\n                expected = data[category][source];\n                try {\n                    runTest(source, expected);\n                } catch (e) {\n                    e.source = source;\n                    failures.push(e);\n                }\n            });\n        });\n        tick = (new Date()) - tick;\n\n        header = total + ' tests. ' + failures.length + ' failures. ' +\n            tick + ' ms';\n        if (failures.length) {\n            console.error(header);\n            failures.forEach(function (failure) {\n                console.error(failure.source + ': Expected\\n    ' +\n                    failure.expected.split('\\n').join('\\n    ') +\n                    '\\nto match\\n    ' + failure.actual);\n            });\n        } else {\n            console.log(header);\n        }\n        process.exit(failures.length === 0 ? 0 : 1);\n    }());\n}\n/* vim: set sw=4 ts=4 et tw=80 : */","blocks":{"total":57,"seen":28,"missing":29,"percentage":0.49122807017543857}},"hash":"f75a9953737374ac26e2570f16c938f0"},"/Users/voloko/code/esprima/esprima.js":{"stats":{"percentage":0.9966489807316392,"lines":[{"lineno":178},{"lineno":187},{"lineno":188},{"lineno":3468},{"lineno":3471},{"lineno":3472},{"lineno":3474},{"lineno":3521},{"lineno":3522},{"lineno":3526},{"lineno":3527},{"lineno":3580}],"missing":12,"seen":3569,"total":3581,"coverage":{"178":{"partial":false,"source":"            throw new Error('ASSERT: ' + message);","missing":[{"startCol":12,"endCol":50},{"startCol":28,"endCol":48}]},"187":{"partial":false,"source":"        sliceSource = function sliceArraySource(from, to) {","missing":[{}]},"188":{"partial":false,"source":"            return source.slice(from, to).join('');","missing":[{"startCol":12,"endCol":51},{"startCol":19,"endCol":50},{"startCol":31,"endCol":41},{}]},"189":{"partial":false,"source":"        };","missing":[{}]},"3468":{"partial":false,"source":"        var length = str.length,","missing":[{}]},"3469":{"partial":false,"source":"            result = [],","missing":[{}]},"3470":{"partial":false,"source":"            i;","missing":[{}]},"3471":{"partial":false,"source":"        for (i = 0; i < length; ++i) {","missing":[{"startCol":20,"endCol":30},{"startCol":32,"endCol":35}]},"3472":{"partial":false,"source":"            result[i] = str.charAt(i);","missing":[{"startCol":12,"endCol":38},{"startCol":24,"endCol":37}]},"3474":{"partial":false,"source":"        return result;","missing":[{"startCol":8,"endCol":22}]},"3521":{"partial":false,"source":"                if (code instanceof String) {","missing":[{"startCol":20,"endCol":42}]},"3522":{"partial":false,"source":"                    source = code.valueOf();","missing":[{"startCol":20,"endCol":44},{"startCol":29,"endCol":43}]},"3526":{"partial":false,"source":"                if (typeof source[0] === 'undefined') {","missing":[{"startCol":20,"endCol":52}]},"3527":{"partial":false,"source":"                    source = stringToArray(code);","missing":[{"startCol":20,"endCol":49},{"startCol":29,"endCol":48}]},"3580":{"partial":true,"source":"}(typeof exports === 'undefined' ? (esprima = {}) : exports));","missing":[{"startCol":35,"endCol":49}]}},"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, exports:true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // Return the next character and move forward.\n\n    function nextChar() {\n        return source[index++];\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = nextChar();\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = nextChar();\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += nextChar();\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = nextChar();\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += nextChar();\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (isOctalDigit(ch)) {\n                    number += nextChar();\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: true,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === '.') {\n            number += nextChar();\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += nextChar();\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += nextChar();\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += nextChar();\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += nextChar();\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = nextChar();\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = nextChar();\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\v';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(nextChar());\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(nextChar());\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str = '', ch, start, pattern, flags, value, classMarker = false, restore;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = nextChar();\n\n        while (index < length) {\n            ch = nextChar();\n            str += ch;\n            if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '\\\\') {\n                    ch = nextChar();\n                    // ECMA-262 7.8.5\n                    if (isLineTerminator(ch)) {\n                        throwError({}, Messages.UnterminatedRegExp);\n                    }\n                    str += ch;\n                } else if (ch === '/') {\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (str.length === 1) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        var error;\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        var s;\n\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwError(token, Messages.StrictReservedWord);\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n        return;\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        switch (expr.type) {\n        case Syntax.Identifier:\n        case Syntax.MemberExpression:\n        case Syntax.CallExpression:\n            return true;\n        }\n        return false;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [],\n            undef;\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(undef);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwError(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            body: body\n        };\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwError(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    throwUnexpected(lex());\n                }\n                param = [ parseVariableIdentifier() ];\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction(param, token),\n                    kind: 'set'\n                };\n            } else {\n                expect(':');\n                return {\n                    type: Syntax.Property,\n                    key: id,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: parseAssignmentExpression(),\n                kind: 'init'\n            };\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var token, properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwError({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var expr,\n            token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            lex();\n            state.lastParenthesized = expr = parseExpression();\n            expect(')');\n            return expr;\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember(object) {\n        return {\n            type: Syntax.MemberExpression,\n            computed: false,\n            object: object,\n            property: parseNonComputedProperty()\n        };\n    }\n\n    function parseComputedMember(object) {\n        var property, expr;\n\n        expect('[');\n        property = parseExpression();\n        expr = {\n            type: Syntax.MemberExpression,\n            computed: true,\n            object: object,\n            property: property\n        };\n        expect(']');\n        return expr;\n    }\n\n    function parseCallMember(object) {\n        return {\n            type: Syntax.CallExpression,\n            callee: object,\n            'arguments': parseArguments()\n        };\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (match('(')) {\n                expr = parseCallMember(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall();\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPostfix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n        expr = parseShiftExpression();\n        state.allowIn = previousAllowIn;\n\n        if (match('<') || match('>') || match('<=') || match('>=')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        } else if (state.allowIn && matchKeyword('in')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: 'in',\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        } else if (matchKeyword('instanceof')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: 'instanceof',\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while (match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var expr;\n\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        while (index < length) {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        }\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwError({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        return {\n            type: Syntax.ForInStatement,\n            left: left,\n            right: right,\n            body: body,\n            each: false\n        };\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, oldInSwitch;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant\n            };\n        }\n\n        cases = [];\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            cases.push(parseSwitchCase());\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (!match(')')) {\n            param = parseExpression();\n            // 12.14.1\n            if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {\n                throwErrorTolerant({}, Messages.StrictCatchVariable);\n            }\n        }\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            guard: null,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwError(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        throwError(token, Messages.StrictParamName);\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        throwError(token, Messages.StrictParamDupe);\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            body: body\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, firstRestricted, message, param, params = [], body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        throwError(token, Messages.StrictParamName);\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        throwError(token, Messages.StrictParamDupe);\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            body: body\n        };\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseSourceElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(start, end, type, value) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            range: [start, end],\n            type: type,\n            value: value\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    addComment(start, index, 'Line', comment);\n                } else if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    addComment(start, index, 'Line', comment);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            addComment(start, index, 'Block', comment);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function collectToken() {\n        var token = extra.advance(),\n            range,\n            value;\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, regex, token;\n\n        skipComment();\n\n        pos = index;\n        regex = extra.scanRegExp();\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index]\n        });\n\n        return regex;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range && typeof node.range === 'undefined') {\n                    node.range = [node.left.range[0], node.right.range[1]];\n                }\n                if (loc && typeof node.loc === 'undefined') {\n                    node.loc = {\n                        start: node.left.loc.start,\n                        end: node.right.loc.end\n                    };\n                }\n            }\n\n            return function () {\n                var node, rangeInfo, locInfo;\n\n                skipComment();\n                rangeInfo = [index, 0];\n                locInfo = {\n                    start: {\n                        line: lineNumber,\n                        column: index - lineStart\n                    }\n                };\n\n                node = parseFunction.apply(null, arguments);\n                if (typeof node !== 'undefined') {\n\n                    if (range) {\n                        rangeInfo[1] = index;\n                        node.range = rangeInfo;\n                    }\n\n                    if (loc) {\n                        locInfo.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        node.loc = locInfo;\n                    }\n\n                    if (isBinary(node)) {\n                        visit(node);\n                    }\n\n                    if (node.type === Syntax.MemberExpression) {\n                        if (typeof node.object.range !== 'undefined') {\n                            node.range[0] = node.object.range[0];\n                        }\n                        if (typeof node.object.loc !== 'undefined') {\n                            node.loc.start = node.object.loc.start;\n                        }\n                    }\n                    return node;\n                }\n            };\n\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCallMember = parseCallMember;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedMember = parseNonComputedMember;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCallMember = wrapTracking(extra.parseCallMember);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedMember = wrapTracking(extra.parseNonComputedMember);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCallMember = extra.parseCallMember;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedMember = extra.parseNonComputedMember;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            lastParenthesized: null,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.0-dev';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}(typeof exports === 'undefined' ? (esprima = {}) : exports));\n/* vim: set sw=4 ts=4 et tw=80 : */","blocks":{"total":579,"seen":563,"missing":16,"percentage":0.9723661485319517}},"hash":"f217f5b6b13e636e2d9684a49f5beaa1"}}}