{"version":"0.2.0","files":{"/Users/voloko/code/esprima/test/test.js":{"nodes":{"0":{"index":0,"count":1},"1":{"index":1,"count":1},"2":{"index":2,"count":21794},"3":{"index":3,"count":21794},"4":{"index":4,"count":21794},"5":{"index":5,"count":254},"6":{"index":6,"count":6},"7":{"index":7,"count":6},"8":{"index":8,"count":21794},"9":{"index":9,"count":1},"10":{"index":10,"count":1},"11":{"index":11,"count":1},"17":{"index":17,"count":1},"18":{"index":18,"count":785},"19":{"index":19,"count":785},"20":{"index":20,"count":785},"21":{"index":21,"count":785},"22":{"index":22,"count":785},"26":{"index":26,"count":785},"27":{"index":27,"count":319},"28":{"index":28,"count":319},"29":{"index":29,"count":319},"30":{"index":30,"count":319},"31":{"index":31,"count":319},"32":{"index":32,"count":319},"33":{"index":33,"count":319},"34":{"index":34,"count":319},"35":{"index":35,"count":319},"36":{"index":36,"count":319},"37":{"index":37,"count":319},"38":{"index":38,"count":319},"39":{"index":39,"count":31},"40":{"index":40,"count":288},"41":{"index":41,"count":319},"42":{"index":42,"count":319},"43":{"index":43,"count":18},"44":{"index":44,"count":9},"45":{"index":45,"count":9},"46":{"index":46,"count":319},"47":{"index":47,"count":319},"48":{"index":48,"count":319},"49":{"index":49,"count":319},"52":{"index":52,"count":319},"54":{"index":54,"count":194},"55":{"index":55,"count":194},"56":{"index":56,"count":194},"57":{"index":57,"count":194},"58":{"index":58,"count":194},"59":{"index":59,"count":194},"60":{"index":60,"count":194},"61":{"index":61,"count":194},"62":{"index":62,"count":194},"63":{"index":63,"count":970},"64":{"index":64,"count":776},"65":{"index":65,"count":776},"66":{"index":66,"count":776},"67":{"index":67,"count":776},"68":{"index":68,"count":776},"69":{"index":69,"count":776},"76":{"index":76,"count":9},"77":{"index":77,"count":9},"78":{"index":78,"count":9},"79":{"index":79,"count":9},"80":{"index":80,"count":9},"81":{"index":81,"count":1},"82":{"index":82,"count":8},"83":{"index":83,"count":8},"84":{"index":84,"count":9},"85":{"index":85,"count":9},"88":{"index":88,"count":9},"90":{"index":90,"count":522},"91":{"index":91,"count":522},"92":{"index":92,"count":194},"93":{"index":93,"count":194},"94":{"index":94,"count":328},"95":{"index":95,"count":9},"96":{"index":96,"count":9},"97":{"index":97,"count":319},"98":{"index":98,"count":319},"99":{"index":99,"count":1},"209":{"index":209,"count":1},"210":{"index":210,"count":1},"211":{"index":211,"count":1},"212":{"index":212,"count":1},"213":{"index":213,"count":1},"214":{"index":214,"count":1},"215":{"index":215,"count":1},"216":{"index":216,"count":43},"217":{"index":217,"count":43},"218":{"index":218,"count":43},"219":{"index":219,"count":522},"220":{"index":220,"count":522},"221":{"index":221,"count":522},"222":{"index":222,"count":522},"226":{"index":226,"count":1},"227":{"index":227,"count":1},"228":{"index":228,"count":1},"229":{"index":229,"count":1},"230":{"index":230,"count":1},"231":{"index":231,"count":1},"232":{"index":232,"count":1},"233":{"index":233,"count":1},"246":{"index":246,"count":1},"247":{"index":247,"count":1},"248":{"index":248,"count":1},"249":{"index":249,"count":1},"250":{"index":250,"count":1},"252":{"index":252,"count":1}},"blocks":{"0":{"index":0,"count":21794},"1":{"index":1,"count":6},"2":{"index":2,"count":1},"4":{"index":4,"count":785},"7":{"index":7,"count":319},"8":{"index":8,"count":319},"9":{"index":9,"count":9},"10":{"index":10,"count":9},"13":{"index":13,"count":194},"14":{"index":14,"count":194},"15":{"index":15,"count":194},"16":{"index":16,"count":776},"17":{"index":17,"count":776},"18":{"index":18,"count":776},"22":{"index":22,"count":9},"23":{"index":23,"count":9},"24":{"index":24,"count":1},"25":{"index":25,"count":8},"28":{"index":28,"count":522},"29":{"index":29,"count":194},"30":{"index":30,"count":9},"31":{"index":31,"count":319},"48":{"index":48,"count":1},"49":{"index":49,"count":1},"50":{"index":50,"count":43},"51":{"index":51,"count":522},"52":{"index":52,"count":522},"56":{"index":56,"count":1}},"hash":"f75a9953737374ac26e2570f16c938f0","instrumentor":{"blockCounter":57,"nodeCounter":253,"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2011 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2011 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint browser:true node:true */\n/*global esprima:true */\n\nvar runTests, data;\n\ndata = {\n\n    'Primary Expression': {\n\n        'this\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'ThisExpression',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 0 }\n                }\n            }],\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 0 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'this',\n                range: [0, 4]\n            }]\n        },\n\n        'null\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: null,\n                    raw: 'null',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 0 }\n                }\n            }],\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 0 }\n            },\n            tokens: [{\n                type: 'Null',\n                value: 'null',\n                range: [0, 4]\n            }]\n        },\n\n        '\\n    42\\n\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [5, 9],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 4, column: 0 }\n                }\n            }],\n            range: [5, 9],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 4, column: 0 }\n            },\n            tokens: [{\n                type: 'Numeric',\n                value: '42',\n                range: [5, 7]\n            }]\n        },\n\n        '(1 + 2 ) * 3': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [1, 2],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 2 }\n                        }\n                    },\n                    right: {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 3,\n                    raw: '3',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        }\n\n    },\n\n    'Array Initializer': {\n\n        'x = []': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'ArrayExpression',\n                        elements: [],\n                        range: [4, 6],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            },\n            tokens: [{\n                type: 'Identifier',\n                value: 'x',\n                range: [0, 1]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [2, 3]\n            }, {\n                type: 'Punctuator',\n                value: '[',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: ']',\n                range: [5, 6]\n            }]\n        },\n\n        'x = [ ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x = [ 42 ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [6, 8],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 8 }\n                        }\n                    }],\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'x = [ 42, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [6, 8],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 8 }\n                        }\n                    }],\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x = [ ,, 42 ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [\n                        null,\n                        null,\n                        {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [9, 11],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 11 }\n                            }\n                        }],\n                    range: [4, 13],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'x = [ 1, 2, 3, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = [ 1, 2,, 3, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    }, null, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [13, 14],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        '日本語 = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '日本語',\n                    range: [0, 3],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'T\\u203F = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u203F',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'T\\u200C = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u200C',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'T\\u200D = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u200D',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\u2163\\u2161 = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '\\u2163\\u2161',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\u2163\\u2161\\u200A=\\u2009[]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '\\u2163\\u2161',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Object Initializer': {\n\n        'x = {}': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x = { }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x = { answer: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'answer',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [14, 16],\n                            loc: {\n                                start: { line: 1, column: 14 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 16],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 16 }\n                        }\n                    }],\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'x = { if: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [6, 8],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 8 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 12],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 12 }\n                        }\n                    }],\n                    range: [4, 14],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'x = { true: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [12, 14],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = { false: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [6, 11],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 11 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [13, 15],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 15],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 15 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'x = { null: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [12, 14],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = { \"answer\": 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'answer',\n                            raw: '\"answer\"',\n                            range: [6, 14],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [16, 18],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 18 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 18],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 18 }\n                        }\n                    }],\n                    range: [4, 20],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                range: [0, 20],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'x = { x: 1, x: 2 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [\n                        {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [6, 7],\n                                loc: {\n                                    start: { line: 1, column: 6 },\n                                    end: { line: 1, column: 7 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [9, 10],\n                                loc: {\n                                    start: { line: 1, column: 9 },\n                                    end: { line: 1, column: 10 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [12, 13],\n                                loc: {\n                                    start: { line: 1, column: 12 },\n                                    end: { line: 1, column: 13 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 2,\n                                raw: '2',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [12, 16],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 16 }\n                            }\n                        }\n                    ],\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'x = { get width() { return m_width } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'width',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ReturnStatement',\n                                    argument: {\n                                        type: 'Identifier',\n                                        name: 'm_width',\n                                        range: [27, 34],\n                                        loc: {\n                                            start: { line: 1, column: 27 },\n                                            end: { line: 1, column: 34 }\n                                        }\n                                    },\n                                    range: [20, 35],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 35 }\n                                    }\n                                }],\n                                range: [18, 36],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 36 }\n                                }\n                            },\n                            range: [18, 36],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 36],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 36 }\n                        }\n                    }],\n                    range: [4, 38],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [0, 38],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 38 }\n                }\n            },\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'x = { get undef() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'undef',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [18, 20],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            },\n                            range: [18, 20],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 20],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 20 }\n                        }\n                    }],\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'x = { get if() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [15, 17],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            range: [15, 17],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 17],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { get true() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [17, 19],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            range: [17, 19],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 19],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }],\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'x = { get false() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [18, 20],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            },\n                            range: [18, 20],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 20],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 20 }\n                        }\n                    }],\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'x = { get null() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [17, 19],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            range: [17, 19],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 19],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }],\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'x = { get \"undef\"() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'undef',\n                            raw: '\"undef\"',\n                            range: [10, 17],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [20, 22],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 22 }\n                                }\n                            },\n                            range: [20, 22],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 22 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 22],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 22 }\n                        }\n                    }],\n                    range: [4, 24],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 24],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'x = { get 10() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 10,\n                            raw: '10',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [15, 17],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            range: [15, 17],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 17],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { set width(w) { m_width = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'width',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_width',\n                                            range: [21, 28],\n                                            loc: {\n                                                start: { line: 1, column: 21 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [21, 32],\n                                        loc: {\n                                            start: { line: 1, column: 21 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [21, 33],\n                                    loc: {\n                                        start: { line: 1, column: 21 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [19, 34],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [19, 34],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set if(w) { m_if = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [13, 14],\n                                loc: {\n                                    start: { line: 1, column: 13 },\n                                    end: { line: 1, column: 14 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_if',\n                                            range: [18, 22],\n                                            loc: {\n                                                start: { line: 1, column: 18 },\n                                                end: { line: 1, column: 22 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [25, 26],\n                                            loc: {\n                                                start: { line: 1, column: 25 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        range: [18, 26],\n                                        loc: {\n                                            start: { line: 1, column: 18 },\n                                            end: { line: 1, column: 26 }\n                                        }\n                                    },\n                                    range: [18, 27],\n                                    loc: {\n                                        start: { line: 1, column: 18 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                }],\n                                range: [16, 28],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            },\n                            range: [16, 28],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 28 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 28],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 28 }\n                        }\n                    }],\n                    range: [4, 30],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [0, 30],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'x = { set true(w) { m_true = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_true',\n                                            range: [20, 26],\n                                            loc: {\n                                                start: { line: 1, column: 20 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [29, 30],\n                                            loc: {\n                                                start: { line: 1, column: 29 },\n                                                end: { line: 1, column: 30 }\n                                            }\n                                        },\n                                        range: [20, 30],\n                                        loc: {\n                                            start: { line: 1, column: 20 },\n                                            end: { line: 1, column: 30 }\n                                        }\n                                    },\n                                    range: [20, 31],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 31 }\n                                    }\n                                }],\n                                range: [18, 32],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 32 }\n                                }\n                            },\n                            range: [18, 32],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 32 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 32],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 32 }\n                        }\n                    }],\n                    range: [4, 34],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [0, 34],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'x = { set false(w) { m_false = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_false',\n                                            range: [21, 28],\n                                            loc: {\n                                                start: { line: 1, column: 21 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [21, 32],\n                                        loc: {\n                                            start: { line: 1, column: 21 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [21, 33],\n                                    loc: {\n                                        start: { line: 1, column: 21 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [19, 34],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [19, 34],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set null(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [20, 26],\n                                            loc: {\n                                                start: { line: 1, column: 20 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [29, 30],\n                                            loc: {\n                                                start: { line: 1, column: 29 },\n                                                end: { line: 1, column: 30 }\n                                            }\n                                        },\n                                        range: [20, 30],\n                                        loc: {\n                                            start: { line: 1, column: 20 },\n                                            end: { line: 1, column: 30 }\n                                        }\n                                    },\n                                    range: [20, 31],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 31 }\n                                    }\n                                }],\n                                range: [18, 32],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 32 }\n                                }\n                            },\n                            range: [18, 32],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 32 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 32],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 32 }\n                        }\n                    }],\n                    range: [4, 34],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [0, 34],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'x = { set \"null\"(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'null',\n                            raw: '\"null\"',\n                            range: [10, 16],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [17, 18],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 18 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [22, 28],\n                                            loc: {\n                                                start: { line: 1, column: 22 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [22, 32],\n                                        loc: {\n                                            start: { line: 1, column: 22 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [22, 33],\n                                    loc: {\n                                        start: { line: 1, column: 22 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [20, 34],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [20, 34],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set 10(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 10,\n                            raw: '10',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [13, 14],\n                                loc: {\n                                    start: { line: 1, column: 13 },\n                                    end: { line: 1, column: 14 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [18, 24],\n                                            loc: {\n                                                start: { line: 1, column: 18 },\n                                                end: { line: 1, column: 24 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [27, 28],\n                                            loc: {\n                                                start: { line: 1, column: 27 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        range: [18, 28],\n                                        loc: {\n                                            start: { line: 1, column: 18 },\n                                            end: { line: 1, column: 28 }\n                                        }\n                                    },\n                                    range: [18, 29],\n                                    loc: {\n                                        start: { line: 1, column: 18 },\n                                        end: { line: 1, column: 29 }\n                                    }\n                                }],\n                                range: [16, 30],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 30 }\n                                }\n                            },\n                            range: [16, 30],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 30 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 30],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 30 }\n                        }\n                    }],\n                    range: [4, 32],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 32 }\n                    }\n                },\n                range: [0, 32],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 32 }\n                }\n            },\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 32 }\n            }\n        },\n\n        'x = { get: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'get',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [11, 13],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 13 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 13],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 15],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 15 }\n                    }\n                },\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        'x = { set: 43 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'set',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 43,\n                            raw: '43',\n                            range: [11, 13],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 13 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 13],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 15],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 15 }\n                    }\n                },\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        }\n\n    },\n\n    'Comments': {\n\n        '/* block comment */ 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [20, 22],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [20, 22],\n            loc: {\n                start: { line: 1, column: 20 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '42 /*The*/ /*Answer*/': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            },\n            comments: [{\n                range: [3, 10],\n                type: 'Block',\n                value: 'The'\n            }, {\n                range: [11, 21],\n                type: 'Block',\n                value: 'Answer'\n            }]\n        },\n\n        '/* multiline\\ncomment\\nshould\\nbe\\nignored */ 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [42, 44],\n                loc: {\n                    start: { line: 5, column: 11 },\n                    end: { line: 5, column: 13 }\n                }\n            },\n            range: [42, 44],\n            loc: {\n                start: { line: 5, column: 11 },\n                end: { line: 5, column: 13 }\n            }\n        },\n\n        '/*a\\r\\nb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [9, 11],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [9, 11],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [9, 11],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 8],\n                type: 'Block',\n                value: 'a\\r\\nb'\n            }]\n        },\n\n        '/*a\\rb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [8, 10],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [8, 10],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 7],\n                type: 'Block',\n                value: 'a\\rb'\n            }]\n        },\n\n        '/*a\\nb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [8, 10],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [8, 10],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 7],\n                type: 'Block',\n                value: 'a\\nb'\n            }]\n        },\n\n        '// line comment\\n42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [16, 18],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            },\n            range: [16, 18],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            }\n        },\n\n        '42 // line comment': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            comments: [{\n                range: [3, 18],\n                type: 'Line',\n                value: ' line comment'\n            }]\n        },\n\n        '// Hello, world!\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [17, 19],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 2 }\n                    }\n                },\n                range: [17, 19],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [17, 19],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            },\n            comments: [{\n                range: [0, 17],\n                type: 'Line',\n                value: ' Hello, world!'\n            }]\n        },\n\n        '//\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [3, 5],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 2 }\n                    }\n                },\n                range: [3, 5],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [3, 5],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            },\n            comments: [{\n                range: [0, 3],\n                type: 'Line',\n                value: ''\n            }]\n        },\n\n        '/**/42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [4, 6],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [4, 6],\n            loc: {\n                start: { line: 1, column: 4 },\n                end: { line: 1, column: 6 }\n            },\n            comments: [{\n                range: [0, 4],\n                type: 'Block',\n                value: ''\n            }]\n        },\n\n        '// Hello, world!\\n\\n//   Another hello\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [37, 39],\n                    loc: {\n                        start: { line: 4, column: 0 },\n                        end: { line: 4, column: 2 }\n                    }\n                },\n                range: [37, 39],\n                loc: {\n                    start: { line: 4, column: 0 },\n                    end: { line: 4, column: 2 }\n                }\n            }],\n            range: [37, 39],\n            loc: {\n                start: { line: 4, column: 0 },\n                end: { line: 4, column: 2 }\n            },\n            comments: [{\n                range: [0, 17],\n                type: 'Line',\n                value: ' Hello, world!'\n            }, {\n                range: [18, 37],\n                type: 'Line',\n                value: '   Another hello'\n            }]\n        },\n\n        'if (x) { // Some comment\\ndoThat(); }': {\n            type: 'Program',\n            body: [{\n                type: 'IfStatement',\n                test: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                consequent: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'doThat',\n                                range: [25, 31],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 6 }\n                                }\n                            },\n                            'arguments': [],\n                            range: [25, 33],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 8 }\n                            }\n                        },\n                        range: [25, 34],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 9 }\n                        }\n                    }],\n                    range: [7, 36],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 2, column: 11 }\n                    }\n                },\n                alternate: null,\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 11 }\n                }\n            }],\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 11 }\n            },\n            comments: [{\n                range: [9, 25],\n                type: 'Line',\n                value: ' Some comment'\n            }]\n        },\n\n        'switch (answer) { case 42: /* perfect */ bingo() }': {\n            type: 'Program',\n            body: [{\n                type: 'SwitchStatement',\n                discriminant: {\n                    type: 'Identifier',\n                    name: 'answer',\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                cases: [{\n                    type: 'SwitchCase',\n                    test: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [23, 25],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    consequent: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'bingo',\n                                range: [41, 46],\n                                loc: {\n                                    start: { line: 1, column: 41 },\n                                    end: { line: 1, column: 46 }\n                                }\n                            },\n                            'arguments': [],\n                            range: [41, 48],\n                            loc: {\n                                start: { line: 1, column: 41 },\n                                end: { line: 1, column: 48 }\n                            }\n                        },\n                        range: [41, 49],\n                        loc: {\n                            start: { line: 1, column: 41 },\n                            end: { line: 1, column: 49 }\n                        }\n                    }],\n                    range: [18, 49],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 49 }\n                    }\n                }],\n                range: [0, 50],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 50 }\n                }\n            }],\n            range: [0, 50],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 50 }\n            },\n            comments: [{\n                range: [27, 40],\n                type: 'Block',\n                value: ' perfect '\n            }]\n        }\n\n    },\n\n    'Numeric Literals': {\n\n        '0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0',\n                range: [0, 1],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 1 }\n                }\n            },\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        },\n\n        '42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '.14': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0.14,\n                raw: '.14',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '3.14159': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 3.14159,\n                raw: '3.14159',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '6.02214179e+23': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 6.02214179e+23,\n                raw: '6.02214179e+23',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '1.492417830e-10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 1.49241783e-10,\n                raw: '1.492417830e-10',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        '0x0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0x0',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0e+100': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0e+100',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '0xabc': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0xabc,\n                raw: '0xabc',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0xdef': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0xdef,\n                raw: '0xdef',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0X1A': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x1A,\n                raw: '0X1A',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0x10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x10,\n                raw: '0x10',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0x100': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x100,\n                raw: '0x100',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0X04': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0X04,\n                raw: '0X04',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '02': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 2,\n                raw: '02',\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '012': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '012',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0012': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '0012',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        }\n\n    },\n\n    'String Literals': {\n\n        '\"Hello\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello',\n                raw: '\"Hello\"',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\"\\\\n\\\\r\\\\t\\\\v\\\\b\\\\f\\\\\\\\\\\\\\'\\\\\"\\\\0\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: '\\n\\r\\t\\v\\b\\f\\\\\\'\"\\x00',\n                raw: '\"\\\\n\\\\r\\\\t\\\\v\\\\b\\\\f\\\\\\\\\\\\\\'\\\\\"\\\\0\"',\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '\"\\\\u0061\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'a',\n                raw: '\"\\\\u0061\"',\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        '\"\\\\x61\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'a',\n                raw: '\"\\\\x61\"',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '\"\\\\u00\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'u00',\n                raw: '\"\\\\u00\"',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '\"\\\\xt\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'xt',\n                raw: '\"\\\\xt\"',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '\"Hello\\\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\nworld',\n                raw: '\"Hello\\\\nworld\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Helloworld',\n                raw: '\"Hello\\\\\\nworld\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\02World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0002World',\n                raw: '\"Hello\\\\02World\"',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        '\"Hello\\\\012World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u000AWorld',\n                raw: '\"Hello\\\\012World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\122World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\122World',\n                raw: '\"Hello\\\\122World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\0122World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u000A2World',\n                raw: '\"Hello\\\\0122World\"',\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        '\"Hello\\\\312World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u00CAWorld',\n                raw: '\"Hello\\\\312World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\412World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\412World',\n                raw: '\"Hello\\\\412World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\812World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello812World',\n                raw: '\"Hello\\\\812World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\712World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\712World',\n                raw: '\"Hello\\\\712World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\0World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0000World',\n                raw: '\"Hello\\\\0World\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\\\r\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Helloworld',\n                raw: '\"Hello\\\\\\r\\nworld\"',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 15 }\n            }\n        },\n\n        '\"Hello\\\\1World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0001World',\n                raw: '\"Hello\\\\1World\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n    },\n\n    'Regular Expression Literals': {\n\n        'var x = /[a-z]/i': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[a-z]/i',\n                        raw: '/[a-z]/i',\n                        range: [8, 16],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 16 }\n                        }\n                    },\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            }],\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[a-z]/i',\n                range: [8, 16]\n            }]\n        },\n\n        'var x = /[P QR]/i': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/i',\n                        raw: '/[P QR]/i',\n                        range: [8, 17],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            }],\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/i',\n                range: [8, 17]\n            }]\n        },\n\n        'var x = /foo\\\\/bar/': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/foo\\\\/bar/',\n                        raw: '/foo\\\\/bar/',\n                        range: [8, 18],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/foo\\\\/bar/',\n                range: [8, 18]\n            }]\n        },\n\n        'var x = /=([^=\\\\s])+/g': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/=([^=\\\\s])+/g',\n                        raw: '/=([^=\\\\s])+/g',\n                        range: [8, 21],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/=([^=\\\\s])+/g',\n                range: [8, 21]\n            }]\n        },\n\n        'var x = /[P QR]/\\\\u0067': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/g',\n                        raw: '/[P QR]/\\\\u0067',\n                        range: [8, 22],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/\\\\u0067',\n                range: [8, 22]\n            }]\n        },\n\n        'var x = /[P QR]/\\\\g': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/g',\n                        raw: '/[P QR]/\\\\g',\n                        range: [8, 18],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/\\\\g',\n                range: [8, 18]\n            }]\n        }\n\n    },\n\n    'Left-Hand-Side Expression': {\n\n        'new Button': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'Button',\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'new Button()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'Button',\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        'new new foo': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'NewExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'new new foo()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'NewExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [4, 13],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'new foo().bar()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'NewExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'foo',\n                            range: [4, 7],\n                            loc: {\n                                start: { line: 1, column: 4 },\n                                end: { line: 1, column: 7 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [0, 9],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [10, 13],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        'new foo[bar]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: true,\n                    object: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [4, 7],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [4, 12],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n\n        'new foo.bar()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [4, 7],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'foo(bar, baz)': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [0, 3],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                'arguments': [{\n                    type: 'Identifier',\n                    name: 'bar',\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'baz',\n                    range: [9, 12],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 12 }\n                    }\n                }],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'universe.milkyway': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'milkyway',\n                    range: [9, 17],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'universe.milkyway.solarsystem': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'milkyway',\n                        range: [9, 17],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    range: [0, 17],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'solarsystem',\n                    range: [18, 29],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [0, 29],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 29 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'universe.milkyway.solarsystem.Earth': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'Identifier',\n                            name: 'universe',\n                            range: [0, 8],\n                            loc: {\n                                start: { line: 1, column: 0 },\n                                end: { line: 1, column: 8 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'milkyway',\n                            range: [9, 17],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        range: [0, 17],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'solarsystem',\n                        range: [18, 29],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [0, 29],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'Earth',\n                    range: [30, 35],\n                    loc: {\n                        start: { line: 1, column: 30 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [0, 35],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 35 }\n                }\n            },\n            range: [0, 35],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 35 }\n            }\n        },\n\n        'universe[galaxyName, otherUselessName]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: true,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'SequenceExpression',\n                    expressions: [{\n                        type: 'Identifier',\n                        name: 'galaxyName',\n                        range: [9, 19],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }, {\n                        type: 'Identifier',\n                        name: 'otherUselessName',\n                        range: [21, 37],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [9, 37],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [0, 38],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 38 }\n                }\n            },\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'universe[galaxyName]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: true,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxyName',\n                    range: [9, 19],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 20],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'universe[42].galaxies': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: true,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [9, 11],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxies',\n                    range: [13, 21],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'universe(42).galaxies': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [9, 11],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 11 }\n                        }\n                    }],\n                    range: [8, 12],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxies',\n                    range: [13, 21],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [8, 21],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'universe(42).galaxies(14, 3, 77).milkyway': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'universe',\n                                range: [0, 8],\n                                loc: {\n                                    start: { line: 1, column: 0 },\n                                    end: { line: 1, column: 8 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Literal',\n                                value: 42,\n                                raw: '42',\n                                range: [9, 11],\n                                loc: {\n                                    start: { line: 1, column: 9 },\n                                    end: { line: 1, column: 11 }\n                                }\n                            }],\n                            range: [8, 12],\n                            loc: {\n                                start: { line: 1, column: 8 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'galaxies',\n                            range: [13, 21],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 21 }\n                            }\n                        },\n                        range: [8, 21],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [22, 24],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [26, 27],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 27 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 77,\n                        raw: '77',\n                        range: [29, 31],\n                        loc: {\n                            start: { line: 1, column: 29 },\n                            end: { line: 1, column: 31 }\n                        }\n                    }],\n                    range: [21, 32],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 32 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'milkyway',\n                    range: [33, 41],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 41 }\n                    }\n                },\n                range: [21, 41],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 41 }\n                }\n            },\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            }\n        },\n\n        'earth.asia.Indonesia.prepareForElection(2014)': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'MemberExpression',\n                            computed: false,\n                            object: {\n                                type: 'Identifier',\n                                name: 'earth',\n                                range: [0, 5],\n                                loc: {\n                                    start: { line: 1, column: 0 },\n                                    end: { line: 1, column: 5 }\n                                }\n                            },\n                            property: {\n                                type: 'Identifier',\n                                name: 'asia',\n                                range: [6, 10],\n                                loc: {\n                                    start: { line: 1, column: 6 },\n                                    end: { line: 1, column: 10 }\n                                }\n                            },\n                            range: [0, 10],\n                            loc: {\n                                start: { line: 1, column: 0 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'Indonesia',\n                            range: [11, 20],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        range: [0, 20],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'prepareForElection',\n                        range: [21, 39],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 39 }\n                        }\n                    },\n                    range: [0, 39],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 39 }\n                    }\n                },\n                'arguments': [{\n                    type: 'Literal',\n                    value: 2014,\n                    raw: '2014',\n                    range: [40, 44],\n                    loc: {\n                        start: { line: 1, column: 40 },\n                        end: { line: 1, column: 44 }\n                    }\n                }],\n                range: [0, 45],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 45 }\n                }\n            },\n            range: [0, 45],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 45 }\n            }\n        },\n\n        'universe.if': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'if',\n                    range: [9, 11],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'universe.true': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'true',\n                    range: [9, 13],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'universe.false': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'false',\n                    range: [9, 14],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'universe.null': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'null',\n                    range: [9, 13],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        }\n\n    },\n\n    'Postfix Expressions': {\n\n        'x++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                prefix: false,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'x--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                prefix: false,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'eval++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                prefix: false,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'eval--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                prefix: false,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'arguments++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                prefix: false,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'arguments--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                prefix: false,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        }\n\n    },\n\n    'Unary Operators': {\n\n        '++x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                prefix: true,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '--x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                prefix: true,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '++eval': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [2, 6],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                prefix: true,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '--eval': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [2, 6],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                prefix: true,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '++arguments': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [2, 11],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                prefix: true,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        '--arguments': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [2, 11],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                prefix: true,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        '+x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '+',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '-x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '-',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '~x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '~',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '!x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '!',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        'void x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'void',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'delete x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'delete',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'typeof x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'typeof',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        }\n\n    },\n\n    'Multiplicative Operators': {\n\n        'x * y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x / y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '/',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x % y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '%',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Additive Operators': {\n\n        'x + y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x - y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Bitwise Shift Operator': {\n\n        'x << y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >> y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >>> y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>>>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Relational Operators': {\n\n        'x < y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x > y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x <= y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >= y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x in y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'in',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x instanceof y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'instanceof',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [13, 14],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Equality Operators': {\n\n        'x == y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '==',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x != y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '!=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x === y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '===',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x !== y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '!==',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Binary Bitwise Operators': {\n\n        'x & y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '&',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x ^ y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '^',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x | y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Binary Expressions': {\n\n        'x + y + z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y + z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '-',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y - z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y - z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '-',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y / z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '/',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y % z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '%',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y / z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '/',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y % z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '%',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x % y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '%',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x << y << z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<<',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '<<',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x | y | z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '|',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x & y & z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '&',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x ^ y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '^',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x & y | z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x | y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x | y & z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        }\n\n    },\n\n    'Binary Logical Operators': {\n\n        'x || y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x && y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '&&',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x || y || z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x && y && z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '&&',\n                left: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x || y && z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [10, 11],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [5, 11],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x || y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    range: [5, 10],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        }\n\n    },\n\n    'Conditional Operator': {\n\n        'y ? 1 : 2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ConditionalExpression',\n                test: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                consequent: {\n                    type: 'Literal',\n                    value: 1,\n                    raw: '1',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                alternate: {\n                    type: 'Literal',\n                    value: 2,\n                    raw: '2',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x && y ? 1 : 2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ConditionalExpression',\n                test: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                consequent: {\n                    type: 'Literal',\n                    value: 1,\n                    raw: '1',\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                alternate: {\n                    type: 'Literal',\n                    value: 2,\n                    raw: '2',\n                    range: [13, 14],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Assignment Operators': {\n\n        'x = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'eval = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [7, 9],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'arguments = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [12, 14],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'x *= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '*=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x /= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '/=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x %= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '%=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x += 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '+=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x -= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '-=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x <<= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '<<=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'x >>= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '>>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'x >>>= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '>>>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [7, 9],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x &= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '&=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x ^= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '^=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x |= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '|=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Block': {\n\n        '{ foo }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [2, 5],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [2, 6],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '{ doThis(); doThat(); }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doThis',\n                        range: [2, 8],\n                        loc: {\n                            start: { line: 1, column: 2 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [2, 10],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [2, 11],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 11 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doThat',\n                        range: [12, 18],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [12, 20],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                range: [12, 21],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '{}': {\n            type: 'BlockStatement',\n            body: [],\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        }\n\n    },\n\n    'Variable Statement': {\n\n        'var x': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'var x, y;': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                init: null,\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'var x = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [4, 10],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 10 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'var eval = 42, arguments = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [4, 8],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [15, 24],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [27, 29],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [15, 29],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'var x = 14, y = 3, z = 1977': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 14,\n                    raw: '14',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [4, 10],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 10 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [12, 13],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 3,\n                    raw: '3',\n                    range: [16, 17],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [12, 17],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 17 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 1977,\n                    raw: '1977',\n                    range: [23, 27],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [19, 27],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 27 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'var implements, interface, package': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'implements',\n                    range: [4, 14],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                init: null,\n                range: [4, 14],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 14 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'interface',\n                    range: [16, 25],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                init: null,\n                range: [16, 25],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 25 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'package',\n                    range: [27, 34],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                init: null,\n                range: [27, 34],\n                loc: {\n                    start: { line: 1, column: 27 },\n                    end: { line: 1, column: 34 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'var private, protected, public, static': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'private',\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                init: null,\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'protected',\n                    range: [13, 22],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                init: null,\n                range: [13, 22],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 22 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'public',\n                    range: [24, 30],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                init: null,\n                range: [24, 30],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 30 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'static',\n                    range: [32, 38],\n                    loc: {\n                        start: { line: 1, column: 32 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                init: null,\n                range: [32, 38],\n                loc: {\n                    start: { line: 1, column: 32 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        }\n\n    },\n\n    'Let Statement': {\n\n        'let x': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'let',\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '{ let x }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: null,\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 8],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        '{ let x = 42 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 13],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 13 }\n                }\n            }],\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '{ let x = 14, y = 3, z = 1977 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [14, 15],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [18, 19],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 19 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1977,\n                        raw: '1977',\n                        range: [25, 29],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [21, 29],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 29 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 30],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 30 }\n                }\n            }],\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        }\n\n    },\n\n    'Const Statement': {\n\n        'const x = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [10, 12],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [6, 12],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 12 }\n                }\n            }],\n            kind: 'const',\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        '{ const x = 42 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [12, 14],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                }],\n                kind: 'const',\n                range: [2, 15],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 15 }\n                }\n            }],\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '{ const x = 14, y = 3, z = 1977 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [12, 14],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [16, 17],\n                        loc: {\n                            start: { line: 1, column: 16 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [20, 21],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    range: [16, 21],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [23, 24],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1977,\n                        raw: '1977',\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [23, 31],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 31 }\n                    }\n                }],\n                kind: 'const',\n                range: [2, 32],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 32 }\n                }\n            }],\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        }\n\n    },\n\n    'Empty Statement': {\n\n        ';': {\n            type: 'EmptyStatement',\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        }\n\n    },\n\n    'Expression Statement': {\n\n        'x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'x',\n                range: [0, 1],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 1 }\n                }\n            },\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        },\n\n        'x, y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'SequenceExpression',\n                expressions: [{\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [3, 4],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 4 }\n                    }\n                }],\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '\\\\u0061': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'a',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'a\\\\u0061': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'aa',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\\\ua': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'ua',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'a\\\\u': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'au',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        }\n\n    },\n\n    'If Statement': {\n\n        'if (morning) goodMorning()': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodMorning',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            alternate: null,\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'if (morning) (function(){})': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'FunctionExpression',\n                    id: null,\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [24, 26],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 26 }\n                        }\n                    },\n                    range: [13, 27],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: null,\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'if (morning) var x = 0;': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [17, 18],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [17, 22],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [13, 23],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            alternate: null,\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'if (morning) function a(){}': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'FunctionDeclaration',\n                id: {\n                    type: 'Identifier',\n                    name: 'a',\n                    range: [22, 23],\n                    loc: {\n                        start: { line: 1, column: 22 },\n                        end: { line: 1, column: 23 }\n                    }\n                },\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [25, 27],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: null,\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'if (morning) goodMorning(); else goodDay()': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodMorning',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodDay',\n                        range: [33, 40],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 40 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [33, 42],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 42 }\n                    }\n                },\n                range: [33, 42],\n                loc: {\n                    start: { line: 1, column: 33 },\n                    end: { line: 1, column: 42 }\n                }\n            },\n            range: [0, 42],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 42 }\n            }\n        }\n\n    },\n\n    'Iteration Statements': {\n\n        'do keep(); while (true)': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'keep',\n                        range: [3, 7],\n                        loc: {\n                            start: { line: 1, column: 3 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [3, 9],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [3, 10],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [18, 22],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'do keep(); while (true);': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'keep',\n                        range: [3, 7],\n                        loc: {\n                            start: { line: 1, column: 3 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [3, 9],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [3, 10],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [18, 22],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'do { x++; y--; } while (x < 10)': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '++',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'x',\n                            range: [5, 6],\n                            loc: {\n                                start: { line: 1, column: 5 },\n                                end: { line: 1, column: 6 }\n                            }\n                        },\n                        prefix: false,\n                        range: [5, 8],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    range: [5, 9],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 9 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '--',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [10, 11],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 11 }\n                            }\n                        },\n                        prefix: false,\n                        range: [10, 13],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [10, 14],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 14 }\n                    }\n                }],\n                range: [3, 16],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [24, 25],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 10,\n                    raw: '10',\n                    range: [28, 30],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [24, 30],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        '{ do { } while (false) false }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'DoWhileStatement',\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [5, 8],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                test: {\n                    type: 'Literal',\n                    value: false,\n                    raw: 'false',\n                    range: [16, 21],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [2, 22],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 22 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: false,\n                    raw: 'false',\n                    range: [23, 28],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [23, 29],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'while (true) doSomething()': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doSomething',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'while (x < 10) { x++; y--; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 10,\n                    raw: '10',\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [7, 13],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '++',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'x',\n                            range: [17, 18],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 18 }\n                            }\n                        },\n                        prefix: false,\n                        range: [17, 20],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [17, 21],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 21 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '--',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [22, 23],\n                            loc: {\n                                start: { line: 1, column: 22 },\n                                end: { line: 1, column: 23 }\n                            }\n                        },\n                        prefix: false,\n                        range: [22, 25],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    range: [22, 26],\n                    loc: {\n                        start: { line: 1, column: 22 },\n                        end: { line: 1, column: 26 }\n                    }\n                }],\n                range: [15, 28],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 28 }\n                }\n            },\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        },\n\n        'for(;;);': {\n            type: 'ForStatement',\n            init: null,\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'for(;;){}': {\n            type: 'ForStatement',\n            init: null,\n            test: null,\n            update: null,\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [7, 9],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'for(x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [12, 13],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'for(var x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }],\n                kind: 'var',\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [16, 17],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'for(let x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }],\n                kind: 'let',\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [16, 17],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'for(var x = 0, y = 1;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [15, 16],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 16 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [19, 20],\n                        loc: {\n                            start: { line: 1, column: 19 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }],\n                kind: 'var',\n                range: [4, 20],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [23, 24],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'for(x = 0; x < 42;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [19, 20],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'for(x = 0; x < 42; x++);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                prefix: false,\n                range: [19, 22],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            body: {\n                type: 'EmptyStatement',\n                range: [23, 24],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'for(x = 0; x < 42; x++) process(x);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                prefix: false,\n                range: [19, 22],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [24, 31],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [32, 33],\n                        loc: {\n                            start: { line: 1, column: 32 },\n                            end: { line: 1, column: 33 }\n                        }\n                    }],\n                    range: [24, 34],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [24, 35],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 35 }\n                }\n            },\n            range: [0, 35],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 35 }\n            }\n        },\n\n        'for(x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'Identifier',\n                name: 'x',\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [15, 22],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [23, 24],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }],\n                    range: [15, 25],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                range: [15, 26],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            each: false,\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'for (var x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for (var x = 42 in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [13, 15],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    range: [9, 15],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 15],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [19, 23],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [25, 32],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [33, 34],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [25, 35],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [25, 36],\n                loc: {\n                    start: { line: 1, column: 25 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            each: false,\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'for (let x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'let',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for (let x = 42 in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [13, 15],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    range: [9, 15],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                kind: 'let',\n                range: [5, 15],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [19, 23],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [25, 32],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [33, 34],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [25, 35],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [25, 36],\n                loc: {\n                    start: { line: 1, column: 25 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            each: false,\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'for (var i = function() { return 10 in [] } in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'i',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ReturnStatement',\n                                argument: {\n                                    type: 'BinaryExpression',\n                                    operator: 'in',\n                                    left: {\n                                        type: 'Literal',\n                                        value: 10,\n                                        raw: '10',\n                                        range: [33, 35],\n                                        loc: {\n                                            start: { line: 1, column: 33 },\n                                            end: { line: 1, column: 35 }\n                                        }\n                                    },\n                                    right: {\n                                        type: 'ArrayExpression',\n                                        elements: [],\n                                        range: [39, 41],\n                                        loc: {\n                                            start: { line: 1, column: 39 },\n                                            end: { line: 1, column: 41 }\n                                        }\n                                    },\n                                    range: [33, 41],\n                                    loc: {\n                                        start: { line: 1, column: 33 },\n                                        end: { line: 1, column: 41 }\n                                    }\n                                },\n                                range: [26, 42],\n                                loc: {\n                                    start: { line: 1, column: 26 },\n                                    end: { line: 1, column: 42 }\n                                }\n                            }],\n                            range: [24, 43],\n                            loc: {\n                                start: { line: 1, column: 24 },\n                                end: { line: 1, column: 43 }\n                            }\n                        },\n                        range: [13, 43],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 43 }\n                        }\n                    },\n                    range: [9, 43],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 43 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 43],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 43 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [47, 51],\n                loc: {\n                    start: { line: 1, column: 47 },\n                    end: { line: 1, column: 51 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [53, 60],\n                        loc: {\n                            start: { line: 1, column: 53 },\n                            end: { line: 1, column: 60 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [61, 62],\n                        loc: {\n                            start: { line: 1, column: 61 },\n                            end: { line: 1, column: 62 }\n                        }\n                    }],\n                    range: [53, 63],\n                    loc: {\n                        start: { line: 1, column: 53 },\n                        end: { line: 1, column: 63 }\n                    }\n                },\n                range: [53, 64],\n                loc: {\n                    start: { line: 1, column: 53 },\n                    end: { line: 1, column: 64 }\n                }\n            },\n            each: false,\n            range: [0, 64],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 64 }\n            }\n        }\n\n    },\n\n    'continue statement': {\n\n        'while (true) { continue; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'ContinueStatement',\n                        label: null,\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }\n                ],\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'while (true) { continue }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'ContinueStatement',\n                        label: null,\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }\n                ],\n                range: [13, 25],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'done: while (true) { continue done }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ContinueStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [30, 34],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [21, 35],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 35 }\n                            }\n                        }\n                    ],\n                    range: [19, 36],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [6, 36],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'done: while (true) { continue done; }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ContinueStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [30, 34],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [21, 35],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 35 }\n                            }\n                        }\n                    ],\n                    range: [19, 37],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [6, 37],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 37 }\n                }\n            },\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            }\n        }\n\n    },\n\n    'break statement': {\n\n        'while (true) { break }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'BreakStatement',\n                        label: null,\n                        range: [15, 21],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 21 }\n                        }\n                    }\n                ],\n                range: [13, 22],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'done: while (true) { break done }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'BreakStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [27, 31],\n                                loc: {\n                                    start: { line: 1, column: 27 },\n                                    end: { line: 1, column: 31 }\n                                }\n                            },\n                            range: [21, 32],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 32 }\n                            }\n                        }\n                    ],\n                    range: [19, 33],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 33 }\n                    }\n                },\n                range: [6, 33],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 33 }\n                }\n            },\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        },\n\n        'done: while (true) { break done; }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'BreakStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [27, 31],\n                                loc: {\n                                    start: { line: 1, column: 27 },\n                                    end: { line: 1, column: 31 }\n                                }\n                            },\n                            range: [21, 32],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 32 }\n                            }\n                        }\n                    ],\n                    range: [19, 34],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [6, 34],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        }\n\n    },\n\n    'return statement': {\n\n        '(function(){ return })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 20],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 20 }\n                            }\n                        }\n                    ],\n                    range: [11, 21],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '(function(){ return; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 20],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 20 }\n                            }\n                        }\n                    ],\n                    range: [11, 22],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 23],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '(function(){ return x; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 21 }\n                                }\n                            },\n                            range: [13, 22],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 22 }\n                            }\n                        }\n                    ],\n                    range: [11, 24],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        '(function(){ return x * y })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: {\n                                type: 'BinaryExpression',\n                                operator: '*',\n                                left: {\n                                    type: 'Identifier',\n                                    name: 'x',\n                                    range: [20, 21],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 21 }\n                                    }\n                                },\n                                right: {\n                                    type: 'Identifier',\n                                    name: 'y',\n                                    range: [24, 25],\n                                    loc: {\n                                        start: { line: 1, column: 24 },\n                                        end: { line: 1, column: 25 }\n                                    }\n                                },\n                                range: [20, 25],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 25 }\n                                }\n                            },\n                            range: [13, 26],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 26 }\n                            }\n                        }\n                    ],\n                    range: [11, 27],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [0, 28],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 28 }\n                }\n            },\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        }\n    },\n\n    'with statement': {\n\n        'with (x) foo = bar': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [9, 12],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [15, 18],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [9, 18],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [9, 18],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'with (x) foo = bar;': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [9, 12],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [15, 18],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [9, 18],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [9, 19],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'with (x) { foo = bar }': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'AssignmentExpression',\n                        operator: '=',\n                        left: {\n                            type: 'Identifier',\n                            name: 'foo',\n                            range: [11, 14],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        right: {\n                            type: 'Identifier',\n                            name: 'bar',\n                            range: [17, 20],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        range: [11, 20],\n                        loc: {\n                            start: { line: 1, column: 11 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [11, 21],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 21 }\n                    }\n                }],\n                range: [9, 22],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        }\n\n    },\n\n    'switch statement': {\n\n        'switch (x) {}': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'x',\n                range: [8, 9],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'switch (answer) { case 42: hi(); break; }': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'answer',\n                range: [8, 14],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            cases: [{\n                type: 'SwitchCase',\n                test: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [23, 25],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                consequent: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'hi',\n                            range: [27, 29],\n                            loc: {\n                                start: { line: 1, column: 27 },\n                                end: { line: 1, column: 29 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [27, 32],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 32 }\n                    }\n                }, {\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [33, 39],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 39 }\n                    }\n                }],\n                range: [18, 39],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 39 }\n                }\n            }],\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            }\n        },\n\n        'switch (answer) { case 42: hi(); break; default: break }': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'answer',\n                range: [8, 14],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            cases: [{\n                type: 'SwitchCase',\n                test: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [23, 25],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                consequent: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'hi',\n                            range: [27, 29],\n                            loc: {\n                                start: { line: 1, column: 27 },\n                                end: { line: 1, column: 29 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [27, 32],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 32 }\n                    }\n                }, {\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [33, 39],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 39 }\n                    }\n                }],\n                range: [18, 39],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 39 }\n                }\n            }, {\n                type: 'SwitchCase',\n                test: null,\n                consequent: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [49, 55],\n                    loc: {\n                        start: { line: 1, column: 49 },\n                        end: { line: 1, column: 55 }\n                    }\n                }],\n                range: [40, 55],\n                loc: {\n                    start: { line: 1, column: 40 },\n                    end: { line: 1, column: 55 }\n                }\n            }],\n            range: [0, 56],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 56 }\n            }\n        }\n\n    },\n\n    'Labelled Statements': {\n\n        'start: for (;;) break start': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'start',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            body: {\n                type: 'ForStatement',\n                init: null,\n                test: null,\n                update: null,\n                body: {\n                    type: 'BreakStatement',\n                    label: {\n                        type: 'Identifier',\n                        name: 'start',\n                        range: [22, 27],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    range: [16, 27],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [7, 27],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'start: while (true) break start': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'start',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [14, 18],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                body: {\n                    type: 'BreakStatement',\n                    label: {\n                        type: 'Identifier',\n                        name: 'start',\n                        range: [26, 31],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [20, 31],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 31 }\n                    }\n                },\n                range: [7, 31],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        }\n\n    },\n\n    'throw statement': {\n\n        'throw x;': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'throw x * y': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [6, 11],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'throw { message: \"Error\" }': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'ObjectExpression',\n                properties: [{\n                    type: 'Property',\n                    key: {\n                        type: 'Identifier',\n                        name: 'message',\n                        range: [8, 15],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    value: {\n                        type: 'Literal',\n                        value: 'Error',\n                        raw: '\"Error\"',\n                        range: [17, 24],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    kind: 'init',\n                    range: [8, 24],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 24 }\n                    }\n                }],\n                range: [6, 26],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        }\n\n    },\n\n    'try statement': {\n\n        'try { } catch (e) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 21],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [8, 21],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'try { } catch (eval) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [15, 19],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [21, 24],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [8, 24],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 24 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'try { } catch (arguments) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [15, 24],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [26, 29],\n                    loc: {\n                        start: { line: 1, column: 26 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [8, 29],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'try { } catch (e) { say(e) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [20, 23],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 23 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [24, 25],\n                                loc: {\n                                    start: { line: 1, column: 24 },\n                                    end: { line: 1, column: 25 }\n                                }\n                            }],\n                            range: [20, 26],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 26 }\n                            }\n                        },\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    }],\n                    range: [18, 28],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [8, 28],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        },\n\n        'try { } finally { cleanup(stuff) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [],\n            finalizer: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'cleanup',\n                            range: [18, 25],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 25 }\n                            }\n                        },\n                        'arguments': [{\n                            type: 'Identifier',\n                            name: 'stuff',\n                            range: [26, 31],\n                            loc: {\n                                start: { line: 1, column: 26 },\n                                end: { line: 1, column: 31 }\n                            }\n                        }],\n                        range: [18, 32],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    range: [18, 33],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 33 }\n                    }\n                }],\n                range: [16, 34],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'try { doThat(); } catch (e) { say(e) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'doThat',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [6, 15],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                range: [4, 17],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [25, 26],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [30, 33],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [34, 35],\n                                loc: {\n                                    start: { line: 1, column: 34 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            }],\n                            range: [30, 36],\n                            loc: {\n                                start: { line: 1, column: 30 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        range: [30, 37],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [28, 38],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [18, 38],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'try { doThat(); } catch (e) { say(e) } finally { cleanup(stuff) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'doThat',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [6, 15],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                range: [4, 17],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [25, 26],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [30, 33],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [34, 35],\n                                loc: {\n                                    start: { line: 1, column: 34 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            }],\n                            range: [30, 36],\n                            loc: {\n                                start: { line: 1, column: 30 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        range: [30, 37],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [28, 38],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [18, 38],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            finalizer: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'cleanup',\n                            range: [49, 56],\n                            loc: {\n                                start: { line: 1, column: 49 },\n                                end: { line: 1, column: 56 }\n                            }\n                        },\n                        'arguments': [{\n                            type: 'Identifier',\n                            name: 'stuff',\n                            range: [57, 62],\n                            loc: {\n                                start: { line: 1, column: 57 },\n                                end: { line: 1, column: 62 }\n                            }\n                        }],\n                        range: [49, 63],\n                        loc: {\n                            start: { line: 1, column: 49 },\n                            end: { line: 1, column: 63 }\n                        }\n                    },\n                    range: [49, 64],\n                    loc: {\n                        start: { line: 1, column: 49 },\n                        end: { line: 1, column: 64 }\n                    }\n                }],\n                range: [47, 65],\n                loc: {\n                    start: { line: 1, column: 47 },\n                    end: { line: 1, column: 65 }\n                }\n            },\n            range: [0, 65],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 65 }\n            }\n        }\n\n    },\n\n    'debugger statement': {\n\n        'debugger;': {\n            type: 'DebuggerStatement',\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        }\n\n    },\n\n    'Function Definition': {\n\n        'function hello() { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [19, 24],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 24 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [19, 26],\n                        loc: {\n                            start: { line: 1, column: 19 },\n                            end: { line: 1, column: 26 }\n                        }\n                    },\n                    range: [19, 27],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                range: [17, 29],\n                loc: {\n                    start: { line: 1, column: 17 },\n                    end: { line: 1, column: 29 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'function eval() { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'eval',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [16, 19],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'function arguments() { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'arguments',\n                range: [9, 18],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [21, 24],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'function test(t, t) { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'test',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 't',\n                range: [14, 15],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 15 }\n                }\n            }, {\n                type: 'Identifier',\n                name: 't',\n                range: [17, 18],\n                loc: {\n                    start: { line: 1, column: 17 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [20, 23],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '(function test(t, t) { })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: {\n                    type: 'Identifier',\n                    name: 'test',\n                    range: [10, 14],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                params: [{\n                    type: 'Identifier',\n                    name: 't',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 't',\n                    range: [18, 19],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [21, 24],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'function eval() { function inner() { \"use strict\" } }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'eval',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'FunctionDeclaration',\n                    id: {\n                        type: 'Identifier',\n                        name: 'inner',\n                        range: [27, 32],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Literal',\n                                value: 'use strict',\n                                raw: '\\\"use strict\\\"',\n                                range: [37, 49],\n                                loc: {\n                                    start: { line: 1, column: 37 },\n                                    end: { line: 1, column: 49 }\n                                }\n                            },\n                            range: [37, 50],\n                            loc: {\n                                start: { line: 1, column: 37 },\n                                end: { line: 1, column: 50 }\n                            }\n                        }],\n                        range: [35, 51],\n                        loc: {\n                            start: { line: 1, column: 35 },\n                            end: { line: 1, column: 51 }\n                        }\n                    },\n                    range: [18, 51],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 51 }\n                    }\n                }],\n                range: [16, 53],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 53 }\n                }\n            },\n            range: [0, 53],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 53 }\n            }\n        },\n\n        'function hello(a) { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 'a',\n                range: [15, 16],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 16 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [20, 25],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 25 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    range: [20, 28],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 28 }\n                    }\n                }],\n                range: [18, 30],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'function hello(a, b) { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 'a',\n                range: [15, 16],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 16 }\n                }\n            }, {\n                type: 'Identifier',\n                name: 'b',\n                range: [18, 19],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 19 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [23, 28],\n                            loc: {\n                                start: { line: 1, column: 23 },\n                                end: { line: 1, column: 28 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [23, 30],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 30 }\n                        }\n                    },\n                    range: [23, 31],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 31 }\n                    }\n                }],\n                range: [21, 33],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 33 }\n                }\n            },\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        },\n\n        'var hi = function() { sayHi() };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: null,\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'CallExpression',\n                                callee: {\n                                    type: 'Identifier',\n                                    name: 'sayHi',\n                                    range: [22, 27],\n                                    loc: {\n                                        start: { line: 1, column: 22 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                'arguments': [],\n                                range: [22, 29],\n                                loc: {\n                                    start: { line: 1, column: 22 },\n                                    end: { line: 1, column: 29 }\n                                }\n                            },\n                            range: [22, 30],\n                            loc: {\n                                start: { line: 1, column: 22 },\n                                end: { line: 1, column: 30 }\n                            }\n                        }],\n                        range: [20, 31],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [9, 31],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 31 }\n                    }\n                },\n                range: [4, 31],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 31 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 32 }\n            }\n        },\n\n        'var hi = function eval() { };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [18, 22],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [25, 28],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 28 }\n                        }\n                    },\n                    range: [9, 28],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [4, 28],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'var hi = function arguments() { };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [18, 27],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [30, 33],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 33 }\n                        }\n                    },\n                    range: [9, 33],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 33 }\n                    }\n                },\n                range: [4, 33],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 33 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'var hello = function hi() { sayHi() };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hello',\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'hi',\n                        range: [21, 23],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 23 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'CallExpression',\n                                callee: {\n                                    type: 'Identifier',\n                                    name: 'sayHi',\n                                    range: [28, 33],\n                                    loc: {\n                                        start: { line: 1, column: 28 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                },\n                                'arguments': [],\n                                range: [28, 35],\n                                loc: {\n                                    start: { line: 1, column: 28 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            },\n                            range: [28, 36],\n                            loc: {\n                                start: { line: 1, column: 28 },\n                                end: { line: 1, column: 36 }\n                            }\n                        }],\n                        range: [26, 37],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 37 }\n                        }\n                    },\n                    range: [12, 37],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [4, 37],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 37 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        '(function(){})': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Automatic semicolon insertion': {\n\n        '{ x\\n++y }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                range: [2, 4],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UpdateExpression',\n                    operator: '++',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 2, column: 2 },\n                            end: { line: 2, column: 3 }\n                        }\n                    },\n                    prefix: true,\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 3 }\n                    }\n                },\n                range: [4, 8],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 4 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '{ x\\n--y }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                range: [2, 4],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UpdateExpression',\n                    operator: '--',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 2, column: 2 },\n                            end: { line: 2, column: 3 }\n                        }\n                    },\n                    prefix: true,\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 3 }\n                    }\n                },\n                range: [4, 8],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 4 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        'var x /* comment */;': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        '{ var x = 14, y = 3\\nz; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [14, 15],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [18, 19],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                kind: 'var',\n                range: [2, 20],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [20, 21],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 1 }\n                    }\n                },\n                range: [20, 22],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 4 }\n            }\n        },\n\n        'while (true) { continue\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [24, 29],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [24, 30],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 32],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { continue // Comment\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [35, 40],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [35, 41],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 43],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 43],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { continue /* Multiline\\nComment */there; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [47, 52],\n                        loc: {\n                            start: { line: 2, column: 10 },\n                            end: { line: 2, column: 15 }\n                        }\n                    },\n                    range: [47, 53],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 16 }\n                    }\n                }],\n                range: [13, 55],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 18 }\n                }\n            },\n            range: [0, 55],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        },\n\n        'while (true) { break\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [21, 26],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [21, 27],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 29],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { break // Comment\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [32, 37],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [32, 38],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 40],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 40],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { break /* Multiline\\nComment */there; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [44, 49],\n                        loc: {\n                            start: { line: 2, column: 10 },\n                            end: { line: 2, column: 15 }\n                        }\n                    },\n                    range: [44, 50],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 16 }\n                    }\n                }],\n                range: [13, 52],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 18 }\n                }\n            },\n            range: [0, 52],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        },\n\n        '(function(){ return\\nx; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 1 }\n                                }\n                            },\n                            range: [20, 22],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 2 }\n                            }\n                        }\n                    ],\n                    range: [11, 24],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 4 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 5 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '(function(){ return // Comment\\nx; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [31, 32],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 1 }\n                                }\n                            },\n                            range: [31, 33],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 2 }\n                            }\n                        }\n                    ],\n                    range: [11, 35],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 4 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 5 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '(function(){ return/* Multiline\\nComment */x; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [42, 43],\n                                loc: {\n                                    start: { line: 2, column: 10 },\n                                    end: { line: 2, column: 11 }\n                                }\n                            },\n                            range: [42, 44],\n                            loc: {\n                                start: { line: 2, column: 10 },\n                                end: { line: 2, column: 12 }\n                            }\n                        }\n                    ],\n                    range: [11, 46],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 14 }\n                    }\n                },\n                range: [0, 47],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 15 }\n                }\n            },\n            range: [0, 47],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 15 }\n            }\n        },\n\n        '{ throw error\\nerror; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 14],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 5 }\n                    }\n                },\n                range: [14, 20],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        '{ throw error// Comment\\nerror; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 24],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [24, 29],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 5 }\n                    }\n                },\n                range: [24, 30],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        '{ throw error/* Multiline\\nComment */error; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 36],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 10 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [36, 41],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 15 }\n                    }\n                },\n                range: [36, 42],\n                loc: {\n                    start: { line: 2, column: 10 },\n                    end: { line: 2, column: 16 }\n                }\n            }],\n            range: [0, 44],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        }\n\n    },\n\n    'Source elements': {\n\n        '': {\n            type: 'Program',\n            body: [],\n            range: [0, 0],\n            loc: {\n                start: { line: 0, column: 0 },\n                end: { line: 0, column: 0 }\n            },\n            tokens: []\n        }\n    },\n\n    'Invalid syntax': {\n\n        '{': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '}': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token }'\n        },\n\n        '3ea': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3in []': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e+': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e-': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3x': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3x0': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0x': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '09': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '018': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '01a': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3in[]': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0x3in[]': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"Hello\\nWorld\"': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\u005c': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\u002a': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'var x = /(s/g': {\n            index: 13,\n            lineNumber: 1,\n            column: 14,\n            message: 'Error: Line 1: Invalid regular expression'\n        },\n\n        '/': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n\n        'var x = /[a-z]/\\\\ux': {\n            index: 18,\n            lineNumber: 1,\n            column: 19,\n            message: 'Error: Line 1: Invalid regular expression'\n        },\n\n        '3 = 4': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '(1 + 1) = 10': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '1++': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '1--': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '++1': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '--1': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        'for((1 + 1) in list) process(x);': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        '[': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '[,': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + {': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + { t:t ': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + { t:t,': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'var x = /\\n/': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n\n        'var x = \"\\n': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'var if = 42': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'i + 2 = 42': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '+i = 42': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '1 + (': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '\\n\\n\\n{': {\n            index: 4,\n            lineNumber: 4,\n            column: 2,\n            message: 'Error: Line 4: Unexpected end of input'\n        },\n\n        '\\n/* Some multiline\\ncomment */\\n)': {\n            index: 30,\n            lineNumber: 4,\n            column: 1,\n            message: 'Error: Line 4: Unexpected token )'\n        },\n\n        '{ set 1 }': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        '{ get 2 }': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        '({ set: s(if) { } })': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        '({ set s(.) { } })': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token .'\n        },\n\n        '({ set: s() { } })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ set: s(a, b) { } })': {\n            index: 16,\n            lineNumber: 1,\n            column: 17,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ get: g(d) { } })': {\n            index: 13,\n            lineNumber: 1,\n            column: 14,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ get i() { }, i: 42 })': {\n            index: 21,\n            lineNumber: 1,\n            column: 22,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ i: 42, get i() { } })': {\n            index: 21,\n            lineNumber: 1,\n            column: 22,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ set i(x) { }, i: 42 })': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ i: 42, set i(x) { } })': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ get i() { }, get i() { } })': {\n            index: 27,\n            lineNumber: 1,\n            column: 28,\n            message: 'Error: Line 1: Object literal may not have multiple get/set accessors with the same name'\n        },\n\n        '({ set i(x) { }, set i(x) { } })': {\n            index: 29,\n            lineNumber: 1,\n            column: 30,\n            message: 'Error: Line 1: Object literal may not have multiple get/set accessors with the same name'\n        },\n\n        'function t(if) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'function t(true) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token true'\n        },\n\n        'function t(false) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token false'\n        },\n\n        'function t(null) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token null'\n        },\n\n        'function null() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token null'\n        },\n\n        'function true() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token true'\n        },\n\n        'function false() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token false'\n        },\n\n        'function if() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'a b;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected identifier'\n        },\n\n        'if.a;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token .'\n        },\n\n        'a if;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'a class;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected reserved word'\n        },\n\n        'break\\n': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'break 1;': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        'continue\\n': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'continue 2;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        'throw': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'throw;': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'throw\\n': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal newline after throw'\n        },\n\n        'for (var i, i2 in {});': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Unexpected token in'\n        },\n\n        'for ((i in {}));': {\n            index: 14,\n            lineNumber: 1,\n            column: 15,\n            message: 'Error: Line 1: Unexpected token )'\n        },\n\n        'for (i + 1 in {});': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        'for (+i in {});': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        'if(false)': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'if(false) doThis(); else': {\n            index: 24,\n            lineNumber: 1,\n            column: 25,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'do': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'while(false)': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'for(;;)': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'with(x)': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'try { }': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Missing catch or finally after try'\n        },\n\n        '\\u203F = 10': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'const x = 12, y;': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'const x, y = 12;': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ,'\n        },\n\n        'const x;': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'if(true) let a = 1;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token let'\n        },\n\n        'if(true) const a = 1;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token const'\n        },\n\n        'new X().\"s\"': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Unexpected string'\n        },\n\n        '/*': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*\\n\\n\\n': {\n            index: 5,\n            lineNumber: 4,\n            column: 1,\n            message: 'Error: Line 4: Unexpected token ILLEGAL'\n        },\n\n        '/**': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*\\n\\n*': {\n            index: 5,\n            lineNumber: 3,\n            column: 2,\n            message: 'Error: Line 3: Unexpected token ILLEGAL'\n        },\n\n        '/*hello': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*hello  *': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\n]': {\n            index: 1,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\r]': {\n            index: 1,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\r\\n]': {\n            index: 2,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\n\\r]': {\n            index: 2,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '//\\r\\n]': {\n            index: 4,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '//\\n\\r]': {\n            index: 4,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/a\\\\\\n/': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n        \n        '//\\r \\n]': {\n            index: 5,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/*\\r\\n*/]': {\n            index: 6,\n            lineNumber: 2,\n            column: 3,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '/*\\n\\r*/]': {\n            index: 6,\n            lineNumber: 3,\n            column: 3,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/*\\r \\n*/]': {\n            index: 7,\n            lineNumber: 3,\n            column: 3,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '\\\\\\\\': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\\\u005c': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n\n        '\\\\x': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\\\u0000': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\u200C = []': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\u200D = []': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"\\\\': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"\\\\u': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'return': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Illegal return statement'\n        },\n\n        'break': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'continue': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'switch (x) { default: continue; }': {\n            index: 31,\n            lineNumber: 1,\n            column: 32,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'do { x } *': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token *'\n        },\n\n        'while (true) { break x; }': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'while (true) { continue x; }': {\n            index: 25,\n            lineNumber: 1,\n            column: 26,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { break x; }); }': {\n            index: 40,\n            lineNumber: 1,\n            column: 41,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { continue x; }); }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { break; }); }': {\n            index: 39,\n            lineNumber: 1,\n            column: 40,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'x: while (true) { (function () { continue; }); }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'x: while (true) { x: while (true) { } }': {\n            index: 20,\n            lineNumber: 1,\n            column: 21,\n            message: 'Error: Line 1: Label \\'x\\' has already been declared'\n        },\n\n        '(function () { \\'use strict\\'; delete i; }())': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Delete of an unqualified identifier in strict mode.'\n        },\n\n        '(function () { \\'use strict\\'; with (i); }())': {\n            index: 28,\n            lineNumber: 1,\n            column: 29,\n            message: 'Error: Line 1: Strict mode code may not include a with statement'\n        },\n\n        'function hello() {\\'use strict\\'; ({ i: 42, i: 42 }) }': {\n            index: 47,\n            lineNumber: 1,\n            column: 48,\n            message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ hasOwnProperty: 42, hasOwnProperty: 42 }) }': {\n            index: 73,\n            lineNumber: 1,\n            column: 74,\n            message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; var eval = 10; }': {\n            index: 40,\n            lineNumber: 1,\n            column: 41,\n            message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; var arguments = 10; }': {\n            index: 45,\n            lineNumber: 1,\n            column: 46,\n            message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; try { } catch (eval) { } }': {\n            index: 51,\n            lineNumber: 1,\n            column: 52,\n            message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; try { } catch (arguments) { } }': {\n            index: 56,\n            lineNumber: 1,\n            column: 57,\n            message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval = 10; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Assignment to eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments = 10; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Assignment to eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ++eval; }': {\n            index: 38,\n            lineNumber: 1,\n            column: 39,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; --eval; }': {\n            index: 38,\n            lineNumber: 1,\n            column: 39,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ++arguments; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; --arguments; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval++; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval--; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments++; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments--; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; function eval() { } }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; function arguments() { } }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function eval() {\\'use strict\\'; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function arguments() {\\'use strict\\'; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; (function eval() { }()) }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; (function arguments() { }()) }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function eval() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function arguments() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ s: function eval() { } }); }': {\n            index: 47,\n            lineNumber: 1,\n            column: 48,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function package() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ i: 10, set s(eval) { } }); }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ set s(eval) { } }); }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ s: function s(eval) { } }); }': {\n            index: 49,\n            lineNumber: 1,\n            column: 50,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello(eval) {\\'use strict\\';}': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello(arguments) {\\'use strict\\';}': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() { \\'use strict\\'; function inner(eval) {} }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() { \\'use strict\\'; function inner(arguments) {} }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        ' \"\\\\1\"; \\'use strict\\';': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; \"\\\\1\"; }': {\n            index: 33,\n            lineNumber: 1,\n            column: 34,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; 021; }': {\n            index: 33,\n            lineNumber: 1,\n            column: 34,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; ({ \"\\\\1\": 42 }); }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; ({ 021: 42 }); }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"octal directive\\\\1\"; \"use strict\"; }': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"octal directive\\\\1\"; \"octal directive\\\\2\"; \"use strict\"; }': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"use strict\"; function inner() { \"octal directive\\\\1\"; } }': {\n            index: 52,\n            lineNumber: 1,\n            column: 53,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"use strict\"; var implements; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var interface; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var package; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var private; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var protected; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var public; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var static; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var yield; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var let; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello(static) { \"use strict\"; }': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function static() { \"use strict\"; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'var yield': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token yield'\n        },\n\n        'var let': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token let'\n        },\n\n        '\"use strict\"; function static() { }': {\n            index: 23,\n            lineNumber: 1,\n            column: 24,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function a(t, t) { \"use strict\"; }': {\n            index: 14,\n            lineNumber: 1,\n            column: 15,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        'function a(eval) { \"use strict\"; }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function a(package) { \"use strict\"; }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function a() { \"use strict\"; function b(t, t) { }; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        '(function a(t, t) { \"use strict\"; })': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        'function a() { \"use strict\"; (function b(t, t) { }); }': {\n            index: 44,\n            lineNumber: 1,\n            column: 45,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        '(function a(eval) { \"use strict\"; })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        '(function a(package) { \"use strict\"; })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        }\n\n    },\n\n    'API': {\n        'parse()': {\n            call: 'parse',\n            args: [],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'undefined'\n                    }\n                }]\n            }\n        },\n\n        'parse(null)': {\n            call: 'parse',\n            args: [null],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: null\n                    }\n                }]\n            }\n        },\n\n        'parse(42)': {\n            call: 'parse',\n            args: [42],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 42\n                    }\n                }]\n            }\n        },\n\n        'parse(true)': {\n            call: 'parse',\n            args: [true],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: true\n                    }\n                }]\n            }\n        },\n\n        'parse(undefined)': {\n            call: 'parse',\n            args: [void 0],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'undefined'\n                    }\n                }]\n            }\n        },\n\n        'parse(new String(\"test\"))': {\n            call: 'parse',\n            args: [new String('test')],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'test'\n                    }\n                }]\n            }\n        },\n\n        'parse(new Number(42))': {\n            call: 'parse',\n            args: [new Number(42)],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 42\n                    }\n                }]\n            }\n        },\n\n        'parse(new Boolean(true))': {\n            call: 'parse',\n            args: [new Boolean(true)],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: true\n                    }\n                }]\n            }\n        },\n\n        'Syntax': {\n            property: 'Syntax',\n            result: {\n                AssignmentExpression: 'AssignmentExpression',\n                ArrayExpression: 'ArrayExpression',\n                BlockStatement: 'BlockStatement',\n                BinaryExpression: 'BinaryExpression',\n                BreakStatement: 'BreakStatement',\n                CallExpression: 'CallExpression',\n                CatchClause: 'CatchClause',\n                ConditionalExpression: 'ConditionalExpression',\n                ContinueStatement: 'ContinueStatement',\n                DoWhileStatement: 'DoWhileStatement',\n                DebuggerStatement: 'DebuggerStatement',\n                EmptyStatement: 'EmptyStatement',\n                ExpressionStatement: 'ExpressionStatement',\n                ForStatement: 'ForStatement',\n                ForInStatement: 'ForInStatement',\n                FunctionDeclaration: 'FunctionDeclaration',\n                FunctionExpression: 'FunctionExpression',\n                Identifier: 'Identifier',\n                IfStatement: 'IfStatement',\n                Literal: 'Literal',\n                LabeledStatement: 'LabeledStatement',\n                LogicalExpression: 'LogicalExpression',\n                MemberExpression: 'MemberExpression',\n                NewExpression: 'NewExpression',\n                ObjectExpression: 'ObjectExpression',\n                Program: 'Program',\n                Property: 'Property',\n                ReturnStatement: 'ReturnStatement',\n                SequenceExpression: 'SequenceExpression',\n                SwitchStatement: 'SwitchStatement',\n                SwitchCase: 'SwitchCase',\n                ThisExpression: 'ThisExpression',\n                ThrowStatement: 'ThrowStatement',\n                TryStatement: 'TryStatement',\n                UnaryExpression: 'UnaryExpression',\n                UpdateExpression: 'UpdateExpression',\n                VariableDeclaration: 'VariableDeclaration',\n                VariableDeclarator: 'VariableDeclarator',\n                WhileStatement: 'WhileStatement',\n                WithStatement: 'WithStatement'\n            }\n        }\n\n    },\n\n    'Tolerant parse': {\n        'return': {\n            type: 'Program',\n            body: [{\n                type: 'ReturnStatement',\n                'argument': null,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            },\n            errors: [{\n                index: 6,\n                lineNumber: 1,\n                column: 7,\n                message: 'Error: Line 1: Illegal return statement'\n            }]\n        },\n\n        '(function () { \\'use strict\\'; with (i); }())': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 'use strict',\n                                    raw: '\\'use strict\\'',\n                                    range: [15, 27],\n                                    loc: {\n                                        start: { line: 1, column: 15 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                range: [15, 28],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            }, {\n                                type: 'WithStatement',\n                                object: {\n                                    type: 'Identifier',\n                                    name: 'i',\n                                    range: [35, 36],\n                                    loc: {\n                                        start: { line: 1, column: 35 },\n                                        end: { line: 1, column: 36 }\n                                    }\n                                },\n                                body: {\n                                    type: 'EmptyStatement',\n                                    range: [37, 38],\n                                    loc: {\n                                        start: { line: 1, column: 37 },\n                                        end: { line: 1, column: 38 }\n                                    }\n                                },\n                                range: [29, 38],\n                                loc: {\n                                    start: { line: 1, column: 29 },\n                                    end: { line: 1, column: 38 }\n                                }\n                            }],\n                            range: [13, 40],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 40 }\n                            }\n                        },\n                        range: [1, 40],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 40 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [0, 43],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 43 }\n                    }\n                },\n                range: [0, 43],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 43 }\n                }\n            }],\n            range: [0, 43],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 43 }\n            },\n            errors: [{\n                index: 29,\n                lineNumber: 1,\n                column: 30,\n                message: 'Error: Line 1: Strict mode code may not include a with statement'\n            }]\n        },\n\n        '(function () { \\'use strict\\'; 021 }())': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 'use strict',\n                                    raw: '\\'use strict\\'',\n                                    range: [15, 27],\n                                    loc: {\n                                        start: { line: 1, column: 15 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                range: [15, 28],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            }, {\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 17,\n                                    raw: \"021\",\n                                    range: [29, 32],\n                                    loc: {\n                                        start: { line: 1, column: 29 },\n                                        end: { line: 1, column: 32 }\n                                    }\n                                },\n                                range: [29, 33],\n                                loc: {\n                                    start: { line: 1, column: 29 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            }],\n                            range: [13, 34],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        range: [1, 34],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 34 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [0, 37],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [0, 37],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 37 }\n                }\n            }],\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            },\n            errors: [{\n                index: 29,\n                lineNumber: 1,\n                column: 30,\n                message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n            }]\n        },\n\n        '\"use strict\"; delete x': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UnaryExpression',\n                    operator: 'delete',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [14, 22],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [14, 22],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 22 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            },\n            errors: [{\n                index: 22,\n                lineNumber: 1,\n                column: 23,\n                message: 'Error: Line 1: Delete of an unqualified identifier in strict mode.'\n            }]\n        },\n\n        '\"use strict\"; try {} catch (eval) {}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'TryStatement',\n                block: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 20],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                handlers: [{\n                    type: 'CatchClause',\n                    param: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [28, 32],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    guard: null,\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [34, 36],\n                        loc: {\n                            start: { line: 1, column: 34 },\n                            end: { line: 1, column: 36 }\n                        }\n                    },\n                    range: [21, 36],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 36 }\n                    }\n                }],\n                finalizer: null,\n                range: [14, 36],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 36 }\n                }\n            }],\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            },\n            errors: [{\n                index: 32,\n                lineNumber: 1,\n                column: 33,\n                message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; try {} catch (arguments) {}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'TryStatement',\n                block: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 20],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                handlers: [{\n                    type: 'CatchClause',\n                    param: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [28, 37],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 37 }\n                        }\n                    },\n                    guard: null,\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [39, 41],\n                        loc: {\n                            start: { line: 1, column: 39 },\n                            end: { line: 1, column: 41 }\n                        }\n                    },\n                    range: [21, 41],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 41 }\n                    }\n                }],\n                finalizer: null,\n                range: [14, 41],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 41 }\n                }\n            }],\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            },\n            errors: [{\n                index: 37,\n                lineNumber: 1,\n                column: 38,\n                message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; var eval;': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [18, 22],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    init: null,\n                    range: [18, 22],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [14, 23],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 23 }\n                }\n            }],\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            },\n            errors: [{\n                index: 22,\n                lineNumber: 1,\n                column: 23,\n                message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; var arguments;': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [18, 27],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    init: null,\n                    range: [18, 27],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                kind: 'var',\n                range: [14, 28],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            },\n            errors: [{\n                index: 27,\n                lineNumber: 1,\n                column: 28,\n                message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\";x={y:1,y:1}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [13, 14],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    right: {\n                        type: 'ObjectExpression',\n                        properties: [{\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'y',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [18, 19],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [16, 19],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 19 }\n                            }\n                        }, {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'y',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 21 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [22, 23],\n                                loc: {\n                                    start: { line: 1, column: 22 },\n                                    end: { line: 1, column: 23 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [20, 23],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 23 }\n                            }\n                        }],\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    range: [13, 24],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [13, 24],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 24 }\n                }\n            }],\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            },\n            errors: [{\n                index: 23,\n                lineNumber: 1,\n                column: 24,\n                message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n            }]\n        }\n\n    }\n};\n\n// Special handling for regular expression literal since we need to\n// convert it to a string literal, otherwise it will be decoded\n// as object \"{}\" and the regular expression would be lost.\nfunction adjustRegexLiteral(key, value) {\n    'use strict';\n    if (key === 'value' && value instanceof RegExp) {\n        value = value.toString();\n    }\n    return value;\n}\n\nif (typeof window === 'undefined') {\n    var esprima = require('../esprima');\n}\n\nfunction NotMatchingError(expected, actual) {\n    'use strict';\n    Error.call(this, 'Expected ');\n    this.expected = expected;\n    this.actual = actual;\n}\nNotMatchingError.prototype = new Error();\n\nfunction errorToObject(e) {\n    'use strict';\n    var msg = e.toString();\n\n    // Opera 9.64 produces an non-standard string in toString().\n    if (msg.substr(0, 6) !== 'Error:') {\n        if (typeof e.message === 'string') {\n            msg = 'Error: ' + e.message;\n        }\n    }\n\n    return {\n        index: e.index,\n        lineNumber: e.lineNumber,\n        column: e.column,\n        message: msg\n    };\n}\n\nfunction testParse(code, syntax) {\n    'use strict';\n    var expected, tree, actual, options, StringObject, i, len, err;\n\n    // alias, so that JSLint does not complain.\n    StringObject = String;\n\n    options = {\n        comment: (typeof syntax.comments !== 'undefined'),\n        range: true,\n        loc: true,\n        tokens: (typeof syntax.tokens !== 'undefined'),\n        raw: true,\n        tolerant: (typeof syntax.errors !== 'undefined')\n    };\n\n    expected = JSON.stringify(syntax, null, 4);\n    try {\n        tree = esprima.parse(code, options);\n        tree = (options.comment || options.tokens || options.tolerant) ? tree : tree.body[0];\n\n        if (options.tolerant) {\n            for (i = 0, len = tree.errors.length; i < len; i += 1) {\n                tree.errors[i] = errorToObject(tree.errors[i]);\n            }\n        }\n\n        actual = JSON.stringify(tree, adjustRegexLiteral, 4);\n\n        // Only to ensure that there is no error when using string object.\n        esprima.parse(new StringObject(code), options);\n\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction testError(code, exception) {\n    'use strict';\n    var i, options, expected, actual, handleInvalidRegexFlag;\n\n    // Different parsing options should give the same error.\n    options = [\n        {},\n        { comment: true },\n        { raw: true },\n        { raw: true, comment: true }\n    ];\n\n    // If handleInvalidRegexFlag is true, an invalid flag in a regular expression\n    // will throw an exception. In some old version V8, this is not the case\n    // and hence handleInvalidRegexFlag is false.\n    handleInvalidRegexFlag = false;\n    try {\n        'test'.match(new RegExp('[a-z]', 'x'));\n    } catch (e) {\n        handleInvalidRegexFlag = true;\n    }\n\n    expected = JSON.stringify(exception);\n\n    for (i = 0; i < options.length; i += 1) {\n\n        try {\n            esprima.parse(code, options[i]);\n        } catch (e) {\n            actual = JSON.stringify(errorToObject(e));\n        }\n\n        if (expected !== actual) {\n\n            // Compensate for old V8 which does not handle invalid flag.\n            if (exception.message.indexOf('Invalid regular expression') > 0) {\n                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {\n                    return;\n                }\n            }\n\n            throw new NotMatchingError(expected, actual);\n        }\n\n    }\n}\n\nfunction testAPI(code, result) {\n    'use strict';\n    var expected, res, actual;\n\n    expected = JSON.stringify(result.result, null, 4);\n    try {\n        if (typeof result.property !== 'undefined') {\n            res = esprima[result.property];\n        } else {\n            res = esprima[result.call].apply(esprima, result.args);\n        }\n        actual = JSON.stringify(res, adjustRegexLiteral, 4);\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction runTest(code, result) {\n    'use strict';\n    if (result.hasOwnProperty('lineNumber')) {\n        testError(code, result);\n    } else if (result.hasOwnProperty('result')) {\n        testAPI(code, result);\n    } else {\n        testParse(code, result);\n    }\n}\n\nif (typeof window !== 'undefined') {\n    // Run all tests in a browser environment.\n    runTests = function () {\n        'use strict';\n        var total = 0,\n            failures = 0,\n            category,\n            fixture,\n            source,\n            tick,\n            expected,\n            index,\n            len;\n\n        function setText(el, str) {\n            if (typeof el.innerText === 'string') {\n                el.innerText = str;\n            } else {\n                el.textContent = str;\n            }\n        }\n\n        function startCategory(category) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('h4');\n            setText(e, category);\n            report.appendChild(e);\n        }\n\n        function reportSuccess(code) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n        }\n\n        function reportFailure(code, expected, actual) {\n            var report, e;\n\n            report = document.getElementById('report');\n\n            e = document.createElement('p');\n            setText(e, 'Code:');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Expected');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'expected');\n            setText(e, expected);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Actual');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'actual');\n            setText(e, actual);\n            report.appendChild(e);\n        }\n\n        setText(document.getElementById('version'), esprima.version);\n\n        tick = new Date();\n        for (category in data) {\n            if (data.hasOwnProperty(category)) {\n                startCategory(category);\n                fixture = data[category];\n                for (source in fixture) {\n                    if (fixture.hasOwnProperty(source)) {\n                        expected = fixture[source];\n                        total += 1;\n                        try {\n                            runTest(source, expected);\n                            reportSuccess(source, JSON.stringify(expected, null, 4));\n                        } catch (e) {\n                            failures += 1;\n                            reportFailure(source, e.expected, e.actual);\n                        }\n                    }\n                }\n            }\n        }\n        tick = (new Date()) - tick;\n\n        if (failures > 0) {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'Failures: ' + failures + '. ' + tick + ' ms');\n        } else {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'No failure. ' + tick + ' ms');\n        }\n    };\n} else {\n    (function () {\n        'use strict';\n\n        var total = 0,\n            failures = [],\n            tick = new Date(),\n            expected,\n            header;\n\n        Object.keys(data).forEach(function (category) {\n            Object.keys(data[category]).forEach(function (source) {\n                total += 1;\n                expected = data[category][source];\n                try {\n                    runTest(source, expected);\n                } catch (e) {\n                    e.source = source;\n                    failures.push(e);\n                }\n            });\n        });\n        tick = (new Date()) - tick;\n\n        header = total + ' tests. ' + failures.length + ' failures. ' +\n            tick + ' ms';\n        if (failures.length) {\n            console.error(header);\n            failures.forEach(function (failure) {\n                console.error(failure.source + ': Expected\\n    ' +\n                    failure.expected.split('\\n').join('\\n    ') +\n                    '\\nto match\\n    ' + failure.actual);\n            });\n        } else {\n            console.log(header);\n        }\n        process.exit(failures.length === 0 ? 0 : 1);\n    }());\n}\n/* vim: set sw=4 ts=4 et tw=80 : */","nodes":{"0":{"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":19}},"id":0},"1":{"loc":{"start":{"line":36,"column":0},"end":{"line":16819,"column":2}},"id":1},"2":{"loc":{"start":{"line":16825,"column":4},"end":{"line":16825,"column":17}},"id":2},"3":{"loc":{"start":{"line":16826,"column":8},"end":{"line":16826,"column":50}},"id":3},"4":{"loc":{"start":{"line":16826,"column":8},"end":{"line":16826,"column":23}},"id":4},"5":{"loc":{"start":{"line":16826,"column":27},"end":{"line":16826,"column":50}},"id":5},"6":{"loc":{"start":{"line":16827,"column":8},"end":{"line":16827,"column":33}},"id":6},"7":{"loc":{"start":{"line":16827,"column":16},"end":{"line":16827,"column":32}},"id":7},"8":{"loc":{"start":{"line":16829,"column":4},"end":{"line":16829,"column":17}},"id":8},"9":{"loc":{"start":{"line":16832,"column":4},"end":{"line":16832,"column":33}},"id":9},"10":{"loc":{"start":{"line":16833,"column":4},"end":{"line":16833,"column":40}},"id":10},"11":{"loc":{"start":{"line":16833,"column":18},"end":{"line":16833,"column":39}},"id":11},"12":{"loc":{"start":{"line":16837,"column":4},"end":{"line":16837,"column":17}},"id":12},"13":{"loc":{"start":{"line":16838,"column":4},"end":{"line":16838,"column":34}},"id":13},"14":{"loc":{"start":{"line":16838,"column":4},"end":{"line":16838,"column":33}},"id":14},"15":{"loc":{"start":{"line":16839,"column":4},"end":{"line":16839,"column":29}},"id":15},"16":{"loc":{"start":{"line":16840,"column":4},"end":{"line":16840,"column":25}},"id":16},"17":{"loc":{"start":{"line":16842,"column":0},"end":{"line":16842,"column":41}},"id":17},"18":{"loc":{"start":{"line":16845,"column":4},"end":{"line":16845,"column":17}},"id":18},"19":{"loc":{"start":{"line":16846,"column":4},"end":{"line":16846,"column":27}},"id":19},"20":{"loc":{"start":{"line":16846,"column":14},"end":{"line":16846,"column":26}},"id":20},"21":{"loc":{"start":{"line":16849,"column":8},"end":{"line":16849,"column":37}},"id":21},"22":{"loc":{"start":{"line":16849,"column":8},"end":{"line":16849,"column":24}},"id":22},"23":{"loc":{"start":{"line":16850,"column":12},"end":{"line":16850,"column":41}},"id":23},"24":{"loc":{"start":{"line":16851,"column":12},"end":{"line":16851,"column":40}},"id":24},"25":{"loc":{"start":{"line":16851,"column":18},"end":{"line":16851,"column":39}},"id":25},"26":{"loc":{"start":{"line":16855,"column":4},"end":{"line":16860,"column":6}},"id":26},"27":{"loc":{"start":{"line":16864,"column":4},"end":{"line":16864,"column":17}},"id":27},"28":{"loc":{"start":{"line":16865,"column":4},"end":{"line":16865,"column":67}},"id":28},"29":{"loc":{"start":{"line":16868,"column":4},"end":{"line":16868,"column":26}},"id":29},"30":{"loc":{"start":{"line":16870,"column":4},"end":{"line":16877,"column":6}},"id":30},"31":{"loc":{"start":{"line":16871,"column":17},"end":{"line":16871,"column":57}},"id":31},"32":{"loc":{"start":{"line":16874,"column":16},"end":{"line":16874,"column":54}},"id":32},"33":{"loc":{"start":{"line":16876,"column":18},"end":{"line":16876,"column":56}},"id":33},"34":{"loc":{"start":{"line":16879,"column":4},"end":{"line":16879,"column":47}},"id":34},"35":{"loc":{"start":{"line":16879,"column":15},"end":{"line":16879,"column":46}},"id":35},"36":{"loc":{"start":{"line":16881,"column":8},"end":{"line":16881,"column":44}},"id":36},"37":{"loc":{"start":{"line":16881,"column":15},"end":{"line":16881,"column":43}},"id":37},"38":{"loc":{"start":{"line":16882,"column":8},"end":{"line":16882,"column":93}},"id":38},"39":{"loc":{"start":{"line":16882,"column":73},"end":{"line":16882,"column":77}},"id":39},"40":{"loc":{"start":{"line":16882,"column":80},"end":{"line":16882,"column":92}},"id":40},"41":{"loc":{"start":{"line":16882,"column":15},"end":{"line":16882,"column":70}},"id":41},"42":{"loc":{"start":{"line":16882,"column":16},"end":{"line":16882,"column":49}},"id":42},"43":{"loc":{"start":{"line":16885,"column":50},"end":{"line":16885,"column":57}},"id":43},"44":{"loc":{"start":{"line":16886,"column":16},"end":{"line":16886,"column":63}},"id":44},"45":{"loc":{"start":{"line":16886,"column":33},"end":{"line":16886,"column":62}},"id":45},"46":{"loc":{"start":{"line":16890,"column":8},"end":{"line":16890,"column":61}},"id":46},"47":{"loc":{"start":{"line":16890,"column":17},"end":{"line":16890,"column":60}},"id":47},"48":{"loc":{"start":{"line":16893,"column":8},"end":{"line":16893,"column":55}},"id":48},"49":{"loc":{"start":{"line":16893,"column":8},"end":{"line":16893,"column":54}},"id":49},"50":{"loc":{"start":{"line":16896,"column":8},"end":{"line":16896,"column":59}},"id":50},"51":{"loc":{"start":{"line":16896,"column":45},"end":{"line":16896,"column":57}},"id":51},"52":{"loc":{"start":{"line":16898,"column":8},"end":{"line":16898,"column":27}},"id":52},"53":{"loc":{"start":{"line":16899,"column":8},"end":{"line":16899,"column":53}},"id":53},"54":{"loc":{"start":{"line":16904,"column":4},"end":{"line":16904,"column":17}},"id":54},"55":{"loc":{"start":{"line":16905,"column":4},"end":{"line":16905,"column":61}},"id":55},"56":{"loc":{"start":{"line":16908,"column":4},"end":{"line":16913,"column":6}},"id":56},"57":{"loc":{"start":{"line":16918,"column":4},"end":{"line":16918,"column":35}},"id":57},"58":{"loc":{"start":{"line":16920,"column":8},"end":{"line":16920,"column":47}},"id":58},"59":{"loc":{"start":{"line":16920,"column":8},"end":{"line":16920,"column":46}},"id":59},"60":{"loc":{"start":{"line":16922,"column":8},"end":{"line":16922,"column":38}},"id":60},"61":{"loc":{"start":{"line":16925,"column":4},"end":{"line":16925,"column":41}},"id":61},"62":{"loc":{"start":{"line":16925,"column":15},"end":{"line":16925,"column":40}},"id":62},"63":{"loc":{"start":{"line":16927,"column":16},"end":{"line":16927,"column":34}},"id":63},"64":{"loc":{"start":{"line":16930,"column":12},"end":{"line":16930,"column":44}},"id":64},"65":{"loc":{"start":{"line":16930,"column":12},"end":{"line":16930,"column":43}},"id":65},"66":{"loc":{"start":{"line":16932,"column":12},"end":{"line":16932,"column":54}},"id":66},"67":{"loc":{"start":{"line":16932,"column":21},"end":{"line":16932,"column":53}},"id":67},"68":{"loc":{"start":{"line":16932,"column":36},"end":{"line":16932,"column":52}},"id":68},"69":{"loc":{"start":{"line":16935,"column":12},"end":{"line":16935,"column":31}},"id":69},"70":{"loc":{"start":{"line":16938,"column":16},"end":{"line":16938,"column":75}},"id":70},"71":{"loc":{"start":{"line":16938,"column":16},"end":{"line":16938,"column":71}},"id":71},"72":{"loc":{"start":{"line":16939,"column":20},"end":{"line":16939,"column":76}},"id":72},"73":{"loc":{"start":{"line":16939,"column":20},"end":{"line":16939,"column":49}},"id":73},"74":{"loc":{"start":{"line":16940,"column":20},"end":{"line":16940,"column":27}},"id":74},"75":{"loc":{"start":{"line":16944,"column":12},"end":{"line":16944,"column":57}},"id":75},"76":{"loc":{"start":{"line":16951,"column":4},"end":{"line":16951,"column":17}},"id":76},"77":{"loc":{"start":{"line":16952,"column":4},"end":{"line":16952,"column":30}},"id":77},"78":{"loc":{"start":{"line":16954,"column":4},"end":{"line":16954,"column":54}},"id":78},"79":{"loc":{"start":{"line":16954,"column":15},"end":{"line":16954,"column":53}},"id":79},"80":{"loc":{"start":{"line":16956,"column":12},"end":{"line":16956,"column":50}},"id":80},"81":{"loc":{"start":{"line":16957,"column":12},"end":{"line":16957,"column":43}},"id":81},"82":{"loc":{"start":{"line":16959,"column":12},"end":{"line":16959,"column":67}},"id":82},"83":{"loc":{"start":{"line":16959,"column":18},"end":{"line":16959,"column":66}},"id":83},"84":{"loc":{"start":{"line":16961,"column":8},"end":{"line":16961,"column":60}},"id":84},"85":{"loc":{"start":{"line":16961,"column":17},"end":{"line":16961,"column":59}},"id":85},"86":{"loc":{"start":{"line":16963,"column":8},"end":{"line":16963,"column":59}},"id":86},"87":{"loc":{"start":{"line":16963,"column":45},"end":{"line":16963,"column":57}},"id":87},"88":{"loc":{"start":{"line":16965,"column":8},"end":{"line":16965,"column":27}},"id":88},"89":{"loc":{"start":{"line":16966,"column":8},"end":{"line":16966,"column":53}},"id":89},"90":{"loc":{"start":{"line":16971,"column":4},"end":{"line":16971,"column":17}},"id":90},"91":{"loc":{"start":{"line":16972,"column":8},"end":{"line":16972,"column":43}},"id":91},"92":{"loc":{"start":{"line":16973,"column":8},"end":{"line":16973,"column":32}},"id":92},"93":{"loc":{"start":{"line":16973,"column":8},"end":{"line":16973,"column":31}},"id":93},"94":{"loc":{"start":{"line":16974,"column":15},"end":{"line":16974,"column":46}},"id":94},"95":{"loc":{"start":{"line":16975,"column":8},"end":{"line":16975,"column":30}},"id":95},"96":{"loc":{"start":{"line":16975,"column":8},"end":{"line":16975,"column":29}},"id":96},"97":{"loc":{"start":{"line":16977,"column":8},"end":{"line":16977,"column":32}},"id":97},"98":{"loc":{"start":{"line":16977,"column":8},"end":{"line":16977,"column":31}},"id":98},"99":{"loc":{"start":{"line":16981,"column":4},"end":{"line":16981,"column":33}},"id":99},"100":{"loc":{"start":{"line":16983,"column":4},"end":{"line":17084,"column":6}},"id":100},"101":{"loc":{"start":{"line":16984,"column":8},"end":{"line":16984,"column":21}},"id":101},"102":{"loc":{"start":{"line":16985,"column":8},"end":{"line":16993,"column":16}},"id":102},"103":{"loc":{"start":{"line":16996,"column":16},"end":{"line":16996,"column":48}},"id":103},"104":{"loc":{"start":{"line":16997,"column":16},"end":{"line":16997,"column":35}},"id":104},"105":{"loc":{"start":{"line":16999,"column":16},"end":{"line":16999,"column":37}},"id":105},"106":{"loc":{"start":{"line":17004,"column":12},"end":{"line":17004,"column":26}},"id":106},"107":{"loc":{"start":{"line":17005,"column":12},"end":{"line":17005,"column":55}},"id":107},"108":{"loc":{"start":{"line":17005,"column":21},"end":{"line":17005,"column":54}},"id":108},"109":{"loc":{"start":{"line":17006,"column":12},"end":{"line":17006,"column":45}},"id":109},"110":{"loc":{"start":{"line":17006,"column":16},"end":{"line":17006,"column":44}},"id":110},"111":{"loc":{"start":{"line":17007,"column":12},"end":{"line":17007,"column":33}},"id":111},"112":{"loc":{"start":{"line":17007,"column":12},"end":{"line":17007,"column":32}},"id":112},"113":{"loc":{"start":{"line":17008,"column":12},"end":{"line":17008,"column":34}},"id":113},"114":{"loc":{"start":{"line":17008,"column":12},"end":{"line":17008,"column":33}},"id":114},"115":{"loc":{"start":{"line":17012,"column":12},"end":{"line":17012,"column":26}},"id":115},"116":{"loc":{"start":{"line":17013,"column":12},"end":{"line":17013,"column":55}},"id":116},"117":{"loc":{"start":{"line":17013,"column":21},"end":{"line":17013,"column":54}},"id":117},"118":{"loc":{"start":{"line":17014,"column":12},"end":{"line":17014,"column":46}},"id":118},"119":{"loc":{"start":{"line":17014,"column":16},"end":{"line":17014,"column":45}},"id":119},"120":{"loc":{"start":{"line":17015,"column":12},"end":{"line":17015,"column":44}},"id":120},"121":{"loc":{"start":{"line":17015,"column":12},"end":{"line":17015,"column":43}},"id":121},"122":{"loc":{"start":{"line":17016,"column":12},"end":{"line":17016,"column":29}},"id":122},"123":{"loc":{"start":{"line":17016,"column":12},"end":{"line":17016,"column":28}},"id":123},"124":{"loc":{"start":{"line":17017,"column":12},"end":{"line":17017,"column":34}},"id":124},"125":{"loc":{"start":{"line":17017,"column":12},"end":{"line":17017,"column":33}},"id":125},"126":{"loc":{"start":{"line":17021,"column":12},"end":{"line":17021,"column":26}},"id":126},"127":{"loc":{"start":{"line":17023,"column":12},"end":{"line":17023,"column":55}},"id":127},"128":{"loc":{"start":{"line":17023,"column":21},"end":{"line":17023,"column":54}},"id":128},"129":{"loc":{"start":{"line":17025,"column":12},"end":{"line":17025,"column":44}},"id":129},"130":{"loc":{"start":{"line":17025,"column":16},"end":{"line":17025,"column":43}},"id":130},"131":{"loc":{"start":{"line":17026,"column":12},"end":{"line":17026,"column":32}},"id":131},"132":{"loc":{"start":{"line":17026,"column":12},"end":{"line":17026,"column":31}},"id":132},"133":{"loc":{"start":{"line":17027,"column":12},"end":{"line":17027,"column":34}},"id":133},"134":{"loc":{"start":{"line":17027,"column":12},"end":{"line":17027,"column":33}},"id":134},"135":{"loc":{"start":{"line":17029,"column":12},"end":{"line":17029,"column":46}},"id":135},"136":{"loc":{"start":{"line":17029,"column":16},"end":{"line":17029,"column":45}},"id":136},"137":{"loc":{"start":{"line":17030,"column":12},"end":{"line":17030,"column":44}},"id":137},"138":{"loc":{"start":{"line":17030,"column":12},"end":{"line":17030,"column":43}},"id":138},"139":{"loc":{"start":{"line":17031,"column":12},"end":{"line":17031,"column":29}},"id":139},"140":{"loc":{"start":{"line":17031,"column":12},"end":{"line":17031,"column":28}},"id":140},"141":{"loc":{"start":{"line":17032,"column":12},"end":{"line":17032,"column":34}},"id":141},"142":{"loc":{"start":{"line":17032,"column":12},"end":{"line":17032,"column":33}},"id":142},"143":{"loc":{"start":{"line":17034,"column":12},"end":{"line":17034,"column":44}},"id":143},"144":{"loc":{"start":{"line":17034,"column":16},"end":{"line":17034,"column":43}},"id":144},"145":{"loc":{"start":{"line":17035,"column":12},"end":{"line":17035,"column":35}},"id":145},"146":{"loc":{"start":{"line":17035,"column":12},"end":{"line":17035,"column":34}},"id":146},"147":{"loc":{"start":{"line":17036,"column":12},"end":{"line":17036,"column":34}},"id":147},"148":{"loc":{"start":{"line":17036,"column":12},"end":{"line":17036,"column":33}},"id":148},"149":{"loc":{"start":{"line":17038,"column":12},"end":{"line":17038,"column":46}},"id":149},"150":{"loc":{"start":{"line":17038,"column":16},"end":{"line":17038,"column":45}},"id":150},"151":{"loc":{"start":{"line":17039,"column":12},"end":{"line":17039,"column":48}},"id":151},"152":{"loc":{"start":{"line":17039,"column":12},"end":{"line":17039,"column":47}},"id":152},"153":{"loc":{"start":{"line":17040,"column":12},"end":{"line":17040,"column":33}},"id":153},"154":{"loc":{"start":{"line":17040,"column":12},"end":{"line":17040,"column":32}},"id":154},"155":{"loc":{"start":{"line":17041,"column":12},"end":{"line":17041,"column":34}},"id":155},"156":{"loc":{"start":{"line":17041,"column":12},"end":{"line":17041,"column":33}},"id":156},"157":{"loc":{"start":{"line":17043,"column":12},"end":{"line":17043,"column":44}},"id":157},"158":{"loc":{"start":{"line":17043,"column":16},"end":{"line":17043,"column":43}},"id":158},"159":{"loc":{"start":{"line":17044,"column":12},"end":{"line":17044,"column":33}},"id":159},"160":{"loc":{"start":{"line":17044,"column":12},"end":{"line":17044,"column":32}},"id":160},"161":{"loc":{"start":{"line":17045,"column":12},"end":{"line":17045,"column":34}},"id":161},"162":{"loc":{"start":{"line":17045,"column":12},"end":{"line":17045,"column":33}},"id":162},"163":{"loc":{"start":{"line":17047,"column":12},"end":{"line":17047,"column":46}},"id":163},"164":{"loc":{"start":{"line":17047,"column":16},"end":{"line":17047,"column":45}},"id":164},"165":{"loc":{"start":{"line":17048,"column":12},"end":{"line":17048,"column":46}},"id":165},"166":{"loc":{"start":{"line":17048,"column":12},"end":{"line":17048,"column":45}},"id":166},"167":{"loc":{"start":{"line":17049,"column":12},"end":{"line":17049,"column":31}},"id":167},"168":{"loc":{"start":{"line":17049,"column":12},"end":{"line":17049,"column":30}},"id":168},"169":{"loc":{"start":{"line":17050,"column":12},"end":{"line":17050,"column":34}},"id":169},"170":{"loc":{"start":{"line":17050,"column":12},"end":{"line":17050,"column":33}},"id":170},"171":{"loc":{"start":{"line":17053,"column":8},"end":{"line":17053,"column":69}},"id":171},"172":{"loc":{"start":{"line":17053,"column":8},"end":{"line":17053,"column":68}},"id":172},"173":{"loc":{"start":{"line":17053,"column":16},"end":{"line":17053,"column":50}},"id":173},"174":{"loc":{"start":{"line":17055,"column":8},"end":{"line":17055,"column":26}},"id":174},"175":{"loc":{"start":{"line":17057,"column":16},"end":{"line":17057,"column":45}},"id":175},"176":{"loc":{"start":{"line":17058,"column":16},"end":{"line":17058,"column":40}},"id":176},"177":{"loc":{"start":{"line":17058,"column":16},"end":{"line":17058,"column":39}},"id":177},"178":{"loc":{"start":{"line":17059,"column":16},"end":{"line":17059,"column":41}},"id":178},"179":{"loc":{"start":{"line":17061,"column":24},"end":{"line":17061,"column":54}},"id":179},"180":{"loc":{"start":{"line":17062,"column":24},"end":{"line":17062,"column":51}},"id":180},"181":{"loc":{"start":{"line":17063,"column":24},"end":{"line":17063,"column":35}},"id":181},"182":{"loc":{"start":{"line":17065,"column":28},"end":{"line":17065,"column":54}},"id":182},"183":{"loc":{"start":{"line":17065,"column":28},"end":{"line":17065,"column":53}},"id":183},"184":{"loc":{"start":{"line":17066,"column":28},"end":{"line":17066,"column":85}},"id":184},"185":{"loc":{"start":{"line":17066,"column":28},"end":{"line":17066,"column":84}},"id":185},"186":{"loc":{"start":{"line":17066,"column":50},"end":{"line":17066,"column":83}},"id":186},"187":{"loc":{"start":{"line":17068,"column":28},"end":{"line":17068,"column":42}},"id":187},"188":{"loc":{"start":{"line":17069,"column":28},"end":{"line":17069,"column":72}},"id":188},"189":{"loc":{"start":{"line":17069,"column":28},"end":{"line":17069,"column":71}},"id":189},"190":{"loc":{"start":{"line":17075,"column":8},"end":{"line":17075,"column":35}},"id":190},"191":{"loc":{"start":{"line":17075,"column":15},"end":{"line":17075,"column":34}},"id":191},"192":{"loc":{"start":{"line":17077,"column":12},"end":{"line":17077,"column":24}},"id":192},"193":{"loc":{"start":{"line":17078,"column":12},"end":{"line":17079,"column":63}},"id":193},"194":{"loc":{"start":{"line":17078,"column":12},"end":{"line":17079,"column":62}},"id":194},"195":{"loc":{"start":{"line":17078,"column":20},"end":{"line":17078,"column":53}},"id":195},"196":{"loc":{"start":{"line":17078,"column":55},"end":{"line":17079,"column":61}},"id":196},"197":{"loc":{"start":{"line":17078,"column":55},"end":{"line":17079,"column":53}},"id":197},"198":{"loc":{"start":{"line":17078,"column":55},"end":{"line":17079,"column":46}},"id":198},"199":{"loc":{"start":{"line":17078,"column":55},"end":{"line":17079,"column":39}},"id":199},"200":{"loc":{"start":{"line":17078,"column":55},"end":{"line":17079,"column":28}},"id":200},"201":{"loc":{"start":{"line":17078,"column":55},"end":{"line":17078,"column":73}},"id":201},"202":{"loc":{"start":{"line":17081,"column":12},"end":{"line":17082,"column":47}},"id":202},"203":{"loc":{"start":{"line":17081,"column":12},"end":{"line":17082,"column":46}},"id":203},"204":{"loc":{"start":{"line":17081,"column":20},"end":{"line":17081,"column":53}},"id":204},"205":{"loc":{"start":{"line":17081,"column":55},"end":{"line":17082,"column":45}},"id":205},"206":{"loc":{"start":{"line":17081,"column":55},"end":{"line":17082,"column":37}},"id":206},"207":{"loc":{"start":{"line":17081,"column":55},"end":{"line":17082,"column":30}},"id":207},"208":{"loc":{"start":{"line":17081,"column":55},"end":{"line":17081,"column":73}},"id":208},"209":{"loc":{"start":{"line":17086,"column":4},"end":{"line":17122,"column":9}},"id":209},"210":{"loc":{"start":{"line":17086,"column":4},"end":{"line":17122,"column":8}},"id":210},"211":{"loc":{"start":{"line":17087,"column":8},"end":{"line":17087,"column":21}},"id":211},"212":{"loc":{"start":{"line":17089,"column":8},"end":{"line":17093,"column":19}},"id":212},"213":{"loc":{"start":{"line":17095,"column":8},"end":{"line":17106,"column":11}},"id":213},"214":{"loc":{"start":{"line":17095,"column":8},"end":{"line":17106,"column":10}},"id":214},"215":{"loc":{"start":{"line":17095,"column":19},"end":{"line":17095,"column":25}},"id":215},"216":{"loc":{"start":{"line":17096,"column":12},"end":{"line":17105,"column":15}},"id":216},"217":{"loc":{"start":{"line":17096,"column":12},"end":{"line":17105,"column":14}},"id":217},"218":{"loc":{"start":{"line":17096,"column":23},"end":{"line":17096,"column":39}},"id":218},"219":{"loc":{"start":{"line":17097,"column":16},"end":{"line":17097,"column":27}},"id":219},"220":{"loc":{"start":{"line":17098,"column":16},"end":{"line":17098,"column":50}},"id":220},"221":{"loc":{"start":{"line":17100,"column":20},"end":{"line":17100,"column":46}},"id":221},"222":{"loc":{"start":{"line":17100,"column":20},"end":{"line":17100,"column":45}},"id":222},"223":{"loc":{"start":{"line":17102,"column":20},"end":{"line":17102,"column":38}},"id":223},"224":{"loc":{"start":{"line":17103,"column":20},"end":{"line":17103,"column":37}},"id":224},"225":{"loc":{"start":{"line":17103,"column":20},"end":{"line":17103,"column":36}},"id":225},"226":{"loc":{"start":{"line":17107,"column":8},"end":{"line":17107,"column":35}},"id":226},"227":{"loc":{"start":{"line":17107,"column":15},"end":{"line":17107,"column":34}},"id":227},"228":{"loc":{"start":{"line":17109,"column":8},"end":{"line":17110,"column":25}},"id":228},"229":{"loc":{"start":{"line":17109,"column":17},"end":{"line":17110,"column":24}},"id":229},"230":{"loc":{"start":{"line":17109,"column":17},"end":{"line":17110,"column":16}},"id":230},"231":{"loc":{"start":{"line":17109,"column":17},"end":{"line":17109,"column":69}},"id":231},"232":{"loc":{"start":{"line":17109,"column":17},"end":{"line":17109,"column":53}},"id":232},"233":{"loc":{"start":{"line":17109,"column":17},"end":{"line":17109,"column":35}},"id":233},"234":{"loc":{"start":{"line":17112,"column":12},"end":{"line":17112,"column":34}},"id":234},"235":{"loc":{"start":{"line":17112,"column":12},"end":{"line":17112,"column":33}},"id":235},"236":{"loc":{"start":{"line":17113,"column":12},"end":{"line":17117,"column":15}},"id":236},"237":{"loc":{"start":{"line":17113,"column":12},"end":{"line":17117,"column":14}},"id":237},"238":{"loc":{"start":{"line":17114,"column":16},"end":{"line":17116,"column":57}},"id":238},"239":{"loc":{"start":{"line":17114,"column":16},"end":{"line":17116,"column":56}},"id":239},"240":{"loc":{"start":{"line":17114,"column":30},"end":{"line":17116,"column":55}},"id":240},"241":{"loc":{"start":{"line":17114,"column":30},"end":{"line":17116,"column":38}},"id":241},"242":{"loc":{"start":{"line":17114,"column":30},"end":{"line":17115,"column":63}},"id":242},"243":{"loc":{"start":{"line":17114,"column":30},"end":{"line":17114,"column":65}},"id":243},"244":{"loc":{"start":{"line":17115,"column":20},"end":{"line":17115,"column":63}},"id":244},"245":{"loc":{"start":{"line":17115,"column":42},"end":{"line":17115,"column":48}},"id":245},"246":{"loc":{"start":{"line":17119,"column":12},"end":{"line":17119,"column":32}},"id":246},"247":{"loc":{"start":{"line":17119,"column":12},"end":{"line":17119,"column":31}},"id":247},"248":{"loc":{"start":{"line":17121,"column":8},"end":{"line":17121,"column":52}},"id":248},"249":{"loc":{"start":{"line":17121,"column":8},"end":{"line":17121,"column":51}},"id":249},"250":{"loc":{"start":{"line":17121,"column":45},"end":{"line":17121,"column":46}},"id":250},"251":{"loc":{"start":{"line":17121,"column":49},"end":{"line":17121,"column":50}},"id":251},"252":{"loc":{"start":{"line":17121,"column":21},"end":{"line":17121,"column":42}},"id":252}}}},"/Users/voloko/code/esprima/esprima.js":{"nodes":{"0":{"index":0,"count":1},"1":{"index":1,"count":1},"2":{"index":2,"count":1},"3":{"index":3,"count":1},"4":{"index":4,"count":1},"5":{"index":5,"count":1},"6":{"index":6,"count":1},"7":{"index":7,"count":1},"8":{"index":8,"count":1},"9":{"index":9,"count":1},"10":{"index":10,"count":1},"11":{"index":11,"count":1},"12":{"index":12,"count":1},"13":{"index":13,"count":1},"14":{"index":14,"count":1},"15":{"index":15,"count":1},"16":{"index":16,"count":1},"17":{"index":17,"count":1},"20":{"index":20,"count":948},"21":{"index":21,"count":948},"22":{"index":22,"count":1},"27":{"index":27,"count":4574},"28":{"index":28,"count":4574},"29":{"index":29,"count":4574},"30":{"index":30,"count":154},"31":{"index":31,"count":154},"32":{"index":32,"count":154},"33":{"index":33,"count":200},"34":{"index":34,"count":200},"35":{"index":35,"count":200},"36":{"index":36,"count":32804},"37":{"index":37,"count":32804},"38":{"index":38,"count":32804},"39":{"index":39,"count":32804},"40":{"index":40,"count":32804},"41":{"index":41,"count":32804},"42":{"index":42,"count":32804},"43":{"index":43,"count":28514},"44":{"index":44,"count":28514},"45":{"index":45,"count":28514},"46":{"index":46,"count":28514},"47":{"index":47,"count":28514},"48":{"index":48,"count":28514},"49":{"index":49,"count":28514},"50":{"index":50,"count":130},"51":{"index":51,"count":130},"52":{"index":52,"count":33292},"53":{"index":53,"count":33292},"54":{"index":54,"count":33292},"55":{"index":55,"count":33292},"56":{"index":56,"count":33292},"57":{"index":57,"count":33068},"58":{"index":58,"count":33026},"59":{"index":59,"count":33026},"60":{"index":60,"count":3388},"61":{"index":61,"count":3388},"62":{"index":62,"count":3388},"63":{"index":63,"count":3388},"64":{"index":64,"count":3388},"65":{"index":65,"count":3388},"66":{"index":66,"count":3388},"67":{"index":67,"count":3388},"68":{"index":68,"count":3388},"69":{"index":69,"count":3368},"70":{"index":70,"count":3368},"71":{"index":71,"count":3082},"72":{"index":72,"count":308},"73":{"index":73,"count":308},"74":{"index":74,"count":42},"75":{"index":75,"count":290},"76":{"index":76,"count":290},"77":{"index":77,"count":290},"78":{"index":78,"count":18},"79":{"index":79,"count":12014},"80":{"index":80,"count":12014},"81":{"index":81,"count":12014},"82":{"index":82,"count":12014},"83":{"index":83,"count":12014},"84":{"index":84,"count":12014},"85":{"index":85,"count":12014},"86":{"index":86,"count":12014},"87":{"index":87,"count":12014},"88":{"index":88,"count":11998},"89":{"index":89,"count":11974},"90":{"index":90,"count":11974},"91":{"index":91,"count":9074},"92":{"index":92,"count":2916},"93":{"index":93,"count":2916},"94":{"index":94,"count":90},"95":{"index":95,"count":2856},"96":{"index":96,"count":2856},"97":{"index":97,"count":330},"98":{"index":98,"count":2852},"99":{"index":99,"count":2852},"100":{"index":100,"count":2852},"101":{"index":101,"count":16},"102":{"index":102,"count":8},"103":{"index":103,"count":1046},"104":{"index":104,"count":92},"105":{"index":105,"count":406},"106":{"index":106,"count":482},"107":{"index":107,"count":482},"108":{"index":108,"count":482},"109":{"index":109,"count":396},"110":{"index":110,"count":2100},"111":{"index":111,"count":144},"112":{"index":112,"count":144},"113":{"index":113,"count":144},"114":{"index":114,"count":144},"115":{"index":115,"count":84},"116":{"index":116,"count":48},"117":{"index":117,"count":410},"118":{"index":118,"count":410},"119":{"index":119,"count":410},"120":{"index":120,"count":410},"121":{"index":121,"count":410},"122":{"index":122,"count":280},"123":{"index":123,"count":224},"124":{"index":124,"count":202},"125":{"index":125,"count":280},"126":{"index":126,"count":280},"127":{"index":127,"count":280},"128":{"index":128,"count":280},"129":{"index":129,"count":280},"130":{"index":130,"count":280},"131":{"index":131,"count":278},"132":{"index":132,"count":272},"133":{"index":133,"count":266},"134":{"index":134,"count":264},"135":{"index":135,"count":492},"136":{"index":136,"count":492},"137":{"index":137,"count":492},"138":{"index":138,"count":492},"139":{"index":139,"count":492},"140":{"index":140,"count":420},"141":{"index":141,"count":374},"142":{"index":142,"count":350},"143":{"index":143,"count":104},"144":{"index":144,"count":104},"145":{"index":145,"count":104},"146":{"index":146,"count":104},"147":{"index":147,"count":104},"148":{"index":148,"count":80},"149":{"index":149,"count":78},"150":{"index":150,"count":70},"151":{"index":151,"count":72},"152":{"index":152,"count":72},"153":{"index":153,"count":72},"154":{"index":154,"count":66},"155":{"index":155,"count":474},"156":{"index":156,"count":474},"157":{"index":157,"count":474},"158":{"index":158,"count":474},"159":{"index":159,"count":82},"160":{"index":160,"count":40},"161":{"index":161,"count":12},"162":{"index":162,"count":12},"163":{"index":163,"count":1042},"164":{"index":164,"count":22},"165":{"index":165,"count":34},"166":{"index":166,"count":1002},"167":{"index":167,"count":164},"168":{"index":168,"count":32},"169":{"index":169,"count":970},"170":{"index":170,"count":970},"171":{"index":171,"count":19150},"172":{"index":172,"count":19150},"173":{"index":173,"count":26824},"174":{"index":174,"count":26824},"175":{"index":175,"count":26824},"176":{"index":176,"count":31180},"177":{"index":177,"count":30178},"178":{"index":178,"count":232},"179":{"index":179,"count":232},"180":{"index":180,"count":232},"181":{"index":181,"count":30},"182":{"index":182,"count":30},"183":{"index":183,"count":30},"184":{"index":184,"count":4},"185":{"index":185,"count":2},"186":{"index":186,"count":2},"187":{"index":187,"count":30},"188":{"index":188,"count":30},"189":{"index":189,"count":30},"190":{"index":190,"count":696},"191":{"index":191,"count":52},"192":{"index":192,"count":52},"193":{"index":193,"count":6},"194":{"index":194,"count":6},"195":{"index":195,"count":2},"196":{"index":196,"count":2},"197":{"index":197,"count":52},"198":{"index":198,"count":52},"199":{"index":199,"count":52},"200":{"index":200,"count":52},"201":{"index":201,"count":52},"202":{"index":202,"count":52},"203":{"index":203,"count":2},"204":{"index":204,"count":2},"205":{"index":205,"count":644},"206":{"index":206,"count":644},"207":{"index":207,"count":644},"208":{"index":208,"count":8},"209":{"index":209,"count":8},"210":{"index":210,"count":636},"211":{"index":211,"count":38},"212":{"index":212,"count":38},"213":{"index":213,"count":38},"214":{"index":214,"count":38},"215":{"index":215,"count":38},"216":{"index":216,"count":29250},"217":{"index":217,"count":324},"218":{"index":218,"count":324},"219":{"index":219,"count":324},"220":{"index":220,"count":30},"221":{"index":221,"count":30},"222":{"index":222,"count":294},"223":{"index":223,"count":50},"224":{"index":224,"count":50},"225":{"index":225,"count":50},"226":{"index":226,"count":2},"227":{"index":227,"count":2},"228":{"index":228,"count":28926},"229":{"index":229,"count":3274},"230":{"index":230,"count":3274},"231":{"index":231,"count":25652},"232":{"index":232,"count":86},"233":{"index":233,"count":86},"234":{"index":234,"count":86},"235":{"index":235,"count":86},"236":{"index":236,"count":8},"237":{"index":237,"count":2},"238":{"index":238,"count":2},"239":{"index":239,"count":86},"240":{"index":240,"count":86},"241":{"index":241,"count":86},"242":{"index":242,"count":42},"243":{"index":243,"count":42},"244":{"index":244,"count":38},"245":{"index":245,"count":4},"246":{"index":246,"count":42},"247":{"index":247,"count":148},"248":{"index":248,"count":106},"249":{"index":249,"count":122},"250":{"index":250,"count":122},"251":{"index":251,"count":114},"252":{"index":252,"count":106},"253":{"index":253,"count":106},"254":{"index":254,"count":106},"255":{"index":255,"count":106},"256":{"index":256,"count":106},"257":{"index":257,"count":106},"258":{"index":258,"count":106},"259":{"index":259,"count":16},"260":{"index":260,"count":26},"261":{"index":261,"count":26},"262":{"index":262,"count":3084},"263":{"index":263,"count":3084},"264":{"index":264,"count":3084},"265":{"index":265,"count":12},"266":{"index":266,"count":3072},"267":{"index":267,"count":3072},"268":{"index":268,"count":20},"269":{"index":269,"count":20},"270":{"index":270,"count":20},"271":{"index":271,"count":8},"272":{"index":272,"count":12},"273":{"index":273,"count":12},"274":{"index":274,"count":12},"275":{"index":275,"count":12},"276":{"index":276,"count":12},"277":{"index":277,"count":10},"278":{"index":278,"count":10},"279":{"index":279,"count":6},"280":{"index":280,"count":8},"281":{"index":281,"count":2},"282":{"index":282,"count":2},"283":{"index":283,"count":2},"284":{"index":284,"count":3052},"285":{"index":285,"count":3052},"286":{"index":286,"count":12194},"287":{"index":287,"count":11984},"288":{"index":288,"count":11984},"289":{"index":289,"count":9150},"290":{"index":290,"count":16},"291":{"index":291,"count":16},"292":{"index":292,"count":16},"293":{"index":293,"count":4},"294":{"index":294,"count":12},"295":{"index":295,"count":12},"296":{"index":296,"count":12},"297":{"index":297,"count":12},"298":{"index":298,"count":12},"299":{"index":299,"count":10},"300":{"index":300,"count":10},"301":{"index":301,"count":6},"302":{"index":302,"count":8},"303":{"index":303,"count":2},"304":{"index":304,"count":2},"305":{"index":305,"count":2},"306":{"index":306,"count":9134},"307":{"index":307,"count":9134},"308":{"index":308,"count":3044},"309":{"index":309,"count":944},"310":{"index":310,"count":2100},"311":{"index":311,"count":1134},"312":{"index":312,"count":966},"313":{"index":313,"count":19},"314":{"index":314,"count":947},"315":{"index":315,"count":947},"316":{"index":316,"count":859},"317":{"index":317,"count":120},"318":{"index":318,"count":827},"319":{"index":319,"count":8170},"320":{"index":320,"count":8170},"321":{"index":321,"count":8170},"322":{"index":322,"count":8170},"323":{"index":323,"count":7658},"324":{"index":324,"count":6934},"325":{"index":325,"count":1628},"326":{"index":326,"count":1628},"327":{"index":327,"count":1628},"328":{"index":328,"count":6542},"329":{"index":329,"count":6542},"330":{"index":330,"count":6542},"331":{"index":331,"count":6396},"332":{"index":332,"count":5478},"333":{"index":333,"count":1786},"334":{"index":334,"count":1786},"335":{"index":335,"count":1786},"336":{"index":336,"count":4756},"337":{"index":337,"count":4756},"338":{"index":338,"count":4756},"339":{"index":339,"count":4756},"340":{"index":340,"count":52},"341":{"index":341,"count":50},"342":{"index":342,"count":50},"343":{"index":343,"count":4706},"344":{"index":344,"count":4706},"345":{"index":345,"count":4706},"346":{"index":346,"count":4706},"347":{"index":347,"count":4706},"348":{"index":348,"count":4706},"349":{"index":349,"count":4706},"350":{"index":350,"count":12},"351":{"index":351,"count":8},"352":{"index":352,"count":4},"353":{"index":353,"count":2},"354":{"index":354,"count":2},"355":{"index":355,"count":4704},"356":{"index":356,"count":4704},"357":{"index":357,"count":4704},"358":{"index":358,"count":232},"359":{"index":359,"count":4},"360":{"index":360,"count":2},"361":{"index":361,"count":2},"362":{"index":362,"count":4702},"363":{"index":363,"count":4702},"364":{"index":364,"count":4702},"365":{"index":365,"count":6},"366":{"index":366,"count":4},"367":{"index":367,"count":2},"368":{"index":368,"count":2},"369":{"index":369,"count":4700},"370":{"index":370,"count":4700},"371":{"index":371,"count":4700},"372":{"index":372,"count":10},"373":{"index":373,"count":6},"374":{"index":374,"count":2},"375":{"index":375,"count":2},"376":{"index":376,"count":4698},"377":{"index":377,"count":4698},"378":{"index":378,"count":4698},"379":{"index":379,"count":22},"380":{"index":380,"count":8},"381":{"index":381,"count":2},"382":{"index":382,"count":2},"383":{"index":383,"count":4696},"384":{"index":384,"count":4696},"385":{"index":385,"count":4696},"386":{"index":386,"count":8},"387":{"index":387,"count":4},"388":{"index":388,"count":2},"389":{"index":389,"count":2},"390":{"index":390,"count":4694},"391":{"index":391,"count":28},"392":{"index":392,"count":28},"393":{"index":393,"count":26},"394":{"index":394,"count":26},"395":{"index":395,"count":26},"396":{"index":396,"count":4668},"397":{"index":397,"count":4668},"398":{"index":398,"count":124},"399":{"index":399,"count":124},"400":{"index":400,"count":116},"401":{"index":401,"count":116},"402":{"index":402,"count":116},"403":{"index":403,"count":116},"404":{"index":404,"count":116},"405":{"index":405,"count":4552},"406":{"index":406,"count":4552},"407":{"index":407,"count":688},"408":{"index":408,"count":688},"409":{"index":409,"count":416},"410":{"index":410,"count":416},"411":{"index":411,"count":416},"412":{"index":412,"count":416},"413":{"index":413,"count":416},"414":{"index":414,"count":416},"415":{"index":415,"count":2},"416":{"index":416,"count":416},"417":{"index":417,"count":416},"418":{"index":418,"count":416},"419":{"index":419,"count":414},"420":{"index":420,"count":414},"421":{"index":421,"count":414},"422":{"index":422,"count":414},"423":{"index":423,"count":70},"424":{"index":424,"count":70},"425":{"index":425,"count":52},"426":{"index":426,"count":22},"427":{"index":427,"count":22},"428":{"index":428,"count":58},"429":{"index":429,"count":40},"430":{"index":430,"count":40},"431":{"index":431,"count":36},"432":{"index":432,"count":36},"433":{"index":433,"count":22},"434":{"index":434,"count":4},"435":{"index":435,"count":4},"436":{"index":436,"count":18},"437":{"index":437,"count":4},"438":{"index":438,"count":4},"439":{"index":439,"count":4},"440":{"index":440,"count":4},"441":{"index":441,"count":14},"442":{"index":442,"count":14},"443":{"index":443,"count":48},"444":{"index":444,"count":24},"445":{"index":445,"count":24},"446":{"index":446,"count":40},"447":{"index":447,"count":34},"448":{"index":448,"count":34},"449":{"index":449,"count":16},"450":{"index":450,"count":16},"451":{"index":451,"count":24},"452":{"index":452,"count":18},"453":{"index":453,"count":18},"454":{"index":454,"count":18},"455":{"index":455,"count":14},"456":{"index":456,"count":8},"457":{"index":457,"count":8},"458":{"index":458,"count":16},"459":{"index":459,"count":16},"460":{"index":460,"count":24},"461":{"index":461,"count":4},"462":{"index":462,"count":4},"463":{"index":463,"count":564},"464":{"index":464,"count":488},"465":{"index":465,"count":488},"466":{"index":466,"count":200},"467":{"index":467,"count":200},"468":{"index":468,"count":366},"469":{"index":469,"count":8},"470":{"index":470,"count":8},"471":{"index":471,"count":56},"472":{"index":472,"count":52},"473":{"index":473,"count":52},"474":{"index":474,"count":48},"475":{"index":475,"count":48},"476":{"index":476,"count":366},"477":{"index":477,"count":366},"478":{"index":478,"count":344},"479":{"index":479,"count":22},"480":{"index":480,"count":22},"481":{"index":481,"count":22},"482":{"index":482,"count":22},"483":{"index":483,"count":22},"484":{"index":484,"count":14},"485":{"index":485,"count":14},"486":{"index":486,"count":14},"487":{"index":487,"count":22},"488":{"index":488,"count":22},"489":{"index":489,"count":6},"490":{"index":490,"count":6},"491":{"index":491,"count":14},"492":{"index":492,"count":8},"493":{"index":493,"count":8},"494":{"index":494,"count":8},"495":{"index":495,"count":8},"496":{"index":496,"count":16},"497":{"index":497,"count":16},"498":{"index":498,"count":16},"499":{"index":499,"count":12},"500":{"index":500,"count":16},"501":{"index":501,"count":16},"502":{"index":502,"count":350},"503":{"index":503,"count":264},"504":{"index":504,"count":264},"505":{"index":505,"count":16},"506":{"index":506,"count":16},"507":{"index":507,"count":334},"508":{"index":508,"count":334},"509":{"index":509,"count":364},"510":{"index":510,"count":364},"511":{"index":511,"count":364},"512":{"index":512,"count":364},"513":{"index":513,"count":364},"514":{"index":514,"count":364},"515":{"index":515,"count":200},"516":{"index":516,"count":364},"517":{"index":517,"count":364},"518":{"index":518,"count":364},"519":{"index":519,"count":3744},"520":{"index":520,"count":3736},"521":{"index":521,"count":3736},"522":{"index":522,"count":3736},"523":{"index":523,"count":348},"524":{"index":524,"count":3388},"525":{"index":525,"count":90},"526":{"index":526,"count":90},"527":{"index":527,"count":90},"528":{"index":528,"count":4},"529":{"index":529,"count":2},"530":{"index":530,"count":2},"531":{"index":531,"count":12},"532":{"index":532,"count":12},"533":{"index":533,"count":12},"534":{"index":534,"count":4},"535":{"index":535,"count":8},"536":{"index":536,"count":8},"537":{"index":537,"count":2},"538":{"index":538,"count":2},"539":{"index":539,"count":2},"540":{"index":540,"count":60},"541":{"index":541,"count":48},"542":{"index":542,"count":48},"543":{"index":543,"count":48},"544":{"index":544,"count":38},"545":{"index":545,"count":48},"546":{"index":546,"count":48},"547":{"index":547,"count":48},"548":{"index":548,"count":14},"549":{"index":549,"count":14},"550":{"index":550,"count":14},"551":{"index":551,"count":14},"552":{"index":552,"count":14},"553":{"index":553,"count":14},"554":{"index":554,"count":14},"555":{"index":555,"count":14},"556":{"index":556,"count":14},"557":{"index":557,"count":14},"558":{"index":558,"count":10},"559":{"index":559,"count":10},"560":{"index":560,"count":8},"561":{"index":561,"count":8},"562":{"index":562,"count":8},"563":{"index":563,"count":8},"564":{"index":564,"count":8},"565":{"index":565,"count":48},"566":{"index":566,"count":48},"567":{"index":567,"count":12},"568":{"index":568,"count":4},"569":{"index":569,"count":4},"570":{"index":570,"count":4},"571":{"index":571,"count":4},"572":{"index":572,"count":2},"573":{"index":573,"count":2},"574":{"index":574,"count":2},"575":{"index":575,"count":3298},"576":{"index":576,"count":3290},"577":{"index":577,"count":364},"578":{"index":578,"count":16},"579":{"index":579,"count":16},"580":{"index":580,"count":348},"581":{"index":581,"count":32},"582":{"index":582,"count":32},"583":{"index":583,"count":32},"584":{"index":584,"count":32},"585":{"index":585,"count":32},"586":{"index":586,"count":32},"587":{"index":587,"count":32},"588":{"index":588,"count":32},"589":{"index":589,"count":32},"590":{"index":590,"count":32},"591":{"index":591,"count":32},"592":{"index":592,"count":144},"593":{"index":593,"count":140},"594":{"index":594,"count":140},"595":{"index":595,"count":140},"596":{"index":596,"count":64},"597":{"index":597,"count":14},"598":{"index":598,"count":76},"599":{"index":599,"count":6},"600":{"index":600,"count":6},"601":{"index":601,"count":6},"602":{"index":602,"count":4},"603":{"index":603,"count":4},"604":{"index":604,"count":2},"605":{"index":605,"count":70},"606":{"index":606,"count":50},"607":{"index":607,"count":14},"608":{"index":608,"count":36},"609":{"index":609,"count":4},"610":{"index":610,"count":4},"611":{"index":611,"count":24},"612":{"index":612,"count":4},"613":{"index":613,"count":4},"614":{"index":614,"count":20},"615":{"index":615,"count":20},"616":{"index":616,"count":20},"617":{"index":617,"count":20},"618":{"index":618,"count":44},"619":{"index":619,"count":24},"620":{"index":620,"count":24},"621":{"index":621,"count":24},"622":{"index":622,"count":24},"623":{"index":623,"count":24},"624":{"index":624,"count":24},"625":{"index":625,"count":8},"626":{"index":626,"count":8},"627":{"index":627,"count":8},"628":{"index":628,"count":6},"629":{"index":629,"count":6},"630":{"index":630,"count":6},"631":{"index":631,"count":6},"632":{"index":632,"count":6},"633":{"index":633,"count":2},"634":{"index":634,"count":2},"635":{"index":635,"count":10},"636":{"index":636,"count":8},"637":{"index":637,"count":8},"638":{"index":638,"count":4},"639":{"index":639,"count":4},"640":{"index":640,"count":4},"641":{"index":641,"count":2},"642":{"index":642,"count":16},"643":{"index":643,"count":16},"644":{"index":644,"count":20},"645":{"index":645,"count":8},"646":{"index":646,"count":8},"647":{"index":647,"count":12},"648":{"index":648,"count":42},"649":{"index":649,"count":42},"650":{"index":650,"count":42},"651":{"index":651,"count":42},"652":{"index":652,"count":42},"653":{"index":653,"count":12},"654":{"index":654,"count":10},"655":{"index":655,"count":6},"656":{"index":656,"count":8776},"657":{"index":657,"count":8776},"658":{"index":658,"count":8776},"659":{"index":659,"count":8752},"660":{"index":660,"count":582},"661":{"index":661,"count":8170},"662":{"index":662,"count":8170},"663":{"index":663,"count":8170},"664":{"index":664,"count":4306},"665":{"index":665,"count":3864},"666":{"index":666,"count":3864},"667":{"index":667,"count":3864},"668":{"index":668,"count":3700},"669":{"index":669,"count":364},"670":{"index":670,"count":364},"671":{"index":671,"count":3500},"672":{"index":672,"count":3500},"673":{"index":673,"count":3498},"674":{"index":674,"count":416},"675":{"index":675,"count":416},"676":{"index":676,"count":3084},"677":{"index":677,"count":3084},"678":{"index":678,"count":3084},"679":{"index":679,"count":3044},"680":{"index":680,"count":40},"681":{"index":681,"count":40},"682":{"index":682,"count":7910},"683":{"index":683,"count":6416},"684":{"index":684,"count":6416},"685":{"index":685,"count":6416},"686":{"index":686,"count":6416},"687":{"index":687,"count":6416},"688":{"index":688,"count":6416},"689":{"index":689,"count":1494},"690":{"index":690,"count":1494},"691":{"index":691,"count":1494},"692":{"index":692,"count":87829},"693":{"index":693,"count":87829},"694":{"index":694,"count":80547},"695":{"index":695,"count":7282},"696":{"index":696,"count":7282},"697":{"index":697,"count":7282},"698":{"index":698,"count":7282},"699":{"index":699,"count":7282},"700":{"index":700,"count":7150},"701":{"index":701,"count":7150},"702":{"index":702,"count":7150},"703":{"index":703,"count":7150},"704":{"index":704,"count":160},"705":{"index":705,"count":160},"706":{"index":706,"count":160},"707":{"index":707,"count":160},"708":{"index":708,"count":160},"709":{"index":709,"count":160},"710":{"index":710,"count":160},"711":{"index":711,"count":160},"712":{"index":712,"count":160},"713":{"index":713,"count":160},"714":{"index":714,"count":160},"715":{"index":715,"count":160},"716":{"index":716,"count":794},"717":{"index":717,"count":794},"718":{"index":718,"count":794},"719":{"index":719,"count":312},"720":{"index":720,"count":312},"721":{"index":721,"count":794},"722":{"index":722,"count":426},"723":{"index":723,"count":426},"724":{"index":724,"count":426},"725":{"index":725,"count":426},"726":{"index":726,"count":426},"727":{"index":727,"count":426},"728":{"index":728,"count":426},"729":{"index":729,"count":426},"730":{"index":730,"count":426},"731":{"index":731,"count":368},"732":{"index":732,"count":368},"733":{"index":733,"count":368},"734":{"index":734,"count":368},"735":{"index":735,"count":368},"736":{"index":736,"count":368},"737":{"index":737,"count":368},"738":{"index":738,"count":368},"739":{"index":739,"count":368},"740":{"index":740,"count":794},"741":{"index":741,"count":66},"742":{"index":742,"count":66},"743":{"index":743,"count":66},"744":{"index":744,"count":18},"745":{"index":745,"count":18},"746":{"index":746,"count":48},"747":{"index":747,"count":284},"748":{"index":748,"count":284},"749":{"index":749,"count":60},"750":{"index":750,"count":60},"751":{"index":751,"count":224},"752":{"index":752,"count":16},"753":{"index":753,"count":16},"754":{"index":754,"count":208},"755":{"index":755,"count":4},"756":{"index":756,"count":4},"757":{"index":757,"count":204},"758":{"index":758,"count":4},"759":{"index":759,"count":4},"760":{"index":760,"count":200},"761":{"index":761,"count":84},"762":{"index":762,"count":4},"763":{"index":763,"count":4},"764":{"index":764,"count":80},"765":{"index":765,"count":40},"766":{"index":766,"count":40},"767":{"index":767,"count":40},"768":{"index":768,"count":40},"769":{"index":769,"count":40},"770":{"index":770,"count":116},"771":{"index":771,"count":116},"772":{"index":772,"count":2926},"773":{"index":773,"count":2926},"774":{"index":774,"count":2926},"775":{"index":775,"count":2926},"776":{"index":776,"count":2910},"777":{"index":777,"count":48},"778":{"index":778,"count":48},"779":{"index":779,"count":958},"780":{"index":780,"count":958},"781":{"index":781,"count":958},"782":{"index":782,"count":958},"783":{"index":783,"count":954},"784":{"index":784,"count":4},"785":{"index":785,"count":4},"786":{"index":786,"count":64049},"787":{"index":787,"count":64049},"788":{"index":788,"count":64045},"789":{"index":789,"count":64045},"790":{"index":790,"count":64045},"791":{"index":791,"count":38256},"792":{"index":792,"count":12726},"793":{"index":793,"count":12726},"794":{"index":794,"count":12726},"795":{"index":795,"count":12726},"796":{"index":796,"count":12726},"797":{"index":797,"count":956},"798":{"index":798,"count":1578},"799":{"index":799,"count":1578},"800":{"index":800,"count":1578},"801":{"index":801,"count":520},"802":{"index":802,"count":1058},"803":{"index":803,"count":1058},"804":{"index":804,"count":1058},"805":{"index":805,"count":1058},"806":{"index":806,"count":1058},"807":{"index":807,"count":1058},"808":{"index":808,"count":1058},"809":{"index":809,"count":1058},"810":{"index":810,"count":1058},"811":{"index":811,"count":1058},"812":{"index":812,"count":1058},"813":{"index":813,"count":1058},"814":{"index":814,"count":1058},"815":{"index":815,"count":920},"816":{"index":816,"count":918},"817":{"index":817,"count":916},"818":{"index":818,"count":914},"819":{"index":819,"count":912},"820":{"index":820,"count":910},"821":{"index":821,"count":908},"822":{"index":822,"count":906},"823":{"index":823,"count":904},"824":{"index":824,"count":902},"825":{"index":825,"count":900},"826":{"index":826,"count":996},"827":{"index":827,"count":996},"828":{"index":828,"count":392},"829":{"index":829,"count":392},"830":{"index":830,"count":392},"831":{"index":831,"count":604},"832":{"index":832,"count":604},"833":{"index":833,"count":604},"834":{"index":834,"count":604},"835":{"index":835,"count":18},"836":{"index":836,"count":586},"837":{"index":837,"count":2},"838":{"index":838,"count":2},"839":{"index":839,"count":2},"840":{"index":840,"count":584},"841":{"index":841,"count":584},"842":{"index":842,"count":584},"843":{"index":843,"count":584},"844":{"index":844,"count":104},"845":{"index":845,"count":28},"846":{"index":846,"count":28},"847":{"index":847,"count":556},"848":{"index":848,"count":186},"849":{"index":849,"count":44},"850":{"index":850,"count":36},"851":{"index":851,"count":36},"852":{"index":852,"count":36},"853":{"index":853,"count":64},"854":{"index":854,"count":36},"855":{"index":855,"count":10},"856":{"index":856,"count":10},"857":{"index":857,"count":10},"858":{"index":858,"count":10},"859":{"index":859,"count":26},"860":{"index":860,"count":26},"861":{"index":861,"count":26},"862":{"index":862,"count":18},"863":{"index":863,"count":14},"864":{"index":864,"count":14},"865":{"index":865,"count":28},"866":{"index":866,"count":28},"867":{"index":867,"count":28},"868":{"index":868,"count":70},"869":{"index":869,"count":70},"870":{"index":870,"count":70},"871":{"index":871,"count":70},"872":{"index":872,"count":70},"873":{"index":873,"count":70},"874":{"index":874,"count":8},"875":{"index":875,"count":8},"876":{"index":876,"count":8},"877":{"index":877,"count":62},"878":{"index":878,"count":62},"879":{"index":879,"count":250},"880":{"index":880,"count":250},"881":{"index":881,"count":250},"882":{"index":882,"count":250},"883":{"index":883,"count":240},"884":{"index":884,"count":18},"885":{"index":885,"count":8},"886":{"index":886,"count":8},"887":{"index":887,"count":10},"888":{"index":888,"count":10},"889":{"index":889,"count":232},"890":{"index":890,"count":184},"891":{"index":891,"count":184},"892":{"index":892,"count":184},"893":{"index":893,"count":184},"894":{"index":894,"count":158},"895":{"index":895,"count":158},"896":{"index":896,"count":158},"897":{"index":897,"count":158},"898":{"index":898,"count":38},"899":{"index":899,"count":32},"900":{"index":900,"count":32},"901":{"index":901,"count":32},"902":{"index":902,"count":32},"903":{"index":903,"count":32},"904":{"index":904,"count":32},"905":{"index":905,"count":32},"906":{"index":906,"count":32},"907":{"index":907,"count":126},"908":{"index":908,"count":126},"909":{"index":909,"count":56},"910":{"index":910,"count":42},"911":{"index":911,"count":42},"912":{"index":912,"count":42},"913":{"index":913,"count":42},"914":{"index":914,"count":42},"915":{"index":915,"count":42},"916":{"index":916,"count":42},"917":{"index":917,"count":4},"918":{"index":918,"count":4},"919":{"index":919,"count":4},"920":{"index":920,"count":38},"921":{"index":921,"count":38},"922":{"index":922,"count":38},"923":{"index":923,"count":38},"924":{"index":924,"count":38},"925":{"index":925,"count":38},"926":{"index":926,"count":84},"927":{"index":927,"count":84},"928":{"index":928,"count":84},"929":{"index":929,"count":84},"930":{"index":930,"count":26},"931":{"index":931,"count":26},"932":{"index":932,"count":18},"933":{"index":933,"count":8},"934":{"index":934,"count":8},"935":{"index":935,"count":18},"936":{"index":936,"count":18},"937":{"index":937,"count":10},"938":{"index":938,"count":10},"939":{"index":939,"count":10},"940":{"index":940,"count":10},"941":{"index":941,"count":148},"942":{"index":942,"count":148},"943":{"index":943,"count":148},"944":{"index":944,"count":244},"945":{"index":945,"count":184},"946":{"index":946,"count":184},"947":{"index":947,"count":144},"948":{"index":948,"count":134},"949":{"index":949,"count":10},"950":{"index":950,"count":10},"951":{"index":951,"count":144},"952":{"index":952,"count":82},"953":{"index":953,"count":62},"954":{"index":954,"count":144},"955":{"index":955,"count":32},"956":{"index":956,"count":30},"957":{"index":957,"count":62},"958":{"index":958,"count":144},"959":{"index":959,"count":36},"960":{"index":960,"count":20},"961":{"index":961,"count":10},"962":{"index":962,"count":10},"963":{"index":963,"count":10},"964":{"index":964,"count":10},"965":{"index":965,"count":8},"966":{"index":966,"count":8},"967":{"index":967,"count":16},"968":{"index":968,"count":8},"969":{"index":969,"count":8},"970":{"index":970,"count":8},"971":{"index":971,"count":8},"972":{"index":972,"count":8},"973":{"index":973,"count":4},"974":{"index":974,"count":108},"975":{"index":975,"count":112},"976":{"index":976,"count":112},"977":{"index":977,"count":112},"978":{"index":978,"count":60},"979":{"index":979,"count":60},"980":{"index":980,"count":60},"981":{"index":981,"count":60},"982":{"index":982,"count":60},"983":{"index":983,"count":2246},"984":{"index":984,"count":2246},"985":{"index":985,"count":2246},"986":{"index":986,"count":903},"987":{"index":987,"count":903},"988":{"index":988,"count":1343},"989":{"index":989,"count":1343},"990":{"index":990,"count":1009},"991":{"index":991,"count":674},"992":{"index":992,"count":14},"993":{"index":993,"count":14},"994":{"index":994,"count":662},"995":{"index":995,"count":662},"996":{"index":996,"count":662},"997":{"index":997,"count":669},"998":{"index":998,"count":116},"999":{"index":999,"count":2},"1000":{"index":1000,"count":2},"1001":{"index":1001,"count":2},"1002":{"index":1002,"count":114},"1003":{"index":1003,"count":102},"1004":{"index":1004,"count":102},"1005":{"index":1005,"count":565},"1006":{"index":1006,"count":88},"1007":{"index":1007,"count":88},"1008":{"index":1008,"count":88},"1009":{"index":1009,"count":88},"1010":{"index":1010,"count":88},"1011":{"index":1011,"count":88},"1012":{"index":1012,"count":477},"1013":{"index":1013,"count":3},"1014":{"index":1014,"count":3},"1015":{"index":1015,"count":3},"1016":{"index":1016,"count":3},"1017":{"index":1017,"count":3},"1018":{"index":1018,"count":474},"1019":{"index":1019,"count":36},"1020":{"index":1020,"count":36},"1021":{"index":1021,"count":438},"1022":{"index":1022,"count":148},"1023":{"index":1023,"count":148},"1024":{"index":1024,"count":290},"1025":{"index":1025,"count":178},"1026":{"index":1026,"count":178},"1027":{"index":1027,"count":178},"1028":{"index":1028,"count":178},"1029":{"index":1029,"count":38},"1030":{"index":1030,"count":38},"1031":{"index":1031,"count":38},"1032":{"index":1032,"count":112},"1033":{"index":1033,"count":112},"1034":{"index":1034,"count":82},"1035":{"index":1035,"count":32},"1036":{"index":1036,"count":32},"1037":{"index":1037,"count":32},"1038":{"index":1038,"count":80},"1039":{"index":1039,"count":80},"1040":{"index":1040,"count":80},"1041":{"index":1041,"count":110},"1042":{"index":1042,"count":110},"1043":{"index":1043,"count":110},"1044":{"index":1044,"count":110},"1045":{"index":1045,"count":56},"1046":{"index":1046,"count":56},"1047":{"index":1047,"count":56},"1048":{"index":1048,"count":56},"1049":{"index":1049,"count":52},"1050":{"index":1050,"count":10},"1051":{"index":1051,"count":10},"1052":{"index":1052,"count":106},"1053":{"index":1053,"count":106},"1054":{"index":1054,"count":106},"1055":{"index":1055,"count":42},"1056":{"index":1056,"count":42},"1057":{"index":1057,"count":42},"1058":{"index":1058,"count":4},"1059":{"index":1059,"count":4},"1060":{"index":1060,"count":38},"1061":{"index":1061,"count":42},"1062":{"index":1062,"count":42},"1063":{"index":1063,"count":8},"1064":{"index":1064,"count":8},"1065":{"index":1065,"count":8},"1066":{"index":1066,"count":8},"1067":{"index":1067,"count":8},"1068":{"index":1068,"count":8},"1069":{"index":1069,"count":8},"1070":{"index":1070,"count":8},"1071":{"index":1071,"count":8},"1072":{"index":1072,"count":98},"1073":{"index":1073,"count":98},"1074":{"index":1074,"count":22},"1075":{"index":1075,"count":22},"1076":{"index":1076,"count":22},"1077":{"index":1077,"count":22},"1078":{"index":1078,"count":22},"1079":{"index":1079,"count":22},"1080":{"index":1080,"count":12},"1081":{"index":1081,"count":12},"1082":{"index":1082,"count":22},"1083":{"index":1083,"count":2246},"1084":{"index":1084,"count":2246},"1085":{"index":1085,"count":2246},"1086":{"index":1086,"count":2246},"1087":{"index":1087,"count":18},"1088":{"index":1088,"count":2228},"1089":{"index":1089,"count":18},"1090":{"index":1090,"count":2228},"1091":{"index":1091,"count":1966},"1092":{"index":1092,"count":1516},"1093":{"index":1093,"count":40},"1094":{"index":1094,"count":40},"1095":{"index":1095,"count":40},"1096":{"index":1096,"count":40},"1097":{"index":1097,"count":1476},"1098":{"index":1098,"count":6},"1099":{"index":1099,"count":6},"1100":{"index":1100,"count":1470},"1101":{"index":1101,"count":98},"1102":{"index":1102,"count":98},"1103":{"index":1103,"count":1822},"1104":{"index":1104,"count":22},"1105":{"index":1105,"count":22},"1106":{"index":1106,"count":22},"1107":{"index":1107,"count":22},"1108":{"index":1108,"count":4},"1109":{"index":1109,"count":18},"1110":{"index":1110,"count":4},"1111":{"index":1111,"count":18},"1112":{"index":1112,"count":26},"1113":{"index":1113,"count":16},"1114":{"index":1114,"count":2},"1115":{"index":1115,"count":2},"1116":{"index":1116,"count":2},"1117":{"index":1117,"count":2},"1118":{"index":1118,"count":14},"1119":{"index":1119,"count":2},"1120":{"index":1120,"count":2},"1121":{"index":1121,"count":22},"1122":{"index":1122,"count":2246},"1123":{"index":1123,"count":2246},"1124":{"index":1124,"count":1822},"1125":{"index":1125,"count":1822},"1126":{"index":1126,"count":1822},"1127":{"index":1127,"count":1794},"1128":{"index":1128,"count":52},"1129":{"index":1129,"count":48},"1130":{"index":1130,"count":48},"1131":{"index":1131,"count":16},"1132":{"index":1132,"count":16},"1133":{"index":1133,"count":16},"1134":{"index":1134,"count":16},"1135":{"index":1135,"count":32},"1136":{"index":1136,"count":8},"1137":{"index":1137,"count":8},"1138":{"index":1138,"count":24},"1139":{"index":1139,"count":24},"1140":{"index":1140,"count":1798},"1141":{"index":1141,"count":2318},"1142":{"index":1142,"count":2318},"1143":{"index":1143,"count":2318},"1144":{"index":1144,"count":2294},"1145":{"index":1145,"count":40},"1146":{"index":1146,"count":40},"1147":{"index":1147,"count":40},"1148":{"index":1148,"count":40},"1149":{"index":1149,"count":40},"1150":{"index":1150,"count":40},"1151":{"index":1151,"count":16},"1152":{"index":1152,"count":16},"1153":{"index":1153,"count":16},"1154":{"index":1154,"count":16},"1155":{"index":1155,"count":24},"1156":{"index":1156,"count":8},"1157":{"index":1157,"count":8},"1158":{"index":1158,"count":16},"1159":{"index":1159,"count":16},"1160":{"index":1160,"count":2274},"1161":{"index":1161,"count":2274},"1162":{"index":1162,"count":2274},"1163":{"index":1163,"count":2274},"1164":{"index":1164,"count":2264},"1165":{"index":1165,"count":2262},"1166":{"index":1166,"count":2260},"1167":{"index":1167,"count":16},"1168":{"index":1168,"count":16},"1169":{"index":1169,"count":16},"1170":{"index":1170,"count":16},"1171":{"index":1171,"count":2258},"1172":{"index":1172,"count":2258},"1173":{"index":1173,"count":2258},"1174":{"index":1174,"count":2250},"1175":{"index":1175,"count":2248},"1176":{"index":1176,"count":12},"1177":{"index":1177,"count":12},"1178":{"index":1178,"count":12},"1179":{"index":1179,"count":12},"1180":{"index":1180,"count":12},"1181":{"index":1181,"count":6},"1182":{"index":1182,"count":6},"1183":{"index":1183,"count":6},"1184":{"index":1184,"count":6},"1185":{"index":1185,"count":8},"1186":{"index":1186,"count":2246},"1187":{"index":1187,"count":2246},"1188":{"index":1188,"count":2216},"1189":{"index":1189,"count":2216},"1190":{"index":1190,"count":1770},"1191":{"index":1191,"count":1770},"1192":{"index":1192,"count":1770},"1193":{"index":1193,"count":1750},"1194":{"index":1194,"count":1744},"1195":{"index":1195,"count":34},"1196":{"index":1196,"count":34},"1197":{"index":1197,"count":34},"1198":{"index":1198,"count":1736},"1199":{"index":1199,"count":2156},"1200":{"index":1200,"count":2156},"1201":{"index":1201,"count":1736},"1202":{"index":1202,"count":1736},"1203":{"index":1203,"count":1688},"1204":{"index":1204,"count":60},"1205":{"index":1205,"count":60},"1206":{"index":1206,"count":60},"1207":{"index":1207,"count":1676},"1208":{"index":1208,"count":2146},"1209":{"index":1209,"count":2146},"1210":{"index":1210,"count":1676},"1211":{"index":1211,"count":1676},"1212":{"index":1212,"count":1676},"1213":{"index":1213,"count":1670},"1214":{"index":1214,"count":1668},"1215":{"index":1215,"count":10},"1216":{"index":1216,"count":10},"1217":{"index":1217,"count":10},"1218":{"index":1218,"count":1666},"1219":{"index":1219,"count":2146},"1220":{"index":1220,"count":2146},"1221":{"index":1221,"count":2146},"1222":{"index":1222,"count":2146},"1223":{"index":1223,"count":2146},"1224":{"index":1224,"count":1666},"1225":{"index":1225,"count":1666},"1226":{"index":1226,"count":1666},"1227":{"index":1227,"count":1666},"1228":{"index":1228,"count":1666},"1229":{"index":1229,"count":1654},"1230":{"index":1230,"count":1652},"1231":{"index":1231,"count":1650},"1232":{"index":1232,"count":18},"1233":{"index":1233,"count":18},"1234":{"index":1234,"count":18},"1235":{"index":1235,"count":1648},"1236":{"index":1236,"count":1600},"1237":{"index":1237,"count":8},"1238":{"index":1238,"count":8},"1239":{"index":1239,"count":8},"1240":{"index":1240,"count":8},"1241":{"index":1241,"count":1640},"1242":{"index":1242,"count":2},"1243":{"index":1243,"count":2},"1244":{"index":1244,"count":2},"1245":{"index":1245,"count":2},"1246":{"index":1246,"count":1666},"1247":{"index":1247,"count":2110},"1248":{"index":1248,"count":2110},"1249":{"index":1249,"count":1638},"1250":{"index":1250,"count":1638},"1251":{"index":1251,"count":1638},"1252":{"index":1252,"count":1638},"1253":{"index":1253,"count":1636},"1254":{"index":1254,"count":1634},"1255":{"index":1255,"count":1632},"1256":{"index":1256,"count":8},"1257":{"index":1257,"count":8},"1258":{"index":1258,"count":8},"1259":{"index":1259,"count":1630},"1260":{"index":1260,"count":2100},"1261":{"index":1261,"count":2100},"1262":{"index":1262,"count":1630},"1263":{"index":1263,"count":10},"1264":{"index":1264,"count":10},"1265":{"index":1265,"count":10},"1266":{"index":1266,"count":10},"1267":{"index":1267,"count":1620},"1268":{"index":1268,"count":2090},"1269":{"index":1269,"count":2090},"1270":{"index":1270,"count":1620},"1271":{"index":1271,"count":10},"1272":{"index":1272,"count":10},"1273":{"index":1273,"count":10},"1274":{"index":1274,"count":10},"1275":{"index":1275,"count":1610},"1276":{"index":1276,"count":2078},"1277":{"index":1277,"count":2078},"1278":{"index":1278,"count":1610},"1279":{"index":1279,"count":12},"1280":{"index":1280,"count":12},"1281":{"index":1281,"count":12},"1282":{"index":1282,"count":12},"1283":{"index":1283,"count":1598},"1284":{"index":1284,"count":2068},"1285":{"index":1285,"count":2068},"1286":{"index":1286,"count":1598},"1287":{"index":1287,"count":10},"1288":{"index":1288,"count":10},"1289":{"index":1289,"count":10},"1290":{"index":1290,"count":10},"1291":{"index":1291,"count":1588},"1292":{"index":1292,"count":2058},"1293":{"index":1293,"count":2058},"1294":{"index":1294,"count":1588},"1295":{"index":1295,"count":10},"1296":{"index":1296,"count":10},"1297":{"index":1297,"count":10},"1298":{"index":1298,"count":10},"1299":{"index":1299,"count":1578},"1300":{"index":1300,"count":2058},"1301":{"index":1301,"count":2058},"1302":{"index":1302,"count":2058},"1303":{"index":1303,"count":1578},"1304":{"index":1304,"count":4},"1305":{"index":1305,"count":4},"1306":{"index":1306,"count":4},"1307":{"index":1307,"count":4},"1308":{"index":1308,"count":4},"1309":{"index":1309,"count":4},"1310":{"index":1310,"count":4},"1311":{"index":1311,"count":4},"1312":{"index":1312,"count":4},"1313":{"index":1313,"count":4},"1314":{"index":1314,"count":4},"1315":{"index":1315,"count":1578},"1316":{"index":1316,"count":2058},"1317":{"index":1317,"count":2058},"1318":{"index":1318,"count":2058},"1319":{"index":1319,"count":1578},"1320":{"index":1320,"count":160},"1321":{"index":1321,"count":16},"1322":{"index":1322,"count":16},"1323":{"index":1323,"count":144},"1324":{"index":1324,"count":144},"1325":{"index":1325,"count":10},"1326":{"index":1326,"count":10},"1327":{"index":1327,"count":8},"1328":{"index":1328,"count":8},"1329":{"index":1329,"count":136},"1330":{"index":1330,"count":136},"1331":{"index":1331,"count":136},"1332":{"index":1332,"count":1554},"1333":{"index":1333,"count":1644},"1334":{"index":1334,"count":1644},"1335":{"index":1335,"count":1180},"1336":{"index":1336,"count":4},"1337":{"index":1337,"count":8},"1338":{"index":1338,"count":6},"1339":{"index":1339,"count":4},"1340":{"index":1340,"count":4},"1341":{"index":1341,"count":4},"1342":{"index":1342,"count":4},"1343":{"index":1343,"count":4},"1344":{"index":1344,"count":1180},"1345":{"index":1345,"count":166},"1346":{"index":1346,"count":278},"1347":{"index":1347,"count":270},"1348":{"index":1348,"count":148},"1349":{"index":1349,"count":148},"1350":{"index":1350,"count":112},"1351":{"index":1351,"count":112},"1352":{"index":1352,"count":112},"1353":{"index":1353,"count":130},"1354":{"index":1354,"count":166},"1355":{"index":1355,"count":166},"1356":{"index":1356,"count":166},"1357":{"index":1357,"count":166},"1358":{"index":1358,"count":166},"1359":{"index":1359,"count":130},"1360":{"index":1360,"count":130},"1361":{"index":1361,"count":122},"1362":{"index":1362,"count":710},"1363":{"index":1363,"count":710},"1364":{"index":1364,"count":710},"1365":{"index":1365,"count":84},"1366":{"index":1366,"count":84},"1367":{"index":1367,"count":626},"1368":{"index":1368,"count":200},"1369":{"index":1369,"count":200},"1370":{"index":1370,"count":152},"1371":{"index":1371,"count":12},"1372":{"index":1372,"count":12},"1373":{"index":1373,"count":12},"1374":{"index":1374,"count":144},"1375":{"index":1375,"count":26},"1376":{"index":1376,"count":26},"1377":{"index":1377,"count":14},"1378":{"index":1378,"count":14},"1379":{"index":1379,"count":118},"1380":{"index":1380,"count":76},"1381":{"index":1381,"count":76},"1382":{"index":1382,"count":76},"1383":{"index":1383,"count":76},"1384":{"index":1384,"count":116},"1385":{"index":1385,"count":162},"1386":{"index":1386,"count":200},"1387":{"index":1387,"count":200},"1388":{"index":1388,"count":200},"1389":{"index":1389,"count":200},"1390":{"index":1390,"count":116},"1391":{"index":1391,"count":38},"1392":{"index":1392,"count":38},"1393":{"index":1393,"count":78},"1394":{"index":1394,"count":116},"1395":{"index":1395,"count":116},"1396":{"index":1396,"count":116},"1397":{"index":1397,"count":116},"1398":{"index":1398,"count":116},"1399":{"index":1399,"count":44},"1400":{"index":1400,"count":44},"1401":{"index":1401,"count":44},"1402":{"index":1402,"count":26},"1403":{"index":1403,"count":26},"1404":{"index":1404,"count":26},"1405":{"index":1405,"count":26},"1406":{"index":1406,"count":26},"1407":{"index":1407,"count":14},"1408":{"index":1408,"count":14},"1409":{"index":1409,"count":14},"1410":{"index":1410,"count":18},"1411":{"index":1411,"count":18},"1412":{"index":1412,"count":18},"1413":{"index":1413,"count":166},"1414":{"index":1414,"count":166},"1415":{"index":1415,"count":26},"1416":{"index":1416,"count":26},"1417":{"index":1417,"count":26},"1418":{"index":1418,"count":32},"1419":{"index":1419,"count":32},"1420":{"index":1420,"count":32},"1421":{"index":1421,"count":32},"1422":{"index":1422,"count":32},"1423":{"index":1423,"count":28},"1424":{"index":1424,"count":28},"1425":{"index":1425,"count":28},"1426":{"index":1426,"count":28},"1427":{"index":1427,"count":28},"1428":{"index":1428,"count":28},"1429":{"index":1429,"count":16},"1430":{"index":1430,"count":6},"1431":{"index":1431,"count":6},"1432":{"index":1432,"count":6},"1433":{"index":1433,"count":6},"1434":{"index":1434,"count":10},"1435":{"index":1435,"count":12},"1436":{"index":1436,"count":16},"1437":{"index":1437,"count":16},"1438":{"index":1438,"count":16},"1439":{"index":1439,"count":16},"1440":{"index":1440,"count":16},"1441":{"index":1441,"count":16},"1442":{"index":1442,"count":16},"1443":{"index":1443,"count":12},"1444":{"index":1444,"count":12},"1445":{"index":1445,"count":12},"1446":{"index":1446,"count":8},"1447":{"index":1447,"count":8},"1448":{"index":1448,"count":8},"1449":{"index":1449,"count":8},"1450":{"index":1450,"count":8},"1451":{"index":1451,"count":8},"1452":{"index":1452,"count":8},"1453":{"index":1453,"count":2},"1454":{"index":1454,"count":2},"1455":{"index":1455,"count":8},"1456":{"index":1456,"count":64},"1457":{"index":1457,"count":64},"1458":{"index":1458,"count":64},"1459":{"index":1459,"count":64},"1460":{"index":1460,"count":64},"1461":{"index":1461,"count":64},"1462":{"index":1462,"count":64},"1463":{"index":1463,"count":64},"1464":{"index":1464,"count":64},"1465":{"index":1465,"count":64},"1466":{"index":1466,"count":64},"1467":{"index":1467,"count":64},"1468":{"index":1468,"count":64},"1469":{"index":1469,"count":32},"1470":{"index":1470,"count":32},"1471":{"index":1471,"count":20},"1472":{"index":1472,"count":20},"1473":{"index":1473,"count":20},"1474":{"index":1474,"count":20},"1475":{"index":1475,"count":56},"1476":{"index":1476,"count":56},"1477":{"index":1477,"count":56},"1478":{"index":1478,"count":56},"1479":{"index":1479,"count":56},"1480":{"index":1480,"count":56},"1481":{"index":1481,"count":56},"1482":{"index":1482,"count":10},"1483":{"index":1483,"count":10},"1484":{"index":1484,"count":46},"1485":{"index":1485,"count":46},"1486":{"index":1486,"count":32},"1487":{"index":1487,"count":20},"1488":{"index":1488,"count":20},"1489":{"index":1489,"count":20},"1490":{"index":1490,"count":20},"1491":{"index":1491,"count":20},"1492":{"index":1492,"count":20},"1493":{"index":1493,"count":14},"1494":{"index":1494,"count":10},"1495":{"index":1495,"count":10},"1496":{"index":1496,"count":10},"1497":{"index":1497,"count":10},"1498":{"index":1498,"count":10},"1499":{"index":1499,"count":10},"1500":{"index":1500,"count":26},"1501":{"index":1501,"count":26},"1502":{"index":1502,"count":26},"1503":{"index":1503,"count":26},"1504":{"index":1504,"count":26},"1505":{"index":1505,"count":14},"1506":{"index":1506,"count":12},"1507":{"index":1507,"count":12},"1508":{"index":1508,"count":2},"1509":{"index":1509,"count":2},"1510":{"index":1510,"count":2},"1511":{"index":1511,"count":2},"1512":{"index":1512,"count":2},"1513":{"index":1513,"count":2},"1514":{"index":1514,"count":34},"1515":{"index":1515,"count":22},"1516":{"index":1516,"count":22},"1517":{"index":1517,"count":36},"1518":{"index":1518,"count":24},"1519":{"index":1519,"count":6},"1520":{"index":1520,"count":6},"1521":{"index":1521,"count":24},"1522":{"index":1522,"count":24},"1523":{"index":1523,"count":24},"1524":{"index":1524,"count":4},"1525":{"index":1525,"count":4},"1526":{"index":1526,"count":36},"1527":{"index":1527,"count":36},"1528":{"index":1528,"count":36},"1529":{"index":1529,"count":36},"1530":{"index":1530,"count":36},"1531":{"index":1531,"count":36},"1532":{"index":1532,"count":32},"1533":{"index":1533,"count":32},"1534":{"index":1534,"count":20},"1535":{"index":1535,"count":12},"1536":{"index":1536,"count":42},"1537":{"index":1537,"count":42},"1538":{"index":1538,"count":42},"1539":{"index":1539,"count":42},"1540":{"index":1540,"count":10},"1541":{"index":1541,"count":10},"1542":{"index":1542,"count":8},"1543":{"index":1543,"count":8},"1544":{"index":1544,"count":2},"1545":{"index":1545,"count":32},"1546":{"index":1546,"count":4},"1547":{"index":1547,"count":4},"1548":{"index":1548,"count":6},"1549":{"index":1549,"count":22},"1550":{"index":1550,"count":22},"1551":{"index":1551,"count":22},"1552":{"index":1552,"count":12},"1553":{"index":1553,"count":12},"1554":{"index":1554,"count":12},"1555":{"index":1555,"count":8},"1556":{"index":1556,"count":8},"1557":{"index":1557,"count":14},"1558":{"index":1558,"count":14},"1559":{"index":1559,"count":10},"1560":{"index":1560,"count":10},"1561":{"index":1561,"count":4},"1562":{"index":1562,"count":4},"1563":{"index":1563,"count":6},"1564":{"index":1564,"count":46},"1565":{"index":1565,"count":46},"1566":{"index":1566,"count":46},"1567":{"index":1567,"count":46},"1568":{"index":1568,"count":8},"1569":{"index":1569,"count":8},"1570":{"index":1570,"count":8},"1571":{"index":1571,"count":4},"1572":{"index":1572,"count":4},"1573":{"index":1573,"count":4},"1574":{"index":1574,"count":38},"1575":{"index":1575,"count":10},"1576":{"index":1576,"count":4},"1577":{"index":1577,"count":4},"1578":{"index":1578,"count":6},"1579":{"index":1579,"count":28},"1580":{"index":1580,"count":28},"1581":{"index":1581,"count":28},"1582":{"index":1582,"count":16},"1583":{"index":1583,"count":16},"1584":{"index":1584,"count":16},"1585":{"index":1585,"count":8},"1586":{"index":1586,"count":8},"1587":{"index":1587,"count":20},"1588":{"index":1588,"count":20},"1589":{"index":1589,"count":16},"1590":{"index":1590,"count":16},"1591":{"index":1591,"count":8},"1592":{"index":1592,"count":4},"1593":{"index":1593,"count":4},"1594":{"index":1594,"count":12},"1595":{"index":1595,"count":24},"1596":{"index":1596,"count":24},"1597":{"index":1597,"count":24},"1598":{"index":1598,"count":6},"1599":{"index":1599,"count":6},"1600":{"index":1600,"count":20},"1601":{"index":1601,"count":12},"1602":{"index":1602,"count":12},"1603":{"index":1603,"count":6},"1604":{"index":1604,"count":6},"1605":{"index":1605,"count":6},"1606":{"index":1606,"count":6},"1607":{"index":1607,"count":6},"1608":{"index":1608,"count":14},"1609":{"index":1609,"count":6},"1610":{"index":1610,"count":8},"1611":{"index":1611,"count":6},"1612":{"index":1612,"count":6},"1613":{"index":1613,"count":6},"1614":{"index":1614,"count":6},"1615":{"index":1615,"count":4},"1616":{"index":1616,"count":2},"1617":{"index":1617,"count":2},"1618":{"index":1618,"count":8},"1619":{"index":1619,"count":8},"1620":{"index":1620,"count":8},"1621":{"index":1621,"count":16},"1622":{"index":1622,"count":6},"1623":{"index":1623,"count":6},"1624":{"index":1624,"count":12},"1625":{"index":1625,"count":12},"1626":{"index":1626,"count":12},"1627":{"index":1627,"count":12},"1628":{"index":1628,"count":12},"1629":{"index":1629,"count":12},"1630":{"index":1630,"count":12},"1631":{"index":1631,"count":12},"1632":{"index":1632,"count":12},"1633":{"index":1633,"count":12},"1634":{"index":1634,"count":8},"1635":{"index":1635,"count":12},"1636":{"index":1636,"count":12},"1637":{"index":1637,"count":6},"1638":{"index":1638,"count":6},"1639":{"index":1639,"count":6},"1640":{"index":1640,"count":6},"1641":{"index":1641,"count":6},"1642":{"index":1642,"count":6},"1643":{"index":1643,"count":6},"1644":{"index":1644,"count":12},"1645":{"index":1645,"count":12},"1646":{"index":1646,"count":24},"1647":{"index":1647,"count":24},"1648":{"index":1648,"count":24},"1649":{"index":1649,"count":24},"1650":{"index":1650,"count":18},"1651":{"index":1651,"count":16},"1652":{"index":1652,"count":16},"1653":{"index":1653,"count":16},"1654":{"index":1654,"count":12},"1655":{"index":1655,"count":12},"1656":{"index":1656,"count":12},"1657":{"index":1657,"count":8},"1658":{"index":1658,"count":12},"1659":{"index":1659,"count":12},"1660":{"index":1660,"count":12},"1661":{"index":1661,"count":12},"1662":{"index":1662,"count":12},"1663":{"index":1663,"count":12},"1664":{"index":1664,"count":12},"1665":{"index":1665,"count":12},"1666":{"index":1666,"count":12},"1667":{"index":1667,"count":12},"1668":{"index":1668,"count":12},"1669":{"index":1669,"count":12},"1670":{"index":1670,"count":2},"1671":{"index":1671,"count":2},"1672":{"index":1672,"count":2},"1673":{"index":1673,"count":10},"1674":{"index":1674,"count":10},"1675":{"index":1675,"count":10},"1676":{"index":1676,"count":18},"1677":{"index":1677,"count":18},"1678":{"index":1678,"count":12},"1679":{"index":1679,"count":12},"1680":{"index":1680,"count":12},"1681":{"index":1681,"count":6},"1682":{"index":1682,"count":6},"1683":{"index":1683,"count":6},"1684":{"index":1684,"count":6},"1685":{"index":1685,"count":24},"1686":{"index":1686,"count":24},"1687":{"index":1687,"count":24},"1688":{"index":1688,"count":24},"1689":{"index":1689,"count":4},"1690":{"index":1690,"count":4},"1691":{"index":1691,"count":20},"1692":{"index":1692,"count":20},"1693":{"index":1693,"count":12},"1694":{"index":1694,"count":12},"1695":{"index":1695,"count":12},"1696":{"index":1696,"count":24},"1697":{"index":1697,"count":24},"1698":{"index":1698,"count":24},"1699":{"index":1699,"count":24},"1700":{"index":1700,"count":24},"1701":{"index":1701,"count":24},"1702":{"index":1702,"count":24},"1703":{"index":1703,"count":24},"1704":{"index":1704,"count":24},"1705":{"index":1705,"count":24},"1706":{"index":1706,"count":12},"1707":{"index":1707,"count":12},"1708":{"index":1708,"count":12},"1709":{"index":1709,"count":12},"1710":{"index":1710,"count":16},"1711":{"index":1711,"count":16},"1712":{"index":1712,"count":16},"1713":{"index":1713,"count":16},"1714":{"index":1714,"count":30},"1715":{"index":1715,"count":30},"1716":{"index":1716,"count":30},"1717":{"index":1717,"count":30},"1718":{"index":1718,"count":30},"1719":{"index":1719,"count":30},"1720":{"index":1720,"count":24},"1721":{"index":1721,"count":24},"1722":{"index":1722,"count":24},"1723":{"index":1723,"count":22},"1724":{"index":1724,"count":4},"1725":{"index":1725,"count":4},"1726":{"index":1726,"count":4},"1727":{"index":1727,"count":4},"1728":{"index":1728,"count":22},"1729":{"index":1729,"count":22},"1730":{"index":1730,"count":4},"1731":{"index":1731,"count":4},"1732":{"index":1732,"count":18},"1733":{"index":1733,"count":2},"1734":{"index":1734,"count":2},"1735":{"index":1735,"count":2},"1736":{"index":1736,"count":2},"1737":{"index":1737,"count":2},"1738":{"index":1738,"count":1868},"1739":{"index":1739,"count":1868},"1740":{"index":1740,"count":1868},"1741":{"index":1741,"count":24},"1742":{"index":1742,"count":24},"1743":{"index":1743,"count":1844},"1744":{"index":1744,"count":18},"1745":{"index":1745,"count":18},"1746":{"index":1746,"count":116},"1747":{"index":1747,"count":116},"1748":{"index":1748,"count":166},"1749":{"index":1749,"count":166},"1750":{"index":1750,"count":1544},"1751":{"index":1751,"count":46},"1752":{"index":1752,"count":46},"1753":{"index":1753,"count":42},"1754":{"index":1754,"count":42},"1755":{"index":1755,"count":2},"1756":{"index":1756,"count":2},"1757":{"index":1757,"count":16},"1758":{"index":1758,"count":16},"1759":{"index":1759,"count":56},"1760":{"index":1760,"count":56},"1761":{"index":1761,"count":2},"1762":{"index":1762,"count":2},"1763":{"index":1763,"count":32},"1764":{"index":1764,"count":32},"1765":{"index":1765,"count":24},"1766":{"index":1766,"count":24},"1767":{"index":1767,"count":12},"1768":{"index":1768,"count":12},"1769":{"index":1769,"count":24},"1770":{"index":1770,"count":24},"1771":{"index":1771,"count":30},"1772":{"index":1772,"count":30},"1773":{"index":1773,"count":116},"1774":{"index":1774,"count":116},"1775":{"index":1775,"count":64},"1776":{"index":1776,"count":64},"1777":{"index":1777,"count":16},"1778":{"index":1778,"count":16},"1779":{"index":1779,"count":1062},"1780":{"index":1780,"count":1062},"1781":{"index":1781,"count":886},"1782":{"index":1782,"count":886},"1783":{"index":1783,"count":105},"1784":{"index":1784,"count":36},"1785":{"index":1785,"count":36},"1786":{"index":1786,"count":36},"1787":{"index":1787,"count":4},"1788":{"index":1788,"count":4},"1789":{"index":1789,"count":32},"1790":{"index":1790,"count":32},"1791":{"index":1791,"count":32},"1792":{"index":1792,"count":12},"1793":{"index":1793,"count":12},"1794":{"index":1794,"count":850},"1795":{"index":1795,"count":850},"1796":{"index":1796,"count":830},"1797":{"index":1797,"count":386},"1798":{"index":1798,"count":386},"1799":{"index":1799,"count":386},"1800":{"index":1800,"count":640},"1801":{"index":1801,"count":640},"1802":{"index":1802,"count":640},"1803":{"index":1803,"count":640},"1804":{"index":1804,"count":270},"1805":{"index":1805,"count":270},"1806":{"index":1806,"count":262},"1807":{"index":1807,"count":262},"1808":{"index":1808,"count":262},"1809":{"index":1809,"count":262},"1810":{"index":1810,"count":262},"1811":{"index":1811,"count":262},"1812":{"index":1812,"count":262},"1813":{"index":1813,"count":262},"1814":{"index":1814,"count":250},"1815":{"index":1815,"count":8},"1816":{"index":1816,"count":8},"1817":{"index":1817,"count":12},"1818":{"index":1818,"count":8},"1819":{"index":1819,"count":370},"1820":{"index":1820,"count":370},"1821":{"index":1821,"count":370},"1822":{"index":1822,"count":370},"1823":{"index":1823,"count":370},"1824":{"index":1824,"count":370},"1825":{"index":1825,"count":370},"1826":{"index":1826,"count":370},"1827":{"index":1827,"count":424},"1828":{"index":1828,"count":424},"1829":{"index":1829,"count":242},"1830":{"index":1830,"count":242},"1831":{"index":1831,"count":54},"1832":{"index":1832,"count":54},"1833":{"index":1833,"count":54},"1834":{"index":1834,"count":182},"1835":{"index":1835,"count":182},"1836":{"index":1836,"count":182},"1837":{"index":1837,"count":182},"1838":{"index":1838,"count":182},"1839":{"index":1839,"count":182},"1840":{"index":1840,"count":182},"1841":{"index":1841,"count":290},"1842":{"index":1842,"count":290},"1843":{"index":1843,"count":290},"1844":{"index":1844,"count":290},"1845":{"index":1845,"count":290},"1846":{"index":1846,"count":290},"1847":{"index":1847,"count":290},"1848":{"index":1848,"count":24},"1849":{"index":1849,"count":8},"1850":{"index":1850,"count":8},"1851":{"index":1851,"count":246},"1852":{"index":1852,"count":14},"1853":{"index":1853,"count":14},"1854":{"index":1854,"count":232},"1855":{"index":1855,"count":4},"1856":{"index":1856,"count":4},"1857":{"index":1857,"count":262},"1858":{"index":1858,"count":262},"1859":{"index":1859,"count":262},"1860":{"index":1860,"count":58},"1861":{"index":1861,"count":70},"1862":{"index":1862,"count":70},"1863":{"index":1863,"count":70},"1864":{"index":1864,"count":70},"1865":{"index":1865,"count":70},"1866":{"index":1866,"count":16},"1867":{"index":1867,"count":8},"1868":{"index":1868,"count":8},"1869":{"index":1869,"count":8},"1870":{"index":1870,"count":4},"1871":{"index":1871,"count":4},"1872":{"index":1872,"count":38},"1873":{"index":1873,"count":12},"1874":{"index":1874,"count":12},"1875":{"index":1875,"count":26},"1876":{"index":1876,"count":8},"1877":{"index":1877,"count":8},"1878":{"index":1878,"count":18},"1879":{"index":1879,"count":6},"1880":{"index":1880,"count":6},"1881":{"index":1881,"count":42},"1882":{"index":1882,"count":42},"1883":{"index":1883,"count":42},"1884":{"index":1884,"count":42},"1885":{"index":1885,"count":12},"1886":{"index":1886,"count":12},"1887":{"index":1887,"count":234},"1888":{"index":1888,"count":234},"1889":{"index":1889,"count":234},"1890":{"index":1890,"count":234},"1891":{"index":1891,"count":234},"1892":{"index":1892,"count":54},"1893":{"index":1893,"count":36},"1894":{"index":1894,"count":36},"1895":{"index":1895,"count":18},"1896":{"index":1896,"count":18},"1897":{"index":1897,"count":102},"1898":{"index":1898,"count":102},"1899":{"index":1899,"count":102},"1900":{"index":1900,"count":102},"1901":{"index":1901,"count":52},"1902":{"index":1902,"count":52},"1903":{"index":1903,"count":52},"1904":{"index":1904,"count":52},"1905":{"index":1905,"count":20},"1906":{"index":1906,"count":12},"1907":{"index":1907,"count":12},"1908":{"index":1908,"count":32},"1909":{"index":1909,"count":12},"1910":{"index":1910,"count":12},"1911":{"index":1911,"count":20},"1912":{"index":1912,"count":4},"1913":{"index":1913,"count":4},"1914":{"index":1914,"count":90},"1915":{"index":1915,"count":90},"1916":{"index":1916,"count":90},"1917":{"index":1917,"count":22},"1918":{"index":1918,"count":32},"1919":{"index":1919,"count":32},"1920":{"index":1920,"count":32},"1921":{"index":1921,"count":32},"1922":{"index":1922,"count":32},"1923":{"index":1923,"count":12},"1924":{"index":1924,"count":4},"1925":{"index":1925,"count":4},"1926":{"index":1926,"count":8},"1927":{"index":1927,"count":4},"1928":{"index":1928,"count":4},"1929":{"index":1929,"count":20},"1930":{"index":1930,"count":4},"1931":{"index":1931,"count":4},"1932":{"index":1932,"count":16},"1933":{"index":1933,"count":4},"1934":{"index":1934,"count":4},"1935":{"index":1935,"count":12},"1936":{"index":1936,"count":6},"1937":{"index":1937,"count":6},"1938":{"index":1938,"count":24},"1939":{"index":1939,"count":24},"1940":{"index":1940,"count":24},"1941":{"index":1941,"count":24},"1942":{"index":1942,"count":10},"1943":{"index":1943,"count":10},"1944":{"index":1944,"count":82},"1945":{"index":1945,"count":82},"1946":{"index":1946,"count":82},"1947":{"index":1947,"count":82},"1948":{"index":1948,"count":82},"1949":{"index":1949,"count":58},"1950":{"index":1950,"count":24},"1951":{"index":1951,"count":24},"1952":{"index":1952,"count":34},"1953":{"index":1953,"count":34},"1954":{"index":1954,"count":1972},"1955":{"index":1955,"count":1972},"1956":{"index":1956,"count":1972},"1957":{"index":1957,"count":26},"1958":{"index":1958,"count":26},"1959":{"index":1959,"count":288},"1960":{"index":1960,"count":288},"1961":{"index":1961,"count":464},"1962":{"index":1962,"count":464},"1963":{"index":1963,"count":1194},"1964":{"index":1964,"count":1194},"1965":{"index":1965,"count":1194},"1966":{"index":1966,"count":1422},"1967":{"index":1967,"count":1480},"1968":{"index":1968,"count":1440},"1969":{"index":1969,"count":1440},"1970":{"index":1970,"count":1312},"1971":{"index":1971,"count":62},"1972":{"index":1972,"count":62},"1973":{"index":1973,"count":62},"1974":{"index":1974,"count":62},"1975":{"index":1975,"count":62},"1976":{"index":1976,"count":62},"1977":{"index":1977,"count":62},"1978":{"index":1978,"count":62},"1979":{"index":1979,"count":62},"1980":{"index":1980,"count":62},"1981":{"index":1981,"count":20},"1982":{"index":1982,"count":4},"1983":{"index":1983,"count":4},"1984":{"index":1984,"count":42},"1985":{"index":1985,"count":20},"1986":{"index":1986,"count":1896},"1987":{"index":1987,"count":1250},"1988":{"index":1988,"count":1250},"1989":{"index":1989,"count":606},"1990":{"index":1990,"count":606},"1991":{"index":1991,"count":606},"1992":{"index":1992,"count":646},"1993":{"index":1993,"count":1422},"1994":{"index":1994,"count":1422},"1995":{"index":1995,"count":1422},"1996":{"index":1996,"count":1422},"1997":{"index":1997,"count":646},"1998":{"index":1998,"count":50},"1999":{"index":1999,"count":50},"2000":{"index":2000,"count":50},"2001":{"index":2001,"count":50},"2002":{"index":2002,"count":14},"2003":{"index":2003,"count":14},"2004":{"index":2004,"count":10},"2005":{"index":2005,"count":40},"2006":{"index":2006,"count":40},"2007":{"index":2007,"count":2952},"2008":{"index":2008,"count":2952},"2009":{"index":2009,"count":2952},"2010":{"index":2010,"count":2952},"2011":{"index":2011,"count":4482},"2012":{"index":2012,"count":4388},"2013":{"index":2013,"count":210},"2014":{"index":2014,"count":210},"2015":{"index":2015,"count":210},"2016":{"index":2016,"count":4},"2017":{"index":2017,"count":4},"2018":{"index":2018,"count":4},"2019":{"index":2019,"count":4},"2020":{"index":2020,"count":206},"2021":{"index":2021,"count":18},"2022":{"index":2022,"count":18},"2023":{"index":2023,"count":18},"2024":{"index":2024,"count":18},"2025":{"index":2025,"count":18},"2026":{"index":2026,"count":4},"2027":{"index":2027,"count":2},"2028":{"index":2028,"count":2},"2029":{"index":2029,"count":18},"2030":{"index":2030,"count":18},"2031":{"index":2031,"count":18},"2032":{"index":2032,"count":18},"2033":{"index":2033,"count":188},"2034":{"index":2034,"count":218},"2035":{"index":2035,"count":28},"2036":{"index":2036,"count":28},"2037":{"index":2037,"count":10},"2038":{"index":2038,"count":10},"2039":{"index":2039,"count":4},"2040":{"index":2040,"count":4},"2041":{"index":2041,"count":4},"2042":{"index":2042,"count":24},"2043":{"index":2043,"count":28},"2044":{"index":2044,"count":28},"2045":{"index":2045,"count":28},"2046":{"index":2046,"count":28},"2047":{"index":2047,"count":28},"2048":{"index":2048,"count":28},"2049":{"index":2049,"count":2},"2050":{"index":2050,"count":2},"2051":{"index":2051,"count":190},"2052":{"index":2052,"count":190},"2053":{"index":2053,"count":190},"2054":{"index":2054,"count":8},"2055":{"index":2055,"count":8},"2056":{"index":2056,"count":182},"2057":{"index":2057,"count":182},"2058":{"index":2058,"count":28},"2059":{"index":2059,"count":28},"2060":{"index":2060,"count":28},"2061":{"index":2061,"count":28},"2062":{"index":2062,"count":28},"2063":{"index":2063,"count":28},"2064":{"index":2064,"count":28},"2065":{"index":2065,"count":28},"2066":{"index":2066,"count":28},"2067":{"index":2067,"count":28},"2068":{"index":2068,"count":28},"2069":{"index":2069,"count":3960},"2070":{"index":2070,"count":82},"2071":{"index":2071,"count":82},"2072":{"index":2072,"count":82},"2073":{"index":2073,"count":22},"2074":{"index":2074,"count":22},"2075":{"index":2075,"count":22},"2076":{"index":2076,"count":60},"2077":{"index":2077,"count":40},"2078":{"index":2078,"count":40},"2079":{"index":2079,"count":40},"2080":{"index":2080,"count":40},"2081":{"index":2081,"count":2},"2082":{"index":2082,"count":2},"2083":{"index":2083,"count":3878},"2084":{"index":2084,"count":1020},"2085":{"index":2085,"count":1020},"2086":{"index":2086,"count":2858},"2087":{"index":2087,"count":32},"2088":{"index":2088,"count":32},"2089":{"index":2089,"count":32},"2090":{"index":2090,"count":32},"2091":{"index":2091,"count":8},"2092":{"index":2092,"count":2},"2093":{"index":2093,"count":2},"2094":{"index":2094,"count":32},"2095":{"index":2095,"count":32},"2096":{"index":2096,"count":32},"2097":{"index":2097,"count":82},"2098":{"index":2098,"count":82},"2099":{"index":2099,"count":82},"2100":{"index":2100,"count":62},"2101":{"index":2101,"count":62},"2102":{"index":2102,"count":62},"2103":{"index":2103,"count":62},"2104":{"index":2104,"count":62},"2105":{"index":2105,"count":82},"2106":{"index":2106,"count":12},"2107":{"index":2107,"count":12},"2108":{"index":2108,"count":12},"2109":{"index":2109,"count":12},"2110":{"index":2110,"count":12},"2111":{"index":2111,"count":12},"2112":{"index":2112,"count":12},"2113":{"index":2113,"count":12},"2114":{"index":2114,"count":12},"2115":{"index":2115,"count":12},"2116":{"index":2116,"count":12},"2117":{"index":2117,"count":12},"2118":{"index":2118,"count":12},"2119":{"index":2119,"count":12},"2120":{"index":2120,"count":2},"2121":{"index":2121,"count":12},"2122":{"index":2122,"count":12},"2123":{"index":2123,"count":12},"2124":{"index":2124,"count":12},"2125":{"index":2125,"count":12},"2126":{"index":2126,"count":213},"2127":{"index":2127,"count":562},"2128":{"index":2128,"count":562},"2129":{"index":2129,"count":638},"2130":{"index":2130,"count":23268},"2131":{"index":2131,"count":23268},"2132":{"index":2132,"count":23268},"2133":{"index":2133,"count":23184},"2134":{"index":2134,"count":1538},"2135":{"index":2135,"count":320},"2136":{"index":2136,"count":320},"2137":{"index":2137,"count":1538},"2138":{"index":2138,"count":112},"2139":{"index":2139,"count":112},"2140":{"index":2140,"count":1538},"2141":{"index":2141,"count":1538},"2142":{"index":2142,"count":28},"2143":{"index":2143,"count":1538},"2144":{"index":2144,"count":1538},"2145":{"index":2145,"count":28},"2146":{"index":2146,"count":22968},"2147":{"index":2147,"count":20192},"2148":{"index":2148,"count":20192},"2149":{"index":2149,"count":20192},"2150":{"index":2150,"count":20192},"2151":{"index":2151,"count":20192},"2152":{"index":2152,"count":20192},"2153":{"index":2153,"count":20192},"2154":{"index":2154,"count":20192},"2155":{"index":2155,"count":20192},"2156":{"index":2156,"count":20192},"2157":{"index":2157,"count":20192},"2158":{"index":2158,"count":20192},"2159":{"index":2159,"count":20192},"2160":{"index":2160,"count":20192},"2161":{"index":2161,"count":20192},"2162":{"index":2162,"count":1106},"2163":{"index":2163,"count":1106},"2164":{"index":2164,"count":20192},"2165":{"index":2165,"count":406},"2166":{"index":2166,"count":406},"2167":{"index":2167,"count":406},"2168":{"index":2168,"count":406},"2169":{"index":2169,"count":20192},"2170":{"index":2170,"count":1422},"2171":{"index":2171,"count":410},"2172":{"index":2172,"count":410},"2173":{"index":2173,"count":1026},"2174":{"index":2174,"count":1026},"2175":{"index":2175,"count":1422},"2176":{"index":2176,"count":638},"2177":{"index":2177,"count":638},"2178":{"index":2178,"count":638},"2179":{"index":2179,"count":638},"2180":{"index":2180,"count":638},"2181":{"index":2181,"count":638},"2182":{"index":2182,"count":638},"2183":{"index":2183,"count":638},"2184":{"index":2184,"count":638},"2185":{"index":2185,"count":638},"2186":{"index":2186,"count":638},"2187":{"index":2187,"count":638},"2188":{"index":2188,"count":638},"2189":{"index":2189,"count":638},"2190":{"index":2190,"count":638},"2191":{"index":2191,"count":638},"2192":{"index":2192,"count":638},"2193":{"index":2193,"count":638},"2194":{"index":2194,"count":638},"2195":{"index":2195,"count":638},"2196":{"index":2196,"count":638},"2197":{"index":2197,"count":638},"2198":{"index":2198,"count":638},"2199":{"index":2199,"count":638},"2200":{"index":2200,"count":638},"2201":{"index":2201,"count":638},"2202":{"index":2202,"count":638},"2203":{"index":2203,"count":638},"2204":{"index":2204,"count":638},"2205":{"index":2205,"count":638},"2206":{"index":2206,"count":638},"2207":{"index":2207,"count":638},"2208":{"index":2208,"count":638},"2209":{"index":2209,"count":638},"2210":{"index":2210,"count":638},"2211":{"index":2211,"count":638},"2212":{"index":2212,"count":638},"2213":{"index":2213,"count":638},"2214":{"index":2214,"count":638},"2215":{"index":2215,"count":638},"2216":{"index":2216,"count":638},"2217":{"index":2217,"count":638},"2218":{"index":2218,"count":638},"2219":{"index":2219,"count":638},"2220":{"index":2220,"count":638},"2221":{"index":2221,"count":638},"2222":{"index":2222,"count":638},"2223":{"index":2223,"count":638},"2224":{"index":2224,"count":638},"2225":{"index":2225,"count":638},"2226":{"index":2226,"count":638},"2227":{"index":2227,"count":638},"2228":{"index":2228,"count":638},"2229":{"index":2229,"count":638},"2230":{"index":2230,"count":638},"2231":{"index":2231,"count":638},"2232":{"index":2232,"count":638},"2233":{"index":2233,"count":638},"2234":{"index":2234,"count":638},"2235":{"index":2235,"count":638},"2236":{"index":2236,"count":638},"2237":{"index":2237,"count":638},"2238":{"index":2238,"count":638},"2239":{"index":2239,"count":638},"2240":{"index":2240,"count":638},"2241":{"index":2241,"count":638},"2242":{"index":2242,"count":638},"2243":{"index":2243,"count":638},"2244":{"index":2244,"count":638},"2245":{"index":2245,"count":638},"2246":{"index":2246,"count":638},"2247":{"index":2247,"count":638},"2248":{"index":2248,"count":638},"2249":{"index":2249,"count":638},"2250":{"index":2250,"count":638},"2251":{"index":2251,"count":638},"2252":{"index":2252,"count":638},"2253":{"index":2253,"count":638},"2254":{"index":2254,"count":638},"2255":{"index":2255,"count":638},"2256":{"index":2256,"count":638},"2257":{"index":2257,"count":638},"2258":{"index":2258,"count":638},"2259":{"index":2259,"count":638},"2260":{"index":2260,"count":638},"2261":{"index":2261,"count":638},"2262":{"index":2262,"count":638},"2263":{"index":2263,"count":638},"2264":{"index":2264,"count":638},"2265":{"index":2265,"count":638},"2266":{"index":2266,"count":638},"2267":{"index":2267,"count":638},"2268":{"index":2268,"count":638},"2269":{"index":2269,"count":638},"2270":{"index":2270,"count":638},"2271":{"index":2271,"count":638},"2272":{"index":2272,"count":638},"2273":{"index":2273,"count":638},"2274":{"index":2274,"count":638},"2275":{"index":2275,"count":638},"2276":{"index":2276,"count":638},"2277":{"index":2277,"count":638},"2278":{"index":2278,"count":638},"2279":{"index":2279,"count":638},"2280":{"index":2280,"count":638},"2281":{"index":2281,"count":638},"2282":{"index":2282,"count":638},"2283":{"index":2283,"count":638},"2284":{"index":2284,"count":638},"2285":{"index":2285,"count":638},"2286":{"index":2286,"count":1422},"2287":{"index":2287,"count":22},"2288":{"index":2288,"count":22},"2289":{"index":2289,"count":22},"2290":{"index":2290,"count":22},"2291":{"index":2291,"count":1422},"2292":{"index":2292,"count":410},"2293":{"index":2293,"count":1026},"2294":{"index":2294,"count":1422},"2295":{"index":2295,"count":638},"2296":{"index":2296,"count":638},"2297":{"index":2297,"count":638},"2298":{"index":2298,"count":638},"2299":{"index":2299,"count":638},"2300":{"index":2300,"count":638},"2301":{"index":2301,"count":638},"2302":{"index":2302,"count":638},"2303":{"index":2303,"count":638},"2304":{"index":2304,"count":638},"2305":{"index":2305,"count":638},"2306":{"index":2306,"count":638},"2307":{"index":2307,"count":638},"2308":{"index":2308,"count":638},"2309":{"index":2309,"count":638},"2310":{"index":2310,"count":638},"2311":{"index":2311,"count":638},"2312":{"index":2312,"count":638},"2313":{"index":2313,"count":638},"2314":{"index":2314,"count":638},"2315":{"index":2315,"count":638},"2316":{"index":2316,"count":638},"2317":{"index":2317,"count":638},"2318":{"index":2318,"count":638},"2319":{"index":2319,"count":638},"2320":{"index":2320,"count":638},"2321":{"index":2321,"count":638},"2322":{"index":2322,"count":638},"2323":{"index":2323,"count":638},"2324":{"index":2324,"count":638},"2325":{"index":2325,"count":638},"2326":{"index":2326,"count":638},"2327":{"index":2327,"count":638},"2328":{"index":2328,"count":638},"2329":{"index":2329,"count":638},"2330":{"index":2330,"count":638},"2331":{"index":2331,"count":1422},"2332":{"index":2332,"count":22},"2333":{"index":2333,"count":22},"2340":{"index":2340,"count":1422},"2341":{"index":2341,"count":1422},"2342":{"index":2342,"count":1422},"2343":{"index":2343,"count":1422},"2344":{"index":2344,"count":327},"2345":{"index":2345,"count":7},"2346":{"index":2346,"count":7},"2347":{"index":2347,"count":1422},"2348":{"index":2348,"count":1422},"2349":{"index":2349,"count":1422},"2350":{"index":2350,"count":1420},"2351":{"index":2351,"count":2},"2352":{"index":2352,"count":1422},"2353":{"index":2353,"count":1422},"2354":{"index":2354,"count":1422},"2355":{"index":2355,"count":1422},"2356":{"index":2356,"count":1422},"2357":{"index":2357,"count":1422},"2358":{"index":2358,"count":1422},"2359":{"index":2359,"count":1414},"2360":{"index":2360,"count":1414},"2361":{"index":2361,"count":1414},"2362":{"index":2362,"count":1414},"2363":{"index":2363,"count":1414},"2364":{"index":2364,"count":1414},"2365":{"index":2365,"count":1414},"2366":{"index":2366,"count":1414},"2367":{"index":2367,"count":1414},"2368":{"index":2368,"count":1414},"2369":{"index":2369,"count":1414},"2370":{"index":2370,"count":22},"2371":{"index":2371,"count":1414},"2372":{"index":2372,"count":1414},"2373":{"index":2373,"count":410},"2374":{"index":2374,"count":1414},"2375":{"index":2375,"count":1414},"2376":{"index":2376,"count":18},"2377":{"index":2377,"count":1422},"2378":{"index":2378,"count":1420},"2385":{"index":2385,"count":1422},"2386":{"index":2386,"count":1422},"2387":{"index":2387,"count":1422},"2388":{"index":2388,"count":1422},"2389":{"index":2389,"count":646},"2390":{"index":2390,"count":22},"2391":{"index":2391,"count":646},"2392":{"index":2392,"count":22},"2393":{"index":2393,"count":646},"2394":{"index":2394,"count":18},"2395":{"index":2395,"count":776},"2396":{"index":2396,"count":1422},"2397":{"index":2397,"count":1422},"2398":{"index":2398,"count":1422},"2399":{"index":2399,"count":646},"2400":{"index":2400,"count":1},"2401":{"index":2401,"count":1},"2402":{"index":2402,"count":1},"2403":{"index":2403,"count":1},"2404":{"index":2404,"count":1},"2405":{"index":2405,"count":1},"2406":{"index":2406,"count":1},"2407":{"index":2407,"count":1},"2408":{"index":2408,"count":40},"2409":{"index":2409,"count":40},"2410":{"index":2410,"count":1},"2411":{"index":2411,"count":1},"2412":{"index":2412,"count":1},"2413":{"index":2413,"count":1},"2415":{"index":2415,"count":1},"2416":{"index":2416,"count":1}},"blocks":{"0":{"index":0,"count":1},"1":{"index":1,"count":862},"3":{"index":3,"count":948},"6":{"index":6,"count":4574},"7":{"index":7,"count":154},"8":{"index":8,"count":200},"9":{"index":9,"count":32804},"10":{"index":10,"count":33292},"11":{"index":11,"count":3388},"12":{"index":12,"count":12014},"13":{"index":13,"count":1054},"14":{"index":14,"count":8},"15":{"index":15,"count":498},"16":{"index":16,"count":92},"17":{"index":17,"count":482},"18":{"index":18,"count":2100},"19":{"index":19,"count":144},"20":{"index":20,"count":410},"21":{"index":21,"count":280},"22":{"index":22,"count":492},"23":{"index":23,"count":104},"24":{"index":24,"count":72},"25":{"index":25,"count":474},"26":{"index":26,"count":12},"27":{"index":27,"count":1042},"28":{"index":28,"count":22},"29":{"index":29,"count":34},"30":{"index":30,"count":32},"31":{"index":31,"count":19150},"32":{"index":32,"count":26824},"33":{"index":33,"count":30178},"34":{"index":34,"count":232},"35":{"index":35,"count":30},"36":{"index":36,"count":2},"37":{"index":37,"count":696},"38":{"index":38,"count":52},"39":{"index":39,"count":2},"40":{"index":40,"count":2},"41":{"index":41,"count":644},"42":{"index":42,"count":8},"43":{"index":43,"count":38},"44":{"index":44,"count":38},"45":{"index":45,"count":324},"46":{"index":46,"count":30},"47":{"index":47,"count":50},"48":{"index":48,"count":2},"49":{"index":49,"count":244},"50":{"index":50,"count":3274},"51":{"index":51,"count":86},"52":{"index":52,"count":2},"53":{"index":53,"count":25566},"54":{"index":54,"count":42},"55":{"index":55,"count":122},"56":{"index":56,"count":106},"57":{"index":57,"count":16},"58":{"index":58,"count":3084},"59":{"index":59,"count":12},"60":{"index":60,"count":20},"61":{"index":61,"count":8},"62":{"index":62,"count":10},"63":{"index":63,"count":8},"64":{"index":64,"count":2},"65":{"index":65,"count":3052},"66":{"index":66,"count":11984},"67":{"index":67,"count":2834},"68":{"index":68,"count":16},"69":{"index":69,"count":4},"70":{"index":70,"count":10},"71":{"index":71,"count":8},"72":{"index":72,"count":2},"73":{"index":73,"count":9134},"74":{"index":74,"count":944},"75":{"index":75,"count":1134},"76":{"index":76,"count":19},"77":{"index":77,"count":120},"78":{"index":78,"count":8170},"79":{"index":79,"count":1628},"80":{"index":80,"count":1786},"81":{"index":81,"count":50},"82":{"index":82,"count":4},"83":{"index":83,"count":2},"84":{"index":84,"count":2},"85":{"index":85,"count":2},"86":{"index":86,"count":2},"87":{"index":87,"count":2},"88":{"index":88,"count":2},"89":{"index":89,"count":28},"90":{"index":90,"count":26},"91":{"index":91,"count":116},"92":{"index":92,"count":116},"93":{"index":93,"count":688},"94":{"index":94,"count":416},"95":{"index":95,"count":414},"96":{"index":96,"count":70},"97":{"index":97,"count":22},"98":{"index":98,"count":40},"99":{"index":99,"count":4},"100":{"index":100,"count":4},"101":{"index":101,"count":4},"102":{"index":102,"count":4},"103":{"index":103,"count":24},"104":{"index":104,"count":34},"105":{"index":105,"count":18},"106":{"index":106,"count":18},"107":{"index":107,"count":8},"108":{"index":108,"count":4},"109":{"index":109,"count":488},"110":{"index":110,"count":288},"111":{"index":111,"count":8},"112":{"index":112,"count":52},"113":{"index":113,"count":4},"114":{"index":114,"count":22},"115":{"index":115,"count":14},"116":{"index":116,"count":6},"117":{"index":117,"count":8},"119":{"index":119,"count":16},"120":{"index":120,"count":12},"121":{"index":121,"count":264},"122":{"index":122,"count":16},"123":{"index":123,"count":364},"124":{"index":124,"count":3736},"125":{"index":125,"count":348},"126":{"index":126,"count":90},"127":{"index":127,"count":86},"128":{"index":128,"count":4},"129":{"index":129,"count":2},"130":{"index":130,"count":2},"131":{"index":131,"count":12},"132":{"index":132,"count":4},"133":{"index":133,"count":8},"134":{"index":134,"count":2},"135":{"index":135,"count":2},"136":{"index":136,"count":2},"137":{"index":137,"count":60},"138":{"index":138,"count":48},"139":{"index":139,"count":38},"140":{"index":140,"count":14},"141":{"index":141,"count":8},"142":{"index":142,"count":12},"143":{"index":143,"count":4},"144":{"index":144,"count":2},"145":{"index":145,"count":8},"146":{"index":146,"count":3290},"147":{"index":147,"count":16},"148":{"index":148,"count":32},"149":{"index":149,"count":140},"150":{"index":150,"count":64},"151":{"index":151,"count":14},"152":{"index":152,"count":76},"153":{"index":153,"count":6},"154":{"index":154,"count":4},"155":{"index":155,"count":20},"156":{"index":156,"count":14},"157":{"index":157,"count":4},"158":{"index":158,"count":4},"159":{"index":159,"count":24},"161":{"index":161,"count":8},"162":{"index":162,"count":6},"163":{"index":163,"count":2},"164":{"index":164,"count":8},"165":{"index":165,"count":4},"166":{"index":166,"count":2},"167":{"index":167,"count":16},"168":{"index":168,"count":20},"169":{"index":169,"count":8},"170":{"index":170,"count":42},"171":{"index":171,"count":8776},"172":{"index":172,"count":582},"173":{"index":173,"count":4306},"174":{"index":174,"count":364},"175":{"index":175,"count":416},"176":{"index":176,"count":3044},"177":{"index":177,"count":7910},"178":{"index":178,"count":6416},"179":{"index":179,"count":87829},"180":{"index":180,"count":80547},"181":{"index":181,"count":160},"182":{"index":182,"count":794},"183":{"index":183,"count":312},"184":{"index":184,"count":426},"185":{"index":185,"count":368},"186":{"index":186,"count":66},"187":{"index":187,"count":66},"188":{"index":188,"count":66},"189":{"index":189,"count":18},"190":{"index":190,"count":48},"191":{"index":191,"count":284},"192":{"index":192,"count":60},"193":{"index":193,"count":16},"194":{"index":194,"count":4},"195":{"index":195,"count":4},"196":{"index":196,"count":84},"197":{"index":197,"count":4},"198":{"index":198,"count":40},"199":{"index":199,"count":2926},"200":{"index":200,"count":48},"201":{"index":201,"count":958},"202":{"index":202,"count":4},"203":{"index":203,"count":64049},"204":{"index":204,"count":12726},"205":{"index":205,"count":1578},"206":{"index":206,"count":520},"207":{"index":207,"count":996},"208":{"index":208,"count":392},"209":{"index":209,"count":18},"210":{"index":210,"count":2},"211":{"index":211,"count":28},"212":{"index":212,"count":230},"213":{"index":213,"count":186},"214":{"index":214,"count":36},"215":{"index":215,"count":36},"216":{"index":216,"count":10},"217":{"index":217,"count":26},"218":{"index":218,"count":14},"219":{"index":219,"count":70},"220":{"index":220,"count":8},"221":{"index":221,"count":250},"222":{"index":222,"count":18},"223":{"index":223,"count":8},"224":{"index":224,"count":184},"225":{"index":225,"count":158},"226":{"index":226,"count":32},"227":{"index":227,"count":42},"228":{"index":228,"count":4},"229":{"index":229,"count":84},"230":{"index":230,"count":8},"231":{"index":231,"count":18},"232":{"index":232,"count":148},"233":{"index":233,"count":184},"234":{"index":234,"count":134},"235":{"index":235,"count":10},"236":{"index":236,"count":36},"237":{"index":237,"count":20},"238":{"index":238,"count":10},"239":{"index":239,"count":8},"240":{"index":240,"count":16},"241":{"index":241,"count":8},"242":{"index":242,"count":8},"243":{"index":243,"count":108},"244":{"index":244,"count":60},"245":{"index":245,"count":2246},"246":{"index":246,"count":903},"247":{"index":247,"count":674},"248":{"index":248,"count":14},"249":{"index":249,"count":116},"250":{"index":250,"count":2},"251":{"index":251,"count":102},"252":{"index":252,"count":88},"253":{"index":253,"count":3},"254":{"index":254,"count":36},"255":{"index":255,"count":148},"256":{"index":256,"count":178},"257":{"index":257,"count":32},"258":{"index":258,"count":110},"259":{"index":259,"count":46},"260":{"index":260,"count":56},"261":{"index":261,"count":42},"262":{"index":262,"count":42},"263":{"index":263,"count":4},"264":{"index":264,"count":42},"265":{"index":265,"count":8},"266":{"index":266,"count":98},"267":{"index":267,"count":22},"268":{"index":268,"count":12},"269":{"index":269,"count":2246},"270":{"index":270,"count":1516},"271":{"index":271,"count":40},"272":{"index":272,"count":6},"273":{"index":273,"count":98},"274":{"index":274,"count":1372},"275":{"index":275,"count":22},"276":{"index":276,"count":16},"277":{"index":277,"count":2},"278":{"index":278,"count":2},"279":{"index":279,"count":12},"280":{"index":280,"count":2246},"281":{"index":281,"count":48},"282":{"index":282,"count":16},"283":{"index":283,"count":8},"284":{"index":284,"count":2318},"285":{"index":285,"count":40},"286":{"index":286,"count":16},"287":{"index":287,"count":8},"288":{"index":288,"count":16},"289":{"index":289,"count":12},"290":{"index":290,"count":6},"291":{"index":291,"count":2216},"292":{"index":292,"count":34},"293":{"index":293,"count":2156},"294":{"index":294,"count":60},"295":{"index":295,"count":2146},"296":{"index":296,"count":10},"297":{"index":297,"count":2146},"298":{"index":298,"count":18},"299":{"index":299,"count":8},"300":{"index":300,"count":2},"301":{"index":301,"count":2110},"302":{"index":302,"count":8},"303":{"index":303,"count":2100},"304":{"index":304,"count":10},"305":{"index":305,"count":2090},"306":{"index":306,"count":10},"307":{"index":307,"count":2078},"308":{"index":308,"count":12},"309":{"index":309,"count":2068},"310":{"index":310,"count":10},"311":{"index":311,"count":2058},"312":{"index":312,"count":10},"313":{"index":313,"count":2058},"314":{"index":314,"count":4},"315":{"index":315,"count":2058},"316":{"index":316,"count":160},"317":{"index":317,"count":16},"318":{"index":318,"count":8},"319":{"index":319,"count":1644},"320":{"index":320,"count":4},"321":{"index":321,"count":6},"322":{"index":322,"count":2},"323":{"index":323,"count":166},"324":{"index":324,"count":270},"325":{"index":325,"count":122},"327":{"index":327,"count":166},"328":{"index":328,"count":710},"329":{"index":329,"count":84},"330":{"index":330,"count":200},"331":{"index":331,"count":12},"332":{"index":332,"count":26},"333":{"index":333,"count":76},"334":{"index":334,"count":162},"335":{"index":335,"count":200},"336":{"index":336,"count":78},"337":{"index":337,"count":116},"338":{"index":338,"count":26},"339":{"index":339,"count":18},"340":{"index":340,"count":166},"341":{"index":341,"count":32},"342":{"index":342,"count":6},"343":{"index":343,"count":10},"344":{"index":344,"count":16},"345":{"index":345,"count":2},"346":{"index":346,"count":64},"347":{"index":347,"count":20},"348":{"index":348,"count":56},"349":{"index":349,"count":10},"350":{"index":350,"count":46},"351":{"index":351,"count":20},"352":{"index":352,"count":10},"353":{"index":353,"count":26},"354":{"index":354,"count":14},"355":{"index":355,"count":12},"356":{"index":356,"count":22},"357":{"index":357,"count":24},"358":{"index":358,"count":6},"359":{"index":359,"count":4},"360":{"index":360,"count":20},"361":{"index":361,"count":42},"362":{"index":362,"count":10},"363":{"index":363,"count":8},"364":{"index":364,"count":10},"365":{"index":365,"count":4},"366":{"index":366,"count":12},"367":{"index":367,"count":8},"368":{"index":368,"count":4},"369":{"index":369,"count":46},"370":{"index":370,"count":8},"371":{"index":371,"count":4},"372":{"index":372,"count":10},"373":{"index":373,"count":4},"374":{"index":374,"count":16},"375":{"index":375,"count":8},"376":{"index":376,"count":4},"377":{"index":377,"count":24},"378":{"index":378,"count":6},"379":{"index":379,"count":12},"380":{"index":380,"count":6},"381":{"index":381,"count":6},"382":{"index":382,"count":6},"383":{"index":383,"count":2},"384":{"index":384,"count":16},"385":{"index":385,"count":6},"386":{"index":386,"count":12},"387":{"index":387,"count":6},"388":{"index":388,"count":6},"389":{"index":389,"count":24},"390":{"index":390,"count":8},"392":{"index":392,"count":12},"393":{"index":393,"count":2},"394":{"index":394,"count":18},"395":{"index":395,"count":6},"396":{"index":396,"count":24},"397":{"index":397,"count":4},"398":{"index":398,"count":24},"399":{"index":399,"count":24},"400":{"index":400,"count":12},"401":{"index":401,"count":30},"402":{"index":402,"count":24},"403":{"index":403,"count":4},"404":{"index":404,"count":4},"405":{"index":405,"count":2},"406":{"index":406,"count":1868},"407":{"index":407,"count":24},"408":{"index":408,"count":416},"409":{"index":409,"count":18},"410":{"index":410,"count":116},"411":{"index":411,"count":166},"412":{"index":412,"count":116},"413":{"index":413,"count":522},"414":{"index":414,"count":46},"415":{"index":415,"count":42},"416":{"index":416,"count":2},"417":{"index":417,"count":16},"418":{"index":418,"count":56},"419":{"index":419,"count":2},"420":{"index":420,"count":32},"421":{"index":421,"count":24},"422":{"index":422,"count":12},"423":{"index":423,"count":24},"424":{"index":424,"count":30},"425":{"index":425,"count":116},"426":{"index":426,"count":64},"427":{"index":427,"count":16},"428":{"index":428,"count":40},"429":{"index":429,"count":36},"430":{"index":430,"count":4},"431":{"index":431,"count":386},"432":{"index":432,"count":640},"433":{"index":433,"count":370},"435":{"index":435,"count":250},"436":{"index":436,"count":8},"437":{"index":437,"count":12},"438":{"index":438,"count":8},"439":{"index":439,"count":424},"440":{"index":440,"count":182},"442":{"index":442,"count":290},"443":{"index":443,"count":24},"444":{"index":444,"count":8},"445":{"index":445,"count":246},"446":{"index":446,"count":14},"447":{"index":447,"count":4},"448":{"index":448,"count":58},"449":{"index":449,"count":70},"450":{"index":450,"count":16},"451":{"index":451,"count":8},"452":{"index":452,"count":4},"453":{"index":453,"count":38},"454":{"index":454,"count":12},"455":{"index":455,"count":8},"456":{"index":456,"count":6},"457":{"index":457,"count":30},"458":{"index":458,"count":36},"459":{"index":459,"count":102},"460":{"index":460,"count":52},"461":{"index":461,"count":20},"462":{"index":462,"count":12},"463":{"index":463,"count":32},"464":{"index":464,"count":12},"465":{"index":465,"count":4},"466":{"index":466,"count":22},"467":{"index":467,"count":32},"468":{"index":468,"count":12},"469":{"index":469,"count":4},"470":{"index":470,"count":4},"471":{"index":471,"count":20},"472":{"index":472,"count":4},"473":{"index":473,"count":4},"474":{"index":474,"count":6},"475":{"index":475,"count":14},"476":{"index":476,"count":24},"477":{"index":477,"count":1972},"478":{"index":478,"count":778},"479":{"index":479,"count":26},"480":{"index":480,"count":288},"481":{"index":481,"count":464},"482":{"index":482,"count":1194},"483":{"index":483,"count":1422},"484":{"index":484,"count":1440},"485":{"index":485,"count":1250},"487":{"index":487,"count":20},"488":{"index":488,"count":4},"489":{"index":489,"count":42},"490":{"index":490,"count":20},"491":{"index":491,"count":1250},"493":{"index":493,"count":1422},"494":{"index":494,"count":50},"495":{"index":495,"count":14},"496":{"index":496,"count":10},"497":{"index":497,"count":2952},"498":{"index":498,"count":4388},"499":{"index":499,"count":210},"500":{"index":500,"count":4},"501":{"index":501,"count":18},"502":{"index":502,"count":2},"503":{"index":503,"count":188},"504":{"index":504,"count":218},"505":{"index":505,"count":28},"506":{"index":506,"count":4},"507":{"index":507,"count":24},"508":{"index":508,"count":2},"509":{"index":509,"count":190},"510":{"index":510,"count":8},"511":{"index":511,"count":28},"512":{"index":512,"count":28},"513":{"index":513,"count":82},"514":{"index":514,"count":22},"515":{"index":515,"count":40},"516":{"index":516,"count":2},"517":{"index":517,"count":20},"518":{"index":518,"count":1020},"519":{"index":519,"count":32},"520":{"index":520,"count":2},"521":{"index":521,"count":2826},"522":{"index":522,"count":82},"523":{"index":523,"count":62},"524":{"index":524,"count":12},"525":{"index":525,"count":12},"526":{"index":526,"count":12},"527":{"index":527,"count":12},"528":{"index":528,"count":213},"529":{"index":529,"count":562},"530":{"index":530,"count":638},"531":{"index":531,"count":22968},"532":{"index":532,"count":23268},"533":{"index":533,"count":1538},"534":{"index":534,"count":320},"535":{"index":535,"count":112},"536":{"index":536,"count":28},"537":{"index":537,"count":28},"538":{"index":538,"count":20192},"539":{"index":539,"count":20192},"540":{"index":540,"count":20192},"541":{"index":541,"count":20192},"542":{"index":542,"count":1106},"543":{"index":543,"count":406},"544":{"index":544,"count":406},"545":{"index":545,"count":406},"546":{"index":546,"count":1422},"547":{"index":547,"count":410},"548":{"index":548,"count":1026},"549":{"index":549,"count":638},"550":{"index":550,"count":22},"551":{"index":551,"count":1422},"552":{"index":552,"count":410},"553":{"index":553,"count":1026},"554":{"index":554,"count":638},"555":{"index":555,"count":22},"558":{"index":558,"count":1422},"559":{"index":559,"count":7},"560":{"index":560,"count":1414},"561":{"index":561,"count":22},"562":{"index":562,"count":410},"563":{"index":563,"count":18},"564":{"index":564,"count":1420},"568":{"index":568,"count":1422},"569":{"index":569,"count":22},"570":{"index":570,"count":22},"571":{"index":571,"count":18},"572":{"index":572,"count":776},"573":{"index":573,"count":1422},"574":{"index":574,"count":1},"575":{"index":575,"count":1},"576":{"index":576,"count":40},"577":{"index":577,"count":40},"578":{"index":578,"count":1}},"hash":"f217f5b6b13e636e2d9684a49f5beaa1","instrumentor":{"blockCounter":579,"nodeCounter":2417,"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, exports:true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // Return the next character and move forward.\n\n    function nextChar() {\n        return source[index++];\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = nextChar();\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = nextChar();\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += nextChar();\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = nextChar();\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += nextChar();\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (isOctalDigit(ch)) {\n                    number += nextChar();\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: true,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === '.') {\n            number += nextChar();\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += nextChar();\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += nextChar();\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += nextChar();\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += nextChar();\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = nextChar();\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = nextChar();\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\v';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(nextChar());\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(nextChar());\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str = '', ch, start, pattern, flags, value, classMarker = false, restore;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = nextChar();\n\n        while (index < length) {\n            ch = nextChar();\n            str += ch;\n            if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '\\\\') {\n                    ch = nextChar();\n                    // ECMA-262 7.8.5\n                    if (isLineTerminator(ch)) {\n                        throwError({}, Messages.UnterminatedRegExp);\n                    }\n                    str += ch;\n                } else if (ch === '/') {\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (str.length === 1) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        var error;\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        var s;\n\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwError(token, Messages.StrictReservedWord);\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n        return;\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        switch (expr.type) {\n        case Syntax.Identifier:\n        case Syntax.MemberExpression:\n        case Syntax.CallExpression:\n            return true;\n        }\n        return false;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [],\n            undef;\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(undef);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwError(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            body: body\n        };\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwError(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    throwUnexpected(lex());\n                }\n                param = [ parseVariableIdentifier() ];\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction(param, token),\n                    kind: 'set'\n                };\n            } else {\n                expect(':');\n                return {\n                    type: Syntax.Property,\n                    key: id,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: parseAssignmentExpression(),\n                kind: 'init'\n            };\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var token, properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwError({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var expr,\n            token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            lex();\n            state.lastParenthesized = expr = parseExpression();\n            expect(')');\n            return expr;\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember(object) {\n        return {\n            type: Syntax.MemberExpression,\n            computed: false,\n            object: object,\n            property: parseNonComputedProperty()\n        };\n    }\n\n    function parseComputedMember(object) {\n        var property, expr;\n\n        expect('[');\n        property = parseExpression();\n        expr = {\n            type: Syntax.MemberExpression,\n            computed: true,\n            object: object,\n            property: property\n        };\n        expect(']');\n        return expr;\n    }\n\n    function parseCallMember(object) {\n        return {\n            type: Syntax.CallExpression,\n            callee: object,\n            'arguments': parseArguments()\n        };\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (match('(')) {\n                expr = parseCallMember(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall();\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPostfix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n        expr = parseShiftExpression();\n        state.allowIn = previousAllowIn;\n\n        if (match('<') || match('>') || match('<=') || match('>=')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        } else if (state.allowIn && matchKeyword('in')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: 'in',\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        } else if (matchKeyword('instanceof')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: 'instanceof',\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while (match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var expr;\n\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        while (index < length) {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        }\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwError({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        return {\n            type: Syntax.ForInStatement,\n            left: left,\n            right: right,\n            body: body,\n            each: false\n        };\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, oldInSwitch;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant\n            };\n        }\n\n        cases = [];\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            cases.push(parseSwitchCase());\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (!match(')')) {\n            param = parseExpression();\n            // 12.14.1\n            if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {\n                throwErrorTolerant({}, Messages.StrictCatchVariable);\n            }\n        }\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            guard: null,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwError(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        throwError(token, Messages.StrictParamName);\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        throwError(token, Messages.StrictParamDupe);\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            body: body\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, firstRestricted, message, param, params = [], body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        throwError(token, Messages.StrictParamName);\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        throwError(token, Messages.StrictParamDupe);\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            body: body\n        };\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseSourceElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(start, end, type, value) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            range: [start, end],\n            type: type,\n            value: value\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    addComment(start, index, 'Line', comment);\n                } else if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    addComment(start, index, 'Line', comment);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            addComment(start, index, 'Block', comment);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function collectToken() {\n        var token = extra.advance(),\n            range,\n            value;\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, regex, token;\n\n        skipComment();\n\n        pos = index;\n        regex = extra.scanRegExp();\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index]\n        });\n\n        return regex;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range && typeof node.range === 'undefined') {\n                    node.range = [node.left.range[0], node.right.range[1]];\n                }\n                if (loc && typeof node.loc === 'undefined') {\n                    node.loc = {\n                        start: node.left.loc.start,\n                        end: node.right.loc.end\n                    };\n                }\n            }\n\n            return function () {\n                var node, rangeInfo, locInfo;\n\n                skipComment();\n                rangeInfo = [index, 0];\n                locInfo = {\n                    start: {\n                        line: lineNumber,\n                        column: index - lineStart\n                    }\n                };\n\n                node = parseFunction.apply(null, arguments);\n                if (typeof node !== 'undefined') {\n\n                    if (range) {\n                        rangeInfo[1] = index;\n                        node.range = rangeInfo;\n                    }\n\n                    if (loc) {\n                        locInfo.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        node.loc = locInfo;\n                    }\n\n                    if (isBinary(node)) {\n                        visit(node);\n                    }\n\n                    if (node.type === Syntax.MemberExpression) {\n                        if (typeof node.object.range !== 'undefined') {\n                            node.range[0] = node.object.range[0];\n                        }\n                        if (typeof node.object.loc !== 'undefined') {\n                            node.loc.start = node.object.loc.start;\n                        }\n                    }\n                    return node;\n                }\n            };\n\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCallMember = parseCallMember;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedMember = parseNonComputedMember;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCallMember = wrapTracking(extra.parseCallMember);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedMember = wrapTracking(extra.parseNonComputedMember);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCallMember = extra.parseCallMember;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedMember = extra.parseNonComputedMember;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            lastParenthesized: null,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.0-dev';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}(typeof exports === 'undefined' ? (esprima = {}) : exports));\n/* vim: set sw=4 ts=4 et tw=80 : */","nodes":{"0":{"loc":{"start":{"line":40,"column":0},"end":{"line":3580,"column":62}},"id":0},"1":{"loc":{"start":{"line":40,"column":0},"end":{"line":3580,"column":61}},"id":1},"2":{"loc":{"start":{"line":41,"column":4},"end":{"line":41,"column":17}},"id":2},"3":{"loc":{"start":{"line":43,"column":4},"end":{"line":57,"column":14}},"id":3},"4":{"loc":{"start":{"line":59,"column":4},"end":{"line":68,"column":6}},"id":4},"5":{"loc":{"start":{"line":70,"column":4},"end":{"line":70,"column":19}},"id":5},"6":{"loc":{"start":{"line":71,"column":4},"end":{"line":71,"column":48}},"id":6},"7":{"loc":{"start":{"line":72,"column":4},"end":{"line":72,"column":35}},"id":7},"8":{"loc":{"start":{"line":73,"column":4},"end":{"line":73,"column":47}},"id":8},"9":{"loc":{"start":{"line":74,"column":4},"end":{"line":74,"column":41}},"id":9},"10":{"loc":{"start":{"line":75,"column":4},"end":{"line":75,"column":42}},"id":10},"11":{"loc":{"start":{"line":76,"column":4},"end":{"line":76,"column":48}},"id":11},"12":{"loc":{"start":{"line":77,"column":4},"end":{"line":77,"column":47}},"id":12},"13":{"loc":{"start":{"line":78,"column":4},"end":{"line":78,"column":46}},"id":13},"14":{"loc":{"start":{"line":80,"column":4},"end":{"line":121,"column":6}},"id":14},"15":{"loc":{"start":{"line":123,"column":4},"end":{"line":127,"column":6}},"id":15},"16":{"loc":{"start":{"line":130,"column":4},"end":{"line":163,"column":6}},"id":16},"17":{"loc":{"start":{"line":166,"column":4},"end":{"line":169,"column":6}},"id":17},"18":{"loc":{"start":{"line":178,"column":12},"end":{"line":178,"column":50}},"id":18},"19":{"loc":{"start":{"line":178,"column":28},"end":{"line":178,"column":48}},"id":19},"20":{"loc":{"start":{"line":183,"column":8},"end":{"line":183,"column":38}},"id":20},"21":{"loc":{"start":{"line":183,"column":15},"end":{"line":183,"column":37}},"id":21},"22":{"loc":{"start":{"line":186,"column":8},"end":{"line":186,"column":43}},"id":22},"23":{"loc":{"start":{"line":187,"column":8},"end":{"line":189,"column":10}},"id":23},"24":{"loc":{"start":{"line":188,"column":12},"end":{"line":188,"column":51}},"id":24},"25":{"loc":{"start":{"line":188,"column":19},"end":{"line":188,"column":50}},"id":25},"26":{"loc":{"start":{"line":188,"column":31},"end":{"line":188,"column":41}},"id":26},"27":{"loc":{"start":{"line":193,"column":8},"end":{"line":193,"column":45}},"id":27},"28":{"loc":{"start":{"line":193,"column":15},"end":{"line":193,"column":44}},"id":28},"29":{"loc":{"start":{"line":193,"column":15},"end":{"line":193,"column":39}},"id":29},"30":{"loc":{"start":{"line":197,"column":8},"end":{"line":197,"column":57}},"id":30},"31":{"loc":{"start":{"line":197,"column":15},"end":{"line":197,"column":56}},"id":31},"32":{"loc":{"start":{"line":197,"column":15},"end":{"line":197,"column":51}},"id":32},"33":{"loc":{"start":{"line":201,"column":8},"end":{"line":201,"column":43}},"id":33},"34":{"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":42}},"id":34},"35":{"loc":{"start":{"line":201,"column":15},"end":{"line":201,"column":37}},"id":35},"36":{"loc":{"start":{"line":208,"column":8},"end":{"line":211,"column":136}},"id":36},"37":{"loc":{"start":{"line":208,"column":15},"end":{"line":211,"column":135}},"id":37},"38":{"loc":{"start":{"line":208,"column":15},"end":{"line":209,"column":50}},"id":38},"39":{"loc":{"start":{"line":208,"column":15},"end":{"line":209,"column":29}},"id":39},"40":{"loc":{"start":{"line":208,"column":15},"end":{"line":208,"column":69}},"id":40},"41":{"loc":{"start":{"line":208,"column":15},"end":{"line":208,"column":48}},"id":41},"42":{"loc":{"start":{"line":208,"column":15},"end":{"line":208,"column":27}},"id":42},"43":{"loc":{"start":{"line":208,"column":31},"end":{"line":208,"column":48}},"id":43},"44":{"loc":{"start":{"line":208,"column":52},"end":{"line":208,"column":69}},"id":44},"45":{"loc":{"start":{"line":209,"column":12},"end":{"line":209,"column":29}},"id":45},"46":{"loc":{"start":{"line":209,"column":33},"end":{"line":209,"column":50}},"id":46},"47":{"loc":{"start":{"line":210,"column":12},"end":{"line":211,"column":135}},"id":47},"48":{"loc":{"start":{"line":210,"column":13},"end":{"line":210,"column":39}},"id":48},"49":{"loc":{"start":{"line":210,"column":13},"end":{"line":210,"column":29}},"id":49},"50":{"loc":{"start":{"line":211,"column":13},"end":{"line":211,"column":134}},"id":50},"51":{"loc":{"start":{"line":211,"column":13},"end":{"line":211,"column":129}},"id":51},"52":{"loc":{"start":{"line":217,"column":8},"end":{"line":217,"column":82}},"id":52},"53":{"loc":{"start":{"line":217,"column":15},"end":{"line":217,"column":81}},"id":53},"54":{"loc":{"start":{"line":217,"column":16},"end":{"line":217,"column":61}},"id":54},"55":{"loc":{"start":{"line":217,"column":16},"end":{"line":217,"column":42}},"id":55},"56":{"loc":{"start":{"line":217,"column":16},"end":{"line":217,"column":27}},"id":56},"57":{"loc":{"start":{"line":217,"column":31},"end":{"line":217,"column":42}},"id":57},"58":{"loc":{"start":{"line":217,"column":46},"end":{"line":217,"column":61}},"id":58},"59":{"loc":{"start":{"line":217,"column":65},"end":{"line":217,"column":80}},"id":59},"60":{"loc":{"start":{"line":223,"column":8},"end":{"line":225,"column":83}},"id":60},"61":{"loc":{"start":{"line":223,"column":15},"end":{"line":225,"column":82}},"id":61},"62":{"loc":{"start":{"line":223,"column":15},"end":{"line":224,"column":64}},"id":62},"63":{"loc":{"start":{"line":223,"column":15},"end":{"line":224,"column":36}},"id":63},"64":{"loc":{"start":{"line":223,"column":15},"end":{"line":223,"column":60}},"id":64},"65":{"loc":{"start":{"line":223,"column":15},"end":{"line":223,"column":43}},"id":65},"66":{"loc":{"start":{"line":223,"column":15},"end":{"line":223,"column":27}},"id":66},"67":{"loc":{"start":{"line":223,"column":31},"end":{"line":223,"column":43}},"id":67},"68":{"loc":{"start":{"line":223,"column":47},"end":{"line":223,"column":60}},"id":68},"69":{"loc":{"start":{"line":224,"column":12},"end":{"line":224,"column":36}},"id":69},"70":{"loc":{"start":{"line":224,"column":13},"end":{"line":224,"column":22}},"id":70},"71":{"loc":{"start":{"line":224,"column":26},"end":{"line":224,"column":35}},"id":71},"72":{"loc":{"start":{"line":224,"column":40},"end":{"line":224,"column":64}},"id":72},"73":{"loc":{"start":{"line":224,"column":41},"end":{"line":224,"column":50}},"id":73},"74":{"loc":{"start":{"line":224,"column":54},"end":{"line":224,"column":63}},"id":74},"75":{"loc":{"start":{"line":225,"column":12},"end":{"line":225,"column":82}},"id":75},"76":{"loc":{"start":{"line":225,"column":13},"end":{"line":225,"column":39}},"id":76},"77":{"loc":{"start":{"line":225,"column":14},"end":{"line":225,"column":30}},"id":77},"78":{"loc":{"start":{"line":225,"column":43},"end":{"line":225,"column":81}},"id":78},"79":{"loc":{"start":{"line":229,"column":8},"end":{"line":232,"column":82}},"id":79},"80":{"loc":{"start":{"line":229,"column":15},"end":{"line":232,"column":81}},"id":80},"81":{"loc":{"start":{"line":229,"column":15},"end":{"line":231,"column":40}},"id":81},"82":{"loc":{"start":{"line":229,"column":15},"end":{"line":230,"column":64}},"id":82},"83":{"loc":{"start":{"line":229,"column":15},"end":{"line":230,"column":36}},"id":83},"84":{"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":60}},"id":84},"85":{"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":43}},"id":85},"86":{"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":27}},"id":86},"87":{"loc":{"start":{"line":229,"column":31},"end":{"line":229,"column":43}},"id":87},"88":{"loc":{"start":{"line":229,"column":47},"end":{"line":229,"column":60}},"id":88},"89":{"loc":{"start":{"line":230,"column":12},"end":{"line":230,"column":36}},"id":89},"90":{"loc":{"start":{"line":230,"column":13},"end":{"line":230,"column":22}},"id":90},"91":{"loc":{"start":{"line":230,"column":26},"end":{"line":230,"column":35}},"id":91},"92":{"loc":{"start":{"line":230,"column":40},"end":{"line":230,"column":64}},"id":92},"93":{"loc":{"start":{"line":230,"column":41},"end":{"line":230,"column":50}},"id":93},"94":{"loc":{"start":{"line":230,"column":54},"end":{"line":230,"column":63}},"id":94},"95":{"loc":{"start":{"line":231,"column":12},"end":{"line":231,"column":40}},"id":95},"96":{"loc":{"start":{"line":231,"column":13},"end":{"line":231,"column":24}},"id":96},"97":{"loc":{"start":{"line":231,"column":28},"end":{"line":231,"column":39}},"id":97},"98":{"loc":{"start":{"line":232,"column":12},"end":{"line":232,"column":81}},"id":98},"99":{"loc":{"start":{"line":232,"column":13},"end":{"line":232,"column":39}},"id":99},"100":{"loc":{"start":{"line":232,"column":14},"end":{"line":232,"column":30}},"id":100},"101":{"loc":{"start":{"line":232,"column":43},"end":{"line":232,"column":80}},"id":101},"102":{"loc":{"start":{"line":247,"column":12},"end":{"line":247,"column":24}},"id":102},"103":{"loc":{"start":{"line":250,"column":8},"end":{"line":250,"column":21}},"id":103},"104":{"loc":{"start":{"line":266,"column":12},"end":{"line":266,"column":24}},"id":104},"105":{"loc":{"start":{"line":269,"column":8},"end":{"line":269,"column":21}},"id":105},"106":{"loc":{"start":{"line":273,"column":8},"end":{"line":273,"column":51}},"id":106},"107":{"loc":{"start":{"line":273,"column":15},"end":{"line":273,"column":50}},"id":107},"108":{"loc":{"start":{"line":273,"column":15},"end":{"line":273,"column":28}},"id":108},"109":{"loc":{"start":{"line":273,"column":32},"end":{"line":273,"column":50}},"id":109},"110":{"loc":{"start":{"line":279,"column":8},"end":{"line":279,"column":28}},"id":110},"111":{"loc":{"start":{"line":282,"column":12},"end":{"line":282,"column":70}},"id":111},"112":{"loc":{"start":{"line":282,"column":22},"end":{"line":282,"column":69}},"id":112},"113":{"loc":{"start":{"line":282,"column":22},"end":{"line":282,"column":52}},"id":113},"114":{"loc":{"start":{"line":282,"column":22},"end":{"line":282,"column":35}},"id":114},"115":{"loc":{"start":{"line":282,"column":39},"end":{"line":282,"column":52}},"id":115},"116":{"loc":{"start":{"line":282,"column":56},"end":{"line":282,"column":69}},"id":116},"117":{"loc":{"start":{"line":285,"column":12},"end":{"line":285,"column":91}},"id":117},"118":{"loc":{"start":{"line":285,"column":22},"end":{"line":285,"column":90}},"id":118},"119":{"loc":{"start":{"line":285,"column":22},"end":{"line":285,"column":72}},"id":119},"120":{"loc":{"start":{"line":285,"column":22},"end":{"line":285,"column":54}},"id":120},"121":{"loc":{"start":{"line":285,"column":22},"end":{"line":285,"column":36}},"id":121},"122":{"loc":{"start":{"line":285,"column":40},"end":{"line":285,"column":54}},"id":122},"123":{"loc":{"start":{"line":285,"column":58},"end":{"line":285,"column":72}},"id":123},"124":{"loc":{"start":{"line":285,"column":76},"end":{"line":285,"column":90}},"id":124},"125":{"loc":{"start":{"line":288,"column":12},"end":{"line":288,"column":114}},"id":125},"126":{"loc":{"start":{"line":288,"column":22},"end":{"line":288,"column":113}},"id":126},"127":{"loc":{"start":{"line":288,"column":22},"end":{"line":288,"column":94}},"id":127},"128":{"loc":{"start":{"line":288,"column":22},"end":{"line":288,"column":75}},"id":128},"129":{"loc":{"start":{"line":288,"column":22},"end":{"line":288,"column":56}},"id":129},"130":{"loc":{"start":{"line":288,"column":22},"end":{"line":288,"column":37}},"id":130},"131":{"loc":{"start":{"line":288,"column":41},"end":{"line":288,"column":56}},"id":131},"132":{"loc":{"start":{"line":288,"column":60},"end":{"line":288,"column":75}},"id":132},"133":{"loc":{"start":{"line":288,"column":79},"end":{"line":288,"column":94}},"id":133},"134":{"loc":{"start":{"line":288,"column":98},"end":{"line":288,"column":113}},"id":134},"135":{"loc":{"start":{"line":291,"column":12},"end":{"line":291,"column":99}},"id":135},"136":{"loc":{"start":{"line":291,"column":22},"end":{"line":291,"column":98}},"id":136},"137":{"loc":{"start":{"line":291,"column":22},"end":{"line":291,"column":78}},"id":137},"138":{"loc":{"start":{"line":291,"column":22},"end":{"line":291,"column":58}},"id":138},"139":{"loc":{"start":{"line":291,"column":22},"end":{"line":291,"column":38}},"id":139},"140":{"loc":{"start":{"line":291,"column":42},"end":{"line":291,"column":58}},"id":140},"141":{"loc":{"start":{"line":291,"column":62},"end":{"line":291,"column":78}},"id":141},"142":{"loc":{"start":{"line":291,"column":82},"end":{"line":291,"column":98}},"id":142},"143":{"loc":{"start":{"line":294,"column":12},"end":{"line":294,"column":103}},"id":143},"144":{"loc":{"start":{"line":294,"column":22},"end":{"line":294,"column":102}},"id":144},"145":{"loc":{"start":{"line":294,"column":22},"end":{"line":294,"column":81}},"id":145},"146":{"loc":{"start":{"line":294,"column":22},"end":{"line":294,"column":60}},"id":146},"147":{"loc":{"start":{"line":294,"column":22},"end":{"line":294,"column":39}},"id":147},"148":{"loc":{"start":{"line":294,"column":43},"end":{"line":294,"column":60}},"id":148},"149":{"loc":{"start":{"line":294,"column":64},"end":{"line":294,"column":81}},"id":149},"150":{"loc":{"start":{"line":294,"column":85},"end":{"line":294,"column":102}},"id":150},"151":{"loc":{"start":{"line":297,"column":12},"end":{"line":297,"column":63}},"id":151},"152":{"loc":{"start":{"line":297,"column":22},"end":{"line":297,"column":62}},"id":152},"153":{"loc":{"start":{"line":297,"column":22},"end":{"line":297,"column":40}},"id":153},"154":{"loc":{"start":{"line":297,"column":44},"end":{"line":297,"column":62}},"id":154},"155":{"loc":{"start":{"line":300,"column":12},"end":{"line":300,"column":88}},"id":155},"156":{"loc":{"start":{"line":300,"column":22},"end":{"line":300,"column":87}},"id":156},"157":{"loc":{"start":{"line":300,"column":22},"end":{"line":300,"column":64}},"id":157},"158":{"loc":{"start":{"line":300,"column":22},"end":{"line":300,"column":41}},"id":158},"159":{"loc":{"start":{"line":300,"column":45},"end":{"line":300,"column":64}},"id":159},"160":{"loc":{"start":{"line":300,"column":68},"end":{"line":300,"column":87}},"id":160},"161":{"loc":{"start":{"line":303,"column":12},"end":{"line":303,"column":44}},"id":161},"162":{"loc":{"start":{"line":303,"column":22},"end":{"line":303,"column":43}},"id":162},"163":{"loc":{"start":{"line":308,"column":12},"end":{"line":308,"column":24}},"id":163},"164":{"loc":{"start":{"line":315,"column":12},"end":{"line":315,"column":24}},"id":164},"165":{"loc":{"start":{"line":320,"column":12},"end":{"line":320,"column":24}},"id":165},"166":{"loc":{"start":{"line":323,"column":12},"end":{"line":323,"column":50}},"id":166},"167":{"loc":{"start":{"line":323,"column":22},"end":{"line":323,"column":50}},"id":167},"168":{"loc":{"start":{"line":324,"column":12},"end":{"line":324,"column":24}},"id":168},"169":{"loc":{"start":{"line":327,"column":8},"end":{"line":327,"column":40}},"id":169},"170":{"loc":{"start":{"line":327,"column":15},"end":{"line":327,"column":39}},"id":170},"171":{"loc":{"start":{"line":333,"column":8},"end":{"line":333,"column":31}},"id":171},"172":{"loc":{"start":{"line":333,"column":22},"end":{"line":333,"column":29}},"id":172},"173":{"loc":{"start":{"line":339,"column":8},"end":{"line":339,"column":42}},"id":173},"174":{"loc":{"start":{"line":341,"column":8},"end":{"line":341,"column":29}},"id":174},"175":{"loc":{"start":{"line":342,"column":8},"end":{"line":342,"column":28}},"id":175},"176":{"loc":{"start":{"line":344,"column":15},"end":{"line":344,"column":29}},"id":176},"177":{"loc":{"start":{"line":345,"column":12},"end":{"line":345,"column":31}},"id":177},"178":{"loc":{"start":{"line":348,"column":16},"end":{"line":348,"column":32}},"id":178},"179":{"loc":{"start":{"line":348,"column":21},"end":{"line":348,"column":31}},"id":179},"180":{"loc":{"start":{"line":349,"column":20},"end":{"line":349,"column":40}},"id":180},"181":{"loc":{"start":{"line":350,"column":20},"end":{"line":350,"column":40}},"id":181},"182":{"loc":{"start":{"line":351,"column":24},"end":{"line":351,"column":61}},"id":182},"183":{"loc":{"start":{"line":351,"column":24},"end":{"line":351,"column":35}},"id":183},"184":{"loc":{"start":{"line":351,"column":39},"end":{"line":351,"column":61}},"id":184},"185":{"loc":{"start":{"line":352,"column":24},"end":{"line":352,"column":32}},"id":185},"186":{"loc":{"start":{"line":352,"column":24},"end":{"line":352,"column":31}},"id":186},"187":{"loc":{"start":{"line":354,"column":20},"end":{"line":354,"column":33}},"id":187},"188":{"loc":{"start":{"line":354,"column":20},"end":{"line":354,"column":32}},"id":188},"189":{"loc":{"start":{"line":355,"column":20},"end":{"line":355,"column":38}},"id":189},"190":{"loc":{"start":{"line":358,"column":20},"end":{"line":358,"column":40}},"id":190},"191":{"loc":{"start":{"line":359,"column":24},"end":{"line":359,"column":65}},"id":191},"192":{"loc":{"start":{"line":359,"column":24},"end":{"line":359,"column":35}},"id":192},"193":{"loc":{"start":{"line":359,"column":39},"end":{"line":359,"column":65}},"id":193},"194":{"loc":{"start":{"line":359,"column":46},"end":{"line":359,"column":55}},"id":194},"195":{"loc":{"start":{"line":360,"column":24},"end":{"line":360,"column":32}},"id":195},"196":{"loc":{"start":{"line":360,"column":24},"end":{"line":360,"column":31}},"id":196},"197":{"loc":{"start":{"line":362,"column":20},"end":{"line":362,"column":33}},"id":197},"198":{"loc":{"start":{"line":362,"column":20},"end":{"line":362,"column":32}},"id":198},"199":{"loc":{"start":{"line":363,"column":20},"end":{"line":363,"column":28}},"id":199},"200":{"loc":{"start":{"line":363,"column":20},"end":{"line":363,"column":27}},"id":200},"201":{"loc":{"start":{"line":364,"column":20},"end":{"line":364,"column":38}},"id":201},"202":{"loc":{"start":{"line":365,"column":24},"end":{"line":365,"column":39}},"id":202},"203":{"loc":{"start":{"line":366,"column":24},"end":{"line":366,"column":76}},"id":203},"204":{"loc":{"start":{"line":366,"column":24},"end":{"line":366,"column":75}},"id":204},"205":{"loc":{"start":{"line":369,"column":20},"end":{"line":369,"column":36}},"id":205},"206":{"loc":{"start":{"line":369,"column":25},"end":{"line":369,"column":35}},"id":206},"207":{"loc":{"start":{"line":370,"column":24},"end":{"line":370,"column":39}},"id":207},"208":{"loc":{"start":{"line":371,"column":24},"end":{"line":371,"column":76}},"id":208},"209":{"loc":{"start":{"line":371,"column":24},"end":{"line":371,"column":75}},"id":209},"210":{"loc":{"start":{"line":373,"column":24},"end":{"line":373,"column":34}},"id":210},"211":{"loc":{"start":{"line":374,"column":24},"end":{"line":374,"column":43}},"id":211},"212":{"loc":{"start":{"line":375,"column":28},"end":{"line":375,"column":38}},"id":212},"213":{"loc":{"start":{"line":376,"column":28},"end":{"line":376,"column":36}},"id":213},"214":{"loc":{"start":{"line":376,"column":28},"end":{"line":376,"column":35}},"id":214},"215":{"loc":{"start":{"line":377,"column":28},"end":{"line":377,"column":49}},"id":215},"216":{"loc":{"start":{"line":381,"column":23},"end":{"line":381,"column":33}},"id":216},"217":{"loc":{"start":{"line":382,"column":16},"end":{"line":382,"column":39}},"id":217},"218":{"loc":{"start":{"line":382,"column":28},"end":{"line":382,"column":37}},"id":218},"219":{"loc":{"start":{"line":383,"column":20},"end":{"line":383,"column":30}},"id":219},"220":{"loc":{"start":{"line":384,"column":20},"end":{"line":384,"column":31}},"id":220},"221":{"loc":{"start":{"line":385,"column":20},"end":{"line":385,"column":39}},"id":221},"222":{"loc":{"start":{"line":386,"column":27},"end":{"line":386,"column":37}},"id":222},"223":{"loc":{"start":{"line":387,"column":20},"end":{"line":387,"column":31}},"id":223},"224":{"loc":{"start":{"line":388,"column":20},"end":{"line":388,"column":40}},"id":224},"225":{"loc":{"start":{"line":389,"column":24},"end":{"line":389,"column":39}},"id":225},"226":{"loc":{"start":{"line":390,"column":24},"end":{"line":390,"column":76}},"id":226},"227":{"loc":{"start":{"line":390,"column":24},"end":{"line":390,"column":75}},"id":227},"228":{"loc":{"start":{"line":395,"column":23},"end":{"line":395,"column":39}},"id":228},"229":{"loc":{"start":{"line":396,"column":16},"end":{"line":396,"column":24}},"id":229},"230":{"loc":{"start":{"line":396,"column":16},"end":{"line":396,"column":23}},"id":230},"231":{"loc":{"start":{"line":397,"column":23},"end":{"line":397,"column":43}},"id":231},"232":{"loc":{"start":{"line":398,"column":16},"end":{"line":398,"column":24}},"id":232},"233":{"loc":{"start":{"line":398,"column":16},"end":{"line":398,"column":23}},"id":233},"234":{"loc":{"start":{"line":399,"column":20},"end":{"line":399,"column":58}},"id":234},"235":{"loc":{"start":{"line":399,"column":20},"end":{"line":399,"column":32}},"id":235},"236":{"loc":{"start":{"line":399,"column":36},"end":{"line":399,"column":58}},"id":236},"237":{"loc":{"start":{"line":400,"column":20},"end":{"line":400,"column":28}},"id":237},"238":{"loc":{"start":{"line":400,"column":20},"end":{"line":400,"column":27}},"id":238},"239":{"loc":{"start":{"line":402,"column":16},"end":{"line":402,"column":29}},"id":239},"240":{"loc":{"start":{"line":402,"column":16},"end":{"line":402,"column":28}},"id":240},"241":{"loc":{"start":{"line":403,"column":16},"end":{"line":403,"column":34}},"id":241},"242":{"loc":{"start":{"line":411,"column":8},"end":{"line":411,"column":33}},"id":242},"243":{"loc":{"start":{"line":413,"column":8},"end":{"line":413,"column":39}},"id":243},"244":{"loc":{"start":{"line":413,"column":33},"end":{"line":413,"column":34}},"id":244},"245":{"loc":{"start":{"line":413,"column":37},"end":{"line":413,"column":38}},"id":245},"246":{"loc":{"start":{"line":413,"column":14},"end":{"line":413,"column":30}},"id":246},"247":{"loc":{"start":{"line":414,"column":20},"end":{"line":414,"column":27}},"id":247},"248":{"loc":{"start":{"line":414,"column":29},"end":{"line":414,"column":32}},"id":248},"249":{"loc":{"start":{"line":415,"column":16},"end":{"line":415,"column":59}},"id":249},"250":{"loc":{"start":{"line":415,"column":16},"end":{"line":415,"column":30}},"id":250},"251":{"loc":{"start":{"line":415,"column":34},"end":{"line":415,"column":59}},"id":251},"252":{"loc":{"start":{"line":416,"column":16},"end":{"line":416,"column":32}},"id":252},"253":{"loc":{"start":{"line":416,"column":21},"end":{"line":416,"column":31}},"id":253},"254":{"loc":{"start":{"line":417,"column":16},"end":{"line":417,"column":80}},"id":254},"255":{"loc":{"start":{"line":417,"column":23},"end":{"line":417,"column":79}},"id":255},"256":{"loc":{"start":{"line":417,"column":23},"end":{"line":417,"column":32}},"id":256},"257":{"loc":{"start":{"line":417,"column":35},"end":{"line":417,"column":79}},"id":257},"258":{"loc":{"start":{"line":417,"column":62},"end":{"line":417,"column":78}},"id":258},"259":{"loc":{"start":{"line":419,"column":16},"end":{"line":419,"column":26}},"id":259},"260":{"loc":{"start":{"line":422,"column":8},"end":{"line":422,"column":41}},"id":260},"261":{"loc":{"start":{"line":422,"column":15},"end":{"line":422,"column":40}},"id":261},"262":{"loc":{"start":{"line":426,"column":8},"end":{"line":426,"column":35}},"id":262},"263":{"loc":{"start":{"line":428,"column":8},"end":{"line":428,"column":27}},"id":263},"264":{"loc":{"start":{"line":429,"column":13},"end":{"line":429,"column":34}},"id":264},"265":{"loc":{"start":{"line":430,"column":12},"end":{"line":430,"column":19}},"id":265},"266":{"loc":{"start":{"line":433,"column":8},"end":{"line":433,"column":22}},"id":266},"267":{"loc":{"start":{"line":434,"column":12},"end":{"line":434,"column":23}},"id":267},"268":{"loc":{"start":{"line":435,"column":12},"end":{"line":435,"column":20}},"id":268},"269":{"loc":{"start":{"line":435,"column":12},"end":{"line":435,"column":19}},"id":269},"270":{"loc":{"start":{"line":436,"column":16},"end":{"line":436,"column":37}},"id":270},"271":{"loc":{"start":{"line":437,"column":16},"end":{"line":437,"column":23}},"id":271},"272":{"loc":{"start":{"line":439,"column":12},"end":{"line":439,"column":20}},"id":272},"273":{"loc":{"start":{"line":439,"column":12},"end":{"line":439,"column":19}},"id":273},"274":{"loc":{"start":{"line":440,"column":12},"end":{"line":440,"column":28}},"id":274},"275":{"loc":{"start":{"line":441,"column":12},"end":{"line":441,"column":36}},"id":275},"276":{"loc":{"start":{"line":441,"column":17},"end":{"line":441,"column":35}},"id":276},"277":{"loc":{"start":{"line":443,"column":20},"end":{"line":443,"column":57}},"id":277},"278":{"loc":{"start":{"line":443,"column":20},"end":{"line":443,"column":31}},"id":278},"279":{"loc":{"start":{"line":443,"column":36},"end":{"line":443,"column":57}},"id":279},"280":{"loc":{"start":{"line":444,"column":20},"end":{"line":444,"column":27}},"id":280},"281":{"loc":{"start":{"line":446,"column":16},"end":{"line":446,"column":24}},"id":281},"282":{"loc":{"start":{"line":448,"column":16},"end":{"line":448,"column":32}},"id":282},"283":{"loc":{"start":{"line":449,"column":16},"end":{"line":449,"column":25}},"id":283},"284":{"loc":{"start":{"line":452,"column":12},"end":{"line":452,"column":28}},"id":284},"285":{"loc":{"start":{"line":452,"column":17},"end":{"line":452,"column":27}},"id":285},"286":{"loc":{"start":{"line":455,"column":15},"end":{"line":455,"column":29}},"id":286},"287":{"loc":{"start":{"line":456,"column":12},"end":{"line":456,"column":31}},"id":287},"288":{"loc":{"start":{"line":457,"column":17},"end":{"line":457,"column":37}},"id":288},"289":{"loc":{"start":{"line":460,"column":16},"end":{"line":460,"column":27}},"id":289},"290":{"loc":{"start":{"line":461,"column":16},"end":{"line":461,"column":24}},"id":290},"291":{"loc":{"start":{"line":461,"column":16},"end":{"line":461,"column":23}},"id":291},"292":{"loc":{"start":{"line":462,"column":20},"end":{"line":462,"column":41}},"id":292},"293":{"loc":{"start":{"line":463,"column":20},"end":{"line":463,"column":27}},"id":293},"294":{"loc":{"start":{"line":465,"column":16},"end":{"line":465,"column":24}},"id":294},"295":{"loc":{"start":{"line":465,"column":16},"end":{"line":465,"column":23}},"id":295},"296":{"loc":{"start":{"line":466,"column":16},"end":{"line":466,"column":32}},"id":296},"297":{"loc":{"start":{"line":467,"column":16},"end":{"line":467,"column":40}},"id":297},"298":{"loc":{"start":{"line":467,"column":21},"end":{"line":467,"column":39}},"id":298},"299":{"loc":{"start":{"line":469,"column":24},"end":{"line":469,"column":60}},"id":299},"300":{"loc":{"start":{"line":469,"column":24},"end":{"line":469,"column":35}},"id":300},"301":{"loc":{"start":{"line":469,"column":40},"end":{"line":469,"column":60}},"id":301},"302":{"loc":{"start":{"line":470,"column":24},"end":{"line":470,"column":31}},"id":302},"303":{"loc":{"start":{"line":472,"column":20},"end":{"line":472,"column":29}},"id":303},"304":{"loc":{"start":{"line":474,"column":20},"end":{"line":474,"column":36}},"id":304},"305":{"loc":{"start":{"line":475,"column":20},"end":{"line":475,"column":30}},"id":305},"306":{"loc":{"start":{"line":478,"column":16},"end":{"line":478,"column":33}},"id":306},"307":{"loc":{"start":{"line":478,"column":22},"end":{"line":478,"column":32}},"id":307},"308":{"loc":{"start":{"line":484,"column":12},"end":{"line":484,"column":27}},"id":308},"309":{"loc":{"start":{"line":485,"column":12},"end":{"line":491,"column":14}},"id":309},"310":{"loc":{"start":{"line":494,"column":12},"end":{"line":494,"column":25}},"id":310},"311":{"loc":{"start":{"line":495,"column":12},"end":{"line":501,"column":14}},"id":311},"312":{"loc":{"start":{"line":506,"column":12},"end":{"line":506,"column":25}},"id":312},"313":{"loc":{"start":{"line":507,"column":12},"end":{"line":513,"column":14}},"id":313},"314":{"loc":{"start":{"line":518,"column":12},"end":{"line":518,"column":43}},"id":314},"315":{"loc":{"start":{"line":518,"column":12},"end":{"line":518,"column":25}},"id":315},"316":{"loc":{"start":{"line":518,"column":29},"end":{"line":518,"column":43}},"id":316},"317":{"loc":{"start":{"line":519,"column":12},"end":{"line":525,"column":14}},"id":317},"318":{"loc":{"start":{"line":528,"column":8},"end":{"line":534,"column":10}},"id":318},"319":{"loc":{"start":{"line":540,"column":8},"end":{"line":544,"column":16}},"id":319},"320":{"loc":{"start":{"line":548,"column":12},"end":{"line":548,"column":53}},"id":320},"321":{"loc":{"start":{"line":548,"column":12},"end":{"line":548,"column":38}},"id":321},"322":{"loc":{"start":{"line":548,"column":12},"end":{"line":548,"column":23}},"id":322},"323":{"loc":{"start":{"line":548,"column":27},"end":{"line":548,"column":38}},"id":323},"324":{"loc":{"start":{"line":548,"column":42},"end":{"line":548,"column":53}},"id":324},"325":{"loc":{"start":{"line":549,"column":12},"end":{"line":549,"column":20}},"id":325},"326":{"loc":{"start":{"line":549,"column":12},"end":{"line":549,"column":19}},"id":326},"327":{"loc":{"start":{"line":550,"column":12},"end":{"line":556,"column":14}},"id":327},"328":{"loc":{"start":{"line":559,"column":12},"end":{"line":559,"column":53}},"id":328},"329":{"loc":{"start":{"line":559,"column":12},"end":{"line":559,"column":38}},"id":329},"330":{"loc":{"start":{"line":559,"column":12},"end":{"line":559,"column":23}},"id":330},"331":{"loc":{"start":{"line":559,"column":27},"end":{"line":559,"column":38}},"id":331},"332":{"loc":{"start":{"line":559,"column":42},"end":{"line":559,"column":53}},"id":332},"333":{"loc":{"start":{"line":560,"column":12},"end":{"line":560,"column":20}},"id":333},"334":{"loc":{"start":{"line":560,"column":12},"end":{"line":560,"column":19}},"id":334},"335":{"loc":{"start":{"line":561,"column":12},"end":{"line":567,"column":14}},"id":335},"336":{"loc":{"start":{"line":573,"column":8},"end":{"line":573,"column":32}},"id":336},"337":{"loc":{"start":{"line":573,"column":21},"end":{"line":573,"column":30}},"id":337},"338":{"loc":{"start":{"line":574,"column":12},"end":{"line":574,"column":47}},"id":338},"339":{"loc":{"start":{"line":574,"column":12},"end":{"line":574,"column":23}},"id":339},"340":{"loc":{"start":{"line":574,"column":28},"end":{"line":574,"column":47}},"id":340},"341":{"loc":{"start":{"line":575,"column":12},"end":{"line":581,"column":14}},"id":341},"342":{"loc":{"start":{"line":577,"column":23},"end":{"line":577,"column":33}},"id":342},"343":{"loc":{"start":{"line":586,"column":8},"end":{"line":586,"column":32}},"id":343},"344":{"loc":{"start":{"line":586,"column":21},"end":{"line":586,"column":30}},"id":344},"345":{"loc":{"start":{"line":587,"column":8},"end":{"line":587,"column":32}},"id":345},"346":{"loc":{"start":{"line":587,"column":21},"end":{"line":587,"column":30}},"id":346},"347":{"loc":{"start":{"line":591,"column":12},"end":{"line":591,"column":53}},"id":347},"348":{"loc":{"start":{"line":591,"column":12},"end":{"line":591,"column":38}},"id":348},"349":{"loc":{"start":{"line":591,"column":12},"end":{"line":591,"column":23}},"id":349},"350":{"loc":{"start":{"line":591,"column":27},"end":{"line":591,"column":38}},"id":350},"351":{"loc":{"start":{"line":591,"column":42},"end":{"line":591,"column":53}},"id":351},"352":{"loc":{"start":{"line":592,"column":16},"end":{"line":592,"column":27}},"id":352},"353":{"loc":{"start":{"line":593,"column":16},"end":{"line":593,"column":27}},"id":353},"354":{"loc":{"start":{"line":594,"column":16},"end":{"line":600,"column":18}},"id":354},"355":{"loc":{"start":{"line":606,"column":12},"end":{"line":606,"column":53}},"id":355},"356":{"loc":{"start":{"line":606,"column":12},"end":{"line":606,"column":38}},"id":356},"357":{"loc":{"start":{"line":606,"column":12},"end":{"line":606,"column":23}},"id":357},"358":{"loc":{"start":{"line":606,"column":27},"end":{"line":606,"column":38}},"id":358},"359":{"loc":{"start":{"line":606,"column":42},"end":{"line":606,"column":53}},"id":359},"360":{"loc":{"start":{"line":607,"column":12},"end":{"line":607,"column":23}},"id":360},"361":{"loc":{"start":{"line":608,"column":12},"end":{"line":614,"column":14}},"id":361},"362":{"loc":{"start":{"line":617,"column":12},"end":{"line":617,"column":53}},"id":362},"363":{"loc":{"start":{"line":617,"column":12},"end":{"line":617,"column":38}},"id":363},"364":{"loc":{"start":{"line":617,"column":12},"end":{"line":617,"column":23}},"id":364},"365":{"loc":{"start":{"line":617,"column":27},"end":{"line":617,"column":38}},"id":365},"366":{"loc":{"start":{"line":617,"column":42},"end":{"line":617,"column":53}},"id":366},"367":{"loc":{"start":{"line":618,"column":12},"end":{"line":618,"column":23}},"id":367},"368":{"loc":{"start":{"line":619,"column":12},"end":{"line":625,"column":14}},"id":368},"369":{"loc":{"start":{"line":628,"column":12},"end":{"line":628,"column":53}},"id":369},"370":{"loc":{"start":{"line":628,"column":12},"end":{"line":628,"column":38}},"id":370},"371":{"loc":{"start":{"line":628,"column":12},"end":{"line":628,"column":23}},"id":371},"372":{"loc":{"start":{"line":628,"column":27},"end":{"line":628,"column":38}},"id":372},"373":{"loc":{"start":{"line":628,"column":42},"end":{"line":628,"column":53}},"id":373},"374":{"loc":{"start":{"line":629,"column":12},"end":{"line":629,"column":23}},"id":374},"375":{"loc":{"start":{"line":630,"column":12},"end":{"line":636,"column":14}},"id":375},"376":{"loc":{"start":{"line":639,"column":12},"end":{"line":639,"column":53}},"id":376},"377":{"loc":{"start":{"line":639,"column":12},"end":{"line":639,"column":38}},"id":377},"378":{"loc":{"start":{"line":639,"column":12},"end":{"line":639,"column":23}},"id":378},"379":{"loc":{"start":{"line":639,"column":27},"end":{"line":639,"column":38}},"id":379},"380":{"loc":{"start":{"line":639,"column":42},"end":{"line":639,"column":53}},"id":380},"381":{"loc":{"start":{"line":640,"column":12},"end":{"line":640,"column":23}},"id":381},"382":{"loc":{"start":{"line":641,"column":12},"end":{"line":647,"column":14}},"id":382},"383":{"loc":{"start":{"line":650,"column":12},"end":{"line":650,"column":53}},"id":383},"384":{"loc":{"start":{"line":650,"column":12},"end":{"line":650,"column":38}},"id":384},"385":{"loc":{"start":{"line":650,"column":12},"end":{"line":650,"column":23}},"id":385},"386":{"loc":{"start":{"line":650,"column":27},"end":{"line":650,"column":38}},"id":386},"387":{"loc":{"start":{"line":650,"column":42},"end":{"line":650,"column":53}},"id":387},"388":{"loc":{"start":{"line":651,"column":12},"end":{"line":651,"column":23}},"id":388},"389":{"loc":{"start":{"line":652,"column":12},"end":{"line":658,"column":14}},"id":389},"390":{"loc":{"start":{"line":664,"column":12},"end":{"line":664,"column":23}},"id":390},"391":{"loc":{"start":{"line":665,"column":16},"end":{"line":665,"column":48}},"id":391},"392":{"loc":{"start":{"line":665,"column":16},"end":{"line":665,"column":43}},"id":392},"393":{"loc":{"start":{"line":666,"column":16},"end":{"line":666,"column":27}},"id":393},"394":{"loc":{"start":{"line":667,"column":16},"end":{"line":673,"column":18}},"id":394},"395":{"loc":{"start":{"line":669,"column":27},"end":{"line":669,"column":36}},"id":395},"396":{"loc":{"start":{"line":677,"column":12},"end":{"line":677,"column":55}},"id":396},"397":{"loc":{"start":{"line":677,"column":12},"end":{"line":677,"column":23}},"id":397},"398":{"loc":{"start":{"line":677,"column":27},"end":{"line":677,"column":55}},"id":398},"399":{"loc":{"start":{"line":677,"column":28},"end":{"line":677,"column":49}},"id":399},"400":{"loc":{"start":{"line":678,"column":16},"end":{"line":678,"column":42}},"id":400},"401":{"loc":{"start":{"line":678,"column":16},"end":{"line":678,"column":37}},"id":401},"402":{"loc":{"start":{"line":679,"column":16},"end":{"line":679,"column":27}},"id":402},"403":{"loc":{"start":{"line":680,"column":16},"end":{"line":686,"column":18}},"id":403},"404":{"loc":{"start":{"line":682,"column":27},"end":{"line":682,"column":36}},"id":404},"405":{"loc":{"start":{"line":692,"column":12},"end":{"line":692,"column":49}},"id":405},"406":{"loc":{"start":{"line":692,"column":12},"end":{"line":692,"column":44}},"id":406},"407":{"loc":{"start":{"line":693,"column":12},"end":{"line":699,"column":14}},"id":407},"408":{"loc":{"start":{"line":695,"column":23},"end":{"line":695,"column":33}},"id":408},"409":{"loc":{"start":{"line":706,"column":8},"end":{"line":706,"column":30}},"id":409},"410":{"loc":{"start":{"line":708,"column":8},"end":{"line":708,"column":27}},"id":410},"411":{"loc":{"start":{"line":709,"column":8},"end":{"line":710,"column":82}},"id":411},"412":{"loc":{"start":{"line":709,"column":8},"end":{"line":710,"column":81}},"id":412},"413":{"loc":{"start":{"line":709,"column":15},"end":{"line":709,"column":49}},"id":413},"414":{"loc":{"start":{"line":709,"column":15},"end":{"line":709,"column":33}},"id":414},"415":{"loc":{"start":{"line":709,"column":37},"end":{"line":709,"column":49}},"id":415},"416":{"loc":{"start":{"line":712,"column":8},"end":{"line":712,"column":22}},"id":416},"417":{"loc":{"start":{"line":713,"column":8},"end":{"line":713,"column":20}},"id":417},"418":{"loc":{"start":{"line":714,"column":12},"end":{"line":714,"column":22}},"id":418},"419":{"loc":{"start":{"line":715,"column":12},"end":{"line":715,"column":32}},"id":419},"420":{"loc":{"start":{"line":715,"column":21},"end":{"line":715,"column":31}},"id":420},"421":{"loc":{"start":{"line":716,"column":12},"end":{"line":716,"column":31}},"id":421},"422":{"loc":{"start":{"line":720,"column":16},"end":{"line":720,"column":30}},"id":422},"423":{"loc":{"start":{"line":721,"column":20},"end":{"line":721,"column":44}},"id":423},"424":{"loc":{"start":{"line":721,"column":20},"end":{"line":721,"column":30}},"id":424},"425":{"loc":{"start":{"line":721,"column":34},"end":{"line":721,"column":44}},"id":425},"426":{"loc":{"start":{"line":722,"column":20},"end":{"line":722,"column":41}},"id":426},"427":{"loc":{"start":{"line":722,"column":30},"end":{"line":722,"column":40}},"id":427},"428":{"loc":{"start":{"line":723,"column":27},"end":{"line":723,"column":41}},"id":428},"429":{"loc":{"start":{"line":724,"column":24},"end":{"line":724,"column":43}},"id":429},"430":{"loc":{"start":{"line":725,"column":29},"end":{"line":725,"column":43}},"id":430},"431":{"loc":{"start":{"line":728,"column":24},"end":{"line":728,"column":45}},"id":431},"432":{"loc":{"start":{"line":728,"column":34},"end":{"line":728,"column":44}},"id":432},"433":{"loc":{"start":{"line":731,"column":24},"end":{"line":731,"column":42}},"id":433},"434":{"loc":{"start":{"line":733,"column":24},"end":{"line":733,"column":76}},"id":434},"435":{"loc":{"start":{"line":733,"column":24},"end":{"line":733,"column":75}},"id":435},"436":{"loc":{"start":{"line":736,"column":24},"end":{"line":736,"column":38}},"id":436},"437":{"loc":{"start":{"line":737,"column":24},"end":{"line":737,"column":43}},"id":437},"438":{"loc":{"start":{"line":738,"column":28},"end":{"line":738,"column":49}},"id":438},"439":{"loc":{"start":{"line":739,"column":28},"end":{"line":739,"column":80}},"id":439},"440":{"loc":{"start":{"line":739,"column":28},"end":{"line":739,"column":79}},"id":440},"441":{"loc":{"start":{"line":742,"column":20},"end":{"line":748,"column":22}},"id":441},"442":{"loc":{"start":{"line":744,"column":31},"end":{"line":744,"column":51}},"id":442},"443":{"loc":{"start":{"line":749,"column":27},"end":{"line":749,"column":43}},"id":443},"444":{"loc":{"start":{"line":750,"column":20},"end":{"line":750,"column":41}},"id":444},"445":{"loc":{"start":{"line":750,"column":30},"end":{"line":750,"column":40}},"id":445},"446":{"loc":{"start":{"line":751,"column":27},"end":{"line":751,"column":41}},"id":446},"447":{"loc":{"start":{"line":752,"column":24},"end":{"line":752,"column":43}},"id":447},"448":{"loc":{"start":{"line":753,"column":29},"end":{"line":753,"column":45}},"id":448},"449":{"loc":{"start":{"line":756,"column":24},"end":{"line":756,"column":45}},"id":449},"450":{"loc":{"start":{"line":756,"column":34},"end":{"line":756,"column":44}},"id":450},"451":{"loc":{"start":{"line":759,"column":24},"end":{"line":759,"column":38}},"id":451},"452":{"loc":{"start":{"line":760,"column":24},"end":{"line":760,"column":43}},"id":452},"453":{"loc":{"start":{"line":761,"column":28},"end":{"line":761,"column":71}},"id":453},"454":{"loc":{"start":{"line":761,"column":28},"end":{"line":761,"column":49}},"id":454},"455":{"loc":{"start":{"line":761,"column":53},"end":{"line":761,"column":71}},"id":455},"456":{"loc":{"start":{"line":762,"column":28},"end":{"line":762,"column":80}},"id":456},"457":{"loc":{"start":{"line":762,"column":28},"end":{"line":762,"column":79}},"id":457},"458":{"loc":{"start":{"line":765,"column":20},"end":{"line":772,"column":22}},"id":458},"459":{"loc":{"start":{"line":767,"column":31},"end":{"line":767,"column":50}},"id":459},"460":{"loc":{"start":{"line":776,"column":20},"end":{"line":776,"column":38}},"id":460},"461":{"loc":{"start":{"line":777,"column":20},"end":{"line":777,"column":72}},"id":461},"462":{"loc":{"start":{"line":777,"column":20},"end":{"line":777,"column":71}},"id":462},"463":{"loc":{"start":{"line":781,"column":19},"end":{"line":781,"column":33}},"id":463},"464":{"loc":{"start":{"line":782,"column":16},"end":{"line":782,"column":35}},"id":464},"465":{"loc":{"start":{"line":783,"column":21},"end":{"line":783,"column":39}},"id":465},"466":{"loc":{"start":{"line":786,"column":16},"end":{"line":786,"column":37}},"id":466},"467":{"loc":{"start":{"line":786,"column":26},"end":{"line":786,"column":36}},"id":467},"468":{"loc":{"start":{"line":790,"column":12},"end":{"line":790,"column":22}},"id":468},"469":{"loc":{"start":{"line":791,"column":12},"end":{"line":791,"column":33}},"id":469},"470":{"loc":{"start":{"line":791,"column":22},"end":{"line":791,"column":32}},"id":470},"471":{"loc":{"start":{"line":792,"column":19},"end":{"line":792,"column":33}},"id":471},"472":{"loc":{"start":{"line":793,"column":16},"end":{"line":793,"column":35}},"id":472},"473":{"loc":{"start":{"line":794,"column":21},"end":{"line":794,"column":39}},"id":473},"474":{"loc":{"start":{"line":797,"column":16},"end":{"line":797,"column":37}},"id":474},"475":{"loc":{"start":{"line":797,"column":26},"end":{"line":797,"column":36}},"id":475},"476":{"loc":{"start":{"line":801,"column":12},"end":{"line":801,"column":36}},"id":476},"477":{"loc":{"start":{"line":801,"column":12},"end":{"line":801,"column":22}},"id":477},"478":{"loc":{"start":{"line":801,"column":26},"end":{"line":801,"column":36}},"id":478},"479":{"loc":{"start":{"line":802,"column":12},"end":{"line":802,"column":33}},"id":479},"480":{"loc":{"start":{"line":802,"column":22},"end":{"line":802,"column":32}},"id":480},"481":{"loc":{"start":{"line":804,"column":12},"end":{"line":804,"column":31}},"id":481},"482":{"loc":{"start":{"line":805,"column":16},"end":{"line":805,"column":40}},"id":482},"483":{"loc":{"start":{"line":805,"column":16},"end":{"line":805,"column":26}},"id":483},"484":{"loc":{"start":{"line":805,"column":30},"end":{"line":805,"column":40}},"id":484},"485":{"loc":{"start":{"line":806,"column":16},"end":{"line":806,"column":37}},"id":485},"486":{"loc":{"start":{"line":806,"column":26},"end":{"line":806,"column":36}},"id":486},"487":{"loc":{"start":{"line":809,"column":12},"end":{"line":809,"column":31}},"id":487},"488":{"loc":{"start":{"line":810,"column":16},"end":{"line":810,"column":34}},"id":488},"489":{"loc":{"start":{"line":811,"column":16},"end":{"line":811,"column":37}},"id":489},"490":{"loc":{"start":{"line":811,"column":26},"end":{"line":811,"column":36}},"id":490},"491":{"loc":{"start":{"line":812,"column":23},"end":{"line":812,"column":37}},"id":491},"492":{"loc":{"start":{"line":813,"column":20},"end":{"line":813,"column":39}},"id":492},"493":{"loc":{"start":{"line":814,"column":25},"end":{"line":814,"column":43}},"id":493},"494":{"loc":{"start":{"line":817,"column":20},"end":{"line":817,"column":41}},"id":494},"495":{"loc":{"start":{"line":817,"column":30},"end":{"line":817,"column":40}},"id":495},"496":{"loc":{"start":{"line":820,"column":16},"end":{"line":820,"column":39}},"id":496},"497":{"loc":{"start":{"line":820,"column":21},"end":{"line":820,"column":38}},"id":497},"498":{"loc":{"start":{"line":821,"column":20},"end":{"line":821,"column":35}},"id":498},"499":{"loc":{"start":{"line":822,"column":20},"end":{"line":822,"column":33}},"id":499},"500":{"loc":{"start":{"line":824,"column":16},"end":{"line":824,"column":68}},"id":500},"501":{"loc":{"start":{"line":824,"column":16},"end":{"line":824,"column":67}},"id":501},"502":{"loc":{"start":{"line":828,"column":12},"end":{"line":828,"column":26}},"id":502},"503":{"loc":{"start":{"line":829,"column":12},"end":{"line":829,"column":31}},"id":503},"504":{"loc":{"start":{"line":830,"column":16},"end":{"line":830,"column":37}},"id":504},"505":{"loc":{"start":{"line":831,"column":16},"end":{"line":831,"column":68}},"id":505},"506":{"loc":{"start":{"line":831,"column":16},"end":{"line":831,"column":67}},"id":506},"507":{"loc":{"start":{"line":835,"column":8},"end":{"line":841,"column":10}},"id":507},"508":{"loc":{"start":{"line":837,"column":19},"end":{"line":837,"column":37}},"id":508},"509":{"loc":{"start":{"line":847,"column":8},"end":{"line":847,"column":80}},"id":509},"510":{"loc":{"start":{"line":849,"column":8},"end":{"line":849,"column":30}},"id":510},"511":{"loc":{"start":{"line":850,"column":8},"end":{"line":851,"column":55}},"id":511},"512":{"loc":{"start":{"line":850,"column":8},"end":{"line":851,"column":54}},"id":512},"513":{"loc":{"start":{"line":850,"column":15},"end":{"line":850,"column":48}},"id":513},"514":{"loc":{"start":{"line":850,"column":16},"end":{"line":850,"column":30}},"id":514},"515":{"loc":{"start":{"line":850,"column":34},"end":{"line":850,"column":47}},"id":515},"516":{"loc":{"start":{"line":853,"column":8},"end":{"line":853,"column":22}},"id":516},"517":{"loc":{"start":{"line":854,"column":8},"end":{"line":854,"column":16}},"id":517},"518":{"loc":{"start":{"line":854,"column":8},"end":{"line":854,"column":15}},"id":518},"519":{"loc":{"start":{"line":856,"column":15},"end":{"line":856,"column":29}},"id":519},"520":{"loc":{"start":{"line":857,"column":12},"end":{"line":857,"column":28}},"id":520},"521":{"loc":{"start":{"line":857,"column":17},"end":{"line":857,"column":27}},"id":521},"522":{"loc":{"start":{"line":859,"column":16},"end":{"line":859,"column":28}},"id":522},"523":{"loc":{"start":{"line":860,"column":16},"end":{"line":860,"column":27}},"id":523},"524":{"loc":{"start":{"line":862,"column":23},"end":{"line":862,"column":34}},"id":524},"525":{"loc":{"start":{"line":863,"column":16},"end":{"line":863,"column":32}},"id":525},"526":{"loc":{"start":{"line":863,"column":21},"end":{"line":863,"column":31}},"id":526},"527":{"loc":{"start":{"line":864,"column":21},"end":{"line":864,"column":41}},"id":527},"528":{"loc":{"start":{"line":867,"column":24},"end":{"line":867,"column":36}},"id":528},"529":{"loc":{"start":{"line":870,"column":24},"end":{"line":870,"column":36}},"id":529},"530":{"loc":{"start":{"line":873,"column":24},"end":{"line":873,"column":36}},"id":530},"531":{"loc":{"start":{"line":877,"column":24},"end":{"line":877,"column":40}},"id":531},"532":{"loc":{"start":{"line":878,"column":24},"end":{"line":878,"column":54}},"id":532},"533":{"loc":{"start":{"line":878,"column":36},"end":{"line":878,"column":53}},"id":533},"534":{"loc":{"start":{"line":880,"column":28},"end":{"line":880,"column":45}},"id":534},"535":{"loc":{"start":{"line":882,"column":28},"end":{"line":882,"column":44}},"id":535},"536":{"loc":{"start":{"line":883,"column":28},"end":{"line":883,"column":38}},"id":536},"537":{"loc":{"start":{"line":887,"column":24},"end":{"line":887,"column":36}},"id":537},"538":{"loc":{"start":{"line":890,"column":24},"end":{"line":890,"column":36}},"id":538},"539":{"loc":{"start":{"line":893,"column":24},"end":{"line":893,"column":36}},"id":539},"540":{"loc":{"start":{"line":897,"column":28},"end":{"line":897,"column":44}},"id":540},"541":{"loc":{"start":{"line":898,"column":28},"end":{"line":898,"column":58}},"id":541},"542":{"loc":{"start":{"line":898,"column":35},"end":{"line":898,"column":57}},"id":542},"543":{"loc":{"start":{"line":901,"column":32},"end":{"line":901,"column":42}},"id":543},"544":{"loc":{"start":{"line":902,"column":32},"end":{"line":902,"column":45}},"id":544},"545":{"loc":{"start":{"line":905,"column":32},"end":{"line":905,"column":77}},"id":545},"546":{"loc":{"start":{"line":905,"column":32},"end":{"line":905,"column":46}},"id":546},"547":{"loc":{"start":{"line":905,"column":50},"end":{"line":905,"column":77}},"id":547},"548":{"loc":{"start":{"line":906,"column":32},"end":{"line":906,"column":45}},"id":548},"549":{"loc":{"start":{"line":907,"column":32},"end":{"line":907,"column":81}},"id":549},"550":{"loc":{"start":{"line":907,"column":39},"end":{"line":907,"column":80}},"id":550},"551":{"loc":{"start":{"line":907,"column":39},"end":{"line":907,"column":47}},"id":551},"552":{"loc":{"start":{"line":907,"column":50},"end":{"line":907,"column":80}},"id":552},"553":{"loc":{"start":{"line":907,"column":69},"end":{"line":907,"column":79}},"id":553},"554":{"loc":{"start":{"line":911,"column":36},"end":{"line":913,"column":67}},"id":554},"555":{"loc":{"start":{"line":911,"column":36},"end":{"line":912,"column":54}},"id":555},"556":{"loc":{"start":{"line":911,"column":36},"end":{"line":911,"column":59}},"id":556},"557":{"loc":{"start":{"line":911,"column":36},"end":{"line":911,"column":54}},"id":557},"558":{"loc":{"start":{"line":912,"column":40},"end":{"line":912,"column":54}},"id":558},"559":{"loc":{"start":{"line":913,"column":40},"end":{"line":913,"column":67}},"id":559},"560":{"loc":{"start":{"line":914,"column":36},"end":{"line":914,"column":85}},"id":560},"561":{"loc":{"start":{"line":914,"column":43},"end":{"line":914,"column":84}},"id":561},"562":{"loc":{"start":{"line":914,"column":43},"end":{"line":914,"column":51}},"id":562},"563":{"loc":{"start":{"line":914,"column":54},"end":{"line":914,"column":84}},"id":563},"564":{"loc":{"start":{"line":914,"column":73},"end":{"line":914,"column":83}},"id":564},"565":{"loc":{"start":{"line":917,"column":28},"end":{"line":917,"column":61}},"id":565},"566":{"loc":{"start":{"line":917,"column":35},"end":{"line":917,"column":60}},"id":566},"567":{"loc":{"start":{"line":919,"column":28},"end":{"line":919,"column":38}},"id":567},"568":{"loc":{"start":{"line":924,"column":20},"end":{"line":924,"column":33}},"id":568},"569":{"loc":{"start":{"line":924,"column":20},"end":{"line":924,"column":32}},"id":569},"570":{"loc":{"start":{"line":925,"column":24},"end":{"line":925,"column":62}},"id":570},"571":{"loc":{"start":{"line":925,"column":24},"end":{"line":925,"column":36}},"id":571},"572":{"loc":{"start":{"line":925,"column":40},"end":{"line":925,"column":62}},"id":572},"573":{"loc":{"start":{"line":926,"column":24},"end":{"line":926,"column":32}},"id":573},"574":{"loc":{"start":{"line":926,"column":24},"end":{"line":926,"column":31}},"id":574},"575":{"loc":{"start":{"line":929,"column":23},"end":{"line":929,"column":43}},"id":575},"576":{"loc":{"start":{"line":932,"column":16},"end":{"line":932,"column":26}},"id":576},"577":{"loc":{"start":{"line":936,"column":12},"end":{"line":936,"column":24}},"id":577},"578":{"loc":{"start":{"line":937,"column":12},"end":{"line":937,"column":64}},"id":578},"579":{"loc":{"start":{"line":937,"column":12},"end":{"line":937,"column":63}},"id":579},"580":{"loc":{"start":{"line":940,"column":8},"end":{"line":947,"column":10}},"id":580},"581":{"loc":{"start":{"line":951,"column":8},"end":{"line":951,"column":85}},"id":581},"582":{"loc":{"start":{"line":953,"column":8},"end":{"line":953,"column":22}},"id":582},"583":{"loc":{"start":{"line":954,"column":8},"end":{"line":954,"column":22}},"id":583},"584":{"loc":{"start":{"line":954,"column":8},"end":{"line":954,"column":21}},"id":584},"585":{"loc":{"start":{"line":956,"column":8},"end":{"line":956,"column":22}},"id":585},"586":{"loc":{"start":{"line":957,"column":8},"end":{"line":957,"column":27}},"id":586},"587":{"loc":{"start":{"line":958,"column":8},"end":{"line":958,"column":81}},"id":587},"588":{"loc":{"start":{"line":958,"column":8},"end":{"line":958,"column":80}},"id":588},"589":{"loc":{"start":{"line":958,"column":15},"end":{"line":958,"column":25}},"id":589},"590":{"loc":{"start":{"line":959,"column":8},"end":{"line":959,"column":25}},"id":590},"591":{"loc":{"start":{"line":959,"column":14},"end":{"line":959,"column":24}},"id":591},"592":{"loc":{"start":{"line":961,"column":15},"end":{"line":961,"column":29}},"id":592},"593":{"loc":{"start":{"line":962,"column":12},"end":{"line":962,"column":28}},"id":593},"594":{"loc":{"start":{"line":962,"column":17},"end":{"line":962,"column":27}},"id":594},"595":{"loc":{"start":{"line":963,"column":12},"end":{"line":963,"column":22}},"id":595},"596":{"loc":{"start":{"line":965,"column":20},"end":{"line":965,"column":30}},"id":596},"597":{"loc":{"start":{"line":966,"column":20},"end":{"line":966,"column":40}},"id":597},"598":{"loc":{"start":{"line":969,"column":20},"end":{"line":969,"column":31}},"id":598},"599":{"loc":{"start":{"line":970,"column":20},"end":{"line":970,"column":36}},"id":599},"600":{"loc":{"start":{"line":970,"column":25},"end":{"line":970,"column":35}},"id":600},"601":{"loc":{"start":{"line":972,"column":24},"end":{"line":972,"column":44}},"id":601},"602":{"loc":{"start":{"line":973,"column":24},"end":{"line":973,"column":68}},"id":602},"603":{"loc":{"start":{"line":973,"column":24},"end":{"line":973,"column":67}},"id":603},"604":{"loc":{"start":{"line":975,"column":20},"end":{"line":975,"column":30}},"id":604},"605":{"loc":{"start":{"line":976,"column":27},"end":{"line":976,"column":37}},"id":605},"606":{"loc":{"start":{"line":978,"column":27},"end":{"line":978,"column":37}},"id":606},"607":{"loc":{"start":{"line":979,"column":20},"end":{"line":979,"column":39}},"id":607},"608":{"loc":{"start":{"line":980,"column":27},"end":{"line":980,"column":47}},"id":608},"609":{"loc":{"start":{"line":981,"column":20},"end":{"line":981,"column":64}},"id":609},"610":{"loc":{"start":{"line":981,"column":20},"end":{"line":981,"column":63}},"id":610},"611":{"loc":{"start":{"line":986,"column":12},"end":{"line":986,"column":28}},"id":611},"612":{"loc":{"start":{"line":987,"column":12},"end":{"line":987,"column":56}},"id":612},"613":{"loc":{"start":{"line":987,"column":12},"end":{"line":987,"column":55}},"id":613},"614":{"loc":{"start":{"line":991,"column":8},"end":{"line":991,"column":48}},"id":614},"615":{"loc":{"start":{"line":991,"column":18},"end":{"line":991,"column":47}},"id":615},"616":{"loc":{"start":{"line":991,"column":32},"end":{"line":991,"column":46}},"id":616},"617":{"loc":{"start":{"line":993,"column":8},"end":{"line":993,"column":19}},"id":617},"618":{"loc":{"start":{"line":994,"column":15},"end":{"line":994,"column":29}},"id":618},"619":{"loc":{"start":{"line":995,"column":12},"end":{"line":995,"column":31}},"id":619},"620":{"loc":{"start":{"line":996,"column":17},"end":{"line":996,"column":37}},"id":620},"621":{"loc":{"start":{"line":1000,"column":12},"end":{"line":1000,"column":20}},"id":621},"622":{"loc":{"start":{"line":1000,"column":12},"end":{"line":1000,"column":19}},"id":622},"623":{"loc":{"start":{"line":1001,"column":16},"end":{"line":1001,"column":45}},"id":623},"624":{"loc":{"start":{"line":1001,"column":16},"end":{"line":1001,"column":27}},"id":624},"625":{"loc":{"start":{"line":1001,"column":31},"end":{"line":1001,"column":45}},"id":625},"626":{"loc":{"start":{"line":1002,"column":16},"end":{"line":1002,"column":35}},"id":626},"627":{"loc":{"start":{"line":1003,"column":20},"end":{"line":1003,"column":30}},"id":627},"628":{"loc":{"start":{"line":1004,"column":20},"end":{"line":1004,"column":28}},"id":628},"629":{"loc":{"start":{"line":1004,"column":20},"end":{"line":1004,"column":27}},"id":629},"630":{"loc":{"start":{"line":1005,"column":20},"end":{"line":1005,"column":36}},"id":630},"631":{"loc":{"start":{"line":1006,"column":20},"end":{"line":1006,"column":44}},"id":631},"632":{"loc":{"start":{"line":1006,"column":25},"end":{"line":1006,"column":43}},"id":632},"633":{"loc":{"start":{"line":1008,"column":24},"end":{"line":1008,"column":36}},"id":633},"634":{"loc":{"start":{"line":1009,"column":24},"end":{"line":1009,"column":37}},"id":634},"635":{"loc":{"start":{"line":1010,"column":31},"end":{"line":1010,"column":46}},"id":635},"636":{"loc":{"start":{"line":1010,"column":48},"end":{"line":1010,"column":57}},"id":636},"637":{"loc":{"start":{"line":1011,"column":28},"end":{"line":1011,"column":51}},"id":637},"638":{"loc":{"start":{"line":1014,"column":24},"end":{"line":1014,"column":40}},"id":638},"639":{"loc":{"start":{"line":1015,"column":24},"end":{"line":1015,"column":37}},"id":639},"640":{"loc":{"start":{"line":1016,"column":24},"end":{"line":1016,"column":37}},"id":640},"641":{"loc":{"start":{"line":1019,"column":20},"end":{"line":1019,"column":32}},"id":641},"642":{"loc":{"start":{"line":1022,"column":16},"end":{"line":1022,"column":28}},"id":642},"643":{"loc":{"start":{"line":1023,"column":16},"end":{"line":1023,"column":26}},"id":643},"644":{"loc":{"start":{"line":1028,"column":12},"end":{"line":1028,"column":47}},"id":644},"645":{"loc":{"start":{"line":1030,"column":12},"end":{"line":1030,"column":51}},"id":645},"646":{"loc":{"start":{"line":1030,"column":12},"end":{"line":1030,"column":50}},"id":646},"647":{"loc":{"start":{"line":1033,"column":8},"end":{"line":1037,"column":10}},"id":647},"648":{"loc":{"start":{"line":1041,"column":8},"end":{"line":1044,"column":45}},"id":648},"649":{"loc":{"start":{"line":1041,"column":15},"end":{"line":1044,"column":44}},"id":649},"650":{"loc":{"start":{"line":1041,"column":15},"end":{"line":1043,"column":47}},"id":650},"651":{"loc":{"start":{"line":1041,"column":15},"end":{"line":1042,"column":40}},"id":651},"652":{"loc":{"start":{"line":1041,"column":15},"end":{"line":1041,"column":46}},"id":652},"653":{"loc":{"start":{"line":1042,"column":12},"end":{"line":1042,"column":40}},"id":653},"654":{"loc":{"start":{"line":1043,"column":12},"end":{"line":1043,"column":47}},"id":654},"655":{"loc":{"start":{"line":1044,"column":12},"end":{"line":1044,"column":44}},"id":655},"656":{"loc":{"start":{"line":1048,"column":8},"end":{"line":1048,"column":22}},"id":656},"657":{"loc":{"start":{"line":1050,"column":8},"end":{"line":1050,"column":22}},"id":657},"658":{"loc":{"start":{"line":1050,"column":8},"end":{"line":1050,"column":21}},"id":658},"659":{"loc":{"start":{"line":1052,"column":12},"end":{"line":1052,"column":27}},"id":659},"660":{"loc":{"start":{"line":1053,"column":12},"end":{"line":1058,"column":14}},"id":660},"661":{"loc":{"start":{"line":1061,"column":8},"end":{"line":1061,"column":33}},"id":661},"662":{"loc":{"start":{"line":1061,"column":16},"end":{"line":1061,"column":32}},"id":662},"663":{"loc":{"start":{"line":1062,"column":12},"end":{"line":1062,"column":40}},"id":663},"664":{"loc":{"start":{"line":1063,"column":12},"end":{"line":1063,"column":25}},"id":664},"665":{"loc":{"start":{"line":1066,"column":8},"end":{"line":1066,"column":27}},"id":665},"666":{"loc":{"start":{"line":1068,"column":12},"end":{"line":1068,"column":37}},"id":666},"667":{"loc":{"start":{"line":1068,"column":12},"end":{"line":1068,"column":23}},"id":667},"668":{"loc":{"start":{"line":1068,"column":27},"end":{"line":1068,"column":37}},"id":668},"669":{"loc":{"start":{"line":1069,"column":12},"end":{"line":1069,"column":39}},"id":669},"670":{"loc":{"start":{"line":1069,"column":19},"end":{"line":1069,"column":38}},"id":670},"671":{"loc":{"start":{"line":1072,"column":12},"end":{"line":1072,"column":44}},"id":671},"672":{"loc":{"start":{"line":1072,"column":12},"end":{"line":1072,"column":22}},"id":672},"673":{"loc":{"start":{"line":1072,"column":26},"end":{"line":1072,"column":44}},"id":673},"674":{"loc":{"start":{"line":1073,"column":12},"end":{"line":1073,"column":40}},"id":674},"675":{"loc":{"start":{"line":1073,"column":19},"end":{"line":1073,"column":39}},"id":675},"676":{"loc":{"start":{"line":1076,"column":8},"end":{"line":1076,"column":33}},"id":676},"677":{"loc":{"start":{"line":1076,"column":16},"end":{"line":1076,"column":32}},"id":677},"678":{"loc":{"start":{"line":1077,"column":12},"end":{"line":1077,"column":40}},"id":678},"679":{"loc":{"start":{"line":1078,"column":12},"end":{"line":1078,"column":25}},"id":679},"680":{"loc":{"start":{"line":1081,"column":8},"end":{"line":1081,"column":60}},"id":680},"681":{"loc":{"start":{"line":1081,"column":8},"end":{"line":1081,"column":59}},"id":681},"682":{"loc":{"start":{"line":1085,"column":8},"end":{"line":1085,"column":18}},"id":682},"683":{"loc":{"start":{"line":1088,"column":12},"end":{"line":1088,"column":36}},"id":683},"684":{"loc":{"start":{"line":1089,"column":12},"end":{"line":1089,"column":43}},"id":684},"685":{"loc":{"start":{"line":1090,"column":12},"end":{"line":1090,"column":41}},"id":685},"686":{"loc":{"start":{"line":1091,"column":12},"end":{"line":1091,"column":27}},"id":686},"687":{"loc":{"start":{"line":1092,"column":12},"end":{"line":1092,"column":26}},"id":687},"688":{"loc":{"start":{"line":1093,"column":12},"end":{"line":1093,"column":25}},"id":688},"689":{"loc":{"start":{"line":1096,"column":8},"end":{"line":1096,"column":22}},"id":689},"690":{"loc":{"start":{"line":1097,"column":8},"end":{"line":1097,"column":25}},"id":690},"691":{"loc":{"start":{"line":1097,"column":15},"end":{"line":1097,"column":24}},"id":691},"692":{"loc":{"start":{"line":1101,"column":8},"end":{"line":1101,"column":29}},"id":692},"693":{"loc":{"start":{"line":1103,"column":12},"end":{"line":1103,"column":27}},"id":693},"694":{"loc":{"start":{"line":1104,"column":12},"end":{"line":1104,"column":26}},"id":694},"695":{"loc":{"start":{"line":1107,"column":8},"end":{"line":1107,"column":20}},"id":695},"696":{"loc":{"start":{"line":1108,"column":8},"end":{"line":1108,"column":26}},"id":696},"697":{"loc":{"start":{"line":1109,"column":8},"end":{"line":1109,"column":26}},"id":697},"698":{"loc":{"start":{"line":1110,"column":8},"end":{"line":1110,"column":27}},"id":698},"699":{"loc":{"start":{"line":1110,"column":17},"end":{"line":1110,"column":26}},"id":699},"700":{"loc":{"start":{"line":1111,"column":8},"end":{"line":1111,"column":20}},"id":700},"701":{"loc":{"start":{"line":1112,"column":8},"end":{"line":1112,"column":26}},"id":701},"702":{"loc":{"start":{"line":1113,"column":8},"end":{"line":1113,"column":26}},"id":702},"703":{"loc":{"start":{"line":1115,"column":8},"end":{"line":1115,"column":22}},"id":703},"704":{"loc":{"start":{"line":1121,"column":8},"end":{"line":1121,"column":36}},"id":704},"705":{"loc":{"start":{"line":1123,"column":8},"end":{"line":1123,"column":20}},"id":705},"706":{"loc":{"start":{"line":1124,"column":8},"end":{"line":1124,"column":26}},"id":706},"707":{"loc":{"start":{"line":1125,"column":8},"end":{"line":1125,"column":26}},"id":707},"708":{"loc":{"start":{"line":1126,"column":8},"end":{"line":1126,"column":22}},"id":708},"709":{"loc":{"start":{"line":1126,"column":8},"end":{"line":1126,"column":21}},"id":709},"710":{"loc":{"start":{"line":1127,"column":8},"end":{"line":1127,"column":36}},"id":710},"711":{"loc":{"start":{"line":1127,"column":16},"end":{"line":1127,"column":35}},"id":711},"712":{"loc":{"start":{"line":1128,"column":8},"end":{"line":1128,"column":20}},"id":712},"713":{"loc":{"start":{"line":1129,"column":8},"end":{"line":1129,"column":26}},"id":713},"714":{"loc":{"start":{"line":1130,"column":8},"end":{"line":1130,"column":26}},"id":714},"715":{"loc":{"start":{"line":1132,"column":8},"end":{"line":1132,"column":21}},"id":715},"716":{"loc":{"start":{"line":1138,"column":8},"end":{"line":1145,"column":14}},"id":716},"717":{"loc":{"start":{"line":1139,"column":19},"end":{"line":1139,"column":59}},"id":717},"718":{"loc":{"start":{"line":1140,"column":18},"end":{"line":1145,"column":13}},"id":718},"719":{"loc":{"start":{"line":1143,"column":20},"end":{"line":1143,"column":45}},"id":719},"720":{"loc":{"start":{"line":1143,"column":27},"end":{"line":1143,"column":44}},"id":720},"721":{"loc":{"start":{"line":1147,"column":12},"end":{"line":1147,"column":48}},"id":721},"722":{"loc":{"start":{"line":1148,"column":12},"end":{"line":1148,"column":71}},"id":722},"723":{"loc":{"start":{"line":1148,"column":30},"end":{"line":1148,"column":69}},"id":723},"724":{"loc":{"start":{"line":1148,"column":30},"end":{"line":1148,"column":63}},"id":724},"725":{"loc":{"start":{"line":1148,"column":30},"end":{"line":1148,"column":56}},"id":725},"726":{"loc":{"start":{"line":1149,"column":12},"end":{"line":1149,"column":41}},"id":726},"727":{"loc":{"start":{"line":1150,"column":12},"end":{"line":1150,"column":48}},"id":727},"728":{"loc":{"start":{"line":1151,"column":12},"end":{"line":1151,"column":58}},"id":728},"729":{"loc":{"start":{"line":1151,"column":27},"end":{"line":1151,"column":57}},"id":729},"730":{"loc":{"start":{"line":1151,"column":27},"end":{"line":1151,"column":53}},"id":730},"731":{"loc":{"start":{"line":1153,"column":12},"end":{"line":1153,"column":65}},"id":731},"732":{"loc":{"start":{"line":1153,"column":30},"end":{"line":1153,"column":63}},"id":732},"733":{"loc":{"start":{"line":1153,"column":30},"end":{"line":1153,"column":57}},"id":733},"734":{"loc":{"start":{"line":1153,"column":30},"end":{"line":1153,"column":50}},"id":734},"735":{"loc":{"start":{"line":1154,"column":12},"end":{"line":1154,"column":32}},"id":735},"736":{"loc":{"start":{"line":1155,"column":12},"end":{"line":1155,"column":42}},"id":736},"737":{"loc":{"start":{"line":1156,"column":12},"end":{"line":1156,"column":49}},"id":737},"738":{"loc":{"start":{"line":1156,"column":27},"end":{"line":1156,"column":48}},"id":738},"739":{"loc":{"start":{"line":1156,"column":27},"end":{"line":1156,"column":44}},"id":739},"740":{"loc":{"start":{"line":1159,"column":8},"end":{"line":1159,"column":20}},"id":740},"741":{"loc":{"start":{"line":1163,"column":8},"end":{"line":1163,"column":18}},"id":741},"742":{"loc":{"start":{"line":1165,"column":12},"end":{"line":1165,"column":46}},"id":742},"743":{"loc":{"start":{"line":1165,"column":12},"end":{"line":1165,"column":45}},"id":743},"744":{"loc":{"start":{"line":1168,"column":16},"end":{"line":1168,"column":37}},"id":744},"745":{"loc":{"start":{"line":1168,"column":16},"end":{"line":1168,"column":36}},"id":745},"746":{"loc":{"start":{"line":1170,"column":16},"end":{"line":1170,"column":24}},"id":746},"747":{"loc":{"start":{"line":1179,"column":8},"end":{"line":1179,"column":14}},"id":747},"748":{"loc":{"start":{"line":1181,"column":12},"end":{"line":1181,"column":36}},"id":748},"749":{"loc":{"start":{"line":1182,"column":12},"end":{"line":1182,"column":54}},"id":749},"750":{"loc":{"start":{"line":1182,"column":12},"end":{"line":1182,"column":53}},"id":750},"751":{"loc":{"start":{"line":1185,"column":12},"end":{"line":1185,"column":47}},"id":751},"752":{"loc":{"start":{"line":1186,"column":12},"end":{"line":1186,"column":57}},"id":752},"753":{"loc":{"start":{"line":1186,"column":12},"end":{"line":1186,"column":56}},"id":753},"754":{"loc":{"start":{"line":1189,"column":12},"end":{"line":1189,"column":46}},"id":754},"755":{"loc":{"start":{"line":1190,"column":12},"end":{"line":1190,"column":57}},"id":755},"756":{"loc":{"start":{"line":1190,"column":12},"end":{"line":1190,"column":56}},"id":756},"757":{"loc":{"start":{"line":1193,"column":12},"end":{"line":1193,"column":43}},"id":757},"758":{"loc":{"start":{"line":1194,"column":12},"end":{"line":1194,"column":61}},"id":758},"759":{"loc":{"start":{"line":1194,"column":12},"end":{"line":1194,"column":60}},"id":759},"760":{"loc":{"start":{"line":1197,"column":12},"end":{"line":1197,"column":40}},"id":760},"761":{"loc":{"start":{"line":1198,"column":16},"end":{"line":1198,"column":49}},"id":761},"762":{"loc":{"start":{"line":1199,"column":16},"end":{"line":1199,"column":63}},"id":762},"763":{"loc":{"start":{"line":1199,"column":16},"end":{"line":1199,"column":62}},"id":763},"764":{"loc":{"start":{"line":1200,"column":23},"end":{"line":1200,"column":70}},"id":764},"765":{"loc":{"start":{"line":1200,"column":33},"end":{"line":1200,"column":70}},"id":765},"766":{"loc":{"start":{"line":1201,"column":16},"end":{"line":1201,"column":63}},"id":766},"767":{"loc":{"start":{"line":1201,"column":16},"end":{"line":1201,"column":62}},"id":767},"768":{"loc":{"start":{"line":1203,"column":12},"end":{"line":1203,"column":69}},"id":768},"769":{"loc":{"start":{"line":1203,"column":12},"end":{"line":1203,"column":68}},"id":769},"770":{"loc":{"start":{"line":1207,"column":8},"end":{"line":1207,"column":65}},"id":770},"771":{"loc":{"start":{"line":1207,"column":8},"end":{"line":1207,"column":64}},"id":771},"772":{"loc":{"start":{"line":1214,"column":8},"end":{"line":1214,"column":26}},"id":772},"773":{"loc":{"start":{"line":1214,"column":20},"end":{"line":1214,"column":25}},"id":773},"774":{"loc":{"start":{"line":1215,"column":12},"end":{"line":1215,"column":68}},"id":774},"775":{"loc":{"start":{"line":1215,"column":12},"end":{"line":1215,"column":43}},"id":775},"776":{"loc":{"start":{"line":1215,"column":47},"end":{"line":1215,"column":68}},"id":776},"777":{"loc":{"start":{"line":1216,"column":12},"end":{"line":1216,"column":35}},"id":777},"778":{"loc":{"start":{"line":1216,"column":12},"end":{"line":1216,"column":34}},"id":778},"779":{"loc":{"start":{"line":1224,"column":8},"end":{"line":1224,"column":26}},"id":779},"780":{"loc":{"start":{"line":1224,"column":20},"end":{"line":1224,"column":25}},"id":780},"781":{"loc":{"start":{"line":1225,"column":12},"end":{"line":1225,"column":67}},"id":781},"782":{"loc":{"start":{"line":1225,"column":12},"end":{"line":1225,"column":40}},"id":782},"783":{"loc":{"start":{"line":1225,"column":44},"end":{"line":1225,"column":67}},"id":783},"784":{"loc":{"start":{"line":1226,"column":12},"end":{"line":1226,"column":35}},"id":784},"785":{"loc":{"start":{"line":1226,"column":12},"end":{"line":1226,"column":34}},"id":785},"786":{"loc":{"start":{"line":1233,"column":8},"end":{"line":1233,"column":32}},"id":786},"787":{"loc":{"start":{"line":1233,"column":20},"end":{"line":1233,"column":31}},"id":787},"788":{"loc":{"start":{"line":1234,"column":8},"end":{"line":1234,"column":72}},"id":788},"789":{"loc":{"start":{"line":1234,"column":15},"end":{"line":1234,"column":71}},"id":789},"790":{"loc":{"start":{"line":1234,"column":15},"end":{"line":1234,"column":46}},"id":790},"791":{"loc":{"start":{"line":1234,"column":50},"end":{"line":1234,"column":71}},"id":791},"792":{"loc":{"start":{"line":1240,"column":8},"end":{"line":1240,"column":32}},"id":792},"793":{"loc":{"start":{"line":1240,"column":20},"end":{"line":1240,"column":31}},"id":793},"794":{"loc":{"start":{"line":1241,"column":8},"end":{"line":1241,"column":71}},"id":794},"795":{"loc":{"start":{"line":1241,"column":15},"end":{"line":1241,"column":70}},"id":795},"796":{"loc":{"start":{"line":1241,"column":15},"end":{"line":1241,"column":43}},"id":796},"797":{"loc":{"start":{"line":1241,"column":47},"end":{"line":1241,"column":70}},"id":797},"798":{"loc":{"start":{"line":1247,"column":8},"end":{"line":1248,"column":29}},"id":798},"799":{"loc":{"start":{"line":1247,"column":20},"end":{"line":1247,"column":31}},"id":799},"800":{"loc":{"start":{"line":1250,"column":12},"end":{"line":1250,"column":43}},"id":800},"801":{"loc":{"start":{"line":1251,"column":12},"end":{"line":1251,"column":25}},"id":801},"802":{"loc":{"start":{"line":1253,"column":8},"end":{"line":1264,"column":24}},"id":802},"803":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1264,"column":23}},"id":803},"804":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1263,"column":23}},"id":804},"805":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1262,"column":23}},"id":805},"806":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1261,"column":25}},"id":806},"807":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1260,"column":24}},"id":807},"808":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1259,"column":24}},"id":808},"809":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1258,"column":23}},"id":809},"810":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1257,"column":23}},"id":810},"811":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1256,"column":23}},"id":811},"812":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1255,"column":23}},"id":812},"813":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1254,"column":23}},"id":813},"814":{"loc":{"start":{"line":1253,"column":15},"end":{"line":1253,"column":25}},"id":814},"815":{"loc":{"start":{"line":1254,"column":12},"end":{"line":1254,"column":23}},"id":815},"816":{"loc":{"start":{"line":1255,"column":12},"end":{"line":1255,"column":23}},"id":816},"817":{"loc":{"start":{"line":1256,"column":12},"end":{"line":1256,"column":23}},"id":817},"818":{"loc":{"start":{"line":1257,"column":12},"end":{"line":1257,"column":23}},"id":818},"819":{"loc":{"start":{"line":1258,"column":12},"end":{"line":1258,"column":23}},"id":819},"820":{"loc":{"start":{"line":1259,"column":12},"end":{"line":1259,"column":24}},"id":820},"821":{"loc":{"start":{"line":1260,"column":12},"end":{"line":1260,"column":24}},"id":821},"822":{"loc":{"start":{"line":1261,"column":12},"end":{"line":1261,"column":25}},"id":822},"823":{"loc":{"start":{"line":1262,"column":12},"end":{"line":1262,"column":23}},"id":823},"824":{"loc":{"start":{"line":1263,"column":12},"end":{"line":1263,"column":23}},"id":824},"825":{"loc":{"start":{"line":1264,"column":12},"end":{"line":1264,"column":23}},"id":825},"826":{"loc":{"start":{"line":1268,"column":8},"end":{"line":1268,"column":24}},"id":826},"827":{"loc":{"start":{"line":1271,"column":12},"end":{"line":1271,"column":33}},"id":827},"828":{"loc":{"start":{"line":1272,"column":12},"end":{"line":1272,"column":18}},"id":828},"829":{"loc":{"start":{"line":1272,"column":12},"end":{"line":1272,"column":17}},"id":829},"830":{"loc":{"start":{"line":1273,"column":12},"end":{"line":1273,"column":19}},"id":830},"831":{"loc":{"start":{"line":1276,"column":8},"end":{"line":1276,"column":26}},"id":831},"832":{"loc":{"start":{"line":1277,"column":8},"end":{"line":1277,"column":22}},"id":832},"833":{"loc":{"start":{"line":1277,"column":8},"end":{"line":1277,"column":21}},"id":833},"834":{"loc":{"start":{"line":1278,"column":12},"end":{"line":1278,"column":31}},"id":834},"835":{"loc":{"start":{"line":1279,"column":12},"end":{"line":1279,"column":19}},"id":835},"836":{"loc":{"start":{"line":1282,"column":12},"end":{"line":1282,"column":22}},"id":836},"837":{"loc":{"start":{"line":1283,"column":12},"end":{"line":1283,"column":18}},"id":837},"838":{"loc":{"start":{"line":1283,"column":12},"end":{"line":1283,"column":17}},"id":838},"839":{"loc":{"start":{"line":1284,"column":12},"end":{"line":1284,"column":19}},"id":839},"840":{"loc":{"start":{"line":1287,"column":8},"end":{"line":1287,"column":28}},"id":840},"841":{"loc":{"start":{"line":1287,"column":16},"end":{"line":1287,"column":27}},"id":841},"842":{"loc":{"start":{"line":1288,"column":12},"end":{"line":1288,"column":51}},"id":842},"843":{"loc":{"start":{"line":1288,"column":12},"end":{"line":1288,"column":36}},"id":843},"844":{"loc":{"start":{"line":1288,"column":41},"end":{"line":1288,"column":51}},"id":844},"845":{"loc":{"start":{"line":1289,"column":12},"end":{"line":1289,"column":35}},"id":845},"846":{"loc":{"start":{"line":1289,"column":12},"end":{"line":1289,"column":34}},"id":846},"847":{"loc":{"start":{"line":1291,"column":8},"end":{"line":1291,"column":15}},"id":847},"848":{"loc":{"start":{"line":1301,"column":12},"end":{"line":1301,"column":24}},"id":848},"849":{"loc":{"start":{"line":1303,"column":8},"end":{"line":1303,"column":21}},"id":849},"850":{"loc":{"start":{"line":1309,"column":8},"end":{"line":1310,"column":18}},"id":850},"851":{"loc":{"start":{"line":1312,"column":8},"end":{"line":1312,"column":20}},"id":851},"852":{"loc":{"start":{"line":1312,"column":8},"end":{"line":1312,"column":19}},"id":852},"853":{"loc":{"start":{"line":1314,"column":16},"end":{"line":1314,"column":26}},"id":853},"854":{"loc":{"start":{"line":1315,"column":16},"end":{"line":1315,"column":26}},"id":854},"855":{"loc":{"start":{"line":1316,"column":16},"end":{"line":1316,"column":22}},"id":855},"856":{"loc":{"start":{"line":1316,"column":16},"end":{"line":1316,"column":21}},"id":856},"857":{"loc":{"start":{"line":1317,"column":16},"end":{"line":1317,"column":37}},"id":857},"858":{"loc":{"start":{"line":1317,"column":16},"end":{"line":1317,"column":36}},"id":858},"859":{"loc":{"start":{"line":1319,"column":16},"end":{"line":1319,"column":59}},"id":859},"860":{"loc":{"start":{"line":1319,"column":16},"end":{"line":1319,"column":58}},"id":860},"861":{"loc":{"start":{"line":1319,"column":30},"end":{"line":1319,"column":57}},"id":861},"862":{"loc":{"start":{"line":1321,"column":21},"end":{"line":1321,"column":31}},"id":862},"863":{"loc":{"start":{"line":1322,"column":20},"end":{"line":1322,"column":32}},"id":863},"864":{"loc":{"start":{"line":1322,"column":20},"end":{"line":1322,"column":31}},"id":864},"865":{"loc":{"start":{"line":1327,"column":8},"end":{"line":1327,"column":20}},"id":865},"866":{"loc":{"start":{"line":1327,"column":8},"end":{"line":1327,"column":19}},"id":866},"867":{"loc":{"start":{"line":1329,"column":8},"end":{"line":1332,"column":10}},"id":867},"868":{"loc":{"start":{"line":1338,"column":8},"end":{"line":1338,"column":33}},"id":868},"869":{"loc":{"start":{"line":1340,"column":8},"end":{"line":1340,"column":32}},"id":869},"870":{"loc":{"start":{"line":1341,"column":8},"end":{"line":1341,"column":45}},"id":870},"871":{"loc":{"start":{"line":1341,"column":15},"end":{"line":1341,"column":44}},"id":871},"872":{"loc":{"start":{"line":1342,"column":12},"end":{"line":1342,"column":62}},"id":872},"873":{"loc":{"start":{"line":1342,"column":12},"end":{"line":1342,"column":27}},"id":873},"874":{"loc":{"start":{"line":1342,"column":31},"end":{"line":1342,"column":62}},"id":874},"875":{"loc":{"start":{"line":1343,"column":12},"end":{"line":1343,"column":56}},"id":875},"876":{"loc":{"start":{"line":1343,"column":12},"end":{"line":1343,"column":55}},"id":876},"877":{"loc":{"start":{"line":1345,"column":8},"end":{"line":1345,"column":32}},"id":877},"878":{"loc":{"start":{"line":1347,"column":8},"end":{"line":1352,"column":10}},"id":878},"879":{"loc":{"start":{"line":1356,"column":8},"end":{"line":1356,"column":26}},"id":879},"880":{"loc":{"start":{"line":1356,"column":20},"end":{"line":1356,"column":25}},"id":880},"881":{"loc":{"start":{"line":1361,"column":12},"end":{"line":1361,"column":85}},"id":881},"882":{"loc":{"start":{"line":1361,"column":12},"end":{"line":1361,"column":46}},"id":882},"883":{"loc":{"start":{"line":1361,"column":50},"end":{"line":1361,"column":85}},"id":883},"884":{"loc":{"start":{"line":1362,"column":16},"end":{"line":1362,"column":37}},"id":884},"885":{"loc":{"start":{"line":1363,"column":16},"end":{"line":1363,"column":63}},"id":885},"886":{"loc":{"start":{"line":1363,"column":16},"end":{"line":1363,"column":62}},"id":886},"887":{"loc":{"start":{"line":1365,"column":12},"end":{"line":1365,"column":40}},"id":887},"888":{"loc":{"start":{"line":1365,"column":19},"end":{"line":1365,"column":39}},"id":888},"889":{"loc":{"start":{"line":1368,"column":8},"end":{"line":1371,"column":10}},"id":889},"890":{"loc":{"start":{"line":1375,"column":8},"end":{"line":1375,"column":34}},"id":890},"891":{"loc":{"start":{"line":1377,"column":8},"end":{"line":1377,"column":28}},"id":891},"892":{"loc":{"start":{"line":1377,"column":16},"end":{"line":1377,"column":27}},"id":892},"893":{"loc":{"start":{"line":1379,"column":12},"end":{"line":1379,"column":43}},"id":893},"894":{"loc":{"start":{"line":1381,"column":12},"end":{"line":1381,"column":42}},"id":894},"895":{"loc":{"start":{"line":1381,"column":17},"end":{"line":1381,"column":41}},"id":895},"896":{"loc":{"start":{"line":1385,"column":16},"end":{"line":1385,"column":52}},"id":896},"897":{"loc":{"start":{"line":1385,"column":16},"end":{"line":1385,"column":37}},"id":897},"898":{"loc":{"start":{"line":1385,"column":42},"end":{"line":1385,"column":52}},"id":898},"899":{"loc":{"start":{"line":1386,"column":16},"end":{"line":1386,"column":47}},"id":899},"900":{"loc":{"start":{"line":1386,"column":22},"end":{"line":1386,"column":46}},"id":900},"901":{"loc":{"start":{"line":1387,"column":16},"end":{"line":1387,"column":28}},"id":901},"902":{"loc":{"start":{"line":1387,"column":16},"end":{"line":1387,"column":27}},"id":902},"903":{"loc":{"start":{"line":1388,"column":16},"end":{"line":1388,"column":28}},"id":903},"904":{"loc":{"start":{"line":1388,"column":16},"end":{"line":1388,"column":27}},"id":904},"905":{"loc":{"start":{"line":1389,"column":16},"end":{"line":1394,"column":18}},"id":905},"906":{"loc":{"start":{"line":1392,"column":27},"end":{"line":1392,"column":52}},"id":906},"907":{"loc":{"start":{"line":1395,"column":23},"end":{"line":1395,"column":59}},"id":907},"908":{"loc":{"start":{"line":1395,"column":23},"end":{"line":1395,"column":44}},"id":908},"909":{"loc":{"start":{"line":1395,"column":49},"end":{"line":1395,"column":59}},"id":909},"910":{"loc":{"start":{"line":1396,"column":16},"end":{"line":1396,"column":47}},"id":910},"911":{"loc":{"start":{"line":1396,"column":22},"end":{"line":1396,"column":46}},"id":911},"912":{"loc":{"start":{"line":1397,"column":16},"end":{"line":1397,"column":28}},"id":912},"913":{"loc":{"start":{"line":1397,"column":16},"end":{"line":1397,"column":27}},"id":913},"914":{"loc":{"start":{"line":1398,"column":16},"end":{"line":1398,"column":36}},"id":914},"915":{"loc":{"start":{"line":1398,"column":24},"end":{"line":1398,"column":35}},"id":915},"916":{"loc":{"start":{"line":1399,"column":20},"end":{"line":1399,"column":51}},"id":916},"917":{"loc":{"start":{"line":1400,"column":20},"end":{"line":1400,"column":43}},"id":917},"918":{"loc":{"start":{"line":1400,"column":20},"end":{"line":1400,"column":42}},"id":918},"919":{"loc":{"start":{"line":1400,"column":36},"end":{"line":1400,"column":41}},"id":919},"920":{"loc":{"start":{"line":1402,"column":16},"end":{"line":1402,"column":54}},"id":920},"921":{"loc":{"start":{"line":1402,"column":26},"end":{"line":1402,"column":51}},"id":921},"922":{"loc":{"start":{"line":1403,"column":16},"end":{"line":1403,"column":28}},"id":922},"923":{"loc":{"start":{"line":1403,"column":16},"end":{"line":1403,"column":27}},"id":923},"924":{"loc":{"start":{"line":1404,"column":16},"end":{"line":1409,"column":18}},"id":924},"925":{"loc":{"start":{"line":1407,"column":27},"end":{"line":1407,"column":62}},"id":925},"926":{"loc":{"start":{"line":1411,"column":16},"end":{"line":1411,"column":28}},"id":926},"927":{"loc":{"start":{"line":1411,"column":16},"end":{"line":1411,"column":27}},"id":927},"928":{"loc":{"start":{"line":1412,"column":16},"end":{"line":1417,"column":18}},"id":928},"929":{"loc":{"start":{"line":1415,"column":27},"end":{"line":1415,"column":54}},"id":929},"930":{"loc":{"start":{"line":1419,"column":19},"end":{"line":1419,"column":78}},"id":930},"931":{"loc":{"start":{"line":1419,"column":19},"end":{"line":1419,"column":43}},"id":931},"932":{"loc":{"start":{"line":1419,"column":47},"end":{"line":1419,"column":78}},"id":932},"933":{"loc":{"start":{"line":1420,"column":12},"end":{"line":1420,"column":35}},"id":933},"934":{"loc":{"start":{"line":1420,"column":12},"end":{"line":1420,"column":34}},"id":934},"935":{"loc":{"start":{"line":1422,"column":12},"end":{"line":1422,"column":43}},"id":935},"936":{"loc":{"start":{"line":1422,"column":18},"end":{"line":1422,"column":42}},"id":936},"937":{"loc":{"start":{"line":1423,"column":12},"end":{"line":1423,"column":24}},"id":937},"938":{"loc":{"start":{"line":1423,"column":12},"end":{"line":1423,"column":23}},"id":938},"939":{"loc":{"start":{"line":1424,"column":12},"end":{"line":1429,"column":14}},"id":939},"940":{"loc":{"start":{"line":1427,"column":23},"end":{"line":1427,"column":50}},"id":940},"941":{"loc":{"start":{"line":1434,"column":8},"end":{"line":1434,"column":86}},"id":941},"942":{"loc":{"start":{"line":1436,"column":8},"end":{"line":1436,"column":20}},"id":942},"943":{"loc":{"start":{"line":1436,"column":8},"end":{"line":1436,"column":19}},"id":943},"944":{"loc":{"start":{"line":1438,"column":16},"end":{"line":1438,"column":26}},"id":944},"945":{"loc":{"start":{"line":1439,"column":12},"end":{"line":1439,"column":45}},"id":945},"946":{"loc":{"start":{"line":1439,"column":23},"end":{"line":1439,"column":44}},"id":946},"947":{"loc":{"start":{"line":1441,"column":16},"end":{"line":1441,"column":55}},"id":947},"948":{"loc":{"start":{"line":1442,"column":16},"end":{"line":1442,"column":41}},"id":948},"949":{"loc":{"start":{"line":1444,"column":16},"end":{"line":1444,"column":52}},"id":949},"950":{"loc":{"start":{"line":1444,"column":23},"end":{"line":1444,"column":51}},"id":950},"951":{"loc":{"start":{"line":1446,"column":12},"end":{"line":1446,"column":132}},"id":951},"952":{"loc":{"start":{"line":1446,"column":48},"end":{"line":1446,"column":65}},"id":952},"953":{"loc":{"start":{"line":1446,"column":68},"end":{"line":1446,"column":131}},"id":953},"954":{"loc":{"start":{"line":1446,"column":19},"end":{"line":1446,"column":45}},"id":954},"955":{"loc":{"start":{"line":1446,"column":96},"end":{"line":1446,"column":112}},"id":955},"956":{"loc":{"start":{"line":1446,"column":115},"end":{"line":1446,"column":131}},"id":956},"957":{"loc":{"start":{"line":1446,"column":68},"end":{"line":1446,"column":93}},"id":957},"958":{"loc":{"start":{"line":1447,"column":16},"end":{"line":1447,"column":63}},"id":958},"959":{"loc":{"start":{"line":1448,"column":20},"end":{"line":1448,"column":51}},"id":959},"960":{"loc":{"start":{"line":1449,"column":24},"end":{"line":1449,"column":60}},"id":960},"961":{"loc":{"start":{"line":1449,"column":34},"end":{"line":1449,"column":60}},"id":961},"962":{"loc":{"start":{"line":1450,"column":24},"end":{"line":1450,"column":81}},"id":962},"963":{"loc":{"start":{"line":1450,"column":24},"end":{"line":1450,"column":80}},"id":963},"964":{"loc":{"start":{"line":1451,"column":31},"end":{"line":1451,"column":57}},"id":964},"965":{"loc":{"start":{"line":1452,"column":24},"end":{"line":1452,"column":70}},"id":965},"966":{"loc":{"start":{"line":1452,"column":24},"end":{"line":1452,"column":69}},"id":966},"967":{"loc":{"start":{"line":1455,"column":24},"end":{"line":1455,"column":50}},"id":967},"968":{"loc":{"start":{"line":1456,"column":24},"end":{"line":1456,"column":70}},"id":968},"969":{"loc":{"start":{"line":1456,"column":24},"end":{"line":1456,"column":69}},"id":969},"970":{"loc":{"start":{"line":1457,"column":31},"end":{"line":1457,"column":47}},"id":970},"971":{"loc":{"start":{"line":1458,"column":24},"end":{"line":1458,"column":64}},"id":971},"972":{"loc":{"start":{"line":1458,"column":24},"end":{"line":1458,"column":63}},"id":972},"973":{"loc":{"start":{"line":1461,"column":16},"end":{"line":1461,"column":34}},"id":973},"974":{"loc":{"start":{"line":1463,"column":16},"end":{"line":1463,"column":33}},"id":974},"975":{"loc":{"start":{"line":1466,"column":12},"end":{"line":1466,"column":38}},"id":975},"976":{"loc":{"start":{"line":1466,"column":12},"end":{"line":1466,"column":37}},"id":976},"977":{"loc":{"start":{"line":1468,"column":17},"end":{"line":1468,"column":27}},"id":977},"978":{"loc":{"start":{"line":1469,"column":16},"end":{"line":1469,"column":28}},"id":978},"979":{"loc":{"start":{"line":1469,"column":16},"end":{"line":1469,"column":27}},"id":979},"980":{"loc":{"start":{"line":1473,"column":8},"end":{"line":1473,"column":20}},"id":980},"981":{"loc":{"start":{"line":1473,"column":8},"end":{"line":1473,"column":19}},"id":981},"982":{"loc":{"start":{"line":1475,"column":8},"end":{"line":1478,"column":10}},"id":982},"983":{"loc":{"start":{"line":1484,"column":8},"end":{"line":1486,"column":30}},"id":983},"984":{"loc":{"start":{"line":1485,"column":20},"end":{"line":1485,"column":31}},"id":984},"985":{"loc":{"start":{"line":1488,"column":12},"end":{"line":1488,"column":37}},"id":985},"986":{"loc":{"start":{"line":1489,"column":12},"end":{"line":1492,"column":14}},"id":986},"987":{"loc":{"start":{"line":1491,"column":25},"end":{"line":1491,"column":27}},"id":987},"988":{"loc":{"start":{"line":1495,"column":12},"end":{"line":1495,"column":73}},"id":988},"989":{"loc":{"start":{"line":1495,"column":12},"end":{"line":1495,"column":40}},"id":989},"990":{"loc":{"start":{"line":1495,"column":44},"end":{"line":1495,"column":73}},"id":990},"991":{"loc":{"start":{"line":1496,"column":16},"end":{"line":1496,"column":37}},"id":991},"992":{"loc":{"start":{"line":1497,"column":16},"end":{"line":1497,"column":71}},"id":992},"993":{"loc":{"start":{"line":1497,"column":16},"end":{"line":1497,"column":70}},"id":993},"994":{"loc":{"start":{"line":1499,"column":12},"end":{"line":1499,"column":40}},"id":994},"995":{"loc":{"start":{"line":1499,"column":19},"end":{"line":1499,"column":39}},"id":995},"996":{"loc":{"start":{"line":1499,"column":33},"end":{"line":1499,"column":38}},"id":996},"997":{"loc":{"start":{"line":1502,"column":12},"end":{"line":1502,"column":34}},"id":997},"998":{"loc":{"start":{"line":1503,"column":16},"end":{"line":1503,"column":36}},"id":998},"999":{"loc":{"start":{"line":1504,"column":16},"end":{"line":1504,"column":22}},"id":999},"1000":{"loc":{"start":{"line":1504,"column":16},"end":{"line":1504,"column":21}},"id":1000},"1001":{"loc":{"start":{"line":1505,"column":16},"end":{"line":1507,"column":18}},"id":1001},"1002":{"loc":{"start":{"line":1510,"column":16},"end":{"line":1510,"column":40}},"id":1002},"1003":{"loc":{"start":{"line":1511,"column":16},"end":{"line":1511,"column":49}},"id":1003},"1004":{"loc":{"start":{"line":1511,"column":23},"end":{"line":1511,"column":48}},"id":1004},"1005":{"loc":{"start":{"line":1515,"column":12},"end":{"line":1515,"column":41}},"id":1005},"1006":{"loc":{"start":{"line":1516,"column":12},"end":{"line":1516,"column":18}},"id":1006},"1007":{"loc":{"start":{"line":1516,"column":12},"end":{"line":1516,"column":17}},"id":1007},"1008":{"loc":{"start":{"line":1517,"column":12},"end":{"line":1517,"column":51}},"id":1008},"1009":{"loc":{"start":{"line":1517,"column":26},"end":{"line":1517,"column":50}},"id":1009},"1010":{"loc":{"start":{"line":1518,"column":12},"end":{"line":1518,"column":40}},"id":1010},"1011":{"loc":{"start":{"line":1518,"column":19},"end":{"line":1518,"column":39}},"id":1011},"1012":{"loc":{"start":{"line":1521,"column":12},"end":{"line":1521,"column":38}},"id":1012},"1013":{"loc":{"start":{"line":1522,"column":12},"end":{"line":1522,"column":18}},"id":1013},"1014":{"loc":{"start":{"line":1522,"column":12},"end":{"line":1522,"column":17}},"id":1014},"1015":{"loc":{"start":{"line":1523,"column":12},"end":{"line":1523,"column":31}},"id":1015},"1016":{"loc":{"start":{"line":1524,"column":12},"end":{"line":1524,"column":40}},"id":1016},"1017":{"loc":{"start":{"line":1524,"column":19},"end":{"line":1524,"column":39}},"id":1017},"1018":{"loc":{"start":{"line":1527,"column":12},"end":{"line":1527,"column":22}},"id":1018},"1019":{"loc":{"start":{"line":1528,"column":12},"end":{"line":1528,"column":43}},"id":1019},"1020":{"loc":{"start":{"line":1528,"column":19},"end":{"line":1528,"column":42}},"id":1020},"1021":{"loc":{"start":{"line":1531,"column":12},"end":{"line":1531,"column":22}},"id":1021},"1022":{"loc":{"start":{"line":1532,"column":12},"end":{"line":1532,"column":44}},"id":1022},"1023":{"loc":{"start":{"line":1532,"column":19},"end":{"line":1532,"column":43}},"id":1023},"1024":{"loc":{"start":{"line":1535,"column":12},"end":{"line":1535,"column":22}},"id":1024},"1025":{"loc":{"start":{"line":1536,"column":12},"end":{"line":1536,"column":18}},"id":1025},"1026":{"loc":{"start":{"line":1536,"column":12},"end":{"line":1536,"column":17}},"id":1026},"1027":{"loc":{"start":{"line":1537,"column":12},"end":{"line":1537,"column":63}},"id":1027},"1028":{"loc":{"start":{"line":1537,"column":45},"end":{"line":1537,"column":62}},"id":1028},"1029":{"loc":{"start":{"line":1538,"column":12},"end":{"line":1538,"column":24}},"id":1029},"1030":{"loc":{"start":{"line":1538,"column":12},"end":{"line":1538,"column":23}},"id":1030},"1031":{"loc":{"start":{"line":1539,"column":12},"end":{"line":1539,"column":24}},"id":1031},"1032":{"loc":{"start":{"line":1542,"column":12},"end":{"line":1542,"column":37}},"id":1032},"1033":{"loc":{"start":{"line":1542,"column":12},"end":{"line":1542,"column":22}},"id":1033},"1034":{"loc":{"start":{"line":1542,"column":26},"end":{"line":1542,"column":37}},"id":1034},"1035":{"loc":{"start":{"line":1543,"column":12},"end":{"line":1543,"column":47}},"id":1035},"1036":{"loc":{"start":{"line":1543,"column":19},"end":{"line":1543,"column":46}},"id":1036},"1037":{"loc":{"start":{"line":1543,"column":33},"end":{"line":1543,"column":45}},"id":1037},"1038":{"loc":{"start":{"line":1546,"column":8},"end":{"line":1546,"column":38}},"id":1038},"1039":{"loc":{"start":{"line":1546,"column":15},"end":{"line":1546,"column":37}},"id":1039},"1040":{"loc":{"start":{"line":1546,"column":31},"end":{"line":1546,"column":36}},"id":1040},"1041":{"loc":{"start":{"line":1552,"column":8},"end":{"line":1552,"column":22}},"id":1041},"1042":{"loc":{"start":{"line":1554,"column":8},"end":{"line":1554,"column":20}},"id":1042},"1043":{"loc":{"start":{"line":1554,"column":8},"end":{"line":1554,"column":19}},"id":1043},"1044":{"loc":{"start":{"line":1556,"column":13},"end":{"line":1556,"column":23}},"id":1044},"1045":{"loc":{"start":{"line":1557,"column":19},"end":{"line":1557,"column":33}},"id":1045},"1046":{"loc":{"start":{"line":1558,"column":16},"end":{"line":1558,"column":55}},"id":1046},"1047":{"loc":{"start":{"line":1558,"column":16},"end":{"line":1558,"column":54}},"id":1047},"1048":{"loc":{"start":{"line":1558,"column":26},"end":{"line":1558,"column":53}},"id":1048},"1049":{"loc":{"start":{"line":1559,"column":20},"end":{"line":1559,"column":30}},"id":1049},"1050":{"loc":{"start":{"line":1562,"column":16},"end":{"line":1562,"column":28}},"id":1050},"1051":{"loc":{"start":{"line":1562,"column":16},"end":{"line":1562,"column":27}},"id":1051},"1052":{"loc":{"start":{"line":1566,"column":8},"end":{"line":1566,"column":20}},"id":1052},"1053":{"loc":{"start":{"line":1566,"column":8},"end":{"line":1566,"column":19}},"id":1053},"1054":{"loc":{"start":{"line":1568,"column":8},"end":{"line":1568,"column":20}},"id":1054},"1055":{"loc":{"start":{"line":1572,"column":8},"end":{"line":1572,"column":26}},"id":1055},"1056":{"loc":{"start":{"line":1572,"column":20},"end":{"line":1572,"column":25}},"id":1056},"1057":{"loc":{"start":{"line":1574,"column":13},"end":{"line":1574,"column":36}},"id":1057},"1058":{"loc":{"start":{"line":1575,"column":12},"end":{"line":1575,"column":35}},"id":1058},"1059":{"loc":{"start":{"line":1575,"column":12},"end":{"line":1575,"column":34}},"id":1059},"1060":{"loc":{"start":{"line":1578,"column":8},"end":{"line":1581,"column":10}},"id":1060},"1061":{"loc":{"start":{"line":1585,"column":8},"end":{"line":1590,"column":10}},"id":1061},"1062":{"loc":{"start":{"line":1589,"column":22},"end":{"line":1589,"column":48}},"id":1062},"1063":{"loc":{"start":{"line":1594,"column":8},"end":{"line":1594,"column":27}},"id":1063},"1064":{"loc":{"start":{"line":1596,"column":8},"end":{"line":1596,"column":20}},"id":1064},"1065":{"loc":{"start":{"line":1596,"column":8},"end":{"line":1596,"column":19}},"id":1065},"1066":{"loc":{"start":{"line":1597,"column":8},"end":{"line":1597,"column":37}},"id":1066},"1067":{"loc":{"start":{"line":1597,"column":19},"end":{"line":1597,"column":36}},"id":1067},"1068":{"loc":{"start":{"line":1598,"column":8},"end":{"line":1603,"column":10}},"id":1068},"1069":{"loc":{"start":{"line":1604,"column":8},"end":{"line":1604,"column":20}},"id":1069},"1070":{"loc":{"start":{"line":1604,"column":8},"end":{"line":1604,"column":19}},"id":1070},"1071":{"loc":{"start":{"line":1605,"column":8},"end":{"line":1605,"column":20}},"id":1071},"1072":{"loc":{"start":{"line":1609,"column":8},"end":{"line":1613,"column":10}},"id":1072},"1073":{"loc":{"start":{"line":1612,"column":25},"end":{"line":1612,"column":41}},"id":1073},"1074":{"loc":{"start":{"line":1617,"column":8},"end":{"line":1617,"column":17}},"id":1074},"1075":{"loc":{"start":{"line":1619,"column":8},"end":{"line":1619,"column":29}},"id":1075},"1076":{"loc":{"start":{"line":1619,"column":8},"end":{"line":1619,"column":28}},"id":1076},"1077":{"loc":{"start":{"line":1621,"column":8},"end":{"line":1625,"column":10}},"id":1077},"1078":{"loc":{"start":{"line":1623,"column":20},"end":{"line":1623,"column":49}},"id":1078},"1079":{"loc":{"start":{"line":1627,"column":12},"end":{"line":1627,"column":22}},"id":1079},"1080":{"loc":{"start":{"line":1628,"column":12},"end":{"line":1628,"column":49}},"id":1080},"1081":{"loc":{"start":{"line":1628,"column":32},"end":{"line":1628,"column":48}},"id":1081},"1082":{"loc":{"start":{"line":1631,"column":8},"end":{"line":1631,"column":20}},"id":1082},"1083":{"loc":{"start":{"line":1635,"column":8},"end":{"line":1635,"column":25}},"id":1083},"1084":{"loc":{"start":{"line":1637,"column":8},"end":{"line":1637,"column":37}},"id":1084},"1085":{"loc":{"start":{"line":1637,"column":17},"end":{"line":1637,"column":36}},"id":1085},"1086":{"loc":{"start":{"line":1638,"column":8},"end":{"line":1638,"column":72}},"id":1086},"1087":{"loc":{"start":{"line":1638,"column":24},"end":{"line":1638,"column":44}},"id":1089},"1088":{"loc":{"start":{"line":1638,"column":47},"end":{"line":1638,"column":71}},"id":1090},"1089":{"loc":{"start":{"line":1638,"column":24},"end":{"line":1638,"column":44}},"id":1089},"1090":{"loc":{"start":{"line":1638,"column":47},"end":{"line":1638,"column":71}},"id":1090},"1091":{"loc":{"start":{"line":1640,"column":15},"end":{"line":1640,"column":29}},"id":1091},"1092":{"loc":{"start":{"line":1641,"column":16},"end":{"line":1641,"column":26}},"id":1092},"1093":{"loc":{"start":{"line":1642,"column":16},"end":{"line":1642,"column":22}},"id":1093},"1094":{"loc":{"start":{"line":1642,"column":16},"end":{"line":1642,"column":21}},"id":1094},"1095":{"loc":{"start":{"line":1643,"column":16},"end":{"line":1643,"column":52}},"id":1095},"1096":{"loc":{"start":{"line":1643,"column":23},"end":{"line":1643,"column":51}},"id":1096},"1097":{"loc":{"start":{"line":1644,"column":23},"end":{"line":1644,"column":33}},"id":1097},"1098":{"loc":{"start":{"line":1645,"column":16},"end":{"line":1645,"column":49}},"id":1098},"1099":{"loc":{"start":{"line":1645,"column":23},"end":{"line":1645,"column":48}},"id":1099},"1100":{"loc":{"start":{"line":1646,"column":23},"end":{"line":1646,"column":33}},"id":1100},"1101":{"loc":{"start":{"line":1647,"column":16},"end":{"line":1647,"column":45}},"id":1101},"1102":{"loc":{"start":{"line":1647,"column":23},"end":{"line":1647,"column":44}},"id":1102},"1103":{"loc":{"start":{"line":1653,"column":8},"end":{"line":1653,"column":20}},"id":1103},"1104":{"loc":{"start":{"line":1657,"column":8},"end":{"line":1657,"column":25}},"id":1104},"1105":{"loc":{"start":{"line":1659,"column":8},"end":{"line":1659,"column":37}},"id":1105},"1106":{"loc":{"start":{"line":1659,"column":17},"end":{"line":1659,"column":36}},"id":1106},"1107":{"loc":{"start":{"line":1660,"column":8},"end":{"line":1660,"column":72}},"id":1107},"1108":{"loc":{"start":{"line":1660,"column":24},"end":{"line":1660,"column":44}},"id":1110},"1109":{"loc":{"start":{"line":1660,"column":47},"end":{"line":1660,"column":71}},"id":1111},"1110":{"loc":{"start":{"line":1660,"column":24},"end":{"line":1660,"column":44}},"id":1110},"1111":{"loc":{"start":{"line":1660,"column":47},"end":{"line":1660,"column":71}},"id":1111},"1112":{"loc":{"start":{"line":1662,"column":15},"end":{"line":1662,"column":29}},"id":1112},"1113":{"loc":{"start":{"line":1663,"column":16},"end":{"line":1663,"column":26}},"id":1113},"1114":{"loc":{"start":{"line":1664,"column":16},"end":{"line":1664,"column":22}},"id":1114},"1115":{"loc":{"start":{"line":1664,"column":16},"end":{"line":1664,"column":21}},"id":1115},"1116":{"loc":{"start":{"line":1665,"column":16},"end":{"line":1665,"column":52}},"id":1116},"1117":{"loc":{"start":{"line":1665,"column":23},"end":{"line":1665,"column":51}},"id":1117},"1118":{"loc":{"start":{"line":1666,"column":23},"end":{"line":1666,"column":33}},"id":1118},"1119":{"loc":{"start":{"line":1667,"column":16},"end":{"line":1667,"column":49}},"id":1119},"1120":{"loc":{"start":{"line":1667,"column":23},"end":{"line":1667,"column":48}},"id":1120},"1121":{"loc":{"start":{"line":1673,"column":8},"end":{"line":1673,"column":20}},"id":1121},"1122":{"loc":{"start":{"line":1679,"column":8},"end":{"line":1679,"column":58}},"id":1122},"1123":{"loc":{"start":{"line":1679,"column":19},"end":{"line":1679,"column":57}},"id":1123},"1124":{"loc":{"start":{"line":1681,"column":12},"end":{"line":1681,"column":65}},"id":1124},"1125":{"loc":{"start":{"line":1681,"column":12},"end":{"line":1681,"column":40}},"id":1125},"1126":{"loc":{"start":{"line":1681,"column":13},"end":{"line":1681,"column":24}},"id":1126},"1127":{"loc":{"start":{"line":1681,"column":28},"end":{"line":1681,"column":39}},"id":1127},"1128":{"loc":{"start":{"line":1681,"column":45},"end":{"line":1681,"column":65}},"id":1128},"1129":{"loc":{"start":{"line":1683,"column":16},"end":{"line":1683,"column":88}},"id":1129},"1130":{"loc":{"start":{"line":1683,"column":16},"end":{"line":1683,"column":57}},"id":1130},"1131":{"loc":{"start":{"line":1683,"column":26},"end":{"line":1683,"column":57}},"id":1131},"1132":{"loc":{"start":{"line":1683,"column":61},"end":{"line":1683,"column":88}},"id":1132},"1133":{"loc":{"start":{"line":1684,"column":16},"end":{"line":1684,"column":58}},"id":1133},"1134":{"loc":{"start":{"line":1684,"column":16},"end":{"line":1684,"column":57}},"id":1134},"1135":{"loc":{"start":{"line":1687,"column":17},"end":{"line":1687,"column":37}},"id":1135},"1136":{"loc":{"start":{"line":1688,"column":16},"end":{"line":1688,"column":64}},"id":1136},"1137":{"loc":{"start":{"line":1688,"column":16},"end":{"line":1688,"column":63}},"id":1137},"1138":{"loc":{"start":{"line":1691,"column":12},"end":{"line":1696,"column":14}},"id":1138},"1139":{"loc":{"start":{"line":1693,"column":29},"end":{"line":1693,"column":31}},"id":1139},"1140":{"loc":{"start":{"line":1699,"column":8},"end":{"line":1699,"column":20}},"id":1140},"1141":{"loc":{"start":{"line":1705,"column":8},"end":{"line":1705,"column":24}},"id":1141},"1142":{"loc":{"start":{"line":1707,"column":12},"end":{"line":1707,"column":38}},"id":1142},"1143":{"loc":{"start":{"line":1707,"column":12},"end":{"line":1707,"column":23}},"id":1143},"1144":{"loc":{"start":{"line":1707,"column":27},"end":{"line":1707,"column":38}},"id":1144},"1145":{"loc":{"start":{"line":1708,"column":12},"end":{"line":1708,"column":26}},"id":1145},"1146":{"loc":{"start":{"line":1708,"column":20},"end":{"line":1708,"column":25}},"id":1146},"1147":{"loc":{"start":{"line":1709,"column":12},"end":{"line":1709,"column":42}},"id":1147},"1148":{"loc":{"start":{"line":1709,"column":19},"end":{"line":1709,"column":41}},"id":1148},"1149":{"loc":{"start":{"line":1711,"column":16},"end":{"line":1711,"column":88}},"id":1149},"1150":{"loc":{"start":{"line":1711,"column":16},"end":{"line":1711,"column":57}},"id":1150},"1151":{"loc":{"start":{"line":1711,"column":26},"end":{"line":1711,"column":57}},"id":1151},"1152":{"loc":{"start":{"line":1711,"column":61},"end":{"line":1711,"column":88}},"id":1152},"1153":{"loc":{"start":{"line":1712,"column":16},"end":{"line":1712,"column":57}},"id":1153},"1154":{"loc":{"start":{"line":1712,"column":16},"end":{"line":1712,"column":56}},"id":1154},"1155":{"loc":{"start":{"line":1715,"column":17},"end":{"line":1715,"column":37}},"id":1155},"1156":{"loc":{"start":{"line":1716,"column":16},"end":{"line":1716,"column":64}},"id":1156},"1157":{"loc":{"start":{"line":1716,"column":16},"end":{"line":1716,"column":63}},"id":1157},"1158":{"loc":{"start":{"line":1719,"column":12},"end":{"line":1724,"column":14}},"id":1158},"1159":{"loc":{"start":{"line":1725,"column":12},"end":{"line":1725,"column":24}},"id":1159},"1160":{"loc":{"start":{"line":1728,"column":12},"end":{"line":1728,"column":64}},"id":1160},"1161":{"loc":{"start":{"line":1728,"column":12},"end":{"line":1728,"column":50}},"id":1161},"1162":{"loc":{"start":{"line":1728,"column":12},"end":{"line":1728,"column":36}},"id":1162},"1163":{"loc":{"start":{"line":1728,"column":12},"end":{"line":1728,"column":22}},"id":1163},"1164":{"loc":{"start":{"line":1728,"column":26},"end":{"line":1728,"column":36}},"id":1164},"1165":{"loc":{"start":{"line":1728,"column":40},"end":{"line":1728,"column":50}},"id":1165},"1166":{"loc":{"start":{"line":1728,"column":54},"end":{"line":1728,"column":64}},"id":1166},"1167":{"loc":{"start":{"line":1729,"column":12},"end":{"line":1733,"column":14}},"id":1167},"1168":{"loc":{"start":{"line":1731,"column":29},"end":{"line":1731,"column":31}},"id":1168},"1169":{"loc":{"start":{"line":1732,"column":26},"end":{"line":1732,"column":48}},"id":1169},"1170":{"loc":{"start":{"line":1734,"column":12},"end":{"line":1734,"column":24}},"id":1170},"1171":{"loc":{"start":{"line":1737,"column":12},"end":{"line":1737,"column":84}},"id":1171},"1172":{"loc":{"start":{"line":1737,"column":12},"end":{"line":1737,"column":58}},"id":1172},"1173":{"loc":{"start":{"line":1737,"column":12},"end":{"line":1737,"column":34}},"id":1173},"1174":{"loc":{"start":{"line":1737,"column":38},"end":{"line":1737,"column":58}},"id":1174},"1175":{"loc":{"start":{"line":1737,"column":62},"end":{"line":1737,"column":84}},"id":1175},"1176":{"loc":{"start":{"line":1738,"column":12},"end":{"line":1742,"column":14}},"id":1176},"1177":{"loc":{"start":{"line":1740,"column":29},"end":{"line":1740,"column":31}},"id":1177},"1178":{"loc":{"start":{"line":1741,"column":26},"end":{"line":1741,"column":48}},"id":1178},"1179":{"loc":{"start":{"line":1743,"column":16},"end":{"line":1743,"column":96}},"id":1179},"1180":{"loc":{"start":{"line":1743,"column":16},"end":{"line":1743,"column":52}},"id":1180},"1181":{"loc":{"start":{"line":1743,"column":26},"end":{"line":1743,"column":52}},"id":1181},"1182":{"loc":{"start":{"line":1743,"column":56},"end":{"line":1743,"column":96}},"id":1182},"1183":{"loc":{"start":{"line":1744,"column":16},"end":{"line":1744,"column":62}},"id":1183},"1184":{"loc":{"start":{"line":1744,"column":16},"end":{"line":1744,"column":61}},"id":1184},"1185":{"loc":{"start":{"line":1746,"column":12},"end":{"line":1746,"column":24}},"id":1185},"1186":{"loc":{"start":{"line":1749,"column":8},"end":{"line":1749,"column":40}},"id":1186},"1187":{"loc":{"start":{"line":1749,"column":15},"end":{"line":1749,"column":39}},"id":1187},"1188":{"loc":{"start":{"line":1755,"column":8},"end":{"line":1755,"column":42}},"id":1188},"1189":{"loc":{"start":{"line":1755,"column":19},"end":{"line":1755,"column":41}},"id":1189},"1190":{"loc":{"start":{"line":1757,"column":15},"end":{"line":1757,"column":53}},"id":1190},"1191":{"loc":{"start":{"line":1757,"column":15},"end":{"line":1757,"column":39}},"id":1191},"1192":{"loc":{"start":{"line":1757,"column":15},"end":{"line":1757,"column":25}},"id":1192},"1193":{"loc":{"start":{"line":1757,"column":29},"end":{"line":1757,"column":39}},"id":1193},"1194":{"loc":{"start":{"line":1757,"column":43},"end":{"line":1757,"column":53}},"id":1194},"1195":{"loc":{"start":{"line":1758,"column":12},"end":{"line":1763,"column":14}},"id":1195},"1196":{"loc":{"start":{"line":1760,"column":29},"end":{"line":1760,"column":31}},"id":1196},"1197":{"loc":{"start":{"line":1762,"column":23},"end":{"line":1762,"column":45}},"id":1197},"1198":{"loc":{"start":{"line":1766,"column":8},"end":{"line":1766,"column":20}},"id":1198},"1199":{"loc":{"start":{"line":1772,"column":8},"end":{"line":1772,"column":51}},"id":1199},"1200":{"loc":{"start":{"line":1772,"column":19},"end":{"line":1772,"column":50}},"id":1200},"1201":{"loc":{"start":{"line":1774,"column":15},"end":{"line":1774,"column":39}},"id":1201},"1202":{"loc":{"start":{"line":1774,"column":15},"end":{"line":1774,"column":25}},"id":1202},"1203":{"loc":{"start":{"line":1774,"column":29},"end":{"line":1774,"column":39}},"id":1203},"1204":{"loc":{"start":{"line":1775,"column":12},"end":{"line":1780,"column":14}},"id":1204},"1205":{"loc":{"start":{"line":1777,"column":29},"end":{"line":1777,"column":31}},"id":1205},"1206":{"loc":{"start":{"line":1779,"column":23},"end":{"line":1779,"column":54}},"id":1206},"1207":{"loc":{"start":{"line":1783,"column":8},"end":{"line":1783,"column":20}},"id":1207},"1208":{"loc":{"start":{"line":1789,"column":8},"end":{"line":1789,"column":45}},"id":1208},"1209":{"loc":{"start":{"line":1789,"column":19},"end":{"line":1789,"column":44}},"id":1209},"1210":{"loc":{"start":{"line":1791,"column":15},"end":{"line":1791,"column":57}},"id":1210},"1211":{"loc":{"start":{"line":1791,"column":15},"end":{"line":1791,"column":41}},"id":1211},"1212":{"loc":{"start":{"line":1791,"column":15},"end":{"line":1791,"column":26}},"id":1212},"1213":{"loc":{"start":{"line":1791,"column":30},"end":{"line":1791,"column":41}},"id":1213},"1214":{"loc":{"start":{"line":1791,"column":45},"end":{"line":1791,"column":57}},"id":1214},"1215":{"loc":{"start":{"line":1792,"column":12},"end":{"line":1797,"column":14}},"id":1215},"1216":{"loc":{"start":{"line":1794,"column":29},"end":{"line":1794,"column":31}},"id":1216},"1217":{"loc":{"start":{"line":1796,"column":23},"end":{"line":1796,"column":48}},"id":1217},"1218":{"loc":{"start":{"line":1800,"column":8},"end":{"line":1800,"column":20}},"id":1218},"1219":{"loc":{"start":{"line":1805,"column":8},"end":{"line":1805,"column":34}},"id":1219},"1220":{"loc":{"start":{"line":1807,"column":8},"end":{"line":1807,"column":40}},"id":1220},"1221":{"loc":{"start":{"line":1808,"column":8},"end":{"line":1808,"column":29}},"id":1221},"1222":{"loc":{"start":{"line":1809,"column":8},"end":{"line":1809,"column":38}},"id":1222},"1223":{"loc":{"start":{"line":1809,"column":15},"end":{"line":1809,"column":37}},"id":1223},"1224":{"loc":{"start":{"line":1810,"column":8},"end":{"line":1810,"column":40}},"id":1224},"1225":{"loc":{"start":{"line":1812,"column":12},"end":{"line":1812,"column":66}},"id":1225},"1226":{"loc":{"start":{"line":1812,"column":12},"end":{"line":1812,"column":51}},"id":1226},"1227":{"loc":{"start":{"line":1812,"column":12},"end":{"line":1812,"column":36}},"id":1227},"1228":{"loc":{"start":{"line":1812,"column":12},"end":{"line":1812,"column":22}},"id":1228},"1229":{"loc":{"start":{"line":1812,"column":26},"end":{"line":1812,"column":36}},"id":1229},"1230":{"loc":{"start":{"line":1812,"column":40},"end":{"line":1812,"column":51}},"id":1230},"1231":{"loc":{"start":{"line":1812,"column":55},"end":{"line":1812,"column":66}},"id":1231},"1232":{"loc":{"start":{"line":1813,"column":12},"end":{"line":1818,"column":14}},"id":1232},"1233":{"loc":{"start":{"line":1815,"column":29},"end":{"line":1815,"column":31}},"id":1233},"1234":{"loc":{"start":{"line":1817,"column":23},"end":{"line":1817,"column":50}},"id":1234},"1235":{"loc":{"start":{"line":1819,"column":19},"end":{"line":1819,"column":54}},"id":1235},"1236":{"loc":{"start":{"line":1819,"column":36},"end":{"line":1819,"column":54}},"id":1236},"1237":{"loc":{"start":{"line":1820,"column":12},"end":{"line":1820,"column":18}},"id":1237},"1238":{"loc":{"start":{"line":1820,"column":12},"end":{"line":1820,"column":17}},"id":1238},"1239":{"loc":{"start":{"line":1821,"column":12},"end":{"line":1826,"column":14}},"id":1239},"1240":{"loc":{"start":{"line":1825,"column":23},"end":{"line":1825,"column":50}},"id":1240},"1241":{"loc":{"start":{"line":1827,"column":19},"end":{"line":1827,"column":45}},"id":1241},"1242":{"loc":{"start":{"line":1828,"column":12},"end":{"line":1828,"column":18}},"id":1242},"1243":{"loc":{"start":{"line":1828,"column":12},"end":{"line":1828,"column":17}},"id":1243},"1244":{"loc":{"start":{"line":1829,"column":12},"end":{"line":1834,"column":14}},"id":1244},"1245":{"loc":{"start":{"line":1833,"column":23},"end":{"line":1833,"column":50}},"id":1245},"1246":{"loc":{"start":{"line":1837,"column":8},"end":{"line":1837,"column":20}},"id":1246},"1247":{"loc":{"start":{"line":1843,"column":8},"end":{"line":1843,"column":47}},"id":1247},"1248":{"loc":{"start":{"line":1843,"column":19},"end":{"line":1843,"column":46}},"id":1248},"1249":{"loc":{"start":{"line":1845,"column":15},"end":{"line":1845,"column":73}},"id":1249},"1250":{"loc":{"start":{"line":1845,"column":15},"end":{"line":1845,"column":57}},"id":1250},"1251":{"loc":{"start":{"line":1845,"column":15},"end":{"line":1845,"column":41}},"id":1251},"1252":{"loc":{"start":{"line":1845,"column":15},"end":{"line":1845,"column":26}},"id":1252},"1253":{"loc":{"start":{"line":1845,"column":30},"end":{"line":1845,"column":41}},"id":1253},"1254":{"loc":{"start":{"line":1845,"column":45},"end":{"line":1845,"column":57}},"id":1254},"1255":{"loc":{"start":{"line":1845,"column":61},"end":{"line":1845,"column":73}},"id":1255},"1256":{"loc":{"start":{"line":1846,"column":12},"end":{"line":1851,"column":14}},"id":1256},"1257":{"loc":{"start":{"line":1848,"column":29},"end":{"line":1848,"column":31}},"id":1257},"1258":{"loc":{"start":{"line":1850,"column":23},"end":{"line":1850,"column":50}},"id":1258},"1259":{"loc":{"start":{"line":1854,"column":8},"end":{"line":1854,"column":20}},"id":1259},"1260":{"loc":{"start":{"line":1860,"column":8},"end":{"line":1860,"column":45}},"id":1260},"1261":{"loc":{"start":{"line":1860,"column":19},"end":{"line":1860,"column":44}},"id":1261},"1262":{"loc":{"start":{"line":1862,"column":15},"end":{"line":1862,"column":25}},"id":1262},"1263":{"loc":{"start":{"line":1863,"column":12},"end":{"line":1863,"column":18}},"id":1263},"1264":{"loc":{"start":{"line":1863,"column":12},"end":{"line":1863,"column":17}},"id":1264},"1265":{"loc":{"start":{"line":1864,"column":12},"end":{"line":1869,"column":14}},"id":1265},"1266":{"loc":{"start":{"line":1868,"column":23},"end":{"line":1868,"column":48}},"id":1266},"1267":{"loc":{"start":{"line":1872,"column":8},"end":{"line":1872,"column":20}},"id":1267},"1268":{"loc":{"start":{"line":1876,"column":8},"end":{"line":1876,"column":47}},"id":1268},"1269":{"loc":{"start":{"line":1876,"column":19},"end":{"line":1876,"column":46}},"id":1269},"1270":{"loc":{"start":{"line":1878,"column":15},"end":{"line":1878,"column":25}},"id":1270},"1271":{"loc":{"start":{"line":1879,"column":12},"end":{"line":1879,"column":18}},"id":1271},"1272":{"loc":{"start":{"line":1879,"column":12},"end":{"line":1879,"column":17}},"id":1272},"1273":{"loc":{"start":{"line":1880,"column":12},"end":{"line":1885,"column":14}},"id":1273},"1274":{"loc":{"start":{"line":1884,"column":23},"end":{"line":1884,"column":50}},"id":1274},"1275":{"loc":{"start":{"line":1888,"column":8},"end":{"line":1888,"column":20}},"id":1275},"1276":{"loc":{"start":{"line":1892,"column":8},"end":{"line":1892,"column":47}},"id":1276},"1277":{"loc":{"start":{"line":1892,"column":19},"end":{"line":1892,"column":46}},"id":1277},"1278":{"loc":{"start":{"line":1894,"column":15},"end":{"line":1894,"column":25}},"id":1278},"1279":{"loc":{"start":{"line":1895,"column":12},"end":{"line":1895,"column":18}},"id":1279},"1280":{"loc":{"start":{"line":1895,"column":12},"end":{"line":1895,"column":17}},"id":1280},"1281":{"loc":{"start":{"line":1896,"column":12},"end":{"line":1901,"column":14}},"id":1281},"1282":{"loc":{"start":{"line":1900,"column":23},"end":{"line":1900,"column":50}},"id":1282},"1283":{"loc":{"start":{"line":1904,"column":8},"end":{"line":1904,"column":20}},"id":1283},"1284":{"loc":{"start":{"line":1910,"column":8},"end":{"line":1910,"column":46}},"id":1284},"1285":{"loc":{"start":{"line":1910,"column":19},"end":{"line":1910,"column":45}},"id":1285},"1286":{"loc":{"start":{"line":1912,"column":15},"end":{"line":1912,"column":26}},"id":1286},"1287":{"loc":{"start":{"line":1913,"column":12},"end":{"line":1913,"column":18}},"id":1287},"1288":{"loc":{"start":{"line":1913,"column":12},"end":{"line":1913,"column":17}},"id":1288},"1289":{"loc":{"start":{"line":1914,"column":12},"end":{"line":1919,"column":14}},"id":1289},"1290":{"loc":{"start":{"line":1918,"column":23},"end":{"line":1918,"column":49}},"id":1290},"1291":{"loc":{"start":{"line":1922,"column":8},"end":{"line":1922,"column":20}},"id":1291},"1292":{"loc":{"start":{"line":1926,"column":8},"end":{"line":1926,"column":47}},"id":1292},"1293":{"loc":{"start":{"line":1926,"column":19},"end":{"line":1926,"column":46}},"id":1293},"1294":{"loc":{"start":{"line":1928,"column":15},"end":{"line":1928,"column":26}},"id":1294},"1295":{"loc":{"start":{"line":1929,"column":12},"end":{"line":1929,"column":18}},"id":1295},"1296":{"loc":{"start":{"line":1929,"column":12},"end":{"line":1929,"column":17}},"id":1296},"1297":{"loc":{"start":{"line":1930,"column":12},"end":{"line":1935,"column":14}},"id":1297},"1298":{"loc":{"start":{"line":1934,"column":23},"end":{"line":1934,"column":50}},"id":1298},"1299":{"loc":{"start":{"line":1938,"column":8},"end":{"line":1938,"column":20}},"id":1299},"1300":{"loc":{"start":{"line":1944,"column":8},"end":{"line":1944,"column":46}},"id":1300},"1301":{"loc":{"start":{"line":1946,"column":8},"end":{"line":1946,"column":42}},"id":1301},"1302":{"loc":{"start":{"line":1946,"column":15},"end":{"line":1946,"column":41}},"id":1302},"1303":{"loc":{"start":{"line":1948,"column":12},"end":{"line":1948,"column":22}},"id":1303},"1304":{"loc":{"start":{"line":1949,"column":12},"end":{"line":1949,"column":18}},"id":1304},"1305":{"loc":{"start":{"line":1949,"column":12},"end":{"line":1949,"column":17}},"id":1305},"1306":{"loc":{"start":{"line":1950,"column":12},"end":{"line":1950,"column":44}},"id":1306},"1307":{"loc":{"start":{"line":1951,"column":12},"end":{"line":1951,"column":33}},"id":1307},"1308":{"loc":{"start":{"line":1952,"column":12},"end":{"line":1952,"column":53}},"id":1308},"1309":{"loc":{"start":{"line":1952,"column":25},"end":{"line":1952,"column":52}},"id":1309},"1310":{"loc":{"start":{"line":1953,"column":12},"end":{"line":1953,"column":44}},"id":1310},"1311":{"loc":{"start":{"line":1954,"column":12},"end":{"line":1954,"column":24}},"id":1311},"1312":{"loc":{"start":{"line":1954,"column":12},"end":{"line":1954,"column":23}},"id":1312},"1313":{"loc":{"start":{"line":1956,"column":12},"end":{"line":1961,"column":14}},"id":1313},"1314":{"loc":{"start":{"line":1960,"column":27},"end":{"line":1960,"column":54}},"id":1314},"1315":{"loc":{"start":{"line":1964,"column":8},"end":{"line":1964,"column":20}},"id":1315},"1316":{"loc":{"start":{"line":1970,"column":8},"end":{"line":1970,"column":17}},"id":1316},"1317":{"loc":{"start":{"line":1972,"column":8},"end":{"line":1972,"column":44}},"id":1317},"1318":{"loc":{"start":{"line":1972,"column":15},"end":{"line":1972,"column":43}},"id":1318},"1319":{"loc":{"start":{"line":1974,"column":12},"end":{"line":1974,"column":25}},"id":1319},"1320":{"loc":{"start":{"line":1976,"column":17},"end":{"line":1976,"column":37}},"id":1320},"1321":{"loc":{"start":{"line":1977,"column":16},"end":{"line":1977,"column":64}},"id":1321},"1322":{"loc":{"start":{"line":1977,"column":16},"end":{"line":1977,"column":63}},"id":1322},"1323":{"loc":{"start":{"line":1981,"column":16},"end":{"line":1981,"column":88}},"id":1323},"1324":{"loc":{"start":{"line":1981,"column":16},"end":{"line":1981,"column":57}},"id":1324},"1325":{"loc":{"start":{"line":1981,"column":26},"end":{"line":1981,"column":57}},"id":1325},"1326":{"loc":{"start":{"line":1981,"column":61},"end":{"line":1981,"column":88}},"id":1326},"1327":{"loc":{"start":{"line":1982,"column":16},"end":{"line":1982,"column":61}},"id":1327},"1328":{"loc":{"start":{"line":1982,"column":16},"end":{"line":1982,"column":60}},"id":1328},"1329":{"loc":{"start":{"line":1985,"column":12},"end":{"line":1990,"column":14}},"id":1329},"1330":{"loc":{"start":{"line":1987,"column":29},"end":{"line":1987,"column":31}},"id":1330},"1331":{"loc":{"start":{"line":1989,"column":23},"end":{"line":1989,"column":50}},"id":1331},"1332":{"loc":{"start":{"line":1993,"column":8},"end":{"line":1993,"column":20}},"id":1332},"1333":{"loc":{"start":{"line":1999,"column":8},"end":{"line":1999,"column":47}},"id":1333},"1334":{"loc":{"start":{"line":1999,"column":19},"end":{"line":1999,"column":46}},"id":1334},"1335":{"loc":{"start":{"line":2001,"column":12},"end":{"line":2001,"column":22}},"id":1335},"1336":{"loc":{"start":{"line":2002,"column":12},"end":{"line":2005,"column":14}},"id":1336},"1337":{"loc":{"start":{"line":2007,"column":19},"end":{"line":2007,"column":33}},"id":1337},"1338":{"loc":{"start":{"line":2008,"column":21},"end":{"line":2008,"column":31}},"id":1338},"1339":{"loc":{"start":{"line":2011,"column":16},"end":{"line":2011,"column":22}},"id":1339},"1340":{"loc":{"start":{"line":2011,"column":16},"end":{"line":2011,"column":21}},"id":1340},"1341":{"loc":{"start":{"line":2012,"column":16},"end":{"line":2012,"column":67}},"id":1341},"1342":{"loc":{"start":{"line":2012,"column":16},"end":{"line":2012,"column":66}},"id":1342},"1343":{"loc":{"start":{"line":2012,"column":38},"end":{"line":2012,"column":65}},"id":1343},"1344":{"loc":{"start":{"line":2016,"column":8},"end":{"line":2016,"column":20}},"id":1344},"1345":{"loc":{"start":{"line":2022,"column":8},"end":{"line":2023,"column":22}},"id":1345},"1346":{"loc":{"start":{"line":2025,"column":15},"end":{"line":2025,"column":29}},"id":1346},"1347":{"loc":{"start":{"line":2026,"column":16},"end":{"line":2026,"column":26}},"id":1347},"1348":{"loc":{"start":{"line":2029,"column":12},"end":{"line":2029,"column":45}},"id":1348},"1349":{"loc":{"start":{"line":2029,"column":24},"end":{"line":2029,"column":44}},"id":1349},"1350":{"loc":{"start":{"line":2030,"column":16},"end":{"line":2030,"column":48}},"id":1350},"1351":{"loc":{"start":{"line":2033,"column":12},"end":{"line":2033,"column":33}},"id":1351},"1352":{"loc":{"start":{"line":2033,"column":12},"end":{"line":2033,"column":32}},"id":1352},"1353":{"loc":{"start":{"line":2036,"column":8},"end":{"line":2036,"column":20}},"id":1353},"1354":{"loc":{"start":{"line":2040,"column":8},"end":{"line":2040,"column":18}},"id":1354},"1355":{"loc":{"start":{"line":2042,"column":8},"end":{"line":2042,"column":20}},"id":1355},"1356":{"loc":{"start":{"line":2042,"column":8},"end":{"line":2042,"column":19}},"id":1356},"1357":{"loc":{"start":{"line":2044,"column":8},"end":{"line":2044,"column":37}},"id":1357},"1358":{"loc":{"start":{"line":2044,"column":16},"end":{"line":2044,"column":36}},"id":1358},"1359":{"loc":{"start":{"line":2046,"column":8},"end":{"line":2046,"column":20}},"id":1359},"1360":{"loc":{"start":{"line":2046,"column":8},"end":{"line":2046,"column":19}},"id":1360},"1361":{"loc":{"start":{"line":2048,"column":8},"end":{"line":2051,"column":10}},"id":1361},"1362":{"loc":{"start":{"line":2057,"column":8},"end":{"line":2057,"column":26}},"id":1362},"1363":{"loc":{"start":{"line":2057,"column":20},"end":{"line":2057,"column":25}},"id":1363},"1364":{"loc":{"start":{"line":2059,"column":12},"end":{"line":2059,"column":43}},"id":1364},"1365":{"loc":{"start":{"line":2060,"column":12},"end":{"line":2060,"column":35}},"id":1365},"1366":{"loc":{"start":{"line":2060,"column":12},"end":{"line":2060,"column":34}},"id":1366},"1367":{"loc":{"start":{"line":2063,"column":8},"end":{"line":2066,"column":10}},"id":1367},"1368":{"loc":{"start":{"line":2070,"column":8},"end":{"line":2071,"column":24}},"id":1368},"1369":{"loc":{"start":{"line":2070,"column":17},"end":{"line":2070,"column":42}},"id":1369},"1370":{"loc":{"start":{"line":2074,"column":12},"end":{"line":2074,"column":47}},"id":1370},"1371":{"loc":{"start":{"line":2074,"column":22},"end":{"line":2074,"column":47}},"id":1371},"1372":{"loc":{"start":{"line":2075,"column":12},"end":{"line":2075,"column":59}},"id":1372},"1373":{"loc":{"start":{"line":2075,"column":12},"end":{"line":2075,"column":58}},"id":1373},"1374":{"loc":{"start":{"line":2078,"column":12},"end":{"line":2078,"column":28}},"id":1374},"1375":{"loc":{"start":{"line":2079,"column":12},"end":{"line":2079,"column":24}},"id":1375},"1376":{"loc":{"start":{"line":2079,"column":12},"end":{"line":2079,"column":23}},"id":1376},"1377":{"loc":{"start":{"line":2080,"column":12},"end":{"line":2080,"column":47}},"id":1377},"1378":{"loc":{"start":{"line":2080,"column":19},"end":{"line":2080,"column":46}},"id":1378},"1379":{"loc":{"start":{"line":2081,"column":19},"end":{"line":2081,"column":29}},"id":1379},"1380":{"loc":{"start":{"line":2082,"column":12},"end":{"line":2082,"column":18}},"id":1380},"1381":{"loc":{"start":{"line":2082,"column":12},"end":{"line":2082,"column":17}},"id":1381},"1382":{"loc":{"start":{"line":2083,"column":12},"end":{"line":2083,"column":47}},"id":1382},"1383":{"loc":{"start":{"line":2083,"column":19},"end":{"line":2083,"column":46}},"id":1383},"1384":{"loc":{"start":{"line":2086,"column":8},"end":{"line":2090,"column":10}},"id":1384},"1385":{"loc":{"start":{"line":2094,"column":8},"end":{"line":2094,"column":22}},"id":1385},"1386":{"loc":{"start":{"line":2096,"column":15},"end":{"line":2096,"column":29}},"id":1386},"1387":{"loc":{"start":{"line":2097,"column":12},"end":{"line":2097,"column":54}},"id":1387},"1388":{"loc":{"start":{"line":2097,"column":12},"end":{"line":2097,"column":53}},"id":1388},"1389":{"loc":{"start":{"line":2097,"column":22},"end":{"line":2097,"column":52}},"id":1389},"1390":{"loc":{"start":{"line":2098,"column":17},"end":{"line":2098,"column":27}},"id":1390},"1391":{"loc":{"start":{"line":2101,"column":12},"end":{"line":2101,"column":18}},"id":1391},"1392":{"loc":{"start":{"line":2101,"column":12},"end":{"line":2101,"column":17}},"id":1392},"1393":{"loc":{"start":{"line":2104,"column":8},"end":{"line":2104,"column":20}},"id":1393},"1394":{"loc":{"start":{"line":2108,"column":8},"end":{"line":2108,"column":25}},"id":1394},"1395":{"loc":{"start":{"line":2110,"column":8},"end":{"line":2110,"column":29}},"id":1395},"1396":{"loc":{"start":{"line":2110,"column":8},"end":{"line":2110,"column":28}},"id":1396},"1397":{"loc":{"start":{"line":2112,"column":8},"end":{"line":2112,"column":54}},"id":1397},"1398":{"loc":{"start":{"line":2112,"column":23},"end":{"line":2112,"column":53}},"id":1398},"1399":{"loc":{"start":{"line":2114,"column":8},"end":{"line":2114,"column":27}},"id":1399},"1400":{"loc":{"start":{"line":2114,"column":8},"end":{"line":2114,"column":26}},"id":1400},"1401":{"loc":{"start":{"line":2116,"column":8},"end":{"line":2120,"column":10}},"id":1401},"1402":{"loc":{"start":{"line":2128,"column":8},"end":{"line":2128,"column":25}},"id":1402},"1403":{"loc":{"start":{"line":2130,"column":8},"end":{"line":2130,"column":28}},"id":1403},"1404":{"loc":{"start":{"line":2130,"column":8},"end":{"line":2130,"column":27}},"id":1404},"1405":{"loc":{"start":{"line":2132,"column":8},"end":{"line":2132,"column":58}},"id":1405},"1406":{"loc":{"start":{"line":2132,"column":23},"end":{"line":2132,"column":57}},"id":1406},"1407":{"loc":{"start":{"line":2134,"column":8},"end":{"line":2134,"column":27}},"id":1407},"1408":{"loc":{"start":{"line":2134,"column":8},"end":{"line":2134,"column":26}},"id":1408},"1409":{"loc":{"start":{"line":2136,"column":8},"end":{"line":2140,"column":10}},"id":1409},"1410":{"loc":{"start":{"line":2146,"column":8},"end":{"line":2146,"column":20}},"id":1410},"1411":{"loc":{"start":{"line":2146,"column":8},"end":{"line":2146,"column":19}},"id":1411},"1412":{"loc":{"start":{"line":2148,"column":8},"end":{"line":2150,"column":10}},"id":1412},"1413":{"loc":{"start":{"line":2156,"column":8},"end":{"line":2156,"column":37}},"id":1413},"1414":{"loc":{"start":{"line":2156,"column":19},"end":{"line":2156,"column":36}},"id":1414},"1415":{"loc":{"start":{"line":2158,"column":8},"end":{"line":2158,"column":27}},"id":1415},"1416":{"loc":{"start":{"line":2158,"column":8},"end":{"line":2158,"column":26}},"id":1416},"1417":{"loc":{"start":{"line":2160,"column":8},"end":{"line":2163,"column":10}},"id":1417},"1418":{"loc":{"start":{"line":2169,"column":8},"end":{"line":2169,"column":40}},"id":1418},"1419":{"loc":{"start":{"line":2171,"column":8},"end":{"line":2171,"column":28}},"id":1419},"1420":{"loc":{"start":{"line":2171,"column":8},"end":{"line":2171,"column":27}},"id":1420},"1421":{"loc":{"start":{"line":2173,"column":8},"end":{"line":2173,"column":20}},"id":1421},"1422":{"loc":{"start":{"line":2173,"column":8},"end":{"line":2173,"column":19}},"id":1422},"1423":{"loc":{"start":{"line":2175,"column":8},"end":{"line":2175,"column":33}},"id":1423},"1424":{"loc":{"start":{"line":2175,"column":15},"end":{"line":2175,"column":32}},"id":1424},"1425":{"loc":{"start":{"line":2177,"column":8},"end":{"line":2177,"column":20}},"id":1425},"1426":{"loc":{"start":{"line":2177,"column":8},"end":{"line":2177,"column":19}},"id":1426},"1427":{"loc":{"start":{"line":2179,"column":8},"end":{"line":2179,"column":38}},"id":1427},"1428":{"loc":{"start":{"line":2179,"column":21},"end":{"line":2179,"column":37}},"id":1428},"1429":{"loc":{"start":{"line":2181,"column":12},"end":{"line":2181,"column":32}},"id":1429},"1430":{"loc":{"start":{"line":2182,"column":12},"end":{"line":2182,"column":18}},"id":1430},"1431":{"loc":{"start":{"line":2182,"column":12},"end":{"line":2182,"column":17}},"id":1431},"1432":{"loc":{"start":{"line":2183,"column":12},"end":{"line":2183,"column":41}},"id":1432},"1433":{"loc":{"start":{"line":2183,"column":24},"end":{"line":2183,"column":40}},"id":1433},"1434":{"loc":{"start":{"line":2185,"column":12},"end":{"line":2185,"column":29}},"id":1434},"1435":{"loc":{"start":{"line":2188,"column":8},"end":{"line":2193,"column":10}},"id":1435},"1436":{"loc":{"start":{"line":2199,"column":8},"end":{"line":2199,"column":39}},"id":1436},"1437":{"loc":{"start":{"line":2201,"column":8},"end":{"line":2201,"column":28}},"id":1437},"1438":{"loc":{"start":{"line":2201,"column":8},"end":{"line":2201,"column":27}},"id":1438},"1439":{"loc":{"start":{"line":2203,"column":8},"end":{"line":2203,"column":43}},"id":1439},"1440":{"loc":{"start":{"line":2204,"column":8},"end":{"line":2204,"column":33}},"id":1440},"1441":{"loc":{"start":{"line":2206,"column":8},"end":{"line":2206,"column":32}},"id":1441},"1442":{"loc":{"start":{"line":2206,"column":15},"end":{"line":2206,"column":31}},"id":1442},"1443":{"loc":{"start":{"line":2208,"column":8},"end":{"line":2208,"column":43}},"id":1443},"1444":{"loc":{"start":{"line":2210,"column":8},"end":{"line":2210,"column":31}},"id":1444},"1445":{"loc":{"start":{"line":2210,"column":8},"end":{"line":2210,"column":30}},"id":1445},"1446":{"loc":{"start":{"line":2212,"column":8},"end":{"line":2212,"column":20}},"id":1446},"1447":{"loc":{"start":{"line":2212,"column":8},"end":{"line":2212,"column":19}},"id":1447},"1448":{"loc":{"start":{"line":2214,"column":8},"end":{"line":2214,"column":33}},"id":1448},"1449":{"loc":{"start":{"line":2214,"column":15},"end":{"line":2214,"column":32}},"id":1449},"1450":{"loc":{"start":{"line":2216,"column":8},"end":{"line":2216,"column":20}},"id":1450},"1451":{"loc":{"start":{"line":2216,"column":8},"end":{"line":2216,"column":19}},"id":1451},"1452":{"loc":{"start":{"line":2218,"column":12},"end":{"line":2218,"column":22}},"id":1452},"1453":{"loc":{"start":{"line":2219,"column":12},"end":{"line":2219,"column":18}},"id":1453},"1454":{"loc":{"start":{"line":2219,"column":12},"end":{"line":2219,"column":17}},"id":1454},"1455":{"loc":{"start":{"line":2222,"column":8},"end":{"line":2226,"column":10}},"id":1455},"1456":{"loc":{"start":{"line":2230,"column":8},"end":{"line":2230,"column":39}},"id":1456},"1457":{"loc":{"start":{"line":2232,"column":8},"end":{"line":2232,"column":31}},"id":1457},"1458":{"loc":{"start":{"line":2232,"column":8},"end":{"line":2232,"column":30}},"id":1458},"1459":{"loc":{"start":{"line":2234,"column":8},"end":{"line":2234,"column":20}},"id":1459},"1460":{"loc":{"start":{"line":2234,"column":8},"end":{"line":2234,"column":19}},"id":1460},"1461":{"loc":{"start":{"line":2236,"column":8},"end":{"line":2236,"column":33}},"id":1461},"1462":{"loc":{"start":{"line":2236,"column":15},"end":{"line":2236,"column":32}},"id":1462},"1463":{"loc":{"start":{"line":2238,"column":8},"end":{"line":2238,"column":20}},"id":1463},"1464":{"loc":{"start":{"line":2238,"column":8},"end":{"line":2238,"column":19}},"id":1464},"1465":{"loc":{"start":{"line":2240,"column":8},"end":{"line":2240,"column":43}},"id":1465},"1466":{"loc":{"start":{"line":2241,"column":8},"end":{"line":2241,"column":33}},"id":1466},"1467":{"loc":{"start":{"line":2243,"column":8},"end":{"line":2243,"column":32}},"id":1467},"1468":{"loc":{"start":{"line":2243,"column":15},"end":{"line":2243,"column":31}},"id":1468},"1469":{"loc":{"start":{"line":2245,"column":8},"end":{"line":2245,"column":43}},"id":1469},"1470":{"loc":{"start":{"line":2247,"column":8},"end":{"line":2251,"column":10}},"id":1470},"1471":{"loc":{"start":{"line":2255,"column":8},"end":{"line":2255,"column":26}},"id":1471},"1472":{"loc":{"start":{"line":2255,"column":20},"end":{"line":2255,"column":25}},"id":1472},"1473":{"loc":{"start":{"line":2257,"column":8},"end":{"line":2261,"column":10}},"id":1473},"1474":{"loc":{"start":{"line":2259,"column":26},"end":{"line":2259,"column":56}},"id":1474},"1475":{"loc":{"start":{"line":2265,"column":8},"end":{"line":2265,"column":66}},"id":1475},"1476":{"loc":{"start":{"line":2267,"column":8},"end":{"line":2267,"column":36}},"id":1476},"1477":{"loc":{"start":{"line":2269,"column":8},"end":{"line":2269,"column":29}},"id":1477},"1478":{"loc":{"start":{"line":2269,"column":8},"end":{"line":2269,"column":28}},"id":1478},"1479":{"loc":{"start":{"line":2271,"column":8},"end":{"line":2271,"column":20}},"id":1479},"1480":{"loc":{"start":{"line":2271,"column":8},"end":{"line":2271,"column":19}},"id":1480},"1481":{"loc":{"start":{"line":2273,"column":12},"end":{"line":2273,"column":22}},"id":1481},"1482":{"loc":{"start":{"line":2274,"column":12},"end":{"line":2274,"column":18}},"id":1482},"1483":{"loc":{"start":{"line":2274,"column":12},"end":{"line":2274,"column":17}},"id":1483},"1484":{"loc":{"start":{"line":2276,"column":16},"end":{"line":2276,"column":58}},"id":1484},"1485":{"loc":{"start":{"line":2276,"column":16},"end":{"line":2276,"column":35}},"id":1485},"1486":{"loc":{"start":{"line":2276,"column":39},"end":{"line":2276,"column":58}},"id":1486},"1487":{"loc":{"start":{"line":2277,"column":16},"end":{"line":2277,"column":38}},"id":1487},"1488":{"loc":{"start":{"line":2278,"column":16},"end":{"line":2278,"column":53}},"id":1488},"1489":{"loc":{"start":{"line":2278,"column":23},"end":{"line":2278,"column":52}},"id":1489},"1490":{"loc":{"start":{"line":2279,"column":16},"end":{"line":2279,"column":37}},"id":1490},"1491":{"loc":{"start":{"line":2281,"column":20},"end":{"line":2281,"column":72}},"id":1491},"1492":{"loc":{"start":{"line":2281,"column":20},"end":{"line":2281,"column":50}},"id":1492},"1493":{"loc":{"start":{"line":2281,"column":54},"end":{"line":2281,"column":72}},"id":1493},"1494":{"loc":{"start":{"line":2282,"column":20},"end":{"line":2282,"column":26}},"id":1494},"1495":{"loc":{"start":{"line":2282,"column":20},"end":{"line":2282,"column":25}},"id":1495},"1496":{"loc":{"start":{"line":2283,"column":20},"end":{"line":2283,"column":32}},"id":1496},"1497":{"loc":{"start":{"line":2284,"column":20},"end":{"line":2284,"column":46}},"id":1497},"1498":{"loc":{"start":{"line":2284,"column":28},"end":{"line":2284,"column":45}},"id":1498},"1499":{"loc":{"start":{"line":2285,"column":20},"end":{"line":2285,"column":32}},"id":1499},"1500":{"loc":{"start":{"line":2288,"column":16},"end":{"line":2288,"column":38}},"id":1500},"1501":{"loc":{"start":{"line":2289,"column":16},"end":{"line":2289,"column":41}},"id":1501},"1502":{"loc":{"start":{"line":2289,"column":23},"end":{"line":2289,"column":40}},"id":1502},"1503":{"loc":{"start":{"line":2290,"column":16},"end":{"line":2290,"column":37}},"id":1503},"1504":{"loc":{"start":{"line":2292,"column":20},"end":{"line":2292,"column":38}},"id":1504},"1505":{"loc":{"start":{"line":2294,"column":25},"end":{"line":2294,"column":45}},"id":1505},"1506":{"loc":{"start":{"line":2295,"column":24},"end":{"line":2295,"column":67}},"id":1506},"1507":{"loc":{"start":{"line":2295,"column":24},"end":{"line":2295,"column":66}},"id":1507},"1508":{"loc":{"start":{"line":2298,"column":20},"end":{"line":2298,"column":26}},"id":1508},"1509":{"loc":{"start":{"line":2298,"column":20},"end":{"line":2298,"column":25}},"id":1509},"1510":{"loc":{"start":{"line":2299,"column":20},"end":{"line":2299,"column":32}},"id":1510},"1511":{"loc":{"start":{"line":2300,"column":20},"end":{"line":2300,"column":46}},"id":1511},"1512":{"loc":{"start":{"line":2300,"column":28},"end":{"line":2300,"column":45}},"id":1512},"1513":{"loc":{"start":{"line":2301,"column":20},"end":{"line":2301,"column":32}},"id":1513},"1514":{"loc":{"start":{"line":2305,"column":16},"end":{"line":2305,"column":43}},"id":1514},"1515":{"loc":{"start":{"line":2306,"column":16},"end":{"line":2306,"column":28}},"id":1515},"1516":{"loc":{"start":{"line":2306,"column":16},"end":{"line":2306,"column":27}},"id":1516},"1517":{"loc":{"start":{"line":2310,"column":12},"end":{"line":2310,"column":39}},"id":1517},"1518":{"loc":{"start":{"line":2312,"column":17},"end":{"line":2312,"column":27}},"id":1518},"1519":{"loc":{"start":{"line":2313,"column":16},"end":{"line":2313,"column":41}},"id":1519},"1520":{"loc":{"start":{"line":2313,"column":23},"end":{"line":2313,"column":40}},"id":1520},"1521":{"loc":{"start":{"line":2315,"column":12},"end":{"line":2315,"column":24}},"id":1521},"1522":{"loc":{"start":{"line":2315,"column":12},"end":{"line":2315,"column":23}},"id":1522},"1523":{"loc":{"start":{"line":2317,"column":17},"end":{"line":2317,"column":27}},"id":1523},"1524":{"loc":{"start":{"line":2318,"column":16},"end":{"line":2318,"column":43}},"id":1524},"1525":{"loc":{"start":{"line":2318,"column":25},"end":{"line":2318,"column":42}},"id":1525},"1526":{"loc":{"start":{"line":2322,"column":8},"end":{"line":2322,"column":20}},"id":1526},"1527":{"loc":{"start":{"line":2322,"column":8},"end":{"line":2322,"column":19}},"id":1527},"1528":{"loc":{"start":{"line":2324,"column":8},"end":{"line":2324,"column":43}},"id":1528},"1529":{"loc":{"start":{"line":2325,"column":8},"end":{"line":2325,"column":33}},"id":1529},"1530":{"loc":{"start":{"line":2327,"column":8},"end":{"line":2327,"column":32}},"id":1530},"1531":{"loc":{"start":{"line":2327,"column":15},"end":{"line":2327,"column":31}},"id":1531},"1532":{"loc":{"start":{"line":2329,"column":8},"end":{"line":2329,"column":43}},"id":1532},"1533":{"loc":{"start":{"line":2331,"column":12},"end":{"line":2331,"column":39}},"id":1533},"1534":{"loc":{"start":{"line":2332,"column":12},"end":{"line":2338,"column":14}},"id":1534},"1535":{"loc":{"start":{"line":2341,"column":8},"end":{"line":2347,"column":10}},"id":1535},"1536":{"loc":{"start":{"line":2353,"column":8},"end":{"line":2353,"column":32}},"id":1536},"1537":{"loc":{"start":{"line":2355,"column":8},"end":{"line":2355,"column":34}},"id":1537},"1538":{"loc":{"start":{"line":2355,"column":8},"end":{"line":2355,"column":33}},"id":1538},"1539":{"loc":{"start":{"line":2358,"column":12},"end":{"line":2358,"column":33}},"id":1539},"1540":{"loc":{"start":{"line":2359,"column":12},"end":{"line":2359,"column":18}},"id":1540},"1541":{"loc":{"start":{"line":2359,"column":12},"end":{"line":2359,"column":17}},"id":1541},"1542":{"loc":{"start":{"line":2362,"column":16},"end":{"line":2362,"column":57}},"id":1542},"1543":{"loc":{"start":{"line":2362,"column":16},"end":{"line":2362,"column":56}},"id":1543},"1544":{"loc":{"start":{"line":2365,"column":12},"end":{"line":2368,"column":14}},"id":1544},"1545":{"loc":{"start":{"line":2371,"column":12},"end":{"line":2371,"column":32}},"id":1545},"1546":{"loc":{"start":{"line":2373,"column":16},"end":{"line":2373,"column":57}},"id":1546},"1547":{"loc":{"start":{"line":2373,"column":16},"end":{"line":2373,"column":56}},"id":1547},"1548":{"loc":{"start":{"line":2376,"column":12},"end":{"line":2379,"column":14}},"id":1548},"1549":{"loc":{"start":{"line":2382,"column":8},"end":{"line":2382,"column":28}},"id":1549},"1550":{"loc":{"start":{"line":2382,"column":16},"end":{"line":2382,"column":27}},"id":1550},"1551":{"loc":{"start":{"line":2383,"column":12},"end":{"line":2383,"column":43}},"id":1551},"1552":{"loc":{"start":{"line":2384,"column":12},"end":{"line":2384,"column":46}},"id":1552},"1553":{"loc":{"start":{"line":2384,"column":20},"end":{"line":2384,"column":45}},"id":1553},"1554":{"loc":{"start":{"line":2386,"column":17},"end":{"line":2386,"column":81}},"id":1554},"1555":{"loc":{"start":{"line":2387,"column":16},"end":{"line":2387,"column":66}},"id":1555},"1556":{"loc":{"start":{"line":2387,"column":16},"end":{"line":2387,"column":65}},"id":1556},"1557":{"loc":{"start":{"line":2391,"column":8},"end":{"line":2391,"column":27}},"id":1557},"1558":{"loc":{"start":{"line":2391,"column":8},"end":{"line":2391,"column":26}},"id":1558},"1559":{"loc":{"start":{"line":2393,"column":12},"end":{"line":2393,"column":48}},"id":1559},"1560":{"loc":{"start":{"line":2393,"column":12},"end":{"line":2393,"column":26}},"id":1560},"1561":{"loc":{"start":{"line":2394,"column":12},"end":{"line":2394,"column":53}},"id":1561},"1562":{"loc":{"start":{"line":2394,"column":12},"end":{"line":2394,"column":52}},"id":1562},"1563":{"loc":{"start":{"line":2397,"column":8},"end":{"line":2400,"column":10}},"id":1563},"1564":{"loc":{"start":{"line":2406,"column":8},"end":{"line":2406,"column":32}},"id":1564},"1565":{"loc":{"start":{"line":2408,"column":8},"end":{"line":2408,"column":31}},"id":1565},"1566":{"loc":{"start":{"line":2408,"column":8},"end":{"line":2408,"column":30}},"id":1566},"1567":{"loc":{"start":{"line":2411,"column":12},"end":{"line":2411,"column":33}},"id":1567},"1568":{"loc":{"start":{"line":2412,"column":12},"end":{"line":2412,"column":18}},"id":1568},"1569":{"loc":{"start":{"line":2412,"column":12},"end":{"line":2412,"column":17}},"id":1569},"1570":{"loc":{"start":{"line":2414,"column":17},"end":{"line":2414,"column":54}},"id":1570},"1571":{"loc":{"start":{"line":2415,"column":16},"end":{"line":2415,"column":54}},"id":1571},"1572":{"loc":{"start":{"line":2415,"column":16},"end":{"line":2415,"column":53}},"id":1572},"1573":{"loc":{"start":{"line":2418,"column":12},"end":{"line":2421,"column":14}},"id":1573},"1574":{"loc":{"start":{"line":2424,"column":12},"end":{"line":2424,"column":32}},"id":1574},"1575":{"loc":{"start":{"line":2425,"column":17},"end":{"line":2425,"column":54}},"id":1575},"1576":{"loc":{"start":{"line":2426,"column":16},"end":{"line":2426,"column":54}},"id":1576},"1577":{"loc":{"start":{"line":2426,"column":16},"end":{"line":2426,"column":53}},"id":1577},"1578":{"loc":{"start":{"line":2429,"column":12},"end":{"line":2432,"column":14}},"id":1578},"1579":{"loc":{"start":{"line":2435,"column":8},"end":{"line":2435,"column":28}},"id":1579},"1580":{"loc":{"start":{"line":2435,"column":16},"end":{"line":2435,"column":27}},"id":1580},"1581":{"loc":{"start":{"line":2436,"column":12},"end":{"line":2436,"column":43}},"id":1581},"1582":{"loc":{"start":{"line":2437,"column":12},"end":{"line":2437,"column":46}},"id":1582},"1583":{"loc":{"start":{"line":2437,"column":20},"end":{"line":2437,"column":45}},"id":1583},"1584":{"loc":{"start":{"line":2439,"column":17},"end":{"line":2439,"column":81}},"id":1584},"1585":{"loc":{"start":{"line":2440,"column":16},"end":{"line":2440,"column":66}},"id":1585},"1586":{"loc":{"start":{"line":2440,"column":16},"end":{"line":2440,"column":65}},"id":1586},"1587":{"loc":{"start":{"line":2444,"column":8},"end":{"line":2444,"column":27}},"id":1587},"1588":{"loc":{"start":{"line":2444,"column":8},"end":{"line":2444,"column":26}},"id":1588},"1589":{"loc":{"start":{"line":2446,"column":12},"end":{"line":2446,"column":68}},"id":1589},"1590":{"loc":{"start":{"line":2446,"column":12},"end":{"line":2446,"column":26}},"id":1590},"1591":{"loc":{"start":{"line":2446,"column":31},"end":{"line":2446,"column":68}},"id":1591},"1592":{"loc":{"start":{"line":2447,"column":12},"end":{"line":2447,"column":50}},"id":1592},"1593":{"loc":{"start":{"line":2447,"column":12},"end":{"line":2447,"column":49}},"id":1593},"1594":{"loc":{"start":{"line":2450,"column":8},"end":{"line":2453,"column":10}},"id":1594},"1595":{"loc":{"start":{"line":2459,"column":8},"end":{"line":2459,"column":35}},"id":1595},"1596":{"loc":{"start":{"line":2461,"column":8},"end":{"line":2461,"column":32}},"id":1596},"1597":{"loc":{"start":{"line":2461,"column":8},"end":{"line":2461,"column":31}},"id":1597},"1598":{"loc":{"start":{"line":2464,"column":12},"end":{"line":2464,"column":59}},"id":1598},"1599":{"loc":{"start":{"line":2464,"column":12},"end":{"line":2464,"column":58}},"id":1599},"1600":{"loc":{"start":{"line":2468,"column":12},"end":{"line":2468,"column":33}},"id":1600},"1601":{"loc":{"start":{"line":2469,"column":16},"end":{"line":2469,"column":52}},"id":1601},"1602":{"loc":{"start":{"line":2469,"column":41},"end":{"line":2469,"column":50}},"id":1602},"1603":{"loc":{"start":{"line":2470,"column":16},"end":{"line":2470,"column":45}},"id":1603},"1604":{"loc":{"start":{"line":2470,"column":27},"end":{"line":2470,"column":44}},"id":1604},"1605":{"loc":{"start":{"line":2471,"column":16},"end":{"line":2471,"column":35}},"id":1605},"1606":{"loc":{"start":{"line":2471,"column":16},"end":{"line":2471,"column":34}},"id":1606},"1607":{"loc":{"start":{"line":2472,"column":16},"end":{"line":2475,"column":18}},"id":1607},"1608":{"loc":{"start":{"line":2479,"column":12},"end":{"line":2479,"column":32}},"id":1608},"1609":{"loc":{"start":{"line":2480,"column":12},"end":{"line":2483,"column":14}},"id":1609},"1610":{"loc":{"start":{"line":2486,"column":13},"end":{"line":2486,"column":23}},"id":1610},"1611":{"loc":{"start":{"line":2487,"column":12},"end":{"line":2487,"column":32}},"id":1611},"1612":{"loc":{"start":{"line":2487,"column":20},"end":{"line":2487,"column":31}},"id":1612},"1613":{"loc":{"start":{"line":2488,"column":16},"end":{"line":2488,"column":55}},"id":1613},"1614":{"loc":{"start":{"line":2488,"column":17},"end":{"line":2488,"column":27}},"id":1614},"1615":{"loc":{"start":{"line":2488,"column":31},"end":{"line":2488,"column":55}},"id":1615},"1616":{"loc":{"start":{"line":2489,"column":16},"end":{"line":2489,"column":45}},"id":1616},"1617":{"loc":{"start":{"line":2489,"column":27},"end":{"line":2489,"column":44}},"id":1617},"1618":{"loc":{"start":{"line":2493,"column":8},"end":{"line":2493,"column":27}},"id":1618},"1619":{"loc":{"start":{"line":2493,"column":8},"end":{"line":2493,"column":26}},"id":1619},"1620":{"loc":{"start":{"line":2495,"column":8},"end":{"line":2498,"column":10}},"id":1620},"1621":{"loc":{"start":{"line":2504,"column":8},"end":{"line":2504,"column":25}},"id":1621},"1622":{"loc":{"start":{"line":2507,"column":12},"end":{"line":2507,"column":60}},"id":1622},"1623":{"loc":{"start":{"line":2507,"column":12},"end":{"line":2507,"column":59}},"id":1623},"1624":{"loc":{"start":{"line":2510,"column":8},"end":{"line":2510,"column":30}},"id":1624},"1625":{"loc":{"start":{"line":2510,"column":8},"end":{"line":2510,"column":29}},"id":1625},"1626":{"loc":{"start":{"line":2512,"column":8},"end":{"line":2512,"column":20}},"id":1626},"1627":{"loc":{"start":{"line":2512,"column":8},"end":{"line":2512,"column":19}},"id":1627},"1628":{"loc":{"start":{"line":2514,"column":8},"end":{"line":2514,"column":35}},"id":1628},"1629":{"loc":{"start":{"line":2514,"column":17},"end":{"line":2514,"column":34}},"id":1629},"1630":{"loc":{"start":{"line":2516,"column":8},"end":{"line":2516,"column":20}},"id":1630},"1631":{"loc":{"start":{"line":2516,"column":8},"end":{"line":2516,"column":19}},"id":1631},"1632":{"loc":{"start":{"line":2518,"column":8},"end":{"line":2518,"column":32}},"id":1632},"1633":{"loc":{"start":{"line":2518,"column":15},"end":{"line":2518,"column":31}},"id":1633},"1634":{"loc":{"start":{"line":2520,"column":8},"end":{"line":2524,"column":10}},"id":1634},"1635":{"loc":{"start":{"line":2530,"column":8},"end":{"line":2532,"column":22}},"id":1635},"1636":{"loc":{"start":{"line":2534,"column":12},"end":{"line":2534,"column":35}},"id":1636},"1637":{"loc":{"start":{"line":2535,"column":12},"end":{"line":2535,"column":18}},"id":1637},"1638":{"loc":{"start":{"line":2535,"column":12},"end":{"line":2535,"column":17}},"id":1638},"1639":{"loc":{"start":{"line":2536,"column":12},"end":{"line":2536,"column":24}},"id":1639},"1640":{"loc":{"start":{"line":2538,"column":12},"end":{"line":2538,"column":34}},"id":1640},"1641":{"loc":{"start":{"line":2538,"column":12},"end":{"line":2538,"column":33}},"id":1641},"1642":{"loc":{"start":{"line":2539,"column":12},"end":{"line":2539,"column":37}},"id":1642},"1643":{"loc":{"start":{"line":2539,"column":19},"end":{"line":2539,"column":36}},"id":1643},"1644":{"loc":{"start":{"line":2541,"column":8},"end":{"line":2541,"column":20}},"id":1644},"1645":{"loc":{"start":{"line":2541,"column":8},"end":{"line":2541,"column":19}},"id":1645},"1646":{"loc":{"start":{"line":2543,"column":15},"end":{"line":2543,"column":29}},"id":1646},"1647":{"loc":{"start":{"line":2544,"column":16},"end":{"line":2544,"column":77}},"id":1647},"1648":{"loc":{"start":{"line":2544,"column":16},"end":{"line":2544,"column":53}},"id":1648},"1649":{"loc":{"start":{"line":2544,"column":16},"end":{"line":2544,"column":26}},"id":1649},"1650":{"loc":{"start":{"line":2544,"column":30},"end":{"line":2544,"column":53}},"id":1650},"1651":{"loc":{"start":{"line":2544,"column":57},"end":{"line":2544,"column":77}},"id":1651},"1652":{"loc":{"start":{"line":2547,"column":12},"end":{"line":2547,"column":41}},"id":1652},"1653":{"loc":{"start":{"line":2547,"column":24},"end":{"line":2547,"column":40}},"id":1653},"1654":{"loc":{"start":{"line":2548,"column":16},"end":{"line":2548,"column":48}},"id":1654},"1655":{"loc":{"start":{"line":2551,"column":12},"end":{"line":2551,"column":39}},"id":1655},"1656":{"loc":{"start":{"line":2551,"column":12},"end":{"line":2551,"column":38}},"id":1656},"1657":{"loc":{"start":{"line":2554,"column":8},"end":{"line":2558,"column":10}},"id":1657},"1658":{"loc":{"start":{"line":2562,"column":8},"end":{"line":2562,"column":45}},"id":1658},"1659":{"loc":{"start":{"line":2564,"column":8},"end":{"line":2564,"column":32}},"id":1659},"1660":{"loc":{"start":{"line":2564,"column":8},"end":{"line":2564,"column":31}},"id":1660},"1661":{"loc":{"start":{"line":2566,"column":8},"end":{"line":2566,"column":20}},"id":1661},"1662":{"loc":{"start":{"line":2566,"column":8},"end":{"line":2566,"column":19}},"id":1662},"1663":{"loc":{"start":{"line":2568,"column":8},"end":{"line":2568,"column":41}},"id":1663},"1664":{"loc":{"start":{"line":2568,"column":23},"end":{"line":2568,"column":40}},"id":1664},"1665":{"loc":{"start":{"line":2570,"column":8},"end":{"line":2570,"column":20}},"id":1665},"1666":{"loc":{"start":{"line":2570,"column":8},"end":{"line":2570,"column":19}},"id":1666},"1667":{"loc":{"start":{"line":2572,"column":8},"end":{"line":2572,"column":20}},"id":1667},"1668":{"loc":{"start":{"line":2572,"column":8},"end":{"line":2572,"column":19}},"id":1668},"1669":{"loc":{"start":{"line":2574,"column":12},"end":{"line":2574,"column":22}},"id":1669},"1670":{"loc":{"start":{"line":2575,"column":12},"end":{"line":2575,"column":18}},"id":1670},"1671":{"loc":{"start":{"line":2575,"column":12},"end":{"line":2575,"column":17}},"id":1671},"1672":{"loc":{"start":{"line":2576,"column":12},"end":{"line":2579,"column":14}},"id":1672},"1673":{"loc":{"start":{"line":2582,"column":8},"end":{"line":2582,"column":19}},"id":1673},"1674":{"loc":{"start":{"line":2584,"column":8},"end":{"line":2584,"column":37}},"id":1674},"1675":{"loc":{"start":{"line":2585,"column":8},"end":{"line":2585,"column":30}},"id":1675},"1676":{"loc":{"start":{"line":2587,"column":15},"end":{"line":2587,"column":29}},"id":1676},"1677":{"loc":{"start":{"line":2588,"column":16},"end":{"line":2588,"column":26}},"id":1677},"1678":{"loc":{"start":{"line":2591,"column":12},"end":{"line":2591,"column":42}},"id":1678},"1679":{"loc":{"start":{"line":2591,"column":12},"end":{"line":2591,"column":41}},"id":1679},"1680":{"loc":{"start":{"line":2591,"column":23},"end":{"line":2591,"column":40}},"id":1680},"1681":{"loc":{"start":{"line":2594,"column":8},"end":{"line":2594,"column":37}},"id":1681},"1682":{"loc":{"start":{"line":2596,"column":8},"end":{"line":2596,"column":20}},"id":1682},"1683":{"loc":{"start":{"line":2596,"column":8},"end":{"line":2596,"column":19}},"id":1683},"1684":{"loc":{"start":{"line":2598,"column":8},"end":{"line":2602,"column":10}},"id":1684},"1685":{"loc":{"start":{"line":2608,"column":8},"end":{"line":2608,"column":21}},"id":1685},"1686":{"loc":{"start":{"line":2610,"column":8},"end":{"line":2610,"column":31}},"id":1686},"1687":{"loc":{"start":{"line":2610,"column":8},"end":{"line":2610,"column":30}},"id":1687},"1688":{"loc":{"start":{"line":2612,"column":12},"end":{"line":2612,"column":32}},"id":1688},"1689":{"loc":{"start":{"line":2613,"column":12},"end":{"line":2613,"column":55}},"id":1689},"1690":{"loc":{"start":{"line":2613,"column":12},"end":{"line":2613,"column":54}},"id":1690},"1691":{"loc":{"start":{"line":2616,"column":8},"end":{"line":2616,"column":37}},"id":1691},"1692":{"loc":{"start":{"line":2616,"column":19},"end":{"line":2616,"column":36}},"id":1692},"1693":{"loc":{"start":{"line":2618,"column":8},"end":{"line":2618,"column":27}},"id":1693},"1694":{"loc":{"start":{"line":2618,"column":8},"end":{"line":2618,"column":26}},"id":1694},"1695":{"loc":{"start":{"line":2620,"column":8},"end":{"line":2623,"column":10}},"id":1695},"1696":{"loc":{"start":{"line":2629,"column":8},"end":{"line":2629,"column":18}},"id":1696},"1697":{"loc":{"start":{"line":2631,"column":8},"end":{"line":2631,"column":31}},"id":1697},"1698":{"loc":{"start":{"line":2631,"column":8},"end":{"line":2631,"column":30}},"id":1698},"1699":{"loc":{"start":{"line":2633,"column":8},"end":{"line":2633,"column":20}},"id":1699},"1700":{"loc":{"start":{"line":2633,"column":8},"end":{"line":2633,"column":19}},"id":1700},"1701":{"loc":{"start":{"line":2634,"column":13},"end":{"line":2634,"column":23}},"id":1701},"1702":{"loc":{"start":{"line":2635,"column":12},"end":{"line":2635,"column":38}},"id":1702},"1703":{"loc":{"start":{"line":2635,"column":20},"end":{"line":2635,"column":37}},"id":1703},"1704":{"loc":{"start":{"line":2637,"column":16},"end":{"line":2637,"column":90}},"id":1704},"1705":{"loc":{"start":{"line":2637,"column":16},"end":{"line":2637,"column":58}},"id":1705},"1706":{"loc":{"start":{"line":2637,"column":26},"end":{"line":2637,"column":58}},"id":1706},"1707":{"loc":{"start":{"line":2637,"column":62},"end":{"line":2637,"column":90}},"id":1707},"1708":{"loc":{"start":{"line":2638,"column":16},"end":{"line":2638,"column":69}},"id":1708},"1709":{"loc":{"start":{"line":2638,"column":16},"end":{"line":2638,"column":68}},"id":1709},"1710":{"loc":{"start":{"line":2641,"column":8},"end":{"line":2641,"column":20}},"id":1710},"1711":{"loc":{"start":{"line":2641,"column":8},"end":{"line":2641,"column":19}},"id":1711},"1712":{"loc":{"start":{"line":2643,"column":8},"end":{"line":2648,"column":10}},"id":1712},"1713":{"loc":{"start":{"line":2647,"column":18},"end":{"line":2647,"column":30}},"id":1713},"1714":{"loc":{"start":{"line":2652,"column":8},"end":{"line":2652,"column":51}},"id":1714},"1715":{"loc":{"start":{"line":2654,"column":8},"end":{"line":2654,"column":29}},"id":1715},"1716":{"loc":{"start":{"line":2654,"column":8},"end":{"line":2654,"column":28}},"id":1716},"1717":{"loc":{"start":{"line":2656,"column":8},"end":{"line":2656,"column":29}},"id":1717},"1718":{"loc":{"start":{"line":2656,"column":16},"end":{"line":2656,"column":28}},"id":1718},"1719":{"loc":{"start":{"line":2658,"column":12},"end":{"line":2658,"column":33}},"id":1719},"1720":{"loc":{"start":{"line":2659,"column":12},"end":{"line":2659,"column":46}},"id":1720},"1721":{"loc":{"start":{"line":2659,"column":12},"end":{"line":2659,"column":45}},"id":1721},"1722":{"loc":{"start":{"line":2659,"column":26},"end":{"line":2659,"column":44}},"id":1722},"1723":{"loc":{"start":{"line":2662,"column":12},"end":{"line":2662,"column":35}},"id":1723},"1724":{"loc":{"start":{"line":2663,"column":12},"end":{"line":2663,"column":18}},"id":1724},"1725":{"loc":{"start":{"line":2663,"column":12},"end":{"line":2663,"column":17}},"id":1725},"1726":{"loc":{"start":{"line":2664,"column":12},"end":{"line":2664,"column":37}},"id":1726},"1727":{"loc":{"start":{"line":2664,"column":24},"end":{"line":2664,"column":36}},"id":1727},"1728":{"loc":{"start":{"line":2667,"column":12},"end":{"line":2667,"column":47}},"id":1728},"1729":{"loc":{"start":{"line":2667,"column":12},"end":{"line":2667,"column":33}},"id":1729},"1730":{"loc":{"start":{"line":2668,"column":12},"end":{"line":2668,"column":54}},"id":1730},"1731":{"loc":{"start":{"line":2668,"column":12},"end":{"line":2668,"column":53}},"id":1731},"1732":{"loc":{"start":{"line":2671,"column":8},"end":{"line":2676,"column":10}},"id":1732},"1733":{"loc":{"start":{"line":2682,"column":8},"end":{"line":2682,"column":34}},"id":1733},"1734":{"loc":{"start":{"line":2682,"column":8},"end":{"line":2682,"column":33}},"id":1734},"1735":{"loc":{"start":{"line":2684,"column":8},"end":{"line":2684,"column":27}},"id":1735},"1736":{"loc":{"start":{"line":2684,"column":8},"end":{"line":2684,"column":26}},"id":1736},"1737":{"loc":{"start":{"line":2686,"column":8},"end":{"line":2688,"column":10}},"id":1737},"1738":{"loc":{"start":{"line":2694,"column":8},"end":{"line":2696,"column":24}},"id":1738},"1739":{"loc":{"start":{"line":2694,"column":20},"end":{"line":2694,"column":31}},"id":1739},"1740":{"loc":{"start":{"line":2698,"column":12},"end":{"line":2698,"column":36}},"id":1740},"1741":{"loc":{"start":{"line":2699,"column":12},"end":{"line":2699,"column":35}},"id":1741},"1742":{"loc":{"start":{"line":2699,"column":12},"end":{"line":2699,"column":34}},"id":1742},"1743":{"loc":{"start":{"line":2702,"column":12},"end":{"line":2702,"column":43}},"id":1743},"1744":{"loc":{"start":{"line":2705,"column":16},"end":{"line":2705,"column":45}},"id":1744},"1745":{"loc":{"start":{"line":2705,"column":23},"end":{"line":2705,"column":44}},"id":1745},"1746":{"loc":{"start":{"line":2707,"column":16},"end":{"line":2707,"column":36}},"id":1746},"1747":{"loc":{"start":{"line":2707,"column":23},"end":{"line":2707,"column":35}},"id":1747},"1748":{"loc":{"start":{"line":2709,"column":16},"end":{"line":2709,"column":50}},"id":1748},"1749":{"loc":{"start":{"line":2709,"column":23},"end":{"line":2709,"column":49}},"id":1749},"1750":{"loc":{"start":{"line":2715,"column":12},"end":{"line":2715,"column":40}},"id":1750},"1751":{"loc":{"start":{"line":2718,"column":16},"end":{"line":2718,"column":45}},"id":1751},"1752":{"loc":{"start":{"line":2718,"column":23},"end":{"line":2718,"column":44}},"id":1752},"1753":{"loc":{"start":{"line":2720,"column":16},"end":{"line":2720,"column":48}},"id":1753},"1754":{"loc":{"start":{"line":2720,"column":23},"end":{"line":2720,"column":47}},"id":1754},"1755":{"loc":{"start":{"line":2722,"column":16},"end":{"line":2722,"column":48}},"id":1755},"1756":{"loc":{"start":{"line":2722,"column":23},"end":{"line":2722,"column":47}},"id":1756},"1757":{"loc":{"start":{"line":2724,"column":16},"end":{"line":2724,"column":47}},"id":1757},"1758":{"loc":{"start":{"line":2724,"column":23},"end":{"line":2724,"column":46}},"id":1758},"1759":{"loc":{"start":{"line":2726,"column":16},"end":{"line":2726,"column":43}},"id":1759},"1760":{"loc":{"start":{"line":2726,"column":23},"end":{"line":2726,"column":42}},"id":1760},"1761":{"loc":{"start":{"line":2728,"column":16},"end":{"line":2728,"column":50}},"id":1761},"1762":{"loc":{"start":{"line":2728,"column":23},"end":{"line":2728,"column":49}},"id":1762},"1763":{"loc":{"start":{"line":2730,"column":16},"end":{"line":2730,"column":42}},"id":1763},"1764":{"loc":{"start":{"line":2730,"column":23},"end":{"line":2730,"column":41}},"id":1764},"1765":{"loc":{"start":{"line":2732,"column":16},"end":{"line":2732,"column":46}},"id":1765},"1766":{"loc":{"start":{"line":2732,"column":23},"end":{"line":2732,"column":45}},"id":1766},"1767":{"loc":{"start":{"line":2734,"column":16},"end":{"line":2734,"column":46}},"id":1767},"1768":{"loc":{"start":{"line":2734,"column":23},"end":{"line":2734,"column":45}},"id":1768},"1769":{"loc":{"start":{"line":2736,"column":16},"end":{"line":2736,"column":45}},"id":1769},"1770":{"loc":{"start":{"line":2736,"column":23},"end":{"line":2736,"column":44}},"id":1770},"1771":{"loc":{"start":{"line":2738,"column":16},"end":{"line":2738,"column":43}},"id":1771},"1772":{"loc":{"start":{"line":2738,"column":23},"end":{"line":2738,"column":42}},"id":1772},"1773":{"loc":{"start":{"line":2740,"column":16},"end":{"line":2740,"column":48}},"id":1773},"1774":{"loc":{"start":{"line":2740,"column":23},"end":{"line":2740,"column":47}},"id":1774},"1775":{"loc":{"start":{"line":2742,"column":16},"end":{"line":2742,"column":45}},"id":1775},"1776":{"loc":{"start":{"line":2742,"column":23},"end":{"line":2742,"column":44}},"id":1776},"1777":{"loc":{"start":{"line":2744,"column":16},"end":{"line":2744,"column":44}},"id":1777},"1778":{"loc":{"start":{"line":2744,"column":23},"end":{"line":2744,"column":43}},"id":1778},"1779":{"loc":{"start":{"line":2750,"column":8},"end":{"line":2750,"column":33}},"id":1779},"1780":{"loc":{"start":{"line":2750,"column":15},"end":{"line":2750,"column":32}},"id":1780},"1781":{"loc":{"start":{"line":2753,"column":12},"end":{"line":2753,"column":59}},"id":1781},"1782":{"loc":{"start":{"line":2753,"column":12},"end":{"line":2753,"column":45}},"id":1782},"1783":{"loc":{"start":{"line":2753,"column":49},"end":{"line":2753,"column":59}},"id":1783},"1784":{"loc":{"start":{"line":2754,"column":12},"end":{"line":2754,"column":18}},"id":1784},"1785":{"loc":{"start":{"line":2754,"column":12},"end":{"line":2754,"column":17}},"id":1785},"1786":{"loc":{"start":{"line":2756,"column":16},"end":{"line":2756,"column":79}},"id":1786},"1787":{"loc":{"start":{"line":2757,"column":16},"end":{"line":2757,"column":75}},"id":1787},"1788":{"loc":{"start":{"line":2757,"column":16},"end":{"line":2757,"column":74}},"id":1788},"1789":{"loc":{"start":{"line":2760,"column":12},"end":{"line":2760,"column":45}},"id":1789},"1790":{"loc":{"start":{"line":2761,"column":12},"end":{"line":2761,"column":43}},"id":1790},"1791":{"loc":{"start":{"line":2761,"column":26},"end":{"line":2761,"column":42}},"id":1791},"1792":{"loc":{"start":{"line":2762,"column":12},"end":{"line":2762,"column":45}},"id":1792},"1793":{"loc":{"start":{"line":2764,"column":12},"end":{"line":2768,"column":14}},"id":1793},"1794":{"loc":{"start":{"line":2771,"column":8},"end":{"line":2771,"column":27}},"id":1794},"1795":{"loc":{"start":{"line":2771,"column":8},"end":{"line":2771,"column":26}},"id":1795},"1796":{"loc":{"start":{"line":2773,"column":8},"end":{"line":2776,"column":10}},"id":1796},"1797":{"loc":{"start":{"line":2782,"column":8},"end":{"line":2783,"column":72}},"id":1797},"1798":{"loc":{"start":{"line":2785,"column":8},"end":{"line":2785,"column":20}},"id":1798},"1799":{"loc":{"start":{"line":2785,"column":8},"end":{"line":2785,"column":19}},"id":1799},"1800":{"loc":{"start":{"line":2787,"column":15},"end":{"line":2787,"column":29}},"id":1800},"1801":{"loc":{"start":{"line":2788,"column":12},"end":{"line":2788,"column":32}},"id":1801},"1802":{"loc":{"start":{"line":2788,"column":20},"end":{"line":2788,"column":31}},"id":1802},"1803":{"loc":{"start":{"line":2789,"column":16},"end":{"line":2789,"column":50}},"id":1803},"1804":{"loc":{"start":{"line":2793,"column":12},"end":{"line":2793,"column":49}},"id":1804},"1805":{"loc":{"start":{"line":2793,"column":28},"end":{"line":2793,"column":48}},"id":1805},"1806":{"loc":{"start":{"line":2794,"column":12},"end":{"line":2794,"column":47}},"id":1806},"1807":{"loc":{"start":{"line":2794,"column":12},"end":{"line":2794,"column":46}},"id":1807},"1808":{"loc":{"start":{"line":2795,"column":16},"end":{"line":2795,"column":64}},"id":1808},"1809":{"loc":{"start":{"line":2799,"column":12},"end":{"line":2799,"column":76}},"id":1809},"1810":{"loc":{"start":{"line":2799,"column":24},"end":{"line":2799,"column":75}},"id":1810},"1811":{"loc":{"start":{"line":2799,"column":36},"end":{"line":2799,"column":54}},"id":1811},"1812":{"loc":{"start":{"line":2799,"column":56},"end":{"line":2799,"column":74}},"id":1812},"1813":{"loc":{"start":{"line":2800,"column":16},"end":{"line":2800,"column":42}},"id":1813},"1814":{"loc":{"start":{"line":2801,"column":16},"end":{"line":2801,"column":30}},"id":1814},"1815":{"loc":{"start":{"line":2803,"column":20},"end":{"line":2803,"column":77}},"id":1815},"1816":{"loc":{"start":{"line":2803,"column":20},"end":{"line":2803,"column":76}},"id":1816},"1817":{"loc":{"start":{"line":2806,"column":20},"end":{"line":2806,"column":51}},"id":1817},"1818":{"loc":{"start":{"line":2807,"column":20},"end":{"line":2807,"column":44}},"id":1818},"1819":{"loc":{"start":{"line":2812,"column":8},"end":{"line":2812,"column":37}},"id":1819},"1820":{"loc":{"start":{"line":2813,"column":8},"end":{"line":2813,"column":43}},"id":1820},"1821":{"loc":{"start":{"line":2814,"column":8},"end":{"line":2814,"column":37}},"id":1821},"1822":{"loc":{"start":{"line":2815,"column":8},"end":{"line":2815,"column":49}},"id":1822},"1823":{"loc":{"start":{"line":2817,"column":8},"end":{"line":2817,"column":28}},"id":1823},"1824":{"loc":{"start":{"line":2818,"column":8},"end":{"line":2818,"column":34}},"id":1824},"1825":{"loc":{"start":{"line":2819,"column":8},"end":{"line":2819,"column":31}},"id":1825},"1826":{"loc":{"start":{"line":2820,"column":8},"end":{"line":2820,"column":36}},"id":1826},"1827":{"loc":{"start":{"line":2822,"column":15},"end":{"line":2822,"column":29}},"id":1827},"1828":{"loc":{"start":{"line":2823,"column":16},"end":{"line":2823,"column":26}},"id":1828},"1829":{"loc":{"start":{"line":2826,"column":12},"end":{"line":2826,"column":49}},"id":1829},"1830":{"loc":{"start":{"line":2826,"column":28},"end":{"line":2826,"column":48}},"id":1830},"1831":{"loc":{"start":{"line":2827,"column":16},"end":{"line":2827,"column":52}},"id":1831},"1832":{"loc":{"start":{"line":2830,"column":12},"end":{"line":2830,"column":47}},"id":1832},"1833":{"loc":{"start":{"line":2830,"column":12},"end":{"line":2830,"column":46}},"id":1833},"1834":{"loc":{"start":{"line":2833,"column":8},"end":{"line":2833,"column":20}},"id":1834},"1835":{"loc":{"start":{"line":2833,"column":8},"end":{"line":2833,"column":19}},"id":1835},"1836":{"loc":{"start":{"line":2835,"column":8},"end":{"line":2835,"column":37}},"id":1836},"1837":{"loc":{"start":{"line":2836,"column":8},"end":{"line":2836,"column":43}},"id":1837},"1838":{"loc":{"start":{"line":2837,"column":8},"end":{"line":2837,"column":37}},"id":1838},"1839":{"loc":{"start":{"line":2838,"column":8},"end":{"line":2838,"column":49}},"id":1839},"1840":{"loc":{"start":{"line":2840,"column":8},"end":{"line":2843,"column":10}},"id":1840},"1841":{"loc":{"start":{"line":2847,"column":8},"end":{"line":2847,"column":100}},"id":1841},"1842":{"loc":{"start":{"line":2849,"column":8},"end":{"line":2849,"column":34}},"id":1842},"1843":{"loc":{"start":{"line":2849,"column":8},"end":{"line":2849,"column":33}},"id":1843},"1844":{"loc":{"start":{"line":2850,"column":8},"end":{"line":2850,"column":28}},"id":1844},"1845":{"loc":{"start":{"line":2850,"column":16},"end":{"line":2850,"column":27}},"id":1845},"1846":{"loc":{"start":{"line":2851,"column":8},"end":{"line":2851,"column":39}},"id":1846},"1847":{"loc":{"start":{"line":2851,"column":13},"end":{"line":2851,"column":38}},"id":1847},"1848":{"loc":{"start":{"line":2853,"column":16},"end":{"line":2853,"column":45}},"id":1848},"1849":{"loc":{"start":{"line":2854,"column":16},"end":{"line":2854,"column":63}},"id":1849},"1850":{"loc":{"start":{"line":2854,"column":16},"end":{"line":2854,"column":62}},"id":1850},"1851":{"loc":{"start":{"line":2857,"column":16},"end":{"line":2857,"column":45}},"id":1851},"1852":{"loc":{"start":{"line":2858,"column":16},"end":{"line":2858,"column":40}},"id":1852},"1853":{"loc":{"start":{"line":2859,"column":16},"end":{"line":2859,"column":54}},"id":1853},"1854":{"loc":{"start":{"line":2860,"column":23},"end":{"line":2860,"column":60}},"id":1854},"1855":{"loc":{"start":{"line":2861,"column":16},"end":{"line":2861,"column":40}},"id":1855},"1856":{"loc":{"start":{"line":2862,"column":16},"end":{"line":2862,"column":54}},"id":1856},"1857":{"loc":{"start":{"line":2866,"column":8},"end":{"line":2866,"column":20}},"id":1857},"1858":{"loc":{"start":{"line":2866,"column":8},"end":{"line":2866,"column":19}},"id":1858},"1859":{"loc":{"start":{"line":2868,"column":13},"end":{"line":2868,"column":23}},"id":1859},"1860":{"loc":{"start":{"line":2869,"column":12},"end":{"line":2869,"column":26}},"id":1860},"1861":{"loc":{"start":{"line":2870,"column":19},"end":{"line":2870,"column":33}},"id":1861},"1862":{"loc":{"start":{"line":2871,"column":16},"end":{"line":2871,"column":36}},"id":1862},"1863":{"loc":{"start":{"line":2871,"column":24},"end":{"line":2871,"column":35}},"id":1863},"1864":{"loc":{"start":{"line":2872,"column":16},"end":{"line":2872,"column":50}},"id":1864},"1865":{"loc":{"start":{"line":2872,"column":24},"end":{"line":2872,"column":49}},"id":1865},"1866":{"loc":{"start":{"line":2874,"column":24},"end":{"line":2874,"column":53}},"id":1866},"1867":{"loc":{"start":{"line":2875,"column":24},"end":{"line":2875,"column":68}},"id":1867},"1868":{"loc":{"start":{"line":2875,"column":24},"end":{"line":2875,"column":67}},"id":1868},"1869":{"loc":{"start":{"line":2877,"column":24},"end":{"line":2877,"column":83}},"id":1869},"1870":{"loc":{"start":{"line":2878,"column":24},"end":{"line":2878,"column":68}},"id":1870},"1871":{"loc":{"start":{"line":2878,"column":24},"end":{"line":2878,"column":67}},"id":1871},"1872":{"loc":{"start":{"line":2881,"column":24},"end":{"line":2881,"column":53}},"id":1872},"1873":{"loc":{"start":{"line":2882,"column":24},"end":{"line":2882,"column":48}},"id":1873},"1874":{"loc":{"start":{"line":2883,"column":24},"end":{"line":2883,"column":59}},"id":1874},"1875":{"loc":{"start":{"line":2884,"column":31},"end":{"line":2884,"column":68}},"id":1875},"1876":{"loc":{"start":{"line":2885,"column":24},"end":{"line":2885,"column":48}},"id":1876},"1877":{"loc":{"start":{"line":2886,"column":24},"end":{"line":2886,"column":62}},"id":1877},"1878":{"loc":{"start":{"line":2887,"column":31},"end":{"line":2887,"column":90}},"id":1878},"1879":{"loc":{"start":{"line":2888,"column":24},"end":{"line":2888,"column":48}},"id":1879},"1880":{"loc":{"start":{"line":2889,"column":24},"end":{"line":2889,"column":59}},"id":1880},"1881":{"loc":{"start":{"line":2892,"column":16},"end":{"line":2892,"column":35}},"id":1881},"1882":{"loc":{"start":{"line":2892,"column":16},"end":{"line":2892,"column":34}},"id":1882},"1883":{"loc":{"start":{"line":2893,"column":16},"end":{"line":2893,"column":44}},"id":1883},"1884":{"loc":{"start":{"line":2894,"column":20},"end":{"line":2894,"column":30}},"id":1884},"1885":{"loc":{"start":{"line":2897,"column":16},"end":{"line":2897,"column":28}},"id":1885},"1886":{"loc":{"start":{"line":2897,"column":16},"end":{"line":2897,"column":27}},"id":1886},"1887":{"loc":{"start":{"line":2901,"column":8},"end":{"line":2901,"column":20}},"id":1887},"1888":{"loc":{"start":{"line":2901,"column":8},"end":{"line":2901,"column":19}},"id":1888},"1889":{"loc":{"start":{"line":2903,"column":8},"end":{"line":2903,"column":32}},"id":1889},"1890":{"loc":{"start":{"line":2904,"column":8},"end":{"line":2904,"column":45}},"id":1890},"1891":{"loc":{"start":{"line":2904,"column":15},"end":{"line":2904,"column":44}},"id":1891},"1892":{"loc":{"start":{"line":2905,"column":12},"end":{"line":2905,"column":37}},"id":1892},"1893":{"loc":{"start":{"line":2906,"column":12},"end":{"line":2906,"column":49}},"id":1893},"1894":{"loc":{"start":{"line":2906,"column":12},"end":{"line":2906,"column":48}},"id":1894},"1895":{"loc":{"start":{"line":2908,"column":8},"end":{"line":2908,"column":32}},"id":1895},"1896":{"loc":{"start":{"line":2910,"column":8},"end":{"line":2915,"column":10}},"id":1896},"1897":{"loc":{"start":{"line":2919,"column":8},"end":{"line":2919,"column":107}},"id":1897},"1898":{"loc":{"start":{"line":2921,"column":8},"end":{"line":2921,"column":34}},"id":1898},"1899":{"loc":{"start":{"line":2921,"column":8},"end":{"line":2921,"column":33}},"id":1899},"1900":{"loc":{"start":{"line":2923,"column":13},"end":{"line":2923,"column":23}},"id":1900},"1901":{"loc":{"start":{"line":2924,"column":12},"end":{"line":2924,"column":32}},"id":1901},"1902":{"loc":{"start":{"line":2924,"column":20},"end":{"line":2924,"column":31}},"id":1902},"1903":{"loc":{"start":{"line":2925,"column":12},"end":{"line":2925,"column":43}},"id":1903},"1904":{"loc":{"start":{"line":2925,"column":17},"end":{"line":2925,"column":42}},"id":1904},"1905":{"loc":{"start":{"line":2927,"column":20},"end":{"line":2927,"column":49}},"id":1905},"1906":{"loc":{"start":{"line":2928,"column":20},"end":{"line":2928,"column":67}},"id":1906},"1907":{"loc":{"start":{"line":2928,"column":20},"end":{"line":2928,"column":66}},"id":1907},"1908":{"loc":{"start":{"line":2931,"column":20},"end":{"line":2931,"column":49}},"id":1908},"1909":{"loc":{"start":{"line":2932,"column":20},"end":{"line":2932,"column":44}},"id":1909},"1910":{"loc":{"start":{"line":2933,"column":20},"end":{"line":2933,"column":58}},"id":1910},"1911":{"loc":{"start":{"line":2934,"column":27},"end":{"line":2934,"column":64}},"id":1911},"1912":{"loc":{"start":{"line":2935,"column":20},"end":{"line":2935,"column":44}},"id":1912},"1913":{"loc":{"start":{"line":2936,"column":20},"end":{"line":2936,"column":58}},"id":1913},"1914":{"loc":{"start":{"line":2941,"column":8},"end":{"line":2941,"column":20}},"id":1914},"1915":{"loc":{"start":{"line":2941,"column":8},"end":{"line":2941,"column":19}},"id":1915},"1916":{"loc":{"start":{"line":2943,"column":13},"end":{"line":2943,"column":23}},"id":1916},"1917":{"loc":{"start":{"line":2944,"column":12},"end":{"line":2944,"column":26}},"id":1917},"1918":{"loc":{"start":{"line":2945,"column":19},"end":{"line":2945,"column":33}},"id":1918},"1919":{"loc":{"start":{"line":2946,"column":16},"end":{"line":2946,"column":36}},"id":1919},"1920":{"loc":{"start":{"line":2946,"column":24},"end":{"line":2946,"column":35}},"id":1920},"1921":{"loc":{"start":{"line":2947,"column":16},"end":{"line":2947,"column":50}},"id":1921},"1922":{"loc":{"start":{"line":2947,"column":24},"end":{"line":2947,"column":49}},"id":1922},"1923":{"loc":{"start":{"line":2949,"column":24},"end":{"line":2949,"column":53}},"id":1923},"1924":{"loc":{"start":{"line":2950,"column":24},"end":{"line":2950,"column":68}},"id":1924},"1925":{"loc":{"start":{"line":2950,"column":24},"end":{"line":2950,"column":67}},"id":1925},"1926":{"loc":{"start":{"line":2952,"column":24},"end":{"line":2952,"column":83}},"id":1926},"1927":{"loc":{"start":{"line":2953,"column":24},"end":{"line":2953,"column":68}},"id":1927},"1928":{"loc":{"start":{"line":2953,"column":24},"end":{"line":2953,"column":67}},"id":1928},"1929":{"loc":{"start":{"line":2956,"column":24},"end":{"line":2956,"column":53}},"id":1929},"1930":{"loc":{"start":{"line":2957,"column":24},"end":{"line":2957,"column":48}},"id":1930},"1931":{"loc":{"start":{"line":2958,"column":24},"end":{"line":2958,"column":59}},"id":1931},"1932":{"loc":{"start":{"line":2959,"column":31},"end":{"line":2959,"column":68}},"id":1932},"1933":{"loc":{"start":{"line":2960,"column":24},"end":{"line":2960,"column":48}},"id":1933},"1934":{"loc":{"start":{"line":2961,"column":24},"end":{"line":2961,"column":62}},"id":1934},"1935":{"loc":{"start":{"line":2962,"column":31},"end":{"line":2962,"column":90}},"id":1935},"1936":{"loc":{"start":{"line":2963,"column":24},"end":{"line":2963,"column":48}},"id":1936},"1937":{"loc":{"start":{"line":2964,"column":24},"end":{"line":2964,"column":59}},"id":1937},"1938":{"loc":{"start":{"line":2967,"column":16},"end":{"line":2967,"column":35}},"id":1938},"1939":{"loc":{"start":{"line":2967,"column":16},"end":{"line":2967,"column":34}},"id":1939},"1940":{"loc":{"start":{"line":2968,"column":16},"end":{"line":2968,"column":44}},"id":1940},"1941":{"loc":{"start":{"line":2969,"column":20},"end":{"line":2969,"column":30}},"id":1941},"1942":{"loc":{"start":{"line":2972,"column":16},"end":{"line":2972,"column":28}},"id":1942},"1943":{"loc":{"start":{"line":2972,"column":16},"end":{"line":2972,"column":27}},"id":1943},"1944":{"loc":{"start":{"line":2976,"column":8},"end":{"line":2976,"column":20}},"id":1944},"1945":{"loc":{"start":{"line":2976,"column":8},"end":{"line":2976,"column":19}},"id":1945},"1946":{"loc":{"start":{"line":2978,"column":8},"end":{"line":2978,"column":32}},"id":1946},"1947":{"loc":{"start":{"line":2979,"column":8},"end":{"line":2979,"column":45}},"id":1947},"1948":{"loc":{"start":{"line":2979,"column":15},"end":{"line":2979,"column":44}},"id":1948},"1949":{"loc":{"start":{"line":2980,"column":12},"end":{"line":2980,"column":37}},"id":1949},"1950":{"loc":{"start":{"line":2981,"column":12},"end":{"line":2981,"column":49}},"id":1950},"1951":{"loc":{"start":{"line":2981,"column":12},"end":{"line":2981,"column":48}},"id":1951},"1952":{"loc":{"start":{"line":2983,"column":8},"end":{"line":2983,"column":32}},"id":1952},"1953":{"loc":{"start":{"line":2985,"column":8},"end":{"line":2990,"column":10}},"id":1953},"1954":{"loc":{"start":{"line":2996,"column":8},"end":{"line":2996,"column":32}},"id":1954},"1955":{"loc":{"start":{"line":2996,"column":20},"end":{"line":2996,"column":31}},"id":1955},"1956":{"loc":{"start":{"line":2998,"column":12},"end":{"line":2998,"column":40}},"id":1956},"1957":{"loc":{"start":{"line":3002,"column":16},"end":{"line":3002,"column":61}},"id":1957},"1958":{"loc":{"start":{"line":3002,"column":23},"end":{"line":3002,"column":60}},"id":1958},"1959":{"loc":{"start":{"line":3004,"column":16},"end":{"line":3004,"column":50}},"id":1959},"1960":{"loc":{"start":{"line":3004,"column":23},"end":{"line":3004,"column":49}},"id":1960},"1961":{"loc":{"start":{"line":3006,"column":16},"end":{"line":3006,"column":40}},"id":1961},"1962":{"loc":{"start":{"line":3006,"column":23},"end":{"line":3006,"column":39}},"id":1962},"1963":{"loc":{"start":{"line":3010,"column":12},"end":{"line":3010,"column":36}},"id":1963},"1964":{"loc":{"start":{"line":3011,"column":12},"end":{"line":3011,"column":36}},"id":1964},"1965":{"loc":{"start":{"line":3011,"column":19},"end":{"line":3011,"column":35}},"id":1965},"1966":{"loc":{"start":{"line":3016,"column":8},"end":{"line":3016,"column":82}},"id":1966},"1967":{"loc":{"start":{"line":3018,"column":15},"end":{"line":3018,"column":29}},"id":1967},"1968":{"loc":{"start":{"line":3019,"column":12},"end":{"line":3019,"column":32}},"id":1968},"1969":{"loc":{"start":{"line":3019,"column":20},"end":{"line":3019,"column":31}},"id":1969},"1970":{"loc":{"start":{"line":3020,"column":16},"end":{"line":3020,"column":50}},"id":1970},"1971":{"loc":{"start":{"line":3024,"column":12},"end":{"line":3024,"column":49}},"id":1971},"1972":{"loc":{"start":{"line":3024,"column":28},"end":{"line":3024,"column":48}},"id":1972},"1973":{"loc":{"start":{"line":3025,"column":12},"end":{"line":3025,"column":47}},"id":1973},"1974":{"loc":{"start":{"line":3025,"column":12},"end":{"line":3025,"column":46}},"id":1974},"1975":{"loc":{"start":{"line":3026,"column":16},"end":{"line":3026,"column":64}},"id":1975},"1976":{"loc":{"start":{"line":3030,"column":12},"end":{"line":3030,"column":76}},"id":1976},"1977":{"loc":{"start":{"line":3030,"column":24},"end":{"line":3030,"column":75}},"id":1977},"1978":{"loc":{"start":{"line":3030,"column":36},"end":{"line":3030,"column":54}},"id":1978},"1979":{"loc":{"start":{"line":3030,"column":56},"end":{"line":3030,"column":74}},"id":1979},"1980":{"loc":{"start":{"line":3031,"column":16},"end":{"line":3031,"column":42}},"id":1980},"1981":{"loc":{"start":{"line":3032,"column":16},"end":{"line":3032,"column":30}},"id":1981},"1982":{"loc":{"start":{"line":3034,"column":20},"end":{"line":3034,"column":77}},"id":1982},"1983":{"loc":{"start":{"line":3034,"column":20},"end":{"line":3034,"column":76}},"id":1983},"1984":{"loc":{"start":{"line":3037,"column":20},"end":{"line":3037,"column":51}},"id":1984},"1985":{"loc":{"start":{"line":3038,"column":20},"end":{"line":3038,"column":44}},"id":1985},"1986":{"loc":{"start":{"line":3043,"column":15},"end":{"line":3043,"column":29}},"id":1986},"1987":{"loc":{"start":{"line":3044,"column":12},"end":{"line":3044,"column":49}},"id":1987},"1988":{"loc":{"start":{"line":3044,"column":28},"end":{"line":3044,"column":48}},"id":1988},"1989":{"loc":{"start":{"line":3045,"column":16},"end":{"line":3045,"column":52}},"id":1989},"1990":{"loc":{"start":{"line":3048,"column":12},"end":{"line":3048,"column":47}},"id":1990},"1991":{"loc":{"start":{"line":3048,"column":12},"end":{"line":3048,"column":46}},"id":1991},"1992":{"loc":{"start":{"line":3050,"column":8},"end":{"line":3050,"column":30}},"id":1992},"1993":{"loc":{"start":{"line":3054,"column":8},"end":{"line":3054,"column":20}},"id":1993},"1994":{"loc":{"start":{"line":3055,"column":8},"end":{"line":3055,"column":23}},"id":1994},"1995":{"loc":{"start":{"line":3056,"column":8},"end":{"line":3059,"column":10}},"id":1995},"1996":{"loc":{"start":{"line":3058,"column":18},"end":{"line":3058,"column":39}},"id":1996},"1997":{"loc":{"start":{"line":3060,"column":8},"end":{"line":3060,"column":23}},"id":1997},"1998":{"loc":{"start":{"line":3067,"column":8},"end":{"line":3067,"column":78}},"id":1998},"1999":{"loc":{"start":{"line":3067,"column":8},"end":{"line":3067,"column":77}},"id":1999},"2000":{"loc":{"start":{"line":3067,"column":15},"end":{"line":3067,"column":40}},"id":2000},"2001":{"loc":{"start":{"line":3073,"column":12},"end":{"line":3073,"column":37}},"id":2001},"2002":{"loc":{"start":{"line":3074,"column":16},"end":{"line":3074,"column":74}},"id":2002},"2003":{"loc":{"start":{"line":3074,"column":31},"end":{"line":3074,"column":56}},"id":2003},"2004":{"loc":{"start":{"line":3075,"column":16},"end":{"line":3075,"column":23}},"id":2004},"2005":{"loc":{"start":{"line":3079,"column":8},"end":{"line":3083,"column":11}},"id":2005},"2006":{"loc":{"start":{"line":3079,"column":8},"end":{"line":3083,"column":10}},"id":2006},"2007":{"loc":{"start":{"line":3087,"column":8},"end":{"line":3087,"column":58}},"id":2007},"2008":{"loc":{"start":{"line":3089,"column":8},"end":{"line":3089,"column":21}},"id":2008},"2009":{"loc":{"start":{"line":3090,"column":8},"end":{"line":3090,"column":29}},"id":2009},"2010":{"loc":{"start":{"line":3091,"column":8},"end":{"line":3091,"column":28}},"id":2010},"2011":{"loc":{"start":{"line":3093,"column":15},"end":{"line":3093,"column":29}},"id":2011},"2012":{"loc":{"start":{"line":3094,"column":12},"end":{"line":3094,"column":31}},"id":2012},"2013":{"loc":{"start":{"line":3097,"column":16},"end":{"line":3097,"column":32}},"id":2013},"2014":{"loc":{"start":{"line":3097,"column":21},"end":{"line":3097,"column":31}},"id":2014},"2015":{"loc":{"start":{"line":3098,"column":20},"end":{"line":3098,"column":35}},"id":2015},"2016":{"loc":{"start":{"line":3099,"column":20},"end":{"line":3099,"column":40}},"id":2016},"2017":{"loc":{"start":{"line":3100,"column":20},"end":{"line":3100,"column":34}},"id":2017},"2018":{"loc":{"start":{"line":3101,"column":20},"end":{"line":3101,"column":62}},"id":2018},"2019":{"loc":{"start":{"line":3101,"column":20},"end":{"line":3101,"column":61}},"id":2019},"2020":{"loc":{"start":{"line":3102,"column":27},"end":{"line":3102,"column":47}},"id":2020},"2021":{"loc":{"start":{"line":3103,"column":20},"end":{"line":3103,"column":40}},"id":2021},"2022":{"loc":{"start":{"line":3104,"column":20},"end":{"line":3104,"column":62}},"id":2022},"2023":{"loc":{"start":{"line":3104,"column":20},"end":{"line":3104,"column":61}},"id":2023},"2024":{"loc":{"start":{"line":3105,"column":24},"end":{"line":3105,"column":61}},"id":2024},"2025":{"loc":{"start":{"line":3105,"column":24},"end":{"line":3105,"column":35}},"id":2025},"2026":{"loc":{"start":{"line":3105,"column":39},"end":{"line":3105,"column":61}},"id":2026},"2027":{"loc":{"start":{"line":3106,"column":24},"end":{"line":3106,"column":32}},"id":2027},"2028":{"loc":{"start":{"line":3106,"column":24},"end":{"line":3106,"column":31}},"id":2028},"2029":{"loc":{"start":{"line":3108,"column":20},"end":{"line":3108,"column":33}},"id":2029},"2030":{"loc":{"start":{"line":3108,"column":20},"end":{"line":3108,"column":32}},"id":2030},"2031":{"loc":{"start":{"line":3109,"column":20},"end":{"line":3109,"column":38}},"id":2031},"2032":{"loc":{"start":{"line":3110,"column":20},"end":{"line":3110,"column":33}},"id":2032},"2033":{"loc":{"start":{"line":3112,"column":20},"end":{"line":3112,"column":34}},"id":2033},"2034":{"loc":{"start":{"line":3115,"column":20},"end":{"line":3115,"column":40}},"id":2034},"2035":{"loc":{"start":{"line":3116,"column":24},"end":{"line":3116,"column":65}},"id":2035},"2036":{"loc":{"start":{"line":3116,"column":24},"end":{"line":3116,"column":35}},"id":2036},"2037":{"loc":{"start":{"line":3116,"column":39},"end":{"line":3116,"column":65}},"id":2037},"2038":{"loc":{"start":{"line":3116,"column":46},"end":{"line":3116,"column":55}},"id":2038},"2039":{"loc":{"start":{"line":3117,"column":24},"end":{"line":3117,"column":32}},"id":2039},"2040":{"loc":{"start":{"line":3117,"column":24},"end":{"line":3117,"column":31}},"id":2040},"2041":{"loc":{"start":{"line":3118,"column":24},"end":{"line":3118,"column":42}},"id":2041},"2042":{"loc":{"start":{"line":3120,"column":24},"end":{"line":3120,"column":38}},"id":2042},"2043":{"loc":{"start":{"line":3122,"column":20},"end":{"line":3122,"column":33}},"id":2043},"2044":{"loc":{"start":{"line":3122,"column":20},"end":{"line":3122,"column":32}},"id":2044},"2045":{"loc":{"start":{"line":3123,"column":20},"end":{"line":3123,"column":28}},"id":2045},"2046":{"loc":{"start":{"line":3123,"column":20},"end":{"line":3123,"column":27}},"id":2046},"2047":{"loc":{"start":{"line":3124,"column":20},"end":{"line":3124,"column":38}},"id":2047},"2048":{"loc":{"start":{"line":3125,"column":24},"end":{"line":3125,"column":39}},"id":2048},"2049":{"loc":{"start":{"line":3126,"column":24},"end":{"line":3126,"column":76}},"id":2049},"2050":{"loc":{"start":{"line":3126,"column":24},"end":{"line":3126,"column":75}},"id":2050},"2051":{"loc":{"start":{"line":3129,"column":20},"end":{"line":3129,"column":36}},"id":2051},"2052":{"loc":{"start":{"line":3129,"column":25},"end":{"line":3129,"column":35}},"id":2052},"2053":{"loc":{"start":{"line":3130,"column":24},"end":{"line":3130,"column":39}},"id":2053},"2054":{"loc":{"start":{"line":3131,"column":24},"end":{"line":3131,"column":76}},"id":2054},"2055":{"loc":{"start":{"line":3131,"column":24},"end":{"line":3131,"column":75}},"id":2055},"2056":{"loc":{"start":{"line":3133,"column":20},"end":{"line":3133,"column":34}},"id":2056},"2057":{"loc":{"start":{"line":3134,"column":24},"end":{"line":3134,"column":34}},"id":2057},"2058":{"loc":{"start":{"line":3135,"column":24},"end":{"line":3135,"column":43}},"id":2058},"2059":{"loc":{"start":{"line":3136,"column":28},"end":{"line":3136,"column":38}},"id":2059},"2060":{"loc":{"start":{"line":3137,"column":28},"end":{"line":3137,"column":76}},"id":2060},"2061":{"loc":{"start":{"line":3137,"column":38},"end":{"line":3137,"column":75}},"id":2061},"2062":{"loc":{"start":{"line":3137,"column":56},"end":{"line":3137,"column":74}},"id":2062},"2063":{"loc":{"start":{"line":3138,"column":28},"end":{"line":3138,"column":49}},"id":2063},"2064":{"loc":{"start":{"line":3139,"column":28},"end":{"line":3139,"column":36}},"id":2064},"2065":{"loc":{"start":{"line":3139,"column":28},"end":{"line":3139,"column":35}},"id":2065},"2066":{"loc":{"start":{"line":3140,"column":28},"end":{"line":3140,"column":71}},"id":2066},"2067":{"loc":{"start":{"line":3140,"column":28},"end":{"line":3140,"column":70}},"id":2067},"2068":{"loc":{"start":{"line":3141,"column":28},"end":{"line":3141,"column":41}},"id":2068},"2069":{"loc":{"start":{"line":3145,"column":23},"end":{"line":3145,"column":33}},"id":2069},"2070":{"loc":{"start":{"line":3146,"column":16},"end":{"line":3146,"column":39}},"id":2070},"2071":{"loc":{"start":{"line":3146,"column":28},"end":{"line":3146,"column":37}},"id":2071},"2072":{"loc":{"start":{"line":3147,"column":20},"end":{"line":3147,"column":30}},"id":2072},"2073":{"loc":{"start":{"line":3148,"column":20},"end":{"line":3148,"column":34}},"id":2073},"2074":{"loc":{"start":{"line":3149,"column":20},"end":{"line":3149,"column":31}},"id":2074},"2075":{"loc":{"start":{"line":3150,"column":20},"end":{"line":3150,"column":39}},"id":2075},"2076":{"loc":{"start":{"line":3151,"column":27},"end":{"line":3151,"column":37}},"id":2076},"2077":{"loc":{"start":{"line":3152,"column":20},"end":{"line":3152,"column":34}},"id":2077},"2078":{"loc":{"start":{"line":3153,"column":20},"end":{"line":3153,"column":31}},"id":2078},"2079":{"loc":{"start":{"line":3154,"column":20},"end":{"line":3154,"column":40}},"id":2079},"2080":{"loc":{"start":{"line":3155,"column":24},"end":{"line":3155,"column":39}},"id":2080},"2081":{"loc":{"start":{"line":3156,"column":24},"end":{"line":3156,"column":76}},"id":2081},"2082":{"loc":{"start":{"line":3156,"column":24},"end":{"line":3156,"column":75}},"id":2082},"2083":{"loc":{"start":{"line":3161,"column":23},"end":{"line":3161,"column":39}},"id":2083},"2084":{"loc":{"start":{"line":3162,"column":16},"end":{"line":3162,"column":24}},"id":2084},"2085":{"loc":{"start":{"line":3162,"column":16},"end":{"line":3162,"column":23}},"id":2085},"2086":{"loc":{"start":{"line":3163,"column":23},"end":{"line":3163,"column":43}},"id":2086},"2087":{"loc":{"start":{"line":3164,"column":16},"end":{"line":3164,"column":24}},"id":2087},"2088":{"loc":{"start":{"line":3164,"column":16},"end":{"line":3164,"column":23}},"id":2088},"2089":{"loc":{"start":{"line":3165,"column":20},"end":{"line":3165,"column":58}},"id":2089},"2090":{"loc":{"start":{"line":3165,"column":20},"end":{"line":3165,"column":32}},"id":2090},"2091":{"loc":{"start":{"line":3165,"column":36},"end":{"line":3165,"column":58}},"id":2091},"2092":{"loc":{"start":{"line":3166,"column":20},"end":{"line":3166,"column":28}},"id":2092},"2093":{"loc":{"start":{"line":3166,"column":20},"end":{"line":3166,"column":27}},"id":2093},"2094":{"loc":{"start":{"line":3168,"column":16},"end":{"line":3168,"column":29}},"id":2094},"2095":{"loc":{"start":{"line":3168,"column":16},"end":{"line":3168,"column":28}},"id":2095},"2096":{"loc":{"start":{"line":3169,"column":16},"end":{"line":3169,"column":34}},"id":2096},"2097":{"loc":{"start":{"line":3177,"column":8},"end":{"line":3179,"column":18}},"id":2097},"2098":{"loc":{"start":{"line":3177,"column":20},"end":{"line":3177,"column":35}},"id":2098},"2099":{"loc":{"start":{"line":3181,"column":12},"end":{"line":3181,"column":36}},"id":2099},"2100":{"loc":{"start":{"line":3182,"column":12},"end":{"line":3182,"column":53}},"id":2100},"2101":{"loc":{"start":{"line":3183,"column":12},"end":{"line":3183,"column":64}},"id":2101},"2102":{"loc":{"start":{"line":3183,"column":20},"end":{"line":3183,"column":63}},"id":2102},"2103":{"loc":{"start":{"line":3184,"column":12},"end":{"line":3188,"column":15}},"id":2103},"2104":{"loc":{"start":{"line":3184,"column":12},"end":{"line":3188,"column":14}},"id":2104},"2105":{"loc":{"start":{"line":3191,"column":8},"end":{"line":3191,"column":21}},"id":2105},"2106":{"loc":{"start":{"line":3195,"column":8},"end":{"line":3195,"column":30}},"id":2106},"2107":{"loc":{"start":{"line":3197,"column":8},"end":{"line":3197,"column":22}},"id":2107},"2108":{"loc":{"start":{"line":3197,"column":8},"end":{"line":3197,"column":21}},"id":2108},"2109":{"loc":{"start":{"line":3199,"column":8},"end":{"line":3199,"column":20}},"id":2109},"2110":{"loc":{"start":{"line":3200,"column":8},"end":{"line":3200,"column":35}},"id":2110},"2111":{"loc":{"start":{"line":3200,"column":16},"end":{"line":3200,"column":34}},"id":2111},"2112":{"loc":{"start":{"line":3203,"column":12},"end":{"line":3203,"column":35}},"id":2112},"2113":{"loc":{"start":{"line":3204,"column":12},"end":{"line":3204,"column":58}},"id":2113},"2114":{"loc":{"start":{"line":3204,"column":33},"end":{"line":3204,"column":56}},"id":2114},"2115":{"loc":{"start":{"line":3205,"column":16},"end":{"line":3205,"column":69}},"id":2115},"2116":{"loc":{"start":{"line":3205,"column":16},"end":{"line":3205,"column":38}},"id":2116},"2117":{"loc":{"start":{"line":3205,"column":42},"end":{"line":3205,"column":69}},"id":2117},"2118":{"loc":{"start":{"line":3206,"column":20},"end":{"line":3206,"column":63}},"id":2118},"2119":{"loc":{"start":{"line":3206,"column":20},"end":{"line":3206,"column":39}},"id":2119},"2120":{"loc":{"start":{"line":3206,"column":43},"end":{"line":3206,"column":63}},"id":2120},"2121":{"loc":{"start":{"line":3207,"column":20},"end":{"line":3207,"column":39}},"id":2121},"2122":{"loc":{"start":{"line":3207,"column":20},"end":{"line":3207,"column":38}},"id":2122},"2123":{"loc":{"start":{"line":3212,"column":8},"end":{"line":3216,"column":11}},"id":2123},"2124":{"loc":{"start":{"line":3212,"column":8},"end":{"line":3216,"column":10}},"id":2124},"2125":{"loc":{"start":{"line":3218,"column":8},"end":{"line":3218,"column":21}},"id":2125},"2126":{"loc":{"start":{"line":3222,"column":8},"end":{"line":3225,"column":10}},"id":2126},"2127":{"loc":{"start":{"line":3229,"column":8},"end":{"line":3233,"column":10}},"id":2127},"2128":{"loc":{"start":{"line":3232,"column":17},"end":{"line":3232,"column":60}},"id":2128},"2129":{"loc":{"start":{"line":3238,"column":8},"end":{"line":3308,"column":10}},"id":2129},"2130":{"loc":{"start":{"line":3241,"column":16},"end":{"line":3242,"column":58}},"id":2130},"2131":{"loc":{"start":{"line":3241,"column":23},"end":{"line":3242,"column":57}},"id":2131},"2132":{"loc":{"start":{"line":3241,"column":23},"end":{"line":3241,"column":61}},"id":2132},"2133":{"loc":{"start":{"line":3242,"column":20},"end":{"line":3242,"column":57}},"id":2133},"2134":{"loc":{"start":{"line":3246,"column":20},"end":{"line":3246,"column":39}},"id":2134},"2135":{"loc":{"start":{"line":3247,"column":20},"end":{"line":3247,"column":37}},"id":2135},"2136":{"loc":{"start":{"line":3247,"column":20},"end":{"line":3247,"column":36}},"id":2136},"2137":{"loc":{"start":{"line":3249,"column":20},"end":{"line":3249,"column":40}},"id":2137},"2138":{"loc":{"start":{"line":3250,"column":20},"end":{"line":3250,"column":38}},"id":2138},"2139":{"loc":{"start":{"line":3250,"column":20},"end":{"line":3250,"column":37}},"id":2139},"2140":{"loc":{"start":{"line":3253,"column":20},"end":{"line":3253,"column":62}},"id":2140},"2141":{"loc":{"start":{"line":3253,"column":29},"end":{"line":3253,"column":62}},"id":2141},"2142":{"loc":{"start":{"line":3254,"column":20},"end":{"line":3254,"column":75}},"id":2142},"2143":{"loc":{"start":{"line":3256,"column":20},"end":{"line":3256,"column":58}},"id":2143},"2144":{"loc":{"start":{"line":3256,"column":27},"end":{"line":3256,"column":58}},"id":2144},"2145":{"loc":{"start":{"line":3257,"column":20},"end":{"line":3260,"column":22}},"id":2145},"2146":{"loc":{"start":{"line":3264,"column":12},"end":{"line":3306,"column":14}},"id":2146},"2147":{"loc":{"start":{"line":3265,"column":16},"end":{"line":3265,"column":45}},"id":2147},"2148":{"loc":{"start":{"line":3267,"column":16},"end":{"line":3267,"column":30}},"id":2148},"2149":{"loc":{"start":{"line":3267,"column":16},"end":{"line":3267,"column":29}},"id":2149},"2150":{"loc":{"start":{"line":3268,"column":16},"end":{"line":3268,"column":39}},"id":2150},"2151":{"loc":{"start":{"line":3269,"column":16},"end":{"line":3274,"column":18}},"id":2151},"2152":{"loc":{"start":{"line":3272,"column":32},"end":{"line":3272,"column":49}},"id":2152},"2153":{"loc":{"start":{"line":3276,"column":16},"end":{"line":3276,"column":60}},"id":2153},"2154":{"loc":{"start":{"line":3276,"column":23},"end":{"line":3276,"column":59}},"id":2154},"2155":{"loc":{"start":{"line":3277,"column":20},"end":{"line":3277,"column":47}},"id":2155},"2156":{"loc":{"start":{"line":3280,"column":24},"end":{"line":3280,"column":45}},"id":2156},"2157":{"loc":{"start":{"line":3281,"column":24},"end":{"line":3281,"column":47}},"id":2157},"2158":{"loc":{"start":{"line":3285,"column":24},"end":{"line":3288,"column":26}},"id":2158},"2159":{"loc":{"start":{"line":3287,"column":36},"end":{"line":3287,"column":53}},"id":2159},"2160":{"loc":{"start":{"line":3289,"column":24},"end":{"line":3289,"column":43}},"id":2160},"2161":{"loc":{"start":{"line":3292,"column":24},"end":{"line":3292,"column":38}},"id":2161},"2162":{"loc":{"start":{"line":3293,"column":24},"end":{"line":3293,"column":36}},"id":2162},"2163":{"loc":{"start":{"line":3293,"column":24},"end":{"line":3293,"column":35}},"id":2163},"2164":{"loc":{"start":{"line":3296,"column":24},"end":{"line":3296,"column":61}},"id":2164},"2165":{"loc":{"start":{"line":3297,"column":28},"end":{"line":3297,"column":68}},"id":2165},"2166":{"loc":{"start":{"line":3298,"column":28},"end":{"line":3298,"column":65}},"id":2166},"2167":{"loc":{"start":{"line":3300,"column":28},"end":{"line":3300,"column":66}},"id":2167},"2168":{"loc":{"start":{"line":3301,"column":28},"end":{"line":3301,"column":67}},"id":2168},"2169":{"loc":{"start":{"line":3304,"column":20},"end":{"line":3304,"column":32}},"id":2169},"2170":{"loc":{"start":{"line":3313,"column":8},"end":{"line":3313,"column":25}},"id":2170},"2171":{"loc":{"start":{"line":3316,"column":12},"end":{"line":3316,"column":44}},"id":2171},"2172":{"loc":{"start":{"line":3317,"column":12},"end":{"line":3317,"column":38}},"id":2172},"2173":{"loc":{"start":{"line":3321,"column":12},"end":{"line":3321,"column":48}},"id":2173},"2174":{"loc":{"start":{"line":3322,"column":12},"end":{"line":3322,"column":45}},"id":2174},"2175":{"loc":{"start":{"line":3325,"column":12},"end":{"line":3325,"column":36}},"id":2175},"2176":{"loc":{"start":{"line":3327,"column":12},"end":{"line":3327,"column":72}},"id":2176},"2177":{"loc":{"start":{"line":3327,"column":27},"end":{"line":3327,"column":71}},"id":2177},"2178":{"loc":{"start":{"line":3329,"column":12},"end":{"line":3329,"column":68}},"id":2178},"2179":{"loc":{"start":{"line":3330,"column":12},"end":{"line":3330,"column":72}},"id":2179},"2180":{"loc":{"start":{"line":3331,"column":12},"end":{"line":3331,"column":72}},"id":2180},"2181":{"loc":{"start":{"line":3332,"column":12},"end":{"line":3332,"column":70}},"id":2181},"2182":{"loc":{"start":{"line":3333,"column":12},"end":{"line":3333,"column":72}},"id":2182},"2183":{"loc":{"start":{"line":3334,"column":12},"end":{"line":3334,"column":42}},"id":2183},"2184":{"loc":{"start":{"line":3335,"column":12},"end":{"line":3335,"column":76}},"id":2184},"2185":{"loc":{"start":{"line":3336,"column":12},"end":{"line":3336,"column":52}},"id":2185},"2186":{"loc":{"start":{"line":3337,"column":12},"end":{"line":3337,"column":54}},"id":2186},"2187":{"loc":{"start":{"line":3338,"column":12},"end":{"line":3338,"column":60}},"id":2187},"2188":{"loc":{"start":{"line":3339,"column":12},"end":{"line":3339,"column":74}},"id":2188},"2189":{"loc":{"start":{"line":3340,"column":12},"end":{"line":3340,"column":70}},"id":2189},"2190":{"loc":{"start":{"line":3341,"column":12},"end":{"line":3341,"column":68}},"id":2190},"2191":{"loc":{"start":{"line":3342,"column":12},"end":{"line":3342,"column":52}},"id":2191},"2192":{"loc":{"start":{"line":3343,"column":12},"end":{"line":3343,"column":76}},"id":2192},"2193":{"loc":{"start":{"line":3344,"column":12},"end":{"line":3344,"column":70}},"id":2193},"2194":{"loc":{"start":{"line":3345,"column":12},"end":{"line":3345,"column":68}},"id":2194},"2195":{"loc":{"start":{"line":3346,"column":12},"end":{"line":3346,"column":72}},"id":2195},"2196":{"loc":{"start":{"line":3347,"column":12},"end":{"line":3347,"column":70}},"id":2196},"2197":{"loc":{"start":{"line":3348,"column":12},"end":{"line":3348,"column":80}},"id":2197},"2198":{"loc":{"start":{"line":3349,"column":12},"end":{"line":3349,"column":58}},"id":2198},"2199":{"loc":{"start":{"line":3350,"column":12},"end":{"line":3350,"column":66}},"id":2199},"2200":{"loc":{"start":{"line":3351,"column":12},"end":{"line":3351,"column":70}},"id":2200},"2201":{"loc":{"start":{"line":3352,"column":12},"end":{"line":3352,"column":60}},"id":2201},"2202":{"loc":{"start":{"line":3353,"column":12},"end":{"line":3353,"column":66}},"id":2202},"2203":{"loc":{"start":{"line":3354,"column":12},"end":{"line":3354,"column":66}},"id":2203},"2204":{"loc":{"start":{"line":3355,"column":12},"end":{"line":3355,"column":66}},"id":2204},"2205":{"loc":{"start":{"line":3356,"column":12},"end":{"line":3356,"column":46}},"id":2205},"2206":{"loc":{"start":{"line":3357,"column":12},"end":{"line":3357,"column":64}},"id":2206},"2207":{"loc":{"start":{"line":3358,"column":12},"end":{"line":3358,"column":72}},"id":2207},"2208":{"loc":{"start":{"line":3359,"column":12},"end":{"line":3359,"column":50}},"id":2208},"2209":{"loc":{"start":{"line":3360,"column":12},"end":{"line":3360,"column":62}},"id":2209},"2210":{"loc":{"start":{"line":3361,"column":12},"end":{"line":3361,"column":52}},"id":2210},"2211":{"loc":{"start":{"line":3362,"column":12},"end":{"line":3362,"column":62}},"id":2211},"2212":{"loc":{"start":{"line":3363,"column":12},"end":{"line":3363,"column":70}},"id":2212},"2213":{"loc":{"start":{"line":3364,"column":12},"end":{"line":3364,"column":68}},"id":2213},"2214":{"loc":{"start":{"line":3366,"column":12},"end":{"line":3366,"column":82}},"id":2214},"2215":{"loc":{"start":{"line":3366,"column":38},"end":{"line":3366,"column":81}},"id":2215},"2216":{"loc":{"start":{"line":3367,"column":12},"end":{"line":3367,"column":86}},"id":2216},"2217":{"loc":{"start":{"line":3367,"column":40},"end":{"line":3367,"column":85}},"id":2217},"2218":{"loc":{"start":{"line":3368,"column":12},"end":{"line":3368,"column":86}},"id":2218},"2219":{"loc":{"start":{"line":3368,"column":40},"end":{"line":3368,"column":85}},"id":2219},"2220":{"loc":{"start":{"line":3369,"column":12},"end":{"line":3369,"column":84}},"id":2220},"2221":{"loc":{"start":{"line":3369,"column":39},"end":{"line":3369,"column":83}},"id":2221},"2222":{"loc":{"start":{"line":3370,"column":12},"end":{"line":3370,"column":86}},"id":2222},"2223":{"loc":{"start":{"line":3370,"column":40},"end":{"line":3370,"column":85}},"id":2223},"2224":{"loc":{"start":{"line":3371,"column":12},"end":{"line":3371,"column":56}},"id":2224},"2225":{"loc":{"start":{"line":3371,"column":25},"end":{"line":3371,"column":55}},"id":2225},"2226":{"loc":{"start":{"line":3372,"column":12},"end":{"line":3372,"column":90}},"id":2226},"2227":{"loc":{"start":{"line":3372,"column":42},"end":{"line":3372,"column":89}},"id":2227},"2228":{"loc":{"start":{"line":3373,"column":12},"end":{"line":3373,"column":66}},"id":2228},"2229":{"loc":{"start":{"line":3373,"column":30},"end":{"line":3373,"column":65}},"id":2229},"2230":{"loc":{"start":{"line":3374,"column":12},"end":{"line":3374,"column":68}},"id":2230},"2231":{"loc":{"start":{"line":3374,"column":31},"end":{"line":3374,"column":67}},"id":2231},"2232":{"loc":{"start":{"line":3375,"column":12},"end":{"line":3375,"column":74}},"id":2232},"2233":{"loc":{"start":{"line":3375,"column":34},"end":{"line":3375,"column":73}},"id":2233},"2234":{"loc":{"start":{"line":3376,"column":12},"end":{"line":3376,"column":88}},"id":2234},"2235":{"loc":{"start":{"line":3376,"column":41},"end":{"line":3376,"column":87}},"id":2235},"2236":{"loc":{"start":{"line":3377,"column":12},"end":{"line":3377,"column":84}},"id":2236},"2237":{"loc":{"start":{"line":3377,"column":39},"end":{"line":3377,"column":83}},"id":2237},"2238":{"loc":{"start":{"line":3378,"column":12},"end":{"line":3378,"column":82}},"id":2238},"2239":{"loc":{"start":{"line":3378,"column":38},"end":{"line":3378,"column":81}},"id":2239},"2240":{"loc":{"start":{"line":3379,"column":12},"end":{"line":3379,"column":66}},"id":2240},"2241":{"loc":{"start":{"line":3379,"column":30},"end":{"line":3379,"column":65}},"id":2241},"2242":{"loc":{"start":{"line":3380,"column":12},"end":{"line":3380,"column":90}},"id":2242},"2243":{"loc":{"start":{"line":3380,"column":42},"end":{"line":3380,"column":89}},"id":2243},"2244":{"loc":{"start":{"line":3381,"column":12},"end":{"line":3381,"column":84}},"id":2244},"2245":{"loc":{"start":{"line":3381,"column":39},"end":{"line":3381,"column":83}},"id":2245},"2246":{"loc":{"start":{"line":3382,"column":12},"end":{"line":3382,"column":82}},"id":2246},"2247":{"loc":{"start":{"line":3382,"column":38},"end":{"line":3382,"column":81}},"id":2247},"2248":{"loc":{"start":{"line":3383,"column":12},"end":{"line":3383,"column":86}},"id":2248},"2249":{"loc":{"start":{"line":3383,"column":40},"end":{"line":3383,"column":85}},"id":2249},"2250":{"loc":{"start":{"line":3384,"column":12},"end":{"line":3384,"column":84}},"id":2250},"2251":{"loc":{"start":{"line":3384,"column":39},"end":{"line":3384,"column":83}},"id":2251},"2252":{"loc":{"start":{"line":3385,"column":12},"end":{"line":3385,"column":94}},"id":2252},"2253":{"loc":{"start":{"line":3385,"column":44},"end":{"line":3385,"column":93}},"id":2253},"2254":{"loc":{"start":{"line":3386,"column":12},"end":{"line":3386,"column":72}},"id":2254},"2255":{"loc":{"start":{"line":3386,"column":33},"end":{"line":3386,"column":71}},"id":2255},"2256":{"loc":{"start":{"line":3387,"column":12},"end":{"line":3387,"column":80}},"id":2256},"2257":{"loc":{"start":{"line":3387,"column":37},"end":{"line":3387,"column":79}},"id":2257},"2258":{"loc":{"start":{"line":3388,"column":12},"end":{"line":3388,"column":84}},"id":2258},"2259":{"loc":{"start":{"line":3388,"column":39},"end":{"line":3388,"column":83}},"id":2259},"2260":{"loc":{"start":{"line":3389,"column":12},"end":{"line":3389,"column":74}},"id":2260},"2261":{"loc":{"start":{"line":3389,"column":34},"end":{"line":3389,"column":73}},"id":2261},"2262":{"loc":{"start":{"line":3390,"column":12},"end":{"line":3390,"column":80}},"id":2262},"2263":{"loc":{"start":{"line":3390,"column":37},"end":{"line":3390,"column":79}},"id":2263},"2264":{"loc":{"start":{"line":3391,"column":12},"end":{"line":3391,"column":80}},"id":2264},"2265":{"loc":{"start":{"line":3391,"column":37},"end":{"line":3391,"column":79}},"id":2265},"2266":{"loc":{"start":{"line":3392,"column":12},"end":{"line":3392,"column":80}},"id":2266},"2267":{"loc":{"start":{"line":3392,"column":37},"end":{"line":3392,"column":79}},"id":2267},"2268":{"loc":{"start":{"line":3393,"column":12},"end":{"line":3393,"column":60}},"id":2268},"2269":{"loc":{"start":{"line":3393,"column":27},"end":{"line":3393,"column":59}},"id":2269},"2270":{"loc":{"start":{"line":3394,"column":12},"end":{"line":3394,"column":78}},"id":2270},"2271":{"loc":{"start":{"line":3394,"column":36},"end":{"line":3394,"column":77}},"id":2271},"2272":{"loc":{"start":{"line":3395,"column":12},"end":{"line":3395,"column":86}},"id":2272},"2273":{"loc":{"start":{"line":3395,"column":40},"end":{"line":3395,"column":85}},"id":2273},"2274":{"loc":{"start":{"line":3396,"column":12},"end":{"line":3396,"column":64}},"id":2274},"2275":{"loc":{"start":{"line":3396,"column":29},"end":{"line":3396,"column":63}},"id":2275},"2276":{"loc":{"start":{"line":3397,"column":12},"end":{"line":3397,"column":76}},"id":2276},"2277":{"loc":{"start":{"line":3397,"column":35},"end":{"line":3397,"column":75}},"id":2277},"2278":{"loc":{"start":{"line":3398,"column":12},"end":{"line":3398,"column":66}},"id":2278},"2279":{"loc":{"start":{"line":3398,"column":30},"end":{"line":3398,"column":65}},"id":2279},"2280":{"loc":{"start":{"line":3399,"column":12},"end":{"line":3399,"column":76}},"id":2280},"2281":{"loc":{"start":{"line":3399,"column":35},"end":{"line":3399,"column":75}},"id":2281},"2282":{"loc":{"start":{"line":3400,"column":12},"end":{"line":3400,"column":84}},"id":2282},"2283":{"loc":{"start":{"line":3400,"column":39},"end":{"line":3400,"column":83}},"id":2283},"2284":{"loc":{"start":{"line":3401,"column":12},"end":{"line":3401,"column":82}},"id":2284},"2285":{"loc":{"start":{"line":3401,"column":38},"end":{"line":3401,"column":81}},"id":2285},"2286":{"loc":{"start":{"line":3404,"column":12},"end":{"line":3404,"column":47}},"id":2286},"2287":{"loc":{"start":{"line":3405,"column":12},"end":{"line":3405,"column":36}},"id":2287},"2288":{"loc":{"start":{"line":3406,"column":12},"end":{"line":3406,"column":42}},"id":2288},"2289":{"loc":{"start":{"line":3408,"column":12},"end":{"line":3408,"column":35}},"id":2289},"2290":{"loc":{"start":{"line":3409,"column":12},"end":{"line":3409,"column":38}},"id":2290},"2291":{"loc":{"start":{"line":3414,"column":12},"end":{"line":3414,"column":51}},"id":2291},"2292":{"loc":{"start":{"line":3415,"column":12},"end":{"line":3415,"column":44}},"id":2292},"2293":{"loc":{"start":{"line":3419,"column":12},"end":{"line":3419,"column":48}},"id":2293},"2294":{"loc":{"start":{"line":3422,"column":12},"end":{"line":3422,"column":36}},"id":2294},"2295":{"loc":{"start":{"line":3423,"column":12},"end":{"line":3423,"column":68}},"id":2295},"2296":{"loc":{"start":{"line":3424,"column":12},"end":{"line":3424,"column":72}},"id":2296},"2297":{"loc":{"start":{"line":3425,"column":12},"end":{"line":3425,"column":72}},"id":2297},"2298":{"loc":{"start":{"line":3426,"column":12},"end":{"line":3426,"column":70}},"id":2298},"2299":{"loc":{"start":{"line":3427,"column":12},"end":{"line":3427,"column":72}},"id":2299},"2300":{"loc":{"start":{"line":3428,"column":12},"end":{"line":3428,"column":42}},"id":2300},"2301":{"loc":{"start":{"line":3429,"column":12},"end":{"line":3429,"column":76}},"id":2301},"2302":{"loc":{"start":{"line":3430,"column":12},"end":{"line":3430,"column":52}},"id":2302},"2303":{"loc":{"start":{"line":3431,"column":12},"end":{"line":3431,"column":54}},"id":2303},"2304":{"loc":{"start":{"line":3432,"column":12},"end":{"line":3432,"column":60}},"id":2304},"2305":{"loc":{"start":{"line":3433,"column":12},"end":{"line":3433,"column":74}},"id":2305},"2306":{"loc":{"start":{"line":3434,"column":12},"end":{"line":3434,"column":70}},"id":2306},"2307":{"loc":{"start":{"line":3435,"column":12},"end":{"line":3435,"column":68}},"id":2307},"2308":{"loc":{"start":{"line":3436,"column":12},"end":{"line":3436,"column":52}},"id":2308},"2309":{"loc":{"start":{"line":3437,"column":12},"end":{"line":3437,"column":76}},"id":2309},"2310":{"loc":{"start":{"line":3438,"column":12},"end":{"line":3438,"column":70}},"id":2310},"2311":{"loc":{"start":{"line":3439,"column":12},"end":{"line":3439,"column":68}},"id":2311},"2312":{"loc":{"start":{"line":3440,"column":12},"end":{"line":3440,"column":72}},"id":2312},"2313":{"loc":{"start":{"line":3441,"column":12},"end":{"line":3441,"column":70}},"id":2313},"2314":{"loc":{"start":{"line":3442,"column":12},"end":{"line":3442,"column":80}},"id":2314},"2315":{"loc":{"start":{"line":3443,"column":12},"end":{"line":3443,"column":58}},"id":2315},"2316":{"loc":{"start":{"line":3444,"column":12},"end":{"line":3444,"column":66}},"id":2316},"2317":{"loc":{"start":{"line":3445,"column":12},"end":{"line":3445,"column":70}},"id":2317},"2318":{"loc":{"start":{"line":3446,"column":12},"end":{"line":3446,"column":60}},"id":2318},"2319":{"loc":{"start":{"line":3447,"column":12},"end":{"line":3447,"column":66}},"id":2319},"2320":{"loc":{"start":{"line":3448,"column":12},"end":{"line":3448,"column":66}},"id":2320},"2321":{"loc":{"start":{"line":3449,"column":12},"end":{"line":3449,"column":66}},"id":2321},"2322":{"loc":{"start":{"line":3450,"column":12},"end":{"line":3450,"column":46}},"id":2322},"2323":{"loc":{"start":{"line":3451,"column":12},"end":{"line":3451,"column":64}},"id":2323},"2324":{"loc":{"start":{"line":3452,"column":12},"end":{"line":3452,"column":72}},"id":2324},"2325":{"loc":{"start":{"line":3453,"column":12},"end":{"line":3453,"column":50}},"id":2325},"2326":{"loc":{"start":{"line":3454,"column":12},"end":{"line":3454,"column":62}},"id":2326},"2327":{"loc":{"start":{"line":3455,"column":12},"end":{"line":3455,"column":52}},"id":2327},"2328":{"loc":{"start":{"line":3456,"column":12},"end":{"line":3456,"column":62}},"id":2328},"2329":{"loc":{"start":{"line":3457,"column":12},"end":{"line":3457,"column":70}},"id":2329},"2330":{"loc":{"start":{"line":3458,"column":12},"end":{"line":3458,"column":68}},"id":2330},"2331":{"loc":{"start":{"line":3461,"column":12},"end":{"line":3461,"column":50}},"id":2331},"2332":{"loc":{"start":{"line":3462,"column":12},"end":{"line":3462,"column":36}},"id":2332},"2333":{"loc":{"start":{"line":3463,"column":12},"end":{"line":3463,"column":42}},"id":2333},"2334":{"loc":{"start":{"line":3468,"column":8},"end":{"line":3470,"column":14}},"id":2334},"2335":{"loc":{"start":{"line":3471,"column":20},"end":{"line":3471,"column":30}},"id":2335},"2336":{"loc":{"start":{"line":3471,"column":32},"end":{"line":3471,"column":35}},"id":2336},"2337":{"loc":{"start":{"line":3472,"column":12},"end":{"line":3472,"column":38}},"id":2337},"2338":{"loc":{"start":{"line":3472,"column":24},"end":{"line":3472,"column":37}},"id":2338},"2339":{"loc":{"start":{"line":3474,"column":8},"end":{"line":3474,"column":22}},"id":2339},"2340":{"loc":{"start":{"line":3478,"column":8},"end":{"line":3478,"column":30}},"id":2340},"2341":{"loc":{"start":{"line":3480,"column":8},"end":{"line":3480,"column":26}},"id":2341},"2342":{"loc":{"start":{"line":3481,"column":12},"end":{"line":3481,"column":65}},"id":2342},"2343":{"loc":{"start":{"line":3481,"column":12},"end":{"line":3481,"column":36}},"id":2343},"2344":{"loc":{"start":{"line":3481,"column":41},"end":{"line":3481,"column":65}},"id":2344},"2345":{"loc":{"start":{"line":3482,"column":12},"end":{"line":3482,"column":34}},"id":2345},"2346":{"loc":{"start":{"line":3482,"column":19},"end":{"line":3482,"column":33}},"id":2346},"2347":{"loc":{"start":{"line":3485,"column":8},"end":{"line":3485,"column":22}},"id":2347},"2348":{"loc":{"start":{"line":3486,"column":8},"end":{"line":3486,"column":18}},"id":2348},"2349":{"loc":{"start":{"line":3487,"column":8},"end":{"line":3487,"column":49}},"id":2349},"2350":{"loc":{"start":{"line":3487,"column":43},"end":{"line":3487,"column":44}},"id":2350},"2351":{"loc":{"start":{"line":3487,"column":47},"end":{"line":3487,"column":48}},"id":2351},"2352":{"loc":{"start":{"line":3487,"column":21},"end":{"line":3487,"column":40}},"id":2352},"2353":{"loc":{"start":{"line":3488,"column":8},"end":{"line":3488,"column":22}},"id":2353},"2354":{"loc":{"start":{"line":3489,"column":8},"end":{"line":3489,"column":31}},"id":2354},"2355":{"loc":{"start":{"line":3490,"column":8},"end":{"line":3490,"column":22}},"id":2355},"2356":{"loc":{"start":{"line":3491,"column":8},"end":{"line":3498,"column":10}},"id":2356},"2357":{"loc":{"start":{"line":3500,"column":8},"end":{"line":3500,"column":19}},"id":2357},"2358":{"loc":{"start":{"line":3501,"column":12},"end":{"line":3501,"column":42}},"id":2358},"2359":{"loc":{"start":{"line":3502,"column":12},"end":{"line":3502,"column":80}},"id":2359},"2360":{"loc":{"start":{"line":3502,"column":26},"end":{"line":3502,"column":79}},"id":2360},"2361":{"loc":{"start":{"line":3502,"column":26},"end":{"line":3502,"column":62}},"id":2361},"2362":{"loc":{"start":{"line":3503,"column":12},"end":{"line":3503,"column":74}},"id":2362},"2363":{"loc":{"start":{"line":3503,"column":24},"end":{"line":3503,"column":73}},"id":2363},"2364":{"loc":{"start":{"line":3503,"column":24},"end":{"line":3503,"column":58}},"id":2364},"2365":{"loc":{"start":{"line":3504,"column":12},"end":{"line":3504,"column":74}},"id":2365},"2366":{"loc":{"start":{"line":3504,"column":24},"end":{"line":3504,"column":73}},"id":2366},"2367":{"loc":{"start":{"line":3504,"column":24},"end":{"line":3504,"column":58}},"id":2367},"2368":{"loc":{"start":{"line":3505,"column":16},"end":{"line":3505,"column":69}},"id":2368},"2369":{"loc":{"start":{"line":3505,"column":16},"end":{"line":3505,"column":51}},"id":2369},"2370":{"loc":{"start":{"line":3506,"column":16},"end":{"line":3506,"column":34}},"id":2370},"2371":{"loc":{"start":{"line":3508,"column":16},"end":{"line":3508,"column":71}},"id":2371},"2372":{"loc":{"start":{"line":3508,"column":16},"end":{"line":3508,"column":52}},"id":2372},"2373":{"loc":{"start":{"line":3509,"column":16},"end":{"line":3509,"column":36}},"id":2373},"2374":{"loc":{"start":{"line":3511,"column":16},"end":{"line":3511,"column":73}},"id":2374},"2375":{"loc":{"start":{"line":3511,"column":16},"end":{"line":3511,"column":53}},"id":2375},"2376":{"loc":{"start":{"line":3512,"column":16},"end":{"line":3512,"column":34}},"id":2376},"2377":{"loc":{"start":{"line":3516,"column":12},"end":{"line":3516,"column":22}},"id":2377},"2378":{"loc":{"start":{"line":3517,"column":16},"end":{"line":3517,"column":48}},"id":2378},"2379":{"loc":{"start":{"line":3521,"column":20},"end":{"line":3521,"column":42}},"id":2379},"2380":{"loc":{"start":{"line":3522,"column":20},"end":{"line":3522,"column":44}},"id":2380},"2381":{"loc":{"start":{"line":3522,"column":29},"end":{"line":3522,"column":43}},"id":2381},"2382":{"loc":{"start":{"line":3526,"column":20},"end":{"line":3526,"column":52}},"id":2382},"2383":{"loc":{"start":{"line":3527,"column":20},"end":{"line":3527,"column":49}},"id":2383},"2384":{"loc":{"start":{"line":3527,"column":29},"end":{"line":3527,"column":48}},"id":2384},"2385":{"loc":{"start":{"line":3532,"column":8},"end":{"line":3532,"column":16}},"id":2385},"2386":{"loc":{"start":{"line":3532,"column":8},"end":{"line":3532,"column":15}},"id":2386},"2387":{"loc":{"start":{"line":3534,"column":12},"end":{"line":3534,"column":37}},"id":2387},"2388":{"loc":{"start":{"line":3534,"column":22},"end":{"line":3534,"column":36}},"id":2388},"2389":{"loc":{"start":{"line":3535,"column":16},"end":{"line":3535,"column":53}},"id":2389},"2390":{"loc":{"start":{"line":3536,"column":16},"end":{"line":3536,"column":50}},"id":2390},"2391":{"loc":{"start":{"line":3538,"column":16},"end":{"line":3538,"column":51}},"id":2391},"2392":{"loc":{"start":{"line":3539,"column":16},"end":{"line":3539,"column":46}},"id":2392},"2393":{"loc":{"start":{"line":3541,"column":16},"end":{"line":3541,"column":51}},"id":2393},"2394":{"loc":{"start":{"line":3542,"column":16},"end":{"line":3542,"column":46}},"id":2394},"2395":{"loc":{"start":{"line":3545,"column":12},"end":{"line":3545,"column":20}},"id":2395},"2396":{"loc":{"start":{"line":3547,"column":12},"end":{"line":3547,"column":22}},"id":2396},"2397":{"loc":{"start":{"line":3547,"column":12},"end":{"line":3547,"column":21}},"id":2397},"2398":{"loc":{"start":{"line":3548,"column":12},"end":{"line":3548,"column":23}},"id":2398},"2399":{"loc":{"start":{"line":3551,"column":8},"end":{"line":3551,"column":23}},"id":2399},"2400":{"loc":{"start":{"line":3555,"column":4},"end":{"line":3555,"column":34}},"id":2400},"2401":{"loc":{"start":{"line":3557,"column":4},"end":{"line":3557,"column":26}},"id":2401},"2402":{"loc":{"start":{"line":3560,"column":4},"end":{"line":3578,"column":9}},"id":2402},"2403":{"loc":{"start":{"line":3560,"column":21},"end":{"line":3578,"column":8}},"id":2403},"2404":{"loc":{"start":{"line":3561,"column":8},"end":{"line":3561,"column":29}},"id":2404},"2405":{"loc":{"start":{"line":3563,"column":12},"end":{"line":3563,"column":47}},"id":2405},"2406":{"loc":{"start":{"line":3564,"column":12},"end":{"line":3564,"column":40}},"id":2406},"2407":{"loc":{"start":{"line":3564,"column":20},"end":{"line":3564,"column":39}},"id":2407},"2408":{"loc":{"start":{"line":3568,"column":16},"end":{"line":3568,"column":43}},"id":2408},"2409":{"loc":{"start":{"line":3569,"column":16},"end":{"line":3569,"column":43}},"id":2409},"2410":{"loc":{"start":{"line":3573,"column":12},"end":{"line":3573,"column":47}},"id":2410},"2411":{"loc":{"start":{"line":3574,"column":12},"end":{"line":3574,"column":33}},"id":2411},"2412":{"loc":{"start":{"line":3574,"column":12},"end":{"line":3574,"column":32}},"id":2412},"2413":{"loc":{"start":{"line":3577,"column":8},"end":{"line":3577,"column":21}},"id":2413},"2414":{"loc":{"start":{"line":3580,"column":35},"end":{"line":3580,"column":49}},"id":2414},"2415":{"loc":{"start":{"line":3580,"column":52},"end":{"line":3580,"column":59}},"id":2415},"2416":{"loc":{"start":{"line":3580,"column":2},"end":{"line":3580,"column":32}},"id":2416}}}}}}