{"version":"0.2.0","files":{"/Users/voloko/code/esprima/test/test.js":{"nodes":{"0":{"index":0,"count":1},"1":{"index":1,"count":1},"2":{"index":2,"count":26790},"3":{"index":3,"count":26790},"4":{"index":4,"count":26790},"5":{"index":5,"count":311},"6":{"index":6,"count":8},"7":{"index":7,"count":8},"8":{"index":8,"count":26790},"9":{"index":9,"count":1},"10":{"index":10,"count":1},"11":{"index":11,"count":1},"17":{"index":17,"count":1},"18":{"index":18,"count":921},"19":{"index":19,"count":921},"20":{"index":20,"count":921},"21":{"index":21,"count":921},"22":{"index":22,"count":921},"26":{"index":26,"count":921},"27":{"index":27,"count":388},"28":{"index":28,"count":388},"29":{"index":29,"count":388},"30":{"index":30,"count":388},"31":{"index":31,"count":388},"32":{"index":32,"count":388},"33":{"index":33,"count":388},"34":{"index":34,"count":388},"35":{"index":35,"count":388},"36":{"index":36,"count":388},"37":{"index":37,"count":388},"38":{"index":38,"count":388},"39":{"index":39,"count":33},"40":{"index":40,"count":355},"41":{"index":41,"count":388},"42":{"index":42,"count":388},"43":{"index":43,"count":18},"44":{"index":44,"count":9},"45":{"index":45,"count":9},"46":{"index":46,"count":388},"47":{"index":47,"count":388},"48":{"index":48,"count":388},"49":{"index":49,"count":388},"52":{"index":52,"count":388},"54":{"index":54,"count":228},"55":{"index":55,"count":228},"56":{"index":56,"count":228},"57":{"index":57,"count":228},"58":{"index":58,"count":228},"59":{"index":59,"count":228},"60":{"index":60,"count":228},"61":{"index":61,"count":228},"62":{"index":62,"count":228},"63":{"index":63,"count":1140},"64":{"index":64,"count":912},"65":{"index":65,"count":912},"66":{"index":66,"count":912},"67":{"index":67,"count":912},"68":{"index":68,"count":912},"69":{"index":69,"count":912},"76":{"index":76,"count":9},"77":{"index":77,"count":9},"78":{"index":78,"count":9},"79":{"index":79,"count":9},"80":{"index":80,"count":9},"81":{"index":81,"count":1},"82":{"index":82,"count":8},"83":{"index":83,"count":8},"84":{"index":84,"count":9},"85":{"index":85,"count":9},"88":{"index":88,"count":9},"90":{"index":90,"count":625},"91":{"index":91,"count":625},"92":{"index":92,"count":228},"93":{"index":93,"count":228},"94":{"index":94,"count":397},"95":{"index":95,"count":9},"96":{"index":96,"count":9},"97":{"index":97,"count":388},"98":{"index":98,"count":388},"99":{"index":99,"count":1},"209":{"index":209,"count":1},"210":{"index":210,"count":1},"211":{"index":211,"count":1},"212":{"index":212,"count":1},"213":{"index":213,"count":1},"214":{"index":214,"count":1},"215":{"index":215,"count":1},"216":{"index":216,"count":44},"217":{"index":217,"count":44},"218":{"index":218,"count":44},"219":{"index":219,"count":625},"220":{"index":220,"count":625},"221":{"index":221,"count":625},"222":{"index":222,"count":625},"226":{"index":226,"count":1},"227":{"index":227,"count":1},"228":{"index":228,"count":1},"229":{"index":229,"count":1},"230":{"index":230,"count":1},"231":{"index":231,"count":1},"232":{"index":232,"count":1},"233":{"index":233,"count":1},"246":{"index":246,"count":1},"247":{"index":247,"count":1},"248":{"index":248,"count":1},"249":{"index":249,"count":1},"250":{"index":250,"count":1},"252":{"index":252,"count":1}},"blocks":{"0":{"index":0,"count":26790},"1":{"index":1,"count":8},"2":{"index":2,"count":1},"4":{"index":4,"count":921},"7":{"index":7,"count":388},"8":{"index":8,"count":388},"9":{"index":9,"count":9},"10":{"index":10,"count":9},"13":{"index":13,"count":228},"14":{"index":14,"count":228},"15":{"index":15,"count":228},"16":{"index":16,"count":912},"17":{"index":17,"count":912},"18":{"index":18,"count":912},"22":{"index":22,"count":9},"23":{"index":23,"count":9},"24":{"index":24,"count":1},"25":{"index":25,"count":8},"28":{"index":28,"count":625},"29":{"index":29,"count":228},"30":{"index":30,"count":9},"31":{"index":31,"count":388},"48":{"index":48,"count":1},"49":{"index":49,"count":1},"50":{"index":50,"count":44},"51":{"index":51,"count":625},"52":{"index":52,"count":625},"56":{"index":56,"count":1}},"hash":"ef9a7b8e9c6c4b6713495937d287a645","instrumentor":{"blockCounter":57,"nodeCounter":253,"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2011 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2011 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint browser:true node:true */\n/*global esprima:true */\n\nvar runTests, data;\n\ndata = {\n\n    'Primary Expression': {\n\n        'this\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'ThisExpression',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 0 }\n                }\n            }],\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 0 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'this',\n                range: [0, 4]\n            }]\n        },\n\n        'null\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: null,\n                    raw: 'null',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 0 }\n                }\n            }],\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 0 }\n            },\n            tokens: [{\n                type: 'Null',\n                value: 'null',\n                range: [0, 4]\n            }]\n        },\n\n        '\\n    42\\n\\n': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [5, 9],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 4, column: 0 }\n                }\n            }],\n            range: [5, 9],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 4, column: 0 }\n            },\n            tokens: [{\n                type: 'Numeric',\n                value: '42',\n                range: [5, 7]\n            }]\n        },\n\n        '(1 + 2 ) * 3': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [1, 2],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 2 }\n                        }\n                    },\n                    right: {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 3,\n                    raw: '3',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        }\n\n    },\n\n    'Array Initializer': {\n\n        'x = []': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'ArrayExpression',\n                        elements: [],\n                        range: [4, 6],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            },\n            tokens: [{\n                type: 'Identifier',\n                value: 'x',\n                range: [0, 1]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [2, 3]\n            }, {\n                type: 'Punctuator',\n                value: '[',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: ']',\n                range: [5, 6]\n            }]\n        },\n\n        'x = [ ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x = [ 42 ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [6, 8],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 8 }\n                        }\n                    }],\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'x = [ 42, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [6, 8],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 8 }\n                        }\n                    }],\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x = [ ,, 42 ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [\n                        null,\n                        null,\n                        {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [9, 11],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 11 }\n                            }\n                        }],\n                    range: [4, 13],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'x = [ 1, 2, 3, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = [ 1, 2,, 3, ]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 2,\n                        raw: '2',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    }, null, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [13, 14],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        '日本語 = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '日本語',\n                    range: [0, 3],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'T\\u203F = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u203F',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'T\\u200C = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u200C',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'T\\u200D = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'T\\u200D',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\u2163\\u2161 = []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '\\u2163\\u2161',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\u2163\\u2161\\u200A=\\u2009[]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: '\\u2163\\u2161',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x = #[]': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'ArrayExpression',\n                        elements: [],\n                        sealed: true,\n                        range: [4, 7],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    range: [0, 7],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            }],\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            },\n            tokens: [{\n                type: 'Identifier',\n                value: 'x',\n                range: [0, 1]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [2, 3]\n            }, {\n                type: 'Punctuator',\n                value: '#',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '[',\n                range: [5, 6]\n            }, {\n                type: 'Punctuator',\n                value: ']',\n                range: [6, 7]\n            }]\n        }\n\n    },\n\n    'Object Initializer': {\n\n        'x = {}': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x = { }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x = { answer: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'answer',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [14, 16],\n                            loc: {\n                                start: { line: 1, column: 14 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 16],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 16 }\n                        }\n                    }],\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'x = { if: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [6, 8],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 8 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 12],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 12 }\n                        }\n                    }],\n                    range: [4, 14],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'x = { true: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [12, 14],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = { false: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [6, 11],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 11 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [13, 15],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 15],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 15 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'x = { null: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [12, 14],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        'x = { \"answer\": 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'answer',\n                            raw: '\"answer\"',\n                            range: [6, 14],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [16, 18],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 18 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 18],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 18 }\n                        }\n                    }],\n                    range: [4, 20],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                range: [0, 20],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'x = { x: 1, x: 2 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [\n                        {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [6, 7],\n                                loc: {\n                                    start: { line: 1, column: 6 },\n                                    end: { line: 1, column: 7 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [9, 10],\n                                loc: {\n                                    start: { line: 1, column: 9 },\n                                    end: { line: 1, column: 10 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [6, 10],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [12, 13],\n                                loc: {\n                                    start: { line: 1, column: 12 },\n                                    end: { line: 1, column: 13 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 2,\n                                raw: '2',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [12, 16],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 16 }\n                            }\n                        }\n                    ],\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'x = { get width() { return m_width } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'width',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ReturnStatement',\n                                    argument: {\n                                        type: 'Identifier',\n                                        name: 'm_width',\n                                        range: [27, 34],\n                                        loc: {\n                                            start: { line: 1, column: 27 },\n                                            end: { line: 1, column: 34 }\n                                        }\n                                    },\n                                    range: [20, 35],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 35 }\n                                    }\n                                }],\n                                range: [18, 36],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 36 }\n                                }\n                            },\n                            range: [18, 36],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 36],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 36 }\n                        }\n                    }],\n                    range: [4, 38],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [0, 38],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 38 }\n                }\n            },\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'x = { get undef() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'undef',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [18, 20],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            },\n                            range: [18, 20],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 20],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 20 }\n                        }\n                    }],\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'x = { get if() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [15, 17],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            range: [15, 17],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 17],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { get true() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [17, 19],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            range: [17, 19],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 19],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }],\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'x = { get false() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [18, 20],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            },\n                            range: [18, 20],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 20],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 20 }\n                        }\n                    }],\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'x = { get null() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [17, 19],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            range: [17, 19],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 19],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }],\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'x = { get \"undef\"() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'undef',\n                            raw: '\"undef\"',\n                            range: [10, 17],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [20, 22],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 22 }\n                                }\n                            },\n                            range: [20, 22],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 22 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 22],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 22 }\n                        }\n                    }],\n                    range: [4, 24],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 24],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'x = { get 10() {} }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 10,\n                            raw: '10',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [15, 17],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            range: [15, 17],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 17],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { set width(w) { m_width = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'width',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_width',\n                                            range: [21, 28],\n                                            loc: {\n                                                start: { line: 1, column: 21 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [21, 32],\n                                        loc: {\n                                            start: { line: 1, column: 21 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [21, 33],\n                                    loc: {\n                                        start: { line: 1, column: 21 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [19, 34],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [19, 34],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set if(w) { m_if = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'if',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [13, 14],\n                                loc: {\n                                    start: { line: 1, column: 13 },\n                                    end: { line: 1, column: 14 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_if',\n                                            range: [18, 22],\n                                            loc: {\n                                                start: { line: 1, column: 18 },\n                                                end: { line: 1, column: 22 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [25, 26],\n                                            loc: {\n                                                start: { line: 1, column: 25 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        range: [18, 26],\n                                        loc: {\n                                            start: { line: 1, column: 18 },\n                                            end: { line: 1, column: 26 }\n                                        }\n                                    },\n                                    range: [18, 27],\n                                    loc: {\n                                        start: { line: 1, column: 18 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                }],\n                                range: [16, 28],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            },\n                            range: [16, 28],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 28 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 28],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 28 }\n                        }\n                    }],\n                    range: [4, 30],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [0, 30],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'x = { set true(w) { m_true = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'true',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_true',\n                                            range: [20, 26],\n                                            loc: {\n                                                start: { line: 1, column: 20 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [29, 30],\n                                            loc: {\n                                                start: { line: 1, column: 29 },\n                                                end: { line: 1, column: 30 }\n                                            }\n                                        },\n                                        range: [20, 30],\n                                        loc: {\n                                            start: { line: 1, column: 20 },\n                                            end: { line: 1, column: 30 }\n                                        }\n                                    },\n                                    range: [20, 31],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 31 }\n                                    }\n                                }],\n                                range: [18, 32],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 32 }\n                                }\n                            },\n                            range: [18, 32],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 32 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 32],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 32 }\n                        }\n                    }],\n                    range: [4, 34],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [0, 34],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'x = { set false(w) { m_false = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'false',\n                            range: [10, 15],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_false',\n                                            range: [21, 28],\n                                            loc: {\n                                                start: { line: 1, column: 21 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [21, 32],\n                                        loc: {\n                                            start: { line: 1, column: 21 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [21, 33],\n                                    loc: {\n                                        start: { line: 1, column: 21 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [19, 34],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [19, 34],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set null(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [10, 14],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [15, 16],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 16 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [20, 26],\n                                            loc: {\n                                                start: { line: 1, column: 20 },\n                                                end: { line: 1, column: 26 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [29, 30],\n                                            loc: {\n                                                start: { line: 1, column: 29 },\n                                                end: { line: 1, column: 30 }\n                                            }\n                                        },\n                                        range: [20, 30],\n                                        loc: {\n                                            start: { line: 1, column: 20 },\n                                            end: { line: 1, column: 30 }\n                                        }\n                                    },\n                                    range: [20, 31],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 31 }\n                                    }\n                                }],\n                                range: [18, 32],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 32 }\n                                }\n                            },\n                            range: [18, 32],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 32 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 32],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 32 }\n                        }\n                    }],\n                    range: [4, 34],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [0, 34],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'x = { set \"null\"(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'null',\n                            raw: '\"null\"',\n                            range: [10, 16],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [17, 18],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 18 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [22, 28],\n                                            loc: {\n                                                start: { line: 1, column: 22 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [31, 32],\n                                            loc: {\n                                                start: { line: 1, column: 31 },\n                                                end: { line: 1, column: 32 }\n                                            }\n                                        },\n                                        range: [22, 32],\n                                        loc: {\n                                            start: { line: 1, column: 22 },\n                                            end: { line: 1, column: 32 }\n                                        }\n                                    },\n                                    range: [22, 33],\n                                    loc: {\n                                        start: { line: 1, column: 22 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                }],\n                                range: [20, 34],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [20, 34],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 34],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [4, 36],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'x = { set 10(w) { m_null = w } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 10,\n                            raw: '10',\n                            range: [10, 12],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'w',\n                                range: [13, 14],\n                                loc: {\n                                    start: { line: 1, column: 13 },\n                                    end: { line: 1, column: 14 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [{\n                                    type: 'ExpressionStatement',\n                                    expression: {\n                                        type: 'AssignmentExpression',\n                                        operator: '=',\n                                        left: {\n                                            type: 'Identifier',\n                                            name: 'm_null',\n                                            range: [18, 24],\n                                            loc: {\n                                                start: { line: 1, column: 18 },\n                                                end: { line: 1, column: 24 }\n                                            }\n                                        },\n                                        right: {\n                                            type: 'Identifier',\n                                            name: 'w',\n                                            range: [27, 28],\n                                            loc: {\n                                                start: { line: 1, column: 27 },\n                                                end: { line: 1, column: 28 }\n                                            }\n                                        },\n                                        range: [18, 28],\n                                        loc: {\n                                            start: { line: 1, column: 18 },\n                                            end: { line: 1, column: 28 }\n                                        }\n                                    },\n                                    range: [18, 29],\n                                    loc: {\n                                        start: { line: 1, column: 18 },\n                                        end: { line: 1, column: 29 }\n                                    }\n                                }],\n                                range: [16, 30],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 30 }\n                                }\n                            },\n                            range: [16, 30],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 30 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 30],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 30 }\n                        }\n                    }],\n                    range: [4, 32],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 32 }\n                    }\n                },\n                range: [0, 32],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 32 }\n                }\n            },\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 32 }\n            }\n        },\n\n        'x = { get: 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'get',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 42,\n                            raw: '42',\n                            range: [11, 13],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 13 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 13],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 15],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 15 }\n                    }\n                },\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        'x = { set: 43 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'set',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 43,\n                            raw: '43',\n                            range: [11, 13],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 13 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [6, 13],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 13 }\n                        }\n                    }],\n                    range: [4, 15],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 15 }\n                    }\n                },\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        'x = { y, z }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [6, 7],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 7 }\n                            }\n                        },\n                        value: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [6, 7],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 7 }\n                            }\n                        },\n                        kind: 'init',\n                        shorthand: true,\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'z',\n                            range: [9, 10],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        value: {\n                            type: 'Identifier',\n                            name: 'z',\n                            range: [9, 10],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        kind: 'init',\n                        shorthand: true,\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    }],\n                    range: [4, 12],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        'x = { 2, \"chance\" }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 2,\n                            raw: '2',\n                            range: [6, 7],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 7 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 2,\n                            raw: '2',\n                            range: [6, 7],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 7 }\n                            }\n                        },\n                        kind: 'init',\n                        shorthand: true,\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    }, {\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'chance',\n                            raw: '\"chance\"',\n                            range: [9, 17],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        value: {\n                            type: 'Literal',\n                            value: 'chance',\n                            raw: '\"chance\"',\n                            range: [9, 17],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'init',\n                        shorthand: true,\n                        range: [9, 17],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { method() { } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'method',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [15, 18],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 18 }\n                                }\n                            },\n                            range: [15, 18],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 18 }\n                            }\n                        },\n                        kind: 'init',\n                        method: true,\n                        range: [6, 18],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 18 }\n                        }\n                    }],\n                    range: [4, 20],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                range: [0, 20],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'x = { method(test) { } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'method',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'test',\n                                range: [13, 17],\n                                loc: {\n                                    start: { line: 1, column: 13 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            }],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [19, 22],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 22 }\n                                }\n                            },\n                            range: [19, 22],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 22 }\n                            }\n                        },\n                        kind: 'init',\n                        method: true,\n                        range: [6, 22],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 22 }\n                        }\n                    }],\n                    range: [4, 24],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 24],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'x = { \\'method\\'() { } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Literal',\n                            value: 'method',\n                            raw: '\\'method\\'',\n                            range: [6, 14],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [17, 20],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            },\n                            range: [17, 20],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        kind: 'init',\n                        method: true,\n                        range: [6, 20],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 20 }\n                        }\n                    }],\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'x = { get() { } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'get',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [12, 15],\n                                loc: {\n                                    start: { line: 1, column: 12 },\n                                    end: { line: 1, column: 15 }\n                                }\n                            },\n                            range: [12, 15],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        kind: 'init',\n                        method: true,\n                        range: [6, 15],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 15 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'x = { set() { } }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'set',\n                            range: [6, 9],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 9 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'BlockStatement',\n                                body: [],\n                                range: [12, 15],\n                                loc: {\n                                    start: { line: 1, column: 12 },\n                                    end: { line: 1, column: 15 }\n                                }\n                            },\n                            range: [12, 15],\n                            loc: {\n                                start: { line: 1, column: 12 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        kind: 'init',\n                        method: true,\n                        range: [6, 15],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 15 }\n                        }\n                    }],\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'x = { method() 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'method',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'Literal',\n                                value: 42,\n                                raw: '42',\n                                range: [15, 17],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            range: [15, 17],\n                            loc: {\n                                start: { line: 1, column: 15 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        kind: 'init',\n                        method: true,\n                        range: [6, 17],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [4, 19],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'x = { get method() 42 }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'method',\n                            range: [10, 16],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [],\n                            body: {\n                                type: 'Literal',\n                                value: 42,\n                                raw: '42',\n                                range: [19, 21],\n                                loc: {\n                                    start: { line: 1, column: 19 },\n                                    end: { line: 1, column: 21 }\n                                }\n                            },\n                            range: [19, 21],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 21 }\n                            }\n                        },\n                        kind: 'get',\n                        range: [6, 21],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 21 }\n                        }\n                    }],\n                    range: [4, 23],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 23 }\n                    }\n                },\n                range: [0, 23],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'x = { set method(val) v = val }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'method',\n                            range: [10, 16],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        value: {\n                            type: 'FunctionExpression',\n                            id: null,\n                            params: [{\n                                type: 'Identifier',\n                                name: 'val',\n                                range: [17, 20],\n                                loc: {\n                                    start: { line: 1, column: 17 },\n                                    end: { line: 1, column: 20 }\n                                }\n                            }],\n                            body: {\n                                type: 'AssignmentExpression',\n                                operator: '=',\n                                left: {\n                                    type: 'Identifier',\n                                    name: 'v',\n                                    range: [22, 23],\n                                    loc: {\n                                        start: { line: 1, column: 22 },\n                                        end: { line: 1, column: 23 }\n                                    }\n                                },\n                                right: {\n                                    type: 'Identifier',\n                                    name: 'val',\n                                    range: [26, 29],\n                                    loc: {\n                                        start: { line: 1, column: 26 },\n                                        end: { line: 1, column: 29 }\n                                    }\n                                },\n                                range: [22, 29],\n                                loc: {\n                                    start: { line: 1, column: 22 },\n                                    end: { line: 1, column: 29 }\n                                }\n                            },\n                            range: [22, 29],\n                            loc: {\n                                start: { line: 1, column: 22 },\n                                end: { line: 1, column: 29 }\n                            }\n                        },\n                        kind: 'set',\n                        range: [6, 29],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [4, 31],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 31 }\n                    }\n                },\n                range: [0, 31],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'x = #{}': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    sealed: true,\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n\n    },\n\n    'Comments': {\n\n        '/* block comment */ 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [20, 22],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [20, 22],\n            loc: {\n                start: { line: 1, column: 20 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '42 /*The*/ /*Answer*/': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            },\n            comments: [{\n                range: [3, 10],\n                type: 'Block',\n                value: 'The'\n            }, {\n                range: [11, 21],\n                type: 'Block',\n                value: 'Answer'\n            }]\n        },\n\n        '/* multiline\\ncomment\\nshould\\nbe\\nignored */ 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [42, 44],\n                loc: {\n                    start: { line: 5, column: 11 },\n                    end: { line: 5, column: 13 }\n                }\n            },\n            range: [42, 44],\n            loc: {\n                start: { line: 5, column: 11 },\n                end: { line: 5, column: 13 }\n            }\n        },\n\n        '/*a\\r\\nb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [9, 11],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [9, 11],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [9, 11],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 8],\n                type: 'Block',\n                value: 'a\\r\\nb'\n            }]\n        },\n\n        '/*a\\rb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [8, 10],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [8, 10],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 7],\n                type: 'Block',\n                value: 'a\\rb'\n            }]\n        },\n\n        '/*a\\nb*/ 42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 2, column: 4 },\n                        end: { line: 2, column: 6 }\n                    }\n                },\n                range: [8, 10],\n                loc: {\n                    start: { line: 2, column: 4 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [8, 10],\n            loc: {\n                start: { line: 2, column: 4 },\n                end: { line: 2, column: 6 }\n            },\n            comments: [{\n                range: [0, 7],\n                type: 'Block',\n                value: 'a\\nb'\n            }]\n        },\n\n        '// line comment\\n42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [16, 18],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            },\n            range: [16, 18],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            }\n        },\n\n        '42 // line comment': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [0, 2],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            comments: [{\n                range: [3, 18],\n                type: 'Line',\n                value: ' line comment'\n            }]\n        },\n\n        '// Hello, world!\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [17, 19],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 2 }\n                    }\n                },\n                range: [17, 19],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [17, 19],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            },\n            comments: [{\n                range: [0, 17],\n                type: 'Line',\n                value: ' Hello, world!'\n            }]\n        },\n\n        '//\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [3, 5],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 2 }\n                    }\n                },\n                range: [3, 5],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [3, 5],\n            loc: {\n                start: { line: 2, column: 0 },\n                end: { line: 2, column: 2 }\n            },\n            comments: [{\n                range: [0, 3],\n                type: 'Line',\n                value: ''\n            }]\n        },\n\n        '/**/42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [4, 6],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [4, 6],\n            loc: {\n                start: { line: 1, column: 4 },\n                end: { line: 1, column: 6 }\n            },\n            comments: [{\n                range: [0, 4],\n                type: 'Block',\n                value: ''\n            }]\n        },\n\n        '// Hello, world!\\n\\n//   Another hello\\n42': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [37, 39],\n                    loc: {\n                        start: { line: 4, column: 0 },\n                        end: { line: 4, column: 2 }\n                    }\n                },\n                range: [37, 39],\n                loc: {\n                    start: { line: 4, column: 0 },\n                    end: { line: 4, column: 2 }\n                }\n            }],\n            range: [37, 39],\n            loc: {\n                start: { line: 4, column: 0 },\n                end: { line: 4, column: 2 }\n            },\n            comments: [{\n                range: [0, 17],\n                type: 'Line',\n                value: ' Hello, world!'\n            }, {\n                range: [18, 37],\n                type: 'Line',\n                value: '   Another hello'\n            }]\n        },\n\n        'if (x) { // Some comment\\ndoThat(); }': {\n            type: 'Program',\n            body: [{\n                type: 'IfStatement',\n                test: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                consequent: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'doThat',\n                                range: [25, 31],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 6 }\n                                }\n                            },\n                            'arguments': [],\n                            range: [25, 33],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 8 }\n                            }\n                        },\n                        range: [25, 34],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 9 }\n                        }\n                    }],\n                    range: [7, 36],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 2, column: 11 }\n                    }\n                },\n                alternate: null,\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 11 }\n                }\n            }],\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 11 }\n            },\n            comments: [{\n                range: [9, 25],\n                type: 'Line',\n                value: ' Some comment'\n            }]\n        },\n\n        'switch (answer) { case 42: /* perfect */ bingo() }': {\n            type: 'Program',\n            body: [{\n                type: 'SwitchStatement',\n                discriminant: {\n                    type: 'Identifier',\n                    name: 'answer',\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                cases: [{\n                    type: 'SwitchCase',\n                    test: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [23, 25],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    consequent: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'bingo',\n                                range: [41, 46],\n                                loc: {\n                                    start: { line: 1, column: 41 },\n                                    end: { line: 1, column: 46 }\n                                }\n                            },\n                            'arguments': [],\n                            range: [41, 48],\n                            loc: {\n                                start: { line: 1, column: 41 },\n                                end: { line: 1, column: 48 }\n                            }\n                        },\n                        range: [41, 49],\n                        loc: {\n                            start: { line: 1, column: 41 },\n                            end: { line: 1, column: 49 }\n                        }\n                    }],\n                    range: [18, 49],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 49 }\n                    }\n                }],\n                range: [0, 50],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 50 }\n                }\n            }],\n            range: [0, 50],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 50 }\n            },\n            comments: [{\n                range: [27, 40],\n                type: 'Block',\n                value: ' perfect '\n            }]\n        }\n\n    },\n\n    'Numeric Literals': {\n\n        '0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0',\n                range: [0, 1],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 1 }\n                }\n            },\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        },\n\n        '42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 42,\n                raw: '42',\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '.14': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0.14,\n                raw: '.14',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '3.14159': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 3.14159,\n                raw: '3.14159',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '6.02214179e+23': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 6.02214179e+23,\n                raw: '6.02214179e+23',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '1.492417830e-10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 1.49241783e-10,\n                raw: '1.492417830e-10',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        '0x0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0x0',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0e+100': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0e+100',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '0xabc': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0xabc,\n                raw: '0xabc',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0xdef': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0xdef,\n                raw: '0xdef',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0X1A': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x1A,\n                raw: '0X1A',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0x10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x10,\n                raw: '0x10',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0x100': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0x100,\n                raw: '0x100',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '0X04': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0X04,\n                raw: '0X04',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '02': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 2,\n                raw: '02',\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '012': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '012',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0012': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '0012',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '00': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '00',\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '0o0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0o0',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'function test() {\\'use strict\\'; 0o0; }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'test',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 'use strict',\n                        raw: '\\'use strict\\'',\n                        range: [17, 29],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [17, 30],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 30 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0o0',\n                        range: [31, 34],\n                        loc: {\n                            start: { line: 1, column: 31 },\n                            end: { line: 1, column: 34 }\n                        }\n                    },\n                    range: [31, 35],\n                    loc: {\n                        start: { line: 1, column: 31 },\n                        end: { line: 1, column: 35 }\n                    }\n                }],\n                range: [16, 37],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 37 }\n                }\n            },\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            }\n        },\n\n        '0o2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 2,\n                raw: '0o2',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0o12': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '0o12',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0O0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0O0',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'function test() {\\'use strict\\'; 0O0; }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'test',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 'use strict',\n                        raw: '\\'use strict\\'',\n                        range: [17, 29],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [17, 30],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 30 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0O0',\n                        range: [31, 34],\n                        loc: {\n                            start: { line: 1, column: 31 },\n                            end: { line: 1, column: 34 }\n                        }\n                    },\n                    range: [31, 35],\n                    loc: {\n                        start: { line: 1, column: 31 },\n                        end: { line: 1, column: 35 }\n                    }\n                }],\n                range: [16, 37],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 37 }\n                }\n            },\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            }\n        },\n\n        '0O2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 2,\n                raw: '0O2',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0O12': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 10,\n                raw: '0O12',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0b0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0b0',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0b1': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 1,\n                raw: '0b1',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0b10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 2,\n                raw: '0b10',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '0B0': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 0,\n                raw: '0B0',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0B1': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 1,\n                raw: '0B1',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '0B10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 2,\n                raw: '0B10',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        }\n\n    },\n\n    'String Literals': {\n\n        '\"Hello\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello',\n                raw: '\"Hello\"',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\"\\\\n\\\\r\\\\t\\\\v\\\\b\\\\f\\\\\\\\\\\\\\'\\\\\"\\\\0\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: '\\n\\r\\t\\v\\b\\f\\\\\\'\"\\x00',\n                raw: '\"\\\\n\\\\r\\\\t\\\\v\\\\b\\\\f\\\\\\\\\\\\\\'\\\\\"\\\\0\"',\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '\"\\\\u0061\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'a',\n                raw: '\"\\\\u0061\"',\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        '\"\\\\x61\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'a',\n                raw: '\"\\\\x61\"',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '\"\\\\u00\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'u00',\n                raw: '\"\\\\u00\"',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '\"\\\\xt\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'xt',\n                raw: '\"\\\\xt\"',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '\"Hello\\\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\nworld',\n                raw: '\"Hello\\\\nworld\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Helloworld',\n                raw: '\"Hello\\\\\\nworld\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\02World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0002World',\n                raw: '\"Hello\\\\02World\"',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        '\"Hello\\\\012World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u000AWorld',\n                raw: '\"Hello\\\\012World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\122World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\122World',\n                raw: '\"Hello\\\\122World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\0122World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u000A2World',\n                raw: '\"Hello\\\\0122World\"',\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        '\"Hello\\\\312World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u00CAWorld',\n                raw: '\"Hello\\\\312World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\412World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\412World',\n                raw: '\"Hello\\\\412World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\812World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello812World',\n                raw: '\"Hello\\\\812World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\712World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\712World',\n                raw: '\"Hello\\\\712World\"',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '\"Hello\\\\0World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0000World',\n                raw: '\"Hello\\\\0World\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '\"Hello\\\\\\r\\nworld\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Helloworld',\n                raw: '\"Hello\\\\\\r\\nworld\"',\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 15 }\n            }\n        },\n\n        '\"Hello\\\\1World\"': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Literal',\n                value: 'Hello\\u0001World',\n                raw: '\"Hello\\\\1World\"',\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n    },\n\n    'Regular Expression Literals': {\n\n        'var x = /[a-z]/i': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[a-z]/i',\n                        raw: '/[a-z]/i',\n                        range: [8, 16],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 16 }\n                        }\n                    },\n                    range: [4, 16],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 16 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 16],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 16 }\n                }\n            }],\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[a-z]/i',\n                range: [8, 16]\n            }]\n        },\n\n        'var x = /[P QR]/i': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/i',\n                        raw: '/[P QR]/i',\n                        range: [8, 17],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    range: [4, 17],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 17 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            }],\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/i',\n                range: [8, 17]\n            }]\n        },\n\n        'var x = /foo\\\\/bar/': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/foo\\\\/bar/',\n                        raw: '/foo\\\\/bar/',\n                        range: [8, 18],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/foo\\\\/bar/',\n                range: [8, 18]\n            }]\n        },\n\n        'var x = /=([^=\\\\s])+/g': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/=([^=\\\\s])+/g',\n                        raw: '/=([^=\\\\s])+/g',\n                        range: [8, 21],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    range: [4, 21],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 21 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/=([^=\\\\s])+/g',\n                range: [8, 21]\n            }]\n        },\n\n        'var x = /[P QR]/\\\\u0067': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/g',\n                        raw: '/[P QR]/\\\\u0067',\n                        range: [8, 22],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [4, 22],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/\\\\u0067',\n                range: [8, 22]\n            }]\n        },\n\n        'var x = /[P QR]/\\\\g': {\n            type: 'Program',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: '/[P QR]/g',\n                        raw: '/[P QR]/\\\\g',\n                        range: [8, 18],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [4, 18],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 18 }\n                    }\n                }],\n                kind: 'var',\n                range: [0, 18],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            },\n            tokens: [{\n                type: 'Keyword',\n                value: 'var',\n                range: [0, 3]\n            }, {\n                type: 'Identifier',\n                value: 'x',\n                range: [4, 5]\n            }, {\n                type: 'Punctuator',\n                value: '=',\n                range: [6, 7]\n            }, {\n                type: 'RegularExpression',\n                value: '/[P QR]/\\\\g',\n                range: [8, 18]\n            }]\n        }\n\n    },\n\n    'Left-Hand-Side Expression': {\n\n        'new Button': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'Button',\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'new Button()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'Button',\n                    range: [4, 10],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        'new new foo': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'NewExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'new new foo()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'NewExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [4, 13],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'new foo().bar()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'NewExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'foo',\n                            range: [4, 7],\n                            loc: {\n                                start: { line: 1, column: 4 },\n                                end: { line: 1, column: 7 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [0, 9],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [10, 13],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        'new foo[bar]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: true,\n                    object: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [4, 7],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [4, 12],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n\n        'new foo.bar()': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [4, 7],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [8, 11],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'foo(bar, baz)': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [0, 3],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                'arguments': [{\n                    type: 'Identifier',\n                    name: 'bar',\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 7 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'baz',\n                    range: [9, 12],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 12 }\n                    }\n                }],\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'universe.milkyway': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'milkyway',\n                    range: [9, 17],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [0, 17],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'universe.milkyway.solarsystem': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'milkyway',\n                        range: [9, 17],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    range: [0, 17],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'solarsystem',\n                    range: [18, 29],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [0, 29],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 29 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'universe.milkyway.solarsystem.Earth': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'Identifier',\n                            name: 'universe',\n                            range: [0, 8],\n                            loc: {\n                                start: { line: 1, column: 0 },\n                                end: { line: 1, column: 8 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'milkyway',\n                            range: [9, 17],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        range: [0, 17],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'solarsystem',\n                        range: [18, 29],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [0, 29],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'Earth',\n                    range: [30, 35],\n                    loc: {\n                        start: { line: 1, column: 30 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [0, 35],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 35 }\n                }\n            },\n            range: [0, 35],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 35 }\n            }\n        },\n\n        'universe[galaxyName, otherUselessName]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: true,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'SequenceExpression',\n                    expressions: [{\n                        type: 'Identifier',\n                        name: 'galaxyName',\n                        range: [9, 19],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 19 }\n                        }\n                    }, {\n                        type: 'Identifier',\n                        name: 'otherUselessName',\n                        range: [21, 37],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [9, 37],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [0, 38],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 38 }\n                }\n            },\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'universe[galaxyName]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: true,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxyName',\n                    range: [9, 19],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 20],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'universe[42].galaxies': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'MemberExpression',\n                    computed: true,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [9, 11],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxies',\n                    range: [13, 21],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'universe(42).galaxies': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [9, 11],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 11 }\n                        }\n                    }],\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'galaxies',\n                    range: [13, 21],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'universe(42).galaxies(14, 3, 77).milkyway': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'universe',\n                                range: [0, 8],\n                                loc: {\n                                    start: { line: 1, column: 0 },\n                                    end: { line: 1, column: 8 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Literal',\n                                value: 42,\n                                raw: '42',\n                                range: [9, 11],\n                                loc: {\n                                    start: { line: 1, column: 9 },\n                                    end: { line: 1, column: 11 }\n                                }\n                            }],\n                            range: [0, 12],\n                            loc: {\n                                start: { line: 1, column: 0 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'galaxies',\n                            range: [13, 21],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 21 }\n                            }\n                        },\n                        range: [0, 21],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [22, 24],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [26, 27],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 27 }\n                        }\n                    }, {\n                        type: 'Literal',\n                        value: 77,\n                        raw: '77',\n                        range: [29, 31],\n                        loc: {\n                            start: { line: 1, column: 29 },\n                            end: { line: 1, column: 31 }\n                        }\n                    }],\n                    range: [0, 32],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 32 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'milkyway',\n                    range: [33, 41],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 41 }\n                    }\n                },\n                range: [0, 41],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 41 }\n                }\n            },\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            }\n        },\n\n        'earth.asia.Indonesia.prepareForElection(2014)': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'MemberExpression',\n                            computed: false,\n                            object: {\n                                type: 'Identifier',\n                                name: 'earth',\n                                range: [0, 5],\n                                loc: {\n                                    start: { line: 1, column: 0 },\n                                    end: { line: 1, column: 5 }\n                                }\n                            },\n                            property: {\n                                type: 'Identifier',\n                                name: 'asia',\n                                range: [6, 10],\n                                loc: {\n                                    start: { line: 1, column: 6 },\n                                    end: { line: 1, column: 10 }\n                                }\n                            },\n                            range: [0, 10],\n                            loc: {\n                                start: { line: 1, column: 0 },\n                                end: { line: 1, column: 10 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'Indonesia',\n                            range: [11, 20],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        range: [0, 20],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'prepareForElection',\n                        range: [21, 39],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 39 }\n                        }\n                    },\n                    range: [0, 39],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 39 }\n                    }\n                },\n                'arguments': [{\n                    type: 'Literal',\n                    value: 2014,\n                    raw: '2014',\n                    range: [40, 44],\n                    loc: {\n                        start: { line: 1, column: 40 },\n                        end: { line: 1, column: 44 }\n                    }\n                }],\n                range: [0, 45],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 45 }\n                }\n            },\n            range: [0, 45],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 45 }\n            }\n        },\n\n        'universe.if': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'if',\n                    range: [9, 11],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'universe.true': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'true',\n                    range: [9, 13],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'universe.false': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'false',\n                    range: [9, 14],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'universe.null': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'MemberExpression',\n                computed: false,\n                object: {\n                    type: 'Identifier',\n                    name: 'universe',\n                    range: [0, 8],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                property: {\n                    type: 'Identifier',\n                    name: 'null',\n                    range: [9, 13],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'universe.null <| 10': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'Literal',\n                    value: 10,\n                    raw: '10',\n                    range: [17, 19],\n                    loc : {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'universe.null <| \\'string\\'': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'Literal',\n                    value: 'string',\n                    raw: '\\'string\\'',\n                    range: [17, 25],\n                    loc : {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'universe.null <| function Test() { }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'Test',\n                        range: [26, 30],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 30 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [33, 36],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 36 }\n                        }\n                    },\n                    range: [17, 36],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'new universe.null <| function Test() { }': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'NewExpression',\n                callee: {\n                    type: 'ProtoExpression',\n                    proto: {\n                        type: 'MemberExpression',\n                        computed: false,\n                        object: {\n                            type: 'Identifier',\n                            name: 'universe',\n                            range: [4, 12],\n                            loc: {\n                                start: { line: 1, column: 4 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        property: {\n                            type: 'Identifier',\n                            name: 'null',\n                            range: [13, 17],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 17 }\n                            }\n                        },\n                        range: [4, 17],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    literal: {\n                        type: 'FunctionExpression',\n                        id: {\n                            type: 'Identifier',\n                            name: 'Test',\n                            range: [30, 34],\n                            loc: {\n                                start: { line: 1, column: 30 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [],\n                            range: [37, 40],\n                            loc: {\n                                start: { line: 1, column: 37 },\n                                end: { line: 1, column: 40 }\n                            }\n                        },\n                        range: [21, 40],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 40 }\n                        }\n                    },\n                    range: [18, 40],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 40 }\n                    }\n                },\n                'arguments': [],\n                range: [0, 40],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 40 }\n                }\n            },\n            range: [0, 40],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 40 }\n            }\n        },\n\n\n        'universe.null <| /test/': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'Literal',\n                    value: '/test/',\n                    raw: '/test/',\n                    range: [17, 23],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 23 }\n                    }\n                },\n                range: [0, 23],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'universe.null <| /=test/': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'Literal',\n                    value: '/=test/',\n                    raw: '/=test/',\n                    range: [17, 24],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 24],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'universe.null <| true': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [17, 21],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 21],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 21 }\n                }\n            },\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'universe.null <| false': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'Literal',\n                    value: false,\n                    raw: 'false',\n                    range: [17, 22],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'universe.null <| []': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'ArrayExpression',\n                    elements: [],\n                    range: [17, 19],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'universe.null <| {}': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ProtoExpression',\n                proto: {\n                    type: 'MemberExpression',\n                    computed: false,\n                    object: {\n                        type: 'Identifier',\n                        name: 'universe',\n                        range: [0, 8],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    property: {\n                        type: 'Identifier',\n                        name: 'null',\n                        range: [9, 13],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                literal: {\n                    type: 'ObjectExpression',\n                    properties: [],\n                    range: [17, 19],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                range: [0, 19],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        }\n\n    },\n\n    'Postfix Expressions': {\n\n        'x++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                prefix: false,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'x--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                prefix: false,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'eval++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                prefix: false,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'eval--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                prefix: false,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'arguments++': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                prefix: false,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'arguments--': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                prefix: false,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        }\n\n    },\n\n    'Unary Operators': {\n\n        '++x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                prefix: true,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '--x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                prefix: true,\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        '++eval': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [2, 6],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                prefix: true,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '--eval': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [2, 6],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                prefix: true,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '++arguments': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [2, 11],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                prefix: true,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        '--arguments': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UpdateExpression',\n                operator: '--',\n                argument: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [2, 11],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                prefix: true,\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        '+x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '+',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '-x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '-',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '~x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '~',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        '!x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: '!',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [1, 2],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 2 }\n                    }\n                },\n                range: [0, 2],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 2 }\n                }\n            },\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        },\n\n        'void x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'void',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'delete x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'delete',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'typeof x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'UnaryExpression',\n                operator: 'typeof',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        }\n\n    },\n\n    'Multiplicative Operators': {\n\n        'x * y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x / y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '/',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x % y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '%',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Additive Operators': {\n\n        'x + y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x - y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Bitwise Shift Operator': {\n\n        'x << y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >> y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >>> y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>>>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        }\n\n    },\n\n    'Relational Operators': {\n\n        'x < y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x > y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x <= y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x >= y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x in y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'in',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x instanceof y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'instanceof',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [13, 14],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Equality Operators': {\n\n        'x == y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '==',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x != y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '!=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x === y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '===',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x !== y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '!==',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x is y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'is',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x isnt y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: 'isnt',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        }\n\n    },\n\n    'Binary Bitwise Operators': {\n\n        'x & y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '&',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x ^ y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '^',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'x | y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        }\n\n    },\n\n    'Binary Expressions': {\n\n        'x + y + z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y + z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '-',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y - z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y - z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '-',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x + y / z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '+',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '/',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x - y % z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '-',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '%',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y / z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '/',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x * y % z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '%',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '*',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x % y * z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '%',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x << y << z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '<<',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '<<',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x | y | z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '|',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x & y & z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '&',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x ^ y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '^',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x & y | z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x | y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '^',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '|',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    range: [0, 5],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x | y & z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'BinaryExpression',\n                operator: '|',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        }\n\n    },\n\n    'Binary Logical Operators': {\n\n        'x || y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x && y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '&&',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [5, 6],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'x || y || z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x && y && z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '&&',\n                left: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x || y && z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [10, 11],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 11 }\n                        }\n                    },\n                    range: [5, 11],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [0, 11],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'x || y ^ z': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'LogicalExpression',\n                operator: '||',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'BinaryExpression',\n                    operator: '^',\n                    left: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    range: [5, 10],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [0, 10],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        }\n\n    },\n\n    'Conditional Operator': {\n\n        'y ? 1 : 2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ConditionalExpression',\n                test: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                consequent: {\n                    type: 'Literal',\n                    value: 1,\n                    raw: '1',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                alternate: {\n                    type: 'Literal',\n                    value: 2,\n                    raw: '2',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x && y ? 1 : 2': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'ConditionalExpression',\n                test: {\n                    type: 'LogicalExpression',\n                    operator: '&&',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [0, 1],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 1 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                consequent: {\n                    type: 'Literal',\n                    value: 1,\n                    raw: '1',\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                alternate: {\n                    type: 'Literal',\n                    value: 2,\n                    raw: '2',\n                    range: [13, 14],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Assignment Operators': {\n\n        'x = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'eval = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [0, 4],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 4 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [7, 9],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'arguments = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [0, 9],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [12, 14],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        'x *= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '*=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x /= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '/=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x %= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '%=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x += 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '+=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x -= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '-=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x <<= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '<<=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'x >>= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '>>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [6, 8],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                range: [0, 8],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'x >>>= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '>>>=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [7, 9],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [0, 9],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'x &= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '&=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x ^= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '^=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        'x |= 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '|=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [5, 7],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '1 = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Literal',\n                    value: 1,\n                    raw: '1',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        '(1 + 1) = 42': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'BinaryExpression',\n                    operator: '+',\n                    left: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [1, 2],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 2 }\n                        }\n                    },\n                    right: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [5, 6],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 6 }\n                        }\n                    },\n                    range: [0, 7],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [10, 12],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 12],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 12 }\n                }\n            },\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        '[a, b] = [b, a]': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'ArrayPattern',\n                    elements: [{\n                        type: 'Identifier',\n                        name: 'a',\n                        range: [1, 2],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 2 }\n                        }\n                    }, {\n                        type: 'Identifier',\n                        name: 'b',\n                        range: [4, 5],\n                        loc: {\n                            start: { line: 1, column: 4 },\n                            end: { line: 1, column: 5 }\n                        }\n                    }],\n                    range: [0, 6],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                right: {\n                    type: 'ArrayExpression',\n                    elements: [{\n                        type: 'Identifier',\n                        name: 'b',\n                        range: [10, 11],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 11 }\n                        }\n                    }, {\n                        type: 'Identifier',\n                        name: 'a',\n                        range: [13, 14],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 14 }\n                        }\n                    }],\n                    range: [9, 15],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 15 }\n                    }\n                },\n                range: [0, 15],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            range: [0, 15],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 15 }\n            }\n        },\n\n        '({ responseText: text }) = res': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'ObjectPattern',\n                    properties: [{\n                        type: 'Property',\n                        key: {\n                            type: 'Identifier',\n                            name: 'responseText',\n                            range: [3, 15],\n                            loc: {\n                                start: { line: 1, column: 3 },\n                                end: { line: 1, column: 15 }\n                            }\n                        },\n                        value: {\n                            type: 'Identifier',\n                            name: 'text',\n                            range: [17, 21],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 21 }\n                            }\n                        },\n                        kind: 'init',\n                        range: [3, 21],\n                        loc: {\n                            start: { line: 1, column: 3 },\n                            end: { line: 1, column: 21 }\n                        }\n                    }],\n                    range: [0, 24],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'res',\n                    range: [27, 30],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [0, 30],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        }\n\n    },\n\n    'Block': {\n\n        '{ foo }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [2, 5],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                range: [2, 6],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '{ doThis(); doThat(); }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doThis',\n                        range: [2, 8],\n                        loc: {\n                            start: { line: 1, column: 2 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [2, 10],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [2, 11],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 11 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doThat',\n                        range: [12, 18],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [12, 20],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                range: [12, 21],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '{}': {\n            type: 'BlockStatement',\n            body: [],\n            range: [0, 2],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 2 }\n            }\n        }\n\n    },\n\n    'Variable Statement': {\n\n        'var x': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        'var x, y;': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                init: null,\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'var x = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [4, 10],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 10 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 10],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 10 }\n            }\n        },\n\n        'var eval = 42, arguments = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [4, 8],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [15, 24],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [27, 29],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [15, 29],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'var x = 14, y = 3, z = 1977': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 14,\n                    raw: '14',\n                    range: [8, 10],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 10 }\n                    }\n                },\n                range: [4, 10],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 10 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [12, 13],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 3,\n                    raw: '3',\n                    range: [16, 17],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [12, 17],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 17 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 1977,\n                    raw: '1977',\n                    range: [23, 27],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [19, 27],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 27 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'var implements, interface, package': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'implements',\n                    range: [4, 14],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                init: null,\n                range: [4, 14],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 14 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'interface',\n                    range: [16, 25],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                init: null,\n                range: [16, 25],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 25 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'package',\n                    range: [27, 34],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                init: null,\n                range: [27, 34],\n                loc: {\n                    start: { line: 1, column: 27 },\n                    end: { line: 1, column: 34 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'var private, protected, public, static': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'private',\n                    range: [4, 11],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                init: null,\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'protected',\n                    range: [13, 22],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                init: null,\n                range: [13, 22],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 22 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'public',\n                    range: [24, 30],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                init: null,\n                range: [24, 30],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 30 }\n                }\n            }, {\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'static',\n                    range: [32, 38],\n                    loc: {\n                        start: { line: 1, column: 32 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                init: null,\n                range: [32, 38],\n                loc: {\n                    start: { line: 1, column: 32 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        }\n\n    },\n\n    'Let Statement': {\n\n        'let x': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'let',\n            range: [0, 5],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 5 }\n            }\n        },\n\n        '{ let x }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: null,\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 8],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        '{ let x = 42 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 13],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 13 }\n                }\n            }],\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        },\n\n        '{ let x = 14, y = 3, z = 1977 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [14, 15],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [18, 19],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 19 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1977,\n                        raw: '1977',\n                        range: [25, 29],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 29 }\n                        }\n                    },\n                    range: [21, 29],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 29 }\n                    }\n                }],\n                kind: 'let',\n                range: [2, 30],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 30 }\n                }\n            }],\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        }\n\n    },\n\n    'Const Statement': {\n\n        'const x = 42': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                init: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [10, 12],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [6, 12],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 12 }\n                }\n            }],\n            kind: 'const',\n            range: [0, 12],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 12 }\n            }\n        },\n\n        '{ const x = 42 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [12, 14],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                }],\n                kind: 'const',\n                range: [2, 15],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 15 }\n                }\n            }],\n            range: [0, 16],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 16 }\n            }\n        },\n\n        '{ const x = 14, y = 3, z = 1977 }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [12, 14],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [8, 14],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 14 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [16, 17],\n                        loc: {\n                            start: { line: 1, column: 16 },\n                            end: { line: 1, column: 17 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [20, 21],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    range: [16, 21],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'z',\n                        range: [23, 24],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1977,\n                        raw: '1977',\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [23, 31],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 31 }\n                    }\n                }],\n                kind: 'const',\n                range: [2, 32],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 32 }\n                }\n            }],\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        }\n\n    },\n\n    'Empty Statement': {\n\n        ';': {\n            type: 'EmptyStatement',\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        }\n\n    },\n\n    'Expression Statement': {\n\n        'x': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'x',\n                range: [0, 1],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 1 }\n                }\n            },\n            range: [0, 1],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 1 }\n            }\n        },\n\n        'x, y': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'SequenceExpression',\n                expressions: [{\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [0, 1],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 1 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [3, 4],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 4 }\n                    }\n                }],\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            range: [0, 4],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 4 }\n            }\n        },\n\n        '\\\\u0061': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'a',\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            },\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            }\n        },\n\n        'a\\\\u0061': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'aa',\n                range: [0, 7],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 7],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 7 }\n            }\n        },\n\n        '\\\\ua': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'ua',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        },\n\n        'a\\\\u': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'Identifier',\n                name: 'au',\n                range: [0, 3],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 3 }\n                }\n            },\n            range: [0, 3],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 3 }\n            }\n        }\n\n    },\n\n    'If Statement': {\n\n        'if (morning) goodMorning()': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodMorning',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            alternate: null,\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'if (morning) (function(){})': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'FunctionExpression',\n                    id: null,\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [24, 26],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 26 }\n                        }\n                    },\n                    range: [13, 27],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: null,\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'if (morning) var x = 0;': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [17, 18],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [17, 22],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [13, 23],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            alternate: null,\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'if (morning) function a(){}': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'FunctionDeclaration',\n                id: {\n                    type: 'Identifier',\n                    name: 'a',\n                    range: [22, 23],\n                    loc: {\n                        start: { line: 1, column: 22 },\n                        end: { line: 1, column: 23 }\n                    }\n                },\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [25, 27],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: null,\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'if (morning) goodMorning(); else goodDay()': {\n            type: 'IfStatement',\n            test: {\n                type: 'Identifier',\n                name: 'morning',\n                range: [4, 11],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodMorning',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 27],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            alternate: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'goodDay',\n                        range: [33, 40],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 40 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [33, 42],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 42 }\n                    }\n                },\n                range: [33, 42],\n                loc: {\n                    start: { line: 1, column: 33 },\n                    end: { line: 1, column: 42 }\n                }\n            },\n            range: [0, 42],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 42 }\n            }\n        }\n\n    },\n\n    'Iteration Statements': {\n\n        'do keep(); while (true)': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'keep',\n                        range: [3, 7],\n                        loc: {\n                            start: { line: 1, column: 3 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [3, 9],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [3, 10],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [18, 22],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'do keep(); while (true);': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'keep',\n                        range: [3, 7],\n                        loc: {\n                            start: { line: 1, column: 3 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [3, 9],\n                    loc: {\n                        start: { line: 1, column: 3 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [3, 10],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [18, 22],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'do { x++; y--; } while (x < 10)': {\n            type: 'DoWhileStatement',\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '++',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'x',\n                            range: [5, 6],\n                            loc: {\n                                start: { line: 1, column: 5 },\n                                end: { line: 1, column: 6 }\n                            }\n                        },\n                        prefix: false,\n                        range: [5, 8],\n                        loc: {\n                            start: { line: 1, column: 5 },\n                            end: { line: 1, column: 8 }\n                        }\n                    },\n                    range: [5, 9],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 9 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '--',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [10, 11],\n                            loc: {\n                                start: { line: 1, column: 10 },\n                                end: { line: 1, column: 11 }\n                            }\n                        },\n                        prefix: false,\n                        range: [10, 13],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [10, 14],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 14 }\n                    }\n                }],\n                range: [3, 16],\n                loc: {\n                    start: { line: 1, column: 3 },\n                    end: { line: 1, column: 16 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [24, 25],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 10,\n                    raw: '10',\n                    range: [28, 30],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [24, 30],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        '{ do { } while (false) false }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'DoWhileStatement',\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [5, 8],\n                    loc: {\n                        start: { line: 1, column: 5 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                test: {\n                    type: 'Literal',\n                    value: false,\n                    raw: 'false',\n                    range: [16, 21],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [2, 22],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 1, column: 22 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: false,\n                    raw: 'false',\n                    range: [23, 28],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [23, 29],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'while (true) doSomething()': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'doSomething',\n                        range: [13, 24],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [13, 26],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'while (x < 10) { x++; y--; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 10,\n                    raw: '10',\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [7, 13],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '++',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'x',\n                            range: [17, 18],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 18 }\n                            }\n                        },\n                        prefix: false,\n                        range: [17, 20],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [17, 21],\n                    loc: {\n                        start: { line: 1, column: 17 },\n                        end: { line: 1, column: 21 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'UpdateExpression',\n                        operator: '--',\n                        argument: {\n                            type: 'Identifier',\n                            name: 'y',\n                            range: [22, 23],\n                            loc: {\n                                start: { line: 1, column: 22 },\n                                end: { line: 1, column: 23 }\n                            }\n                        },\n                        prefix: false,\n                        range: [22, 25],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    range: [22, 26],\n                    loc: {\n                        start: { line: 1, column: 22 },\n                        end: { line: 1, column: 26 }\n                    }\n                }],\n                range: [15, 28],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 28 }\n                }\n            },\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        },\n\n        'for(;;);': {\n            type: 'ForStatement',\n            init: null,\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'for(;;){}': {\n            type: 'ForStatement',\n            init: null,\n            test: null,\n            update: null,\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [7, 9],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        },\n\n        'for(x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [12, 13],\n                loc: {\n                    start: { line: 1, column: 12 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'for(var x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }],\n                kind: 'var',\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [16, 17],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'for(let x = 0;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }],\n                kind: 'let',\n                range: [4, 13],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [16, 17],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'for(var x = 0, y = 1;;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [8, 9],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 9 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 0,\n                        raw: '0',\n                        range: [12, 13],\n                        loc: {\n                            start: { line: 1, column: 12 },\n                            end: { line: 1, column: 13 }\n                        }\n                    },\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [15, 16],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 16 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 1,\n                        raw: '1',\n                        range: [19, 20],\n                        loc: {\n                            start: { line: 1, column: 19 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }],\n                kind: 'var',\n                range: [4, 20],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            test: null,\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [23, 24],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'for(x = 0; x < 42;);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: null,\n            body: {\n                type: 'EmptyStatement',\n                range: [19, 20],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 20 }\n                }\n            },\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        'for(x = 0; x < 42; x++);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                prefix: false,\n                range: [19, 22],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            body: {\n                type: 'EmptyStatement',\n                range: [23, 24],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'for(x = 0; x < 42; x++) process(x);': {\n            type: 'ForStatement',\n            init: {\n                type: 'AssignmentExpression',\n                operator: '=',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 0,\n                    raw: '0',\n                    range: [8, 9],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                range: [4, 9],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            test: {\n                type: 'BinaryExpression',\n                operator: '<',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [11, 12],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                right: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [15, 17],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [11, 17],\n                loc: {\n                    start: { line: 1, column: 11 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            update: {\n                type: 'UpdateExpression',\n                operator: '++',\n                argument: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [19, 20],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                prefix: false,\n                range: [19, 22],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [24, 31],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [32, 33],\n                        loc: {\n                            start: { line: 1, column: 32 },\n                            end: { line: 1, column: 33 }\n                        }\n                    }],\n                    range: [24, 34],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [24, 35],\n                loc: {\n                    start: { line: 1, column: 24 },\n                    end: { line: 1, column: 35 }\n                }\n            },\n            range: [0, 35],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 35 }\n            }\n        },\n\n        'for(x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'Identifier',\n                name: 'x',\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [15, 22],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [23, 24],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }],\n                    range: [15, 25],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                range: [15, 26],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            each: false,\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'for (var x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for (let x in list) process(x);': {\n            type: 'ForInStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'let',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for(x of list) process(x);': {\n            type: 'ForOfStatement',\n            left: {\n                type: 'Identifier',\n                name: 'x',\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [15, 22],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [23, 24],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }],\n                    range: [15, 25],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                range: [15, 26],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            each: false,\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'for (var x of list) process(x);': {\n            type: 'ForOfStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for (var x = 42 of list) process(x);': {\n            type: 'ForOfStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 42,\n                        raw: '42',\n                        range: [13, 15],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    range: [9, 15],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 15],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [19, 23],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [25, 32],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [33, 34],\n                        loc: {\n                            start: { line: 1, column: 33 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [25, 35],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 35 }\n                    }\n                },\n                range: [25, 36],\n                loc: {\n                    start: { line: 1, column: 25 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            each: false,\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'for (let x of list) process(x);': {\n            type: 'ForOfStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: null,\n                    range: [9, 10],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 10 }\n                    }\n                }],\n                kind: 'let',\n                range: [5, 10],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 10 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [14, 18],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [28, 29],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 29 }\n                        }\n                    }],\n                    range: [20, 30],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 30 }\n                    }\n                },\n                range: [20, 31],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            each: false,\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        },\n\n        'for (var i = function() { return 10 in [] } of list) process(x);': {\n            type: 'ForOfStatement',\n            left: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'i',\n                        range: [9, 10],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 10 }\n                        }\n                    },\n                    init: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ReturnStatement',\n                                argument: {\n                                    type: 'BinaryExpression',\n                                    operator: 'in',\n                                    left: {\n                                        type: 'Literal',\n                                        value: 10,\n                                        raw: '10',\n                                        range: [33, 35],\n                                        loc: {\n                                            start: { line: 1, column: 33 },\n                                            end: { line: 1, column: 35 }\n                                        }\n                                    },\n                                    right: {\n                                        type: 'ArrayExpression',\n                                        elements: [],\n                                        range: [39, 41],\n                                        loc: {\n                                            start: { line: 1, column: 39 },\n                                            end: { line: 1, column: 41 }\n                                        }\n                                    },\n                                    range: [33, 41],\n                                    loc: {\n                                        start: { line: 1, column: 33 },\n                                        end: { line: 1, column: 41 }\n                                    }\n                                },\n                                range: [26, 42],\n                                loc: {\n                                    start: { line: 1, column: 26 },\n                                    end: { line: 1, column: 42 }\n                                }\n                            }],\n                            range: [24, 43],\n                            loc: {\n                                start: { line: 1, column: 24 },\n                                end: { line: 1, column: 43 }\n                            }\n                        },\n                        range: [13, 43],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 43 }\n                        }\n                    },\n                    range: [9, 43],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 43 }\n                    }\n                }],\n                kind: 'var',\n                range: [5, 43],\n                loc: {\n                    start: { line: 1, column: 5 },\n                    end: { line: 1, column: 43 }\n                }\n            },\n            right: {\n                type: 'Identifier',\n                name: 'list',\n                range: [47, 51],\n                loc: {\n                    start: { line: 1, column: 47 },\n                    end: { line: 1, column: 51 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'Identifier',\n                        name: 'process',\n                        range: [53, 60],\n                        loc: {\n                            start: { line: 1, column: 53 },\n                            end: { line: 1, column: 60 }\n                        }\n                    },\n                    'arguments': [{\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [61, 62],\n                        loc: {\n                            start: { line: 1, column: 61 },\n                            end: { line: 1, column: 62 }\n                        }\n                    }],\n                    range: [53, 63],\n                    loc: {\n                        start: { line: 1, column: 53 },\n                        end: { line: 1, column: 63 }\n                    }\n                },\n                range: [53, 64],\n                loc: {\n                    start: { line: 1, column: 53 },\n                    end: { line: 1, column: 64 }\n                }\n            },\n            each: false,\n            range: [0, 64],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 64 }\n            }\n        }\n\n    },\n\n    'continue statement': {\n\n        'while (true) { continue; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'ContinueStatement',\n                        label: null,\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }\n                ],\n                range: [13, 26],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        },\n\n        'while (true) { continue }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'ContinueStatement',\n                        label: null,\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    }\n                ],\n                range: [13, 25],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'done: while (true) { continue done }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ContinueStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [30, 34],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [21, 35],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 35 }\n                            }\n                        }\n                    ],\n                    range: [19, 36],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 36 }\n                    }\n                },\n                range: [6, 36],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 36 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            }\n        },\n\n        'done: while (true) { continue done; }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ContinueStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [30, 34],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 34 }\n                                }\n                            },\n                            range: [21, 35],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 35 }\n                            }\n                        }\n                    ],\n                    range: [19, 37],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [6, 37],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 37 }\n                }\n            },\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            }\n        }\n\n    },\n\n    'break statement': {\n\n        'while (true) { break }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [\n                    {\n                        type: 'BreakStatement',\n                        label: null,\n                        range: [15, 21],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 21 }\n                        }\n                    }\n                ],\n                range: [13, 22],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        'done: while (true) { break done }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'BreakStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [27, 31],\n                                loc: {\n                                    start: { line: 1, column: 27 },\n                                    end: { line: 1, column: 31 }\n                                }\n                            },\n                            range: [21, 32],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 32 }\n                            }\n                        }\n                    ],\n                    range: [19, 33],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 33 }\n                    }\n                },\n                range: [6, 33],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 33 }\n                }\n            },\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        },\n\n        'done: while (true) { break done; }': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'done',\n                range: [0, 4],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 4 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [13, 17],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'BreakStatement',\n                            label: {\n                                type: 'Identifier',\n                                name: 'done',\n                                range: [27, 31],\n                                loc: {\n                                    start: { line: 1, column: 27 },\n                                    end: { line: 1, column: 31 }\n                                }\n                            },\n                            range: [21, 32],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 32 }\n                            }\n                        }\n                    ],\n                    range: [19, 34],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [6, 34],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        }\n\n    },\n\n    'return statement': {\n\n        '(function(){ return })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 20],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 20 }\n                            }\n                        }\n                    ],\n                    range: [11, 21],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [0, 22],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        },\n\n        '(function(){ return; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 20],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 20 }\n                            }\n                        }\n                    ],\n                    range: [11, 22],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [0, 23],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '(function(){ return x; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 21 }\n                                }\n                            },\n                            range: [13, 22],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 22 }\n                            }\n                        }\n                    ],\n                    range: [11, 24],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        '(function(){ return x * y })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: {\n                                type: 'BinaryExpression',\n                                operator: '*',\n                                left: {\n                                    type: 'Identifier',\n                                    name: 'x',\n                                    range: [20, 21],\n                                    loc: {\n                                        start: { line: 1, column: 20 },\n                                        end: { line: 1, column: 21 }\n                                    }\n                                },\n                                right: {\n                                    type: 'Identifier',\n                                    name: 'y',\n                                    range: [24, 25],\n                                    loc: {\n                                        start: { line: 1, column: 24 },\n                                        end: { line: 1, column: 25 }\n                                    }\n                                },\n                                range: [20, 25],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 25 }\n                                }\n                            },\n                            range: [13, 26],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 26 }\n                            }\n                        }\n                    ],\n                    range: [11, 27],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [0, 28],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 28 }\n                }\n            },\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        }\n    },\n\n    'with statement': {\n\n        'with (x) foo = bar': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [9, 12],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [15, 18],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [9, 18],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [9, 18],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'with (x) foo = bar;': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'foo',\n                        range: [9, 12],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    right: {\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [15, 18],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 18 }\n                        }\n                    },\n                    range: [9, 18],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                range: [9, 19],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'with (x) { foo = bar }': {\n            type: 'WithStatement',\n            object: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'AssignmentExpression',\n                        operator: '=',\n                        left: {\n                            type: 'Identifier',\n                            name: 'foo',\n                            range: [11, 14],\n                            loc: {\n                                start: { line: 1, column: 11 },\n                                end: { line: 1, column: 14 }\n                            }\n                        },\n                        right: {\n                            type: 'Identifier',\n                            name: 'bar',\n                            range: [17, 20],\n                            loc: {\n                                start: { line: 1, column: 17 },\n                                end: { line: 1, column: 20 }\n                            }\n                        },\n                        range: [11, 20],\n                        loc: {\n                            start: { line: 1, column: 11 },\n                            end: { line: 1, column: 20 }\n                        }\n                    },\n                    range: [11, 21],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 21 }\n                    }\n                }],\n                range: [9, 22],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 22 }\n                }\n            },\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            }\n        }\n\n    },\n\n    'switch statement': {\n\n        'switch (x) {}': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'x',\n                range: [8, 9],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 9 }\n                }\n            },\n            range: [0, 13],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 13 }\n            }\n        },\n\n        'switch (answer) { case 42: hi(); break; }': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'answer',\n                range: [8, 14],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            cases: [{\n                type: 'SwitchCase',\n                test: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [23, 25],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                consequent: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'hi',\n                            range: [27, 29],\n                            loc: {\n                                start: { line: 1, column: 27 },\n                                end: { line: 1, column: 29 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [27, 32],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 32 }\n                    }\n                }, {\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [33, 39],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 39 }\n                    }\n                }],\n                range: [18, 39],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 39 }\n                }\n            }],\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            }\n        },\n\n        'switch (answer) { case 42: hi(); break; default: break }': {\n            type: 'SwitchStatement',\n            discriminant: {\n                type: 'Identifier',\n                name: 'answer',\n                range: [8, 14],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            cases: [{\n                type: 'SwitchCase',\n                test: {\n                    type: 'Literal',\n                    value: 42,\n                    raw: '42',\n                    range: [23, 25],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                consequent: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'hi',\n                            range: [27, 29],\n                            loc: {\n                                start: { line: 1, column: 27 },\n                                end: { line: 1, column: 29 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [27, 31],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [27, 32],\n                    loc: {\n                        start: { line: 1, column: 27 },\n                        end: { line: 1, column: 32 }\n                    }\n                }, {\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [33, 39],\n                    loc: {\n                        start: { line: 1, column: 33 },\n                        end: { line: 1, column: 39 }\n                    }\n                }],\n                range: [18, 39],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 39 }\n                }\n            }, {\n                type: 'SwitchCase',\n                test: null,\n                consequent: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [49, 55],\n                    loc: {\n                        start: { line: 1, column: 49 },\n                        end: { line: 1, column: 55 }\n                    }\n                }],\n                range: [40, 55],\n                loc: {\n                    start: { line: 1, column: 40 },\n                    end: { line: 1, column: 55 }\n                }\n            }],\n            range: [0, 56],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 56 }\n            }\n        }\n\n    },\n\n    'Labelled Statements': {\n\n        'start: for (;;) break start': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'start',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            body: {\n                type: 'ForStatement',\n                init: null,\n                test: null,\n                update: null,\n                body: {\n                    type: 'BreakStatement',\n                    label: {\n                        type: 'Identifier',\n                        name: 'start',\n                        range: [22, 27],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    range: [16, 27],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [7, 27],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'start: while (true) break start': {\n            type: 'LabeledStatement',\n            label: {\n                type: 'Identifier',\n                name: 'start',\n                range: [0, 5],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 5 }\n                }\n            },\n            body: {\n                type: 'WhileStatement',\n                test: {\n                    type: 'Literal',\n                    value: true,\n                    raw: 'true',\n                    range: [14, 18],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                body: {\n                    type: 'BreakStatement',\n                    label: {\n                        type: 'Identifier',\n                        name: 'start',\n                        range: [26, 31],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [20, 31],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 31 }\n                    }\n                },\n                range: [7, 31],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 31 }\n                }\n            },\n            range: [0, 31],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 31 }\n            }\n        }\n\n    },\n\n    'throw statement': {\n\n        'throw x;': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'Identifier',\n                name: 'x',\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            range: [0, 8],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'throw x * y': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'BinaryExpression',\n                operator: '*',\n                left: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [6, 7],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 7 }\n                    }\n                },\n                right: {\n                    type: 'Identifier',\n                    name: 'y',\n                    range: [10, 11],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 11 }\n                    }\n                },\n                range: [6, 11],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            range: [0, 11],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 11 }\n            }\n        },\n\n        'throw { message: \"Error\" }': {\n            type: 'ThrowStatement',\n            argument: {\n                type: 'ObjectExpression',\n                properties: [{\n                    type: 'Property',\n                    key: {\n                        type: 'Identifier',\n                        name: 'message',\n                        range: [8, 15],\n                        loc: {\n                            start: { line: 1, column: 8 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    value: {\n                        type: 'Literal',\n                        value: 'Error',\n                        raw: '\"Error\"',\n                        range: [17, 24],\n                        loc: {\n                            start: { line: 1, column: 17 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    kind: 'init',\n                    range: [8, 24],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 24 }\n                    }\n                }],\n                range: [6, 26],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 26 }\n                }\n            },\n            range: [0, 26],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 26 }\n            }\n        }\n\n    },\n\n    'try statement': {\n\n        'try { } catch (e) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 21],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                range: [8, 21],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 21 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 21],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 21 }\n            }\n        },\n\n        'try { } catch (eval) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'eval',\n                    range: [15, 19],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 19 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [21, 24],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [8, 24],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 24 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'try { } catch (arguments) { }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'arguments',\n                    range: [15, 24],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [26, 29],\n                    loc: {\n                        start: { line: 1, column: 26 },\n                        end: { line: 1, column: 29 }\n                    }\n                },\n                range: [8, 29],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 29 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'try { } catch (e) { say(e) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [20, 23],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 23 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [24, 25],\n                                loc: {\n                                    start: { line: 1, column: 24 },\n                                    end: { line: 1, column: 25 }\n                                }\n                            }],\n                            range: [20, 26],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 26 }\n                            }\n                        },\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    }],\n                    range: [18, 28],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [8, 28],\n                loc: {\n                    start: { line: 1, column: 8 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        },\n\n        'try { } finally { cleanup(stuff) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [],\n                range: [4, 7],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            handlers: [],\n            finalizer: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'cleanup',\n                            range: [18, 25],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 25 }\n                            }\n                        },\n                        'arguments': [{\n                            type: 'Identifier',\n                            name: 'stuff',\n                            range: [26, 31],\n                            loc: {\n                                start: { line: 1, column: 26 },\n                                end: { line: 1, column: 31 }\n                            }\n                        }],\n                        range: [18, 32],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    range: [18, 33],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 33 }\n                    }\n                }],\n                range: [16, 34],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'try { doThat(); } catch (e) { say(e) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'doThat',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [6, 15],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                range: [4, 17],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [25, 26],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [30, 33],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [34, 35],\n                                loc: {\n                                    start: { line: 1, column: 34 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            }],\n                            range: [30, 36],\n                            loc: {\n                                start: { line: 1, column: 30 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        range: [30, 37],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [28, 38],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [18, 38],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            finalizer: null,\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'try { doThat(); } catch (e) { say(e) } finally { cleanup(stuff) }': {\n            type: 'TryStatement',\n            block: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'doThat',\n                            range: [6, 12],\n                            loc: {\n                                start: { line: 1, column: 6 },\n                                end: { line: 1, column: 12 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [6, 14],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    range: [6, 15],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 15 }\n                    }\n                }],\n                range: [4, 17],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            handlers: [{\n                type: 'CatchClause',\n                param: {\n                    type: 'Identifier',\n                    name: 'e',\n                    range: [25, 26],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 26 }\n                    }\n                },\n                guard: null,\n                body: {\n                    type: 'BlockStatement',\n                    body: [{\n                        type: 'ExpressionStatement',\n                        expression: {\n                            type: 'CallExpression',\n                            callee: {\n                                type: 'Identifier',\n                                name: 'say',\n                                range: [30, 33],\n                                loc: {\n                                    start: { line: 1, column: 30 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            },\n                            'arguments': [{\n                                type: 'Identifier',\n                                name: 'e',\n                                range: [34, 35],\n                                loc: {\n                                    start: { line: 1, column: 34 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            }],\n                            range: [30, 36],\n                            loc: {\n                                start: { line: 1, column: 30 },\n                                end: { line: 1, column: 36 }\n                            }\n                        },\n                        range: [30, 37],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 37 }\n                        }\n                    }],\n                    range: [28, 38],\n                    loc: {\n                        start: { line: 1, column: 28 },\n                        end: { line: 1, column: 38 }\n                    }\n                },\n                range: [18, 38],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 38 }\n                }\n            }],\n            finalizer: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'cleanup',\n                            range: [49, 56],\n                            loc: {\n                                start: { line: 1, column: 49 },\n                                end: { line: 1, column: 56 }\n                            }\n                        },\n                        'arguments': [{\n                            type: 'Identifier',\n                            name: 'stuff',\n                            range: [57, 62],\n                            loc: {\n                                start: { line: 1, column: 57 },\n                                end: { line: 1, column: 62 }\n                            }\n                        }],\n                        range: [49, 63],\n                        loc: {\n                            start: { line: 1, column: 49 },\n                            end: { line: 1, column: 63 }\n                        }\n                    },\n                    range: [49, 64],\n                    loc: {\n                        start: { line: 1, column: 49 },\n                        end: { line: 1, column: 64 }\n                    }\n                }],\n                range: [47, 65],\n                loc: {\n                    start: { line: 1, column: 47 },\n                    end: { line: 1, column: 65 }\n                }\n            },\n            range: [0, 65],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 65 }\n            }\n        }\n\n    },\n\n    'debugger statement': {\n\n        'debugger;': {\n            type: 'DebuggerStatement',\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 9 }\n            }\n        }\n\n    },\n\n    'Function Definition': {\n\n        'function hello() { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [19, 24],\n                            loc: {\n                                start: { line: 1, column: 19 },\n                                end: { line: 1, column: 24 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [19, 26],\n                        loc: {\n                            start: { line: 1, column: 19 },\n                            end: { line: 1, column: 26 }\n                        }\n                    },\n                    range: [19, 27],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                range: [17, 29],\n                loc: {\n                    start: { line: 1, column: 17 },\n                    end: { line: 1, column: 29 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'function eval() { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'eval',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [16, 19],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'function arguments() { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'arguments',\n                range: [9, 18],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [21, 24],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 24 }\n                }\n            },\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            }\n        },\n\n        'function test(t, t) { }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'test',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 't',\n                range: [14, 15],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 15 }\n                }\n            }, {\n                type: 'Identifier',\n                name: 't',\n                range: [17, 18],\n                loc: {\n                    start: { line: 1, column: 17 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [20, 23],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        '(function test(t, t) { })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: {\n                    type: 'Identifier',\n                    name: 'test',\n                    range: [10, 14],\n                    loc: {\n                        start: { line: 1, column: 10 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                params: [{\n                    type: 'Identifier',\n                    name: 't',\n                    range: [15, 16],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 16 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 't',\n                    range: [18, 19],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [21, 24],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'function eval() { function inner() { \"use strict\" } }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'eval',\n                range: [9, 13],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            params: [],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'FunctionDeclaration',\n                    id: {\n                        type: 'Identifier',\n                        name: 'inner',\n                        range: [27, 32],\n                        loc: {\n                            start: { line: 1, column: 27 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Literal',\n                                value: 'use strict',\n                                raw: '\\\"use strict\\\"',\n                                range: [37, 49],\n                                loc: {\n                                    start: { line: 1, column: 37 },\n                                    end: { line: 1, column: 49 }\n                                }\n                            },\n                            range: [37, 50],\n                            loc: {\n                                start: { line: 1, column: 37 },\n                                end: { line: 1, column: 50 }\n                            }\n                        }],\n                        range: [35, 51],\n                        loc: {\n                            start: { line: 1, column: 35 },\n                            end: { line: 1, column: 51 }\n                        }\n                    },\n                    range: [18, 51],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 51 }\n                    }\n                }],\n                range: [16, 53],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 53 }\n                }\n            },\n            range: [0, 53],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 53 }\n            }\n        },\n\n        'function hello(a) { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 'a',\n                range: [15, 16],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 16 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [20, 25],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 25 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [20, 27],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    range: [20, 28],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 28 }\n                    }\n                }],\n                range: [18, 30],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'function hello(a, b) { sayHi(); }': {\n            type: 'FunctionDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'hello',\n                range: [9, 14],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            params: [{\n                type: 'Identifier',\n                name: 'a',\n                range: [15, 16],\n                loc: {\n                    start: { line: 1, column: 15 },\n                    end: { line: 1, column: 16 }\n                }\n            }, {\n                type: 'Identifier',\n                name: 'b',\n                range: [18, 19],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 19 }\n                }\n            }],\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'CallExpression',\n                        callee: {\n                            type: 'Identifier',\n                            name: 'sayHi',\n                            range: [23, 28],\n                            loc: {\n                                start: { line: 1, column: 23 },\n                                end: { line: 1, column: 28 }\n                            }\n                        },\n                        'arguments': [],\n                        range: [23, 30],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 30 }\n                        }\n                    },\n                    range: [23, 31],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 31 }\n                    }\n                }],\n                range: [21, 33],\n                loc: {\n                    start: { line: 1, column: 21 },\n                    end: { line: 1, column: 33 }\n                }\n            },\n            range: [0, 33],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 33 }\n            }\n        },\n\n        'var hi = function() { sayHi() };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: null,\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'CallExpression',\n                                callee: {\n                                    type: 'Identifier',\n                                    name: 'sayHi',\n                                    range: [22, 27],\n                                    loc: {\n                                        start: { line: 1, column: 22 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                'arguments': [],\n                                range: [22, 29],\n                                loc: {\n                                    start: { line: 1, column: 22 },\n                                    end: { line: 1, column: 29 }\n                                }\n                            },\n                            range: [22, 30],\n                            loc: {\n                                start: { line: 1, column: 22 },\n                                end: { line: 1, column: 30 }\n                            }\n                        }],\n                        range: [20, 31],\n                        loc: {\n                            start: { line: 1, column: 20 },\n                            end: { line: 1, column: 31 }\n                        }\n                    },\n                    range: [9, 31],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 31 }\n                    }\n                },\n                range: [4, 31],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 31 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 32 }\n            }\n        },\n\n        'var hi = function eval() { };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [18, 22],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [25, 28],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 28 }\n                        }\n                    },\n                    range: [9, 28],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [4, 28],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 29 }\n            }\n        },\n\n        'var hi = function arguments() { };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hi',\n                    range: [4, 6],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 6 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [18, 27],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [30, 33],\n                        loc: {\n                            start: { line: 1, column: 30 },\n                            end: { line: 1, column: 33 }\n                        }\n                    },\n                    range: [9, 33],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 33 }\n                    }\n                },\n                range: [4, 33],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 33 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 34],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'var hello = function hi() { sayHi() };': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'hello',\n                    range: [4, 9],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 9 }\n                    }\n                },\n                init: {\n                    type: 'FunctionExpression',\n                    id: {\n                        type: 'Identifier',\n                        name: 'hi',\n                        range: [21, 23],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 23 }\n                        }\n                    },\n                    params: [],\n                    body: {\n                        type: 'BlockStatement',\n                        body: [{\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'CallExpression',\n                                callee: {\n                                    type: 'Identifier',\n                                    name: 'sayHi',\n                                    range: [28, 33],\n                                    loc: {\n                                        start: { line: 1, column: 28 },\n                                        end: { line: 1, column: 33 }\n                                    }\n                                },\n                                'arguments': [],\n                                range: [28, 35],\n                                loc: {\n                                    start: { line: 1, column: 28 },\n                                    end: { line: 1, column: 35 }\n                                }\n                            },\n                            range: [28, 36],\n                            loc: {\n                                start: { line: 1, column: 28 },\n                                end: { line: 1, column: 36 }\n                            }\n                        }],\n                        range: [26, 37],\n                        loc: {\n                            start: { line: 1, column: 26 },\n                            end: { line: 1, column: 37 }\n                        }\n                    },\n                    range: [12, 37],\n                    loc: {\n                        start: { line: 1, column: 12 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [4, 37],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 37 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        '(function(){})': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [11, 13],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [0, 14],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 14 }\n                }\n            },\n            range: [0, 14],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 14 }\n            }\n        }\n\n    },\n\n    'Automatic semicolon insertion': {\n\n        '{ x\\n++y }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                range: [2, 4],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UpdateExpression',\n                    operator: '++',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 2, column: 2 },\n                            end: { line: 2, column: 3 }\n                        }\n                    },\n                    prefix: true,\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 3 }\n                    }\n                },\n                range: [4, 8],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 4 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '{ x\\n--y }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [2, 3],\n                    loc: {\n                        start: { line: 1, column: 2 },\n                        end: { line: 1, column: 3 }\n                    }\n                },\n                range: [2, 4],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UpdateExpression',\n                    operator: '--',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 2, column: 2 },\n                            end: { line: 2, column: 3 }\n                        }\n                    },\n                    prefix: true,\n                    range: [4, 7],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 3 }\n                    }\n                },\n                range: [4, 8],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 4 }\n                }\n            }],\n            range: [0, 9],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        'var x /* comment */;': {\n            type: 'VariableDeclaration',\n            declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'Identifier',\n                    name: 'x',\n                    range: [4, 5],\n                    loc: {\n                        start: { line: 1, column: 4 },\n                        end: { line: 1, column: 5 }\n                    }\n                },\n                init: null,\n                range: [4, 5],\n                loc: {\n                    start: { line: 1, column: 4 },\n                    end: { line: 1, column: 5 }\n                }\n            }],\n            kind: 'var',\n            range: [0, 20],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 20 }\n            }\n        },\n\n        '{ var x = 14, y = 3\\nz; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [6, 7],\n                        loc: {\n                            start: { line: 1, column: 6 },\n                            end: { line: 1, column: 7 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 14,\n                        raw: '14',\n                        range: [10, 12],\n                        loc: {\n                            start: { line: 1, column: 10 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [6, 12],\n                    loc: {\n                        start: { line: 1, column: 6 },\n                        end: { line: 1, column: 12 }\n                    }\n                }, {\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'y',\n                        range: [14, 15],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 15 }\n                        }\n                    },\n                    init: {\n                        type: 'Literal',\n                        value: 3,\n                        raw: '3',\n                        range: [18, 19],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                kind: 'var',\n                range: [2, 20],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'z',\n                    range: [20, 21],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 1 }\n                    }\n                },\n                range: [20, 22],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 2 }\n                }\n            }],\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 4 }\n            }\n        },\n\n        'while (true) { continue\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [24, 29],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [24, 30],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 32],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { continue // Comment\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [35, 40],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [35, 41],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 43],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 43],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { continue /* Multiline\\nComment */there; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ContinueStatement',\n                    label: null,\n                    range: [15, 23],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 23 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [47, 52],\n                        loc: {\n                            start: { line: 2, column: 10 },\n                            end: { line: 2, column: 15 }\n                        }\n                    },\n                    range: [47, 53],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 16 }\n                    }\n                }],\n                range: [13, 55],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 18 }\n                }\n            },\n            range: [0, 55],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        },\n\n        'while (true) { break\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [21, 26],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [21, 27],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 29],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 29],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { break // Comment\\nthere; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [32, 37],\n                        loc: {\n                            start: { line: 2, column: 0 },\n                            end: { line: 2, column: 5 }\n                        }\n                    },\n                    range: [32, 38],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 6 }\n                    }\n                }],\n                range: [13, 40],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 8 }\n                }\n            },\n            range: [0, 40],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        'while (true) { break /* Multiline\\nComment */there; }': {\n            type: 'WhileStatement',\n            test: {\n                type: 'Literal',\n                value: true,\n                raw: 'true',\n                range: [7, 11],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 11 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'BreakStatement',\n                    label: null,\n                    range: [15, 20],\n                    loc: {\n                        start: { line: 1, column: 15 },\n                        end: { line: 1, column: 20 }\n                    }\n                }, {\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'there',\n                        range: [44, 49],\n                        loc: {\n                            start: { line: 2, column: 10 },\n                            end: { line: 2, column: 15 }\n                        }\n                    },\n                    range: [44, 50],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 16 }\n                    }\n                }],\n                range: [13, 52],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 2, column: 18 }\n                }\n            },\n            range: [0, 52],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        },\n\n        '(function(){ return\\nx; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 1 }\n                                }\n                            },\n                            range: [20, 22],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 2 }\n                            }\n                        }\n                    ],\n                    range: [11, 24],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 4 }\n                    }\n                },\n                range: [0, 25],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 5 }\n                }\n            },\n            range: [0, 25],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '(function(){ return // Comment\\nx; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [31, 32],\n                                loc: {\n                                    start: { line: 2, column: 0 },\n                                    end: { line: 2, column: 1 }\n                                }\n                            },\n                            range: [31, 33],\n                            loc: {\n                                start: { line: 2, column: 0 },\n                                end: { line: 2, column: 2 }\n                            }\n                        }\n                    ],\n                    range: [11, 35],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 4 }\n                    }\n                },\n                range: [0, 36],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 5 }\n                }\n            },\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 5 }\n            }\n        },\n\n        '(function(){ return/* Multiline\\nComment */x; })': {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'FunctionExpression',\n                id: null,\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [\n                        {\n                            type: 'ReturnStatement',\n                            argument: null,\n                            range: [13, 19],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 19 }\n                            }\n                        },\n                        {\n                            type: 'ExpressionStatement',\n                            expression: {\n                                type: 'Identifier',\n                                name: 'x',\n                                range: [42, 43],\n                                loc: {\n                                    start: { line: 2, column: 10 },\n                                    end: { line: 2, column: 11 }\n                                }\n                            },\n                            range: [42, 44],\n                            loc: {\n                                start: { line: 2, column: 10 },\n                                end: { line: 2, column: 12 }\n                            }\n                        }\n                    ],\n                    range: [11, 46],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 2, column: 14 }\n                    }\n                },\n                range: [0, 47],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 2, column: 15 }\n                }\n            },\n            range: [0, 47],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 15 }\n            }\n        },\n\n        '{ throw error\\nerror; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 14],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [14, 19],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 5 }\n                    }\n                },\n                range: [14, 20],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        '{ throw error// Comment\\nerror; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 24],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 0 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [24, 29],\n                    loc: {\n                        start: { line: 2, column: 0 },\n                        end: { line: 2, column: 5 }\n                    }\n                },\n                range: [24, 30],\n                loc: {\n                    start: { line: 2, column: 0 },\n                    end: { line: 2, column: 6 }\n                }\n            }],\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 8 }\n            }\n        },\n\n        '{ throw error/* Multiline\\nComment */error; }': {\n            type: 'BlockStatement',\n            body: [{\n                type: 'ThrowStatement',\n                argument: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [8, 13],\n                    loc: {\n                        start: { line: 1, column: 8 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                range: [2, 36],\n                loc: {\n                    start: { line: 1, column: 2 },\n                    end: { line: 2, column: 10 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Identifier',\n                    name: 'error',\n                    range: [36, 41],\n                    loc: {\n                        start: { line: 2, column: 10 },\n                        end: { line: 2, column: 15 }\n                    }\n                },\n                range: [36, 42],\n                loc: {\n                    start: { line: 2, column: 10 },\n                    end: { line: 2, column: 16 }\n                }\n            }],\n            range: [0, 44],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 2, column: 18 }\n            }\n        }\n\n    },\n\n    'Source elements': {\n\n        '': {\n            type: 'Program',\n            body: [],\n            range: [0, 0],\n            loc: {\n                start: { line: 0, column: 0 },\n                end: { line: 0, column: 0 }\n            },\n            tokens: []\n        }\n    },\n\n    'Harmony Module': {\n\n        'module Universe {}': {\n            type: 'ModuleDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'Universe',\n                range: [7, 15],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [],\n                range: [16, 18],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 18 }\n                }\n            },\n            range: [0, 18],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'module Universe { module MilkyWay {} }': {\n            type: 'ModuleDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'Universe',\n                range: [7, 15],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            body: {\n                type: 'BlockStatement',\n                body: [{\n                    type: 'ModuleDeclaration',\n                    id: {\n                        type: 'Identifier',\n                        name: 'MilkyWay',\n                        range: [25, 33],\n                        loc: {\n                            start: { line: 1, column: 25 },\n                            end: { line: 1, column: 33 }\n                        }\n                    },\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [34, 36],\n                        loc: {\n                            start: { line: 1, column: 34 },\n                            end: { line: 1, column: 36 }\n                        }\n                    },\n                    range: [18, 36],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 36 }\n                    }\n                }],\n                range: [16, 38],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 38 }\n                }\n            },\n            range: [0, 38],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 38 }\n            }\n        },\n\n        'module MilkyWay = \"Universe/MilkyWay\"': {\n            type: 'ModuleDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'MilkyWay',\n                range: [7, 15],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 15 }\n                }\n            },\n            from: {\n                type: 'Literal',\n                value: 'Universe/MilkyWay',\n                raw: '\"Universe/MilkyWay\"',\n                range: [18, 37],\n                loc: {\n                    start: { line: 1, column: 18 },\n                    end: { line: 1, column: 37 }\n                }\n            },\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            }\n        },\n\n        'module System = Universe.MilkyWay.SolarSystem': {\n            type: 'ModuleDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'System',\n                range: [7, 13],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            from: {\n                type: 'Path',\n                body: [{\n                    type: 'Identifier',\n                    name: 'Universe',\n                    range: [16, 24],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 24 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'MilkyWay',\n                    range: [25, 33],\n                    loc: {\n                        start: { line: 1, column: 25 },\n                        end: { line: 1, column: 33 }\n                    }\n                }, {\n                    type: 'Identifier',\n                    name: 'SolarSystem',\n                    range: [34, 45],\n                    loc: {\n                        start: { line: 1, column: 34 },\n                        end: { line: 1, column: 45 }\n                    }\n                }],\n                range: [16, 45],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 45 }\n                }\n            },\n            range: [0, 45],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 45 }\n            }\n        },\n\n        'module System = SolarSystem': {\n            type: 'ModuleDeclaration',\n            id: {\n                type: 'Identifier',\n                name: 'System',\n                range: [7, 13],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 13 }\n                }\n            },\n            from: {\n                type: 'Path',\n                body: [{\n                    type: 'Identifier',\n                    name: 'SolarSystem',\n                    range: [16, 27],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                range: [16, 27],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            range: [0, 27],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'export var document': {\n            type: 'ExportDeclaration',\n            declaration: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'document',\n                        range: [ 11, 19 ],\n                        loc: {\n                            start: { line: 1, column: 11 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    init: null,\n                    range: [ 11, 19 ],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                kind: 'var',\n                range: [ 7, 19 ],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [ 0, 19 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'export var document = { }': {\n            type: 'ExportDeclaration',\n            declaration: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'document',\n                        range: [ 11, 19 ],\n                        loc: {\n                            start: { line: 1, column: 11 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    init: {\n                        type: 'ObjectExpression',\n                        properties: [],\n                        range: [ 22, 25 ],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    range: [ 11, 25 ],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 25 }\n                    }\n                }],\n                kind: 'var',\n                range: [ 7, 25 ],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [ 0, 25 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'export let document': {\n            type: 'ExportDeclaration',\n            declaration: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'document',\n                        range: [ 11, 19 ],\n                        loc: {\n                            start: { line: 1, column: 11 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    init: null,\n                    range: [ 11, 19 ],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                kind: 'let',\n                range: [ 7, 19 ],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [ 0, 19 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'export let document = { }': {\n            type: 'ExportDeclaration',\n            declaration: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'document',\n                        range: [ 11, 19 ],\n                        loc: {\n                            start: { line: 1, column: 11 },\n                            end: { line: 1, column: 19 }\n                        }\n                    },\n                    init: {\n                        type: 'ObjectExpression',\n                        properties: [],\n                        range: [ 22, 25 ],\n                        loc: {\n                            start: { line: 1, column: 22 },\n                            end: { line: 1, column: 25 }\n                        }\n                    },\n                    range: [ 11, 25 ],\n                    loc: {\n                        start: { line: 1, column: 11 },\n                        end: { line: 1, column: 25 }\n                    }\n                }],\n                kind: 'let',\n                range: [ 7, 25 ],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 25 }\n                }\n            },\n            range: [ 0, 25 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'export const document = { }': {\n            type: 'ExportDeclaration',\n            declaration: {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'document',\n                        range: [ 13, 21 ],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 21 }\n                        }\n                    },\n                    init: {\n                        type: 'ObjectExpression',\n                        properties: [],\n                        range: [ 24, 27 ],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    range: [ 13, 27 ],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                kind: 'const',\n                range: [ 7, 27 ],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            range: [ 0, 27 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'export function parse() { }': {\n            type: 'ExportDeclaration',\n            declaration: {\n                type: 'FunctionDeclaration',\n                id: {\n                    type: 'Identifier',\n                    name: 'parse',\n                    range: [ 16, 21 ],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                params: [],\n                body: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [ 24, 27 ],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 27 }\n                    }\n                },\n                range: [ 7, 27 ],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 27 }\n                }\n            },\n            range: [ 0, 27 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 27 }\n            }\n        },\n\n        'export module System = SolarSystem': {\n            type: 'ExportDeclaration',\n            declaration: {\n                type: 'ModuleDeclaration',\n                id: {\n                    type: 'Identifier',\n                    name: 'System',\n                    range: [14, 20],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                from: {\n                    type: 'Path',\n                    body: [{\n                        type: 'Identifier',\n                        name: 'SolarSystem',\n                        range: [23, 34],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 34 }\n                        }\n                    }],\n                    range: [23, 34],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 34 }\n                    }\n                },\n                range: [7, 34],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 34 }\n                }\n            },\n            range: [ 0, 34 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 34 }\n            }\n        },\n\n        'export SolarSystem': {\n            type: 'ExportDeclaration',\n            specifiers: [{\n                type: 'ExportSpecifier',\n                id: {\n                    type: 'Identifier',\n                    name: 'SolarSystem',\n                    range: [7, 18],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 18 }\n                    }\n                },\n                from: null,\n                range: [7, 18],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 18 }\n                }\n            }],\n            range: [ 0, 18 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 18 }\n            }\n        },\n\n        'export Mercury, Venus, Earth': {\n            type: 'ExportDeclaration',\n            specifiers: [{\n                type: 'ExportSpecifier',\n                id: {\n                    type: 'Identifier',\n                    name: 'Mercury',\n                    range: [7, 14],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 14 }\n                    }\n                },\n                from: null,\n                range: [7, 14],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 14 }\n                }\n            }, {\n                type: 'ExportSpecifier',\n                id: {\n                    type: 'Identifier',\n                    name: 'Venus',\n                    range: [16, 21],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 21 }\n                    }\n                },\n                from: null,\n                range: [16, 21],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 21 }\n                }\n            }, {\n                type: 'ExportSpecifier',\n                id: {\n                    type: 'Identifier',\n                    name: 'Earth',\n                    range: [23, 28],\n                    loc: {\n                        start: { line: 1, column: 23 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                from: null,\n                range: [23, 28],\n                loc: {\n                    start: { line: 1, column: 23 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            range: [ 0, 28 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            }\n        },\n\n        'export *': {\n            type: 'ExportDeclaration',\n            specifiers: [{\n                type: 'ExportSpecifier',\n                id: {\n                    type: 'Glob',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                from: null,\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            range: [ 0, 8 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 8 }\n            }\n        },\n\n        'export * from SolarSystem': {\n            type: 'ExportDeclaration',\n            specifiers: [{\n                type: 'ExportSpecifier',\n                id: {\n                    type: 'Glob',\n                    range: [7, 8],\n                    loc: {\n                        start: { line: 1, column: 7 },\n                        end: { line: 1, column: 8 }\n                    }\n                },\n                from: {\n                    type: 'Path',\n                    body: [{\n                        type: 'Identifier',\n                        name: 'SolarSystem',\n                        range: [ 14, 25 ],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 25 }\n                        }\n                    }],\n                    range: [ 14, 25 ],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 25 }\n                    }\n                },\n                range: [ 7, 25 ],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 25 }\n                }\n            }],\n            range: [ 0, 25 ],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 25 }\n            }\n        },\n\n        'export { Mercury: SolarSystem.Mercury, Earth: SolarSystem.Earth }': {\n            type: 'ExportDeclaration',\n            specifiers: [{\n                type: 'ExportSpecifierSet',\n                specifiers: [\n                    {\n                        type: 'ExportSpecifier',\n                        id: {\n                            type: 'Identifier',\n                            name: 'Mercury',\n                            range: [ 9, 16 ],\n                            loc: {\n                                start: { line: 1, column: 9 },\n                                end: { line: 1, column: 16 }\n                            }\n                        },\n                        from: {\n                            type: 'Path',\n                            body: [\n                                {\n                                    type: 'Identifier',\n                                    name: 'SolarSystem',\n                                    range: [ 18, 29 ],\n                                    loc: {\n                                        start: { line: 1, column: 18 },\n                                        end: { line: 1, column: 29 }\n                                    }\n                                },\n                                {\n                                    type: 'Identifier',\n                                    name: 'Mercury',\n                                    range: [ 30, 37 ],\n                                    loc: {\n                                        start: { line: 1, column: 30 },\n                                        end: { line: 1, column: 37 }\n                                    }\n                                }\n                            ],\n                            range: [ 18, 37 ],\n                            loc: {\n                                start: { line: 1, column: 18 },\n                                end: { line: 1, column: 37 }\n                            }\n                        },\n                        range: [ 9, 37 ],\n                        loc: {\n                            start: { line: 1, column: 9 },\n                            end: { line: 1, column: 37 }\n                        }\n                    },\n                    {\n                        type: 'ExportSpecifier',\n                        id: {\n                            type: 'Identifier',\n                            name: 'Earth',\n                            range: [ 39, 44 ],\n                            loc: {\n                                start: { line: 1, column: 39 },\n                                end: { line: 1, column: 44 }\n                            }\n                        },\n                        from: {\n                            type: 'Path',\n                            body: [\n                                {\n                                    type: 'Identifier',\n                                    name: 'SolarSystem',\n                                    range: [ 46, 57 ],\n                                    loc: {\n                                        start: { line: 1, column: 46 },\n                                        end: { line: 1, column: 57 }\n                                    }\n                                },\n                                {\n                                    type: 'Identifier',\n                                    name: 'Earth',\n                                    range: [ 58, 63 ],\n                                    loc: {\n                                        start: { line: 1, column: 58 },\n                                        end: { line: 1, column: 63 }\n                                    }\n                                }\n                            ],\n                            range: [ 46, 63 ],\n                            loc: {\n                                start: { line: 1, column: 46 },\n                                end: { line: 1, column: 63 }\n                            }\n                        },\n                        range: [ 39, 63 ],\n                        loc: {\n                            start: { line: 1, column: 39 },\n                            end: { line: 1, column: 63 }\n                        }\n                    }\n                ],\n                range: [7, 65],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 65 }\n                }\n            }],\n            range: [0, 65],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 65 }\n            }\n        },\n\n        'import * from foo': {\n            type: 'ImportDeclaration',\n            specifiers: [{\n                type: 'Glob',\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            from: {\n                type: 'Path',\n                body: [{\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [14, 17],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 17 }\n                    }\n                }],\n                range: [14, 17],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 17],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 17 }\n            }\n        },\n\n        'import * from \\'SolarSystem.js\\'': {\n            type: 'ImportDeclaration',\n            specifiers: [{\n                type: 'Glob',\n                range: [7, 8],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 8 }\n                }\n            }],\n            from: {\n                type: 'Literal',\n                value: 'SolarSystem.js',\n                raw: '\\'SolarSystem.js\\'',\n                range: [14, 30],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 30 }\n                }\n            },\n            range: [0, 30],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 30 }\n            }\n        },\n\n        'import foo from bar': {\n            type: 'ImportDeclaration',\n            specifiers: [{\n                type: 'Identifier',\n                name: 'foo',\n                range: [7, 10],\n                loc: {\n                    start: { line: 1, column: 7 },\n                    end: { line: 1, column: 10 }\n                }\n            }],\n            from: {\n                type: 'Path',\n                body: [{\n                    type: 'Identifier',\n                    name: 'bar',\n                    range: [16, 19],\n                    loc: {\n                        start: { line: 1, column: 16 },\n                        end: { line: 1, column: 19 }\n                    }\n                }],\n                range: [16, 19],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 19 }\n                }\n            },\n            range: [0, 19],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 19 }\n            }\n        },\n\n        'import { foo } from bar': {\n            type: 'ImportDeclaration',\n            specifiers: [{\n                type: 'ImportSpecifier',\n                id: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [9, 12],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                from: null,\n                range: [9, 12],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 12 }\n                }\n            }],\n            from: {\n                type: 'Path',\n                body: [{\n                    type: 'Identifier',\n                    name: 'bar',\n                    range: [20, 23],\n                    loc: {\n                        start: { line: 1, column: 20 },\n                        end: { line: 1, column: 23 }\n                    }\n                }],\n                range: [20, 23],\n                loc: {\n                    start: { line: 1, column: 20 },\n                    end: { line: 1, column: 23 }\n                }\n            },\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            }\n        },\n\n        'import { foo: bar, baz: quux } from quuux': {\n            type: 'ImportDeclaration',\n            specifiers: [{\n                type: 'ImportSpecifier',\n                id: {\n                    type: 'Identifier',\n                    name: 'foo',\n                    range: [9, 12],\n                    loc: {\n                        start: { line: 1, column: 9 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                from: {\n                    type: 'Path',\n                    body: [{\n                        type: 'Identifier',\n                        name: 'bar',\n                        range: [14, 17],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 17 }\n                        }\n                    }],\n                    range: [14, 17],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 17 }\n                    }\n                },\n                range: [9, 17],\n                loc: {\n                    start: { line: 1, column: 9 },\n                    end: { line: 1, column: 17 }\n                }\n            }, {\n                type: 'ImportSpecifier',\n                id: {\n                    type: 'Identifier',\n                    name: 'baz',\n                    range: [19, 22],\n                    loc: {\n                        start: { line: 1, column: 19 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                from: {\n                    type: 'Path',\n                    body: [{\n                        type: 'Identifier',\n                        name: 'quux',\n                        range: [24, 28],\n                        loc: {\n                            start: { line: 1, column: 24 },\n                            end: { line: 1, column: 28 }\n                        }\n                    }],\n                    range: [24, 28],\n                    loc: {\n                        start: { line: 1, column: 24 },\n                        end: { line: 1, column: 28 }\n                    }\n                },\n                range: [19, 28],\n                loc: {\n                    start: { line: 1, column: 19 },\n                    end: { line: 1, column: 28 }\n                }                \n            }],\n            from: {\n                type: 'Path',\n                body: [{\n                    type: 'Identifier',\n                    name: 'quuux',\n                    range: [36, 41],\n                    loc: {\n                        start: { line: 1, column: 36 },\n                        end: { line: 1, column: 41 }\n                    }\n                }],\n                range: [36, 41],\n                loc: {\n                    start: { line: 1, column: 36 },\n                    end: { line: 1, column: 41 }\n                }\n            },\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            }\n        },\n        \n        'class A extends B {get foo() {}}': {\n            id: {\n                type: \"Identifier\",\n                name: \"A\",\n                range: [6, 7],\n                loc: {\n                    start: { line: 1, column: 6 },\n                    end: { line: 1, column: 7 }\n                }\n            },\n            type: \"ClassDeclaration\",\n            body: {\n                type: \"ClassBody\",\n                body: [{\n                    type: \"ClassElement\",\n                    key: {\n                        type: \"Identifier\",\n                        name: \"foo\",\n                        range: [23, 26],\n                        loc: {\n                            start: { line: 1, column: 23 },\n                            end: { line: 1, column: 26 }\n                        }\n                    },\n                    value: {\n                        type: \"FunctionExpression\",\n                        id: null,\n                        params: [],\n                        body: {\n                            type: \"BlockStatement\",\n                            body: [],\n                            range: [29, 31],\n                            loc: {\n                                start: { line: 1, column: 29 },\n                                end: { line: 1, column: 31 }\n                            }\n                        }\n                    },\n                    kind: \"get\",\n                    range: [19, 31],\n                    loc: {\n                      start: { line: 1, column: 19 },\n                      end: { line: 1, column: 31 }\n                    }\n                }],\n                range: [18, 32],\n                loc: {\n                  start: { line: 1, column: 18 },\n                  end: { line: 1, column: 32 }\n                }\n            },\n            subclassOf: {\n                type: \"Identifier\",\n                name: \"B\",\n                range: [16, 17],\n                loc: {\n                    start: { line: 1, column: 16 },\n                    end: { line: 1, column: 17 }\n                }\n            },\n            range: [0, 32],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 32 }\n            }\n        },\n        \n        '\"use strict\"; (class A {constructor() { super() }})': {\n            type: \"Program\",\n            body: [\n                {\n                    type: \"ExpressionStatement\",\n                    expression: {\n                        type: \"Literal\",\n                        value: \"use strict\",\n                        raw: \"\\\"use strict\\\"\",\n                        range: [0, 12],\n                        loc: {\n                            start: { line: 1, column: 0 },\n                            end: { line: 1, column: 12 }\n                        }\n                    },\n                    range: [0, 13],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 13 }\n                    }\n                },\n                {\n                    type: \"ExpressionStatement\",\n                    expression: {\n                        id: {\n                            type: \"Identifier\",\n                            name: \"A\",\n                            range: [21, 22],\n                            loc: {\n                                start: { line: 1, column: 21 },\n                                end: { line: 1, column: 22 }\n                            }\n                        },\n                        type: \"ClassDeclaration\",\n                        body: {\n                            type: \"ClassBody\",\n                            body: [\n                                {\n                                    type: \"ClassElement\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"constructor\",\n                                        range: [24, 35],\n                                        loc: {\n                                            start: { line: 1, column: 24 },\n                                            end: { line: 1, column: 35 }\n                                        }\n                                    },\n                                    value: {\n                                        type: \"FunctionExpression\",\n                                        params: [],\n                                        body: {\n                                            type: \"BlockStatement\",\n                                            body: [\n                                                {\n                                                    type: \"ExpressionStatement\",\n                                                    expression: {\n                                                        type: \"CallExpression\",\n                                                        callee: {\n                                                            type: \"Identifier\",\n                                                            name: \"super\",\n                                                            range: [40, 45],\n                                                            loc: {\n                                                                start: { line: 1, column: 40 },\n                                                                end: { line: 1, column: 45 }\n                                                            }\n                                                        },\n                                                        arguments: [],\n                                                        range: [40, 47],\n                                                        loc: {\n                                                            start: { line: 1, column: 40 },\n                                                            end: { line: 1, column: 47 }\n                                                        }\n                                                    },\n                                                    range: [40, 48],\n                                                    loc: {\n                                                        start: { line: 1, column: 40 },\n                                                        end: { line: 1, column: 48 }\n                                                    }\n                                                }\n                                            ],\n                                            range: [38, 49],\n                                            loc: {\n                                                start: { line: 1, column: 38 },\n                                                end: { line: 1, column: 49 }\n                                            }\n                                        },\n                                        id: null,\n                                        range: [38, 49],\n                                        loc: {\n                                            start: { line: 1, column: 38 },\n                                            end: { line: 1, column: 49 }\n                                        }\n                                    },\n                                    kind: \"\",\n                                    range: [24, 49],\n                                    loc: {\n                                      start: { line: 1, column: 24 },\n                                      end: { line: 1, column: 49 }\n                                    }\n                                }\n                            ],\n                            range: [23, 50],\n                            loc: {\n                                start: { line: 1, column: 23 },\n                                end: { line: 1, column: 50 }\n                            }\n                        },\n                        range: [14, 51],\n                        loc: {\n                            start: { line: 1, column: 14 },\n                            end: { line: 1, column: 51 }\n                        }\n                    },\n                    range: [14, 51],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 51 }\n                    }\n                }\n            ],\n            range: [0, 51],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 51 }\n            },\n        \tcomments: []\n        },    \n\n    },\n\n    'Invalid syntax': {\n\n        '{': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '}': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token }'\n        },\n\n        '3ea': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3in []': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e+': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3e-': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3x': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3x0': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0x': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '09': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '018': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0o': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0o1a': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0o9': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0o18': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0O': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0O1a': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0O9': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0O18': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0b': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0b1a': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0b9': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0b18': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0b12': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0B': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0B1a': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0B9': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0B18': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0B12': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '3in[]': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '0x3in[]': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"Hello\\nWorld\"': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\u005c': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'x\\\\u002a': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'var x = /(s/g': {\n            index: 13,\n            lineNumber: 1,\n            column: 14,\n            message: 'Error: Line 1: Invalid regular expression'\n        },\n\n        '/': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n\n        'var x = /[a-z]/\\\\ux': {\n            index: 18,\n            lineNumber: 1,\n            column: 19,\n            message: 'Error: Line 1: Invalid regular expression'\n        },\n\n        '[': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '[,': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + {': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + { t:t ': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        '1 + { t:t,': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'var x = /\\n/': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n\n        'var x = \"\\n': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'var if = 42': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'i + 2 = 42': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '+i = 42': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '[2] = 42': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '({ obj:20 }) = 42': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '( #{ x:y } ) = 42': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '( { get x() {} } ) = 0': {\n            index: 18,\n            lineNumber: 1,\n            column: 19,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '1 + (': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'x \\n is y': {\n            index: 7,\n            lineNumber: 2,\n            column: 5,\n            message: 'Error: Line 2: Unexpected identifier'\n        },\n\n        'x \\n isnt y': {\n            index: 9,\n            lineNumber: 2,\n            column: 7,\n            message: 'Error: Line 2: Unexpected identifier'\n        },\n\n\n        '\\n\\n\\n{': {\n            index: 4,\n            lineNumber: 4,\n            column: 2,\n            message: 'Error: Line 4: Unexpected end of input'\n        },\n\n        '\\n/* Some multiline\\ncomment */\\n)': {\n            index: 30,\n            lineNumber: 4,\n            column: 1,\n            message: 'Error: Line 4: Unexpected token )'\n        },\n\n        '{ set 1 }': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        '{ get 2 }': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        '({ set: s(if) { } })': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        '({ set s(.) { } })': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token .'\n        },\n\n        '({ set: s() { } })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ set: s(a, b) { } })': {\n            index: 16,\n            lineNumber: 1,\n            column: 17,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ get: g(d) { } })': {\n            index: 13,\n            lineNumber: 1,\n            column: 14,\n            message: 'Error: Line 1: Unexpected token {'\n        },\n\n        '({ get i() { }, i: 42 })': {\n            index: 21,\n            lineNumber: 1,\n            column: 22,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ i: 42, get i() { } })': {\n            index: 21,\n            lineNumber: 1,\n            column: 22,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ set i(x) { }, i: 42 })': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ i: 42, set i(x) { } })': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Object literal may not have data and accessor property with the same name'\n        },\n\n        '({ get i() { }, get i() { } })': {\n            index: 27,\n            lineNumber: 1,\n            column: 28,\n            message: 'Error: Line 1: Object literal may not have multiple get/set accessors with the same name'\n        },\n\n        '({ set i(x) { }, set i(x) { } })': {\n            index: 29,\n            lineNumber: 1,\n            column: 30,\n            message: 'Error: Line 1: Object literal may not have multiple get/set accessors with the same name'\n        },\n\n        'function t(if) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'function t(true) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token true'\n        },\n\n        'function t(false) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token false'\n        },\n\n        'function t(null) { }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Unexpected token null'\n        },\n\n        'function null() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token null'\n        },\n\n        'function true() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token true'\n        },\n\n        'function false() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token false'\n        },\n\n        'function if() { }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'a b;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected identifier'\n        },\n\n        'if.a;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token .'\n        },\n\n        'a if;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token if'\n        },\n\n        'a class;': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected reserved word'\n        },\n\n        'break\\n': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'break 1;': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        'continue\\n': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'continue 2;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        'throw': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'throw;': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'throw\\n': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal newline after throw'\n        },\n\n        'for (var i, i2 in {});': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Unexpected token in'\n        },\n\n        'for ((i in {}));': {\n            index: 14,\n            lineNumber: 1,\n            column: 15,\n            message: 'Error: Line 1: Unexpected token )'\n        },\n\n        'for (i + 1 in {});': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        'for (+i in {});': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Invalid left-hand side in for-in'\n        },\n\n        'if(false)': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'if(false) doThis(); else': {\n            index: 24,\n            lineNumber: 1,\n            column: 25,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'do': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'while(false)': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'for(;;)': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'with(x)': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected end of input'\n        },\n\n        'try { }': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Missing catch or finally after try'\n        },\n\n        '\\u203F = 10': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'const x = 12, y;': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'const x, y = 12;': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ,'\n        },\n\n        'const x;': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ;'\n        },\n\n        'if(true) let a = 1;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token let'\n        },\n\n        'if(true) const a = 1;': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token const'\n        },\n\n        'new X().\"s\"': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Unexpected string'\n        },\n\n        '/*': {\n            index: 2,\n            lineNumber: 1,\n            column: 3,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*\\n\\n\\n': {\n            index: 5,\n            lineNumber: 4,\n            column: 1,\n            message: 'Error: Line 4: Unexpected token ILLEGAL'\n        },\n\n        '/**': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*\\n\\n*': {\n            index: 5,\n            lineNumber: 3,\n            column: 2,\n            message: 'Error: Line 3: Unexpected token ILLEGAL'\n        },\n\n        '/*hello': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '/*hello  *': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\n]': {\n            index: 1,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\r]': {\n            index: 1,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\r\\n]': {\n            index: 2,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '\\n\\r]': {\n            index: 2,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '//\\r\\n]': {\n            index: 4,\n            lineNumber: 2,\n            column: 1,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '//\\n\\r]': {\n            index: 4,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/a\\\\\\n/': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Invalid regular expression: missing /'\n        },\n        \n        '//\\r \\n]': {\n            index: 5,\n            lineNumber: 3,\n            column: 1,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/*\\r\\n*/]': {\n            index: 6,\n            lineNumber: 2,\n            column: 3,\n            message: 'Error: Line 2: Unexpected token ]'\n        },\n\n        '/*\\n\\r*/]': {\n            index: 6,\n            lineNumber: 3,\n            column: 3,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '/*\\r \\n*/]': {\n            index: 7,\n            lineNumber: 3,\n            column: 3,\n            message: 'Error: Line 3: Unexpected token ]'\n        },\n\n        '\\\\\\\\': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\\\u005c': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n\n        '\\\\x': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\\\u0000': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\u200C = []': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\\u200D = []': {\n            index: 0,\n            lineNumber: 1,\n            column: 1,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"\\\\': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        '\"\\\\u': {\n            index: 3,\n            lineNumber: 1,\n            column: 4,\n            message: 'Error: Line 1: Unexpected token ILLEGAL'\n        },\n\n        'return': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Illegal return statement'\n        },\n\n        'break': {\n            index: 5,\n            lineNumber: 1,\n            column: 6,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'continue': {\n            index: 8,\n            lineNumber: 1,\n            column: 9,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'switch (x) { default: continue; }': {\n            index: 31,\n            lineNumber: 1,\n            column: 32,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'do { x } *': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected token *'\n        },\n\n        'while (true) { break x; }': {\n            index: 22,\n            lineNumber: 1,\n            column: 23,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'while (true) { continue x; }': {\n            index: 25,\n            lineNumber: 1,\n            column: 26,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { break x; }); }': {\n            index: 40,\n            lineNumber: 1,\n            column: 41,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { continue x; }); }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Undefined label \\'x\\''\n        },\n\n        'x: while (true) { (function () { break; }); }': {\n            index: 39,\n            lineNumber: 1,\n            column: 40,\n            message: 'Error: Line 1: Illegal break statement'\n        },\n\n        'x: while (true) { (function () { continue; }); }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Illegal continue statement'\n        },\n\n        'x: while (true) { x: while (true) { } }': {\n            index: 20,\n            lineNumber: 1,\n            column: 21,\n            message: 'Error: Line 1: Label \\'x\\' has already been declared'\n        },\n\n        '(function () { \\'use strict\\'; delete i; }())': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Delete of an unqualified identifier in strict mode.'\n        },\n\n        '(function () { \\'use strict\\'; with (i); }())': {\n            index: 28,\n            lineNumber: 1,\n            column: 29,\n            message: 'Error: Line 1: Strict mode code may not include a with statement'\n        },\n\n        'function hello() {\\'use strict\\'; ({ i: 42, i: 42 }) }': {\n            index: 47,\n            lineNumber: 1,\n            column: 48,\n            message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ hasOwnProperty: 42, hasOwnProperty: 42 }) }': {\n            index: 73,\n            lineNumber: 1,\n            column: 74,\n            message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; var eval = 10; }': {\n            index: 40,\n            lineNumber: 1,\n            column: 41,\n            message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; var arguments = 10; }': {\n            index: 45,\n            lineNumber: 1,\n            column: 46,\n            message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; try { } catch (eval) { } }': {\n            index: 51,\n            lineNumber: 1,\n            column: 52,\n            message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; try { } catch (arguments) { } }': {\n            index: 56,\n            lineNumber: 1,\n            column: 57,\n            message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval = 10; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Assignment to eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments = 10; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Assignment to eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ++eval; }': {\n            index: 38,\n            lineNumber: 1,\n            column: 39,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; --eval; }': {\n            index: 38,\n            lineNumber: 1,\n            column: 39,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ++arguments; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; --arguments; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Prefix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval++; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; eval--; }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments++; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; arguments--; }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Postfix increment/decrement may not have eval or arguments operand in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; function eval() { } }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; function arguments() { } }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function eval() {\\'use strict\\'; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function arguments() {\\'use strict\\'; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; (function eval() { }()) }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; (function arguments() { }()) }': {\n            index: 42,\n            lineNumber: 1,\n            column: 43,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function eval() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function arguments() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ s: function eval() { } }); }': {\n            index: 47,\n            lineNumber: 1,\n            column: 48,\n            message: 'Error: Line 1: Function name may not be eval or arguments in strict mode'\n        },\n\n        '(function package() {\\'use strict\\'; })()': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ i: 10, set s(eval) { } }); }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ set s(eval) { } }); }': {\n            index: 41,\n            lineNumber: 1,\n            column: 42,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ s: function s(eval) { } }); }': {\n            index: 49,\n            lineNumber: 1,\n            column: 50,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello(eval) {\\'use strict\\';}': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello(arguments) {\\'use strict\\';}': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() { \\'use strict\\'; function inner(eval) {} }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() { \\'use strict\\'; function inner(arguments) {} }': {\n            index: 48,\n            lineNumber: 1,\n            column: 49,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function hello() {\\'use strict\\'; ({ i: 10, s(eval) { } }); }': {\n            index: 44,\n            lineNumber: 1,\n            column: 45,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        ' \"\\\\1\"; \\'use strict\\';': {\n            index: 1,\n            lineNumber: 1,\n            column: 2,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        '\\'use strict\\'; i <| 02;': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        '\\'use strict\\'; i <| \\'\\\\2\\';': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        '\\'use strict\\'; i <| i2;': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Unexpected identifier'\n        },\n\n        'function hello() { \\'use strict\\'; \"\\\\1\"; }': {\n            index: 33,\n            lineNumber: 1,\n            column: 34,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; 021; }': {\n            index: 33,\n            lineNumber: 1,\n            column: 34,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; ({ \"\\\\1\": 42 }); }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \\'use strict\\'; ({ 021: 42 }); }': {\n            index: 36,\n            lineNumber: 1,\n            column: 37,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"octal directive\\\\1\"; \"use strict\"; }': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"octal directive\\\\1\"; \"octal directive\\\\2\"; \"use strict\"; }': {\n            index: 19,\n            lineNumber: 1,\n            column: 20,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"use strict\"; function inner() { \"octal directive\\\\1\"; } }': {\n            index: 52,\n            lineNumber: 1,\n            column: 53,\n            message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n        },\n\n        'function hello() { \"use strict\"; var implements; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var interface; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var package; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var private; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var protected; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var public; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var static; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var yield; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; var let; }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello(static) { \"use strict\"; }': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function hello() { \"use strict\"; super }': {\n            index: 33,\n            lineNumber: 1,\n            column: 34,\n            message: 'Error: Line 1: Super keyword is only allowed inside class elements'\n        },\n\n        'function static() { \"use strict\"; }': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'var yield': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token yield'\n        },\n\n        'var let': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected token let'\n        },\n\n        'var super': {\n            index: 4,\n            lineNumber: 1,\n            column: 5,\n            message: 'Error: Line 1: Unexpected reserved word'\n        },\n\n        '({ v: eval }) = obj': {\n            index: 13,\n            lineNumber: 1,\n            column: 14,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '({ v: arguments }) = obj': {\n            index: 18,\n            lineNumber: 1,\n            column: 19,\n            message: 'Error: Line 1: Invalid left-hand side in assignment'\n        },\n\n        '\"use strict\"; function static() { }': {\n            index: 23,\n            lineNumber: 1,\n            column: 24,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function a(t, t) { \"use strict\"; }': {\n            index: 14,\n            lineNumber: 1,\n            column: 15,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        'function a(eval) { \"use strict\"; }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        'function a(package) { \"use strict\"; }': {\n            index: 11,\n            lineNumber: 1,\n            column: 12,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'function a() { \"use strict\"; function b(t, t) { }; }': {\n            index: 43,\n            lineNumber: 1,\n            column: 44,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        '(function a(t, t) { \"use strict\"; })': {\n            index: 15,\n            lineNumber: 1,\n            column: 16,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        'function a() { \"use strict\"; (function b(t, t) { }); }': {\n            index: 44,\n            lineNumber: 1,\n            column: 45,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        'function a() { \"use strict\"; ({ b(t, t) { } }); }': {\n            index: 37,\n            lineNumber: 1,\n            column: 38,\n            message: 'Error: Line 1: Strict mode function may not have duplicate parameter names'\n        },\n\n        '(function a(eval) { \"use strict\"; })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Parameter name eval or arguments is not allowed in strict mode'\n        },\n\n        '(function a(package) { \"use strict\"; })': {\n            index: 12,\n            lineNumber: 1,\n            column: 13,\n            message: 'Error: Line 1: Use of future reserved word in strict mode'\n        },\n\n        'for (var i = function() { return 10 in [] } in list) process(x);': {\n            index: 44,\n            lineNumber: 1,\n            column: 45,\n            message: 'Error: Line 1: Unexpected token in'\n        },\n\n        'for (let x = 42 in list) process(x);': {\n            index: 16,\n            lineNumber: 1,\n            column: 17,\n            message: 'Error: Line 1: Unexpected token in'\n        },\n\n        'for (let x = 42 of list) process(x);': {\n            index: 16,\n            lineNumber: 1,\n            column: 17,\n            message: 'Error: Line 1: Unexpected identifier'\n        },\n\n        'module X 0': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected number'\n        },\n\n        'module X at Y': {\n            index: 9,\n            lineNumber: 1,\n            column: 10,\n            message: 'Error: Line 1: Unexpected identifier'\n        },\n\n        'module\\n X = Y': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Illegal newline after module'\n        },\n\n        'module\\n X = \"Y\"': {\n            index: 6,\n            lineNumber: 1,\n            column: 7,\n            message: 'Error: Line 1: Illegal newline after module'\n        },\n\n        'export for': {\n            index: 7,\n            lineNumber: 1,\n            column: 8,\n            message: 'Error: Line 1: Unexpected token for'\n        },\n\n        'import foo': {\n            index: 10,\n            lineNumber: 1,\n            column: 11,\n            message: 'Error: Line 1: Missing from after import'\n        }\n\n    },\n\n    'API': {\n        'parse()': {\n            call: 'parse',\n            args: [],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'undefined'\n                    }\n                }]\n            }\n        },\n\n        'parse(null)': {\n            call: 'parse',\n            args: [null],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: null\n                    }\n                }]\n            }\n        },\n\n        'parse(42)': {\n            call: 'parse',\n            args: [42],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 42\n                    }\n                }]\n            }\n        },\n\n        'parse(true)': {\n            call: 'parse',\n            args: [true],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: true\n                    }\n                }]\n            }\n        },\n\n        'parse(undefined)': {\n            call: 'parse',\n            args: [void 0],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'undefined'\n                    }\n                }]\n            }\n        },\n\n        'parse(new String(\"test\"))': {\n            call: 'parse',\n            args: [new String('test')],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Identifier',\n                        name: 'test'\n                    }\n                }]\n            }\n        },\n\n        'parse(new Number(42))': {\n            call: 'parse',\n            args: [new Number(42)],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: 42\n                    }\n                }]\n            }\n        },\n\n        'parse(new Boolean(true))': {\n            call: 'parse',\n            args: [new Boolean(true)],\n            result: {\n                type: 'Program',\n                body: [{\n                    type: 'ExpressionStatement',\n                    expression: {\n                        type: 'Literal',\n                        value: true\n                    }\n                }]\n            }\n        },\n        \n        'Syntax': {\n            property: 'Syntax',\n            result: {\n                ArrayExpression: 'ArrayExpression',\n                ArrayPattern: 'ArrayPattern',\n                AssignmentExpression: 'AssignmentExpression',\n                BinaryExpression: 'BinaryExpression',\n                BlockStatement: 'BlockStatement',\n                BreakStatement: 'BreakStatement',\n                CallExpression: 'CallExpression',\n                CatchClause: 'CatchClause',\n                ClassBody: 'ClassBody',\n                ClassDeclaration: 'ClassDeclaration',\n                ClassElement: 'ClassElement',\n                ClassHeritage: 'ClassHeritage',\n                ConditionalExpression: 'ConditionalExpression',\n                ContinueStatement: 'ContinueStatement',\n                DebuggerStatement: 'DebuggerStatement',\n                DoWhileStatement: 'DoWhileStatement',\n                EmptyStatement: 'EmptyStatement',\n                ExportDeclaration: 'ExportDeclaration',\n                ExportSpecifier: 'ExportSpecifier',\n                ExportSpecifierSet: 'ExportSpecifierSet',\n                ExpressionStatement: 'ExpressionStatement',\n                ForInStatement: 'ForInStatement',\n                ForOfStatement: 'ForOfStatement',\n                ForStatement: 'ForStatement',\n                FunctionDeclaration: 'FunctionDeclaration',\n                FunctionExpression: 'FunctionExpression',\n                Glob: 'Glob',\n                Identifier: 'Identifier',\n                IfStatement: 'IfStatement',\n                ImportDeclaration: 'ImportDeclaration',\n                ImportSpecifier: 'ImportSpecifier',\n                LabeledStatement: 'LabeledStatement',\n                Literal: 'Literal',\n                LogicalExpression: 'LogicalExpression',\n                MemberExpression: 'MemberExpression',\n                ModuleDeclaration: 'ModuleDeclaration',\n                NewExpression: 'NewExpression',\n                ObjectExpression: 'ObjectExpression',\n                ObjectPattern: 'ObjectPattern',\n                Path:  'Path',\n                Program: 'Program',\n                Property: 'Property',\n                ProtoExpression: 'ProtoExpression',\n                ReturnStatement: 'ReturnStatement',\n                SequenceExpression: 'SequenceExpression',\n                SwitchCase: 'SwitchCase',\n                SwitchStatement: 'SwitchStatement',\n                ThisExpression: 'ThisExpression',\n                ThrowStatement: 'ThrowStatement',\n                TryStatement: 'TryStatement',\n                UnaryExpression: 'UnaryExpression',\n                UpdateExpression: 'UpdateExpression',\n                VariableDeclaration: 'VariableDeclaration',\n                VariableDeclarator: 'VariableDeclarator',\n                WhileStatement: 'WhileStatement',\n                WithStatement: 'WithStatement'\n            }\n        }\n\n    },\n\n    'Tolerant parse': {\n        'return': {\n            type: 'Program',\n            body: [{\n                type: 'ReturnStatement',\n                'argument': null,\n                range: [0, 6],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 6 }\n                }\n            }],\n            range: [0, 6],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 6 }\n            },\n            errors: [{\n                index: 6,\n                lineNumber: 1,\n                column: 7,\n                message: 'Error: Line 1: Illegal return statement'\n            }]\n        },\n\n        '(function () { \\'use strict\\'; with (i); }())': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 'use strict',\n                                    raw: '\\'use strict\\'',\n                                    range: [15, 27],\n                                    loc: {\n                                        start: { line: 1, column: 15 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                range: [15, 28],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            }, {\n                                type: 'WithStatement',\n                                object: {\n                                    type: 'Identifier',\n                                    name: 'i',\n                                    range: [35, 36],\n                                    loc: {\n                                        start: { line: 1, column: 35 },\n                                        end: { line: 1, column: 36 }\n                                    }\n                                },\n                                body: {\n                                    type: 'EmptyStatement',\n                                    range: [37, 38],\n                                    loc: {\n                                        start: { line: 1, column: 37 },\n                                        end: { line: 1, column: 38 }\n                                    }\n                                },\n                                range: [29, 38],\n                                loc: {\n                                    start: { line: 1, column: 29 },\n                                    end: { line: 1, column: 38 }\n                                }\n                            }],\n                            range: [13, 40],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 40 }\n                            }\n                        },\n                        range: [1, 40],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 40 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [1, 43],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 43 }\n                    }\n                },\n                range: [0, 43],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 43 }\n                }\n            }],\n            range: [0, 43],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 43 }\n            },\n            errors: [{\n                index: 29,\n                lineNumber: 1,\n                column: 30,\n                message: 'Error: Line 1: Strict mode code may not include a with statement'\n            }]\n        },\n\n        '(function () { \\'use strict\\'; 021 }())': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'CallExpression',\n                    callee: {\n                        type: 'FunctionExpression',\n                        id: null,\n                        params: [],\n                        body: {\n                            type: 'BlockStatement',\n                            body: [{\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 'use strict',\n                                    raw: '\\'use strict\\'',\n                                    range: [15, 27],\n                                    loc: {\n                                        start: { line: 1, column: 15 },\n                                        end: { line: 1, column: 27 }\n                                    }\n                                },\n                                range: [15, 28],\n                                loc: {\n                                    start: { line: 1, column: 15 },\n                                    end: { line: 1, column: 28 }\n                                }\n                            }, {\n                                type: 'ExpressionStatement',\n                                expression: {\n                                    type: 'Literal',\n                                    value: 17,\n                                    raw: \"021\",\n                                    range: [29, 32],\n                                    loc: {\n                                        start: { line: 1, column: 29 },\n                                        end: { line: 1, column: 32 }\n                                    }\n                                },\n                                range: [29, 33],\n                                loc: {\n                                    start: { line: 1, column: 29 },\n                                    end: { line: 1, column: 33 }\n                                }\n                            }],\n                            range: [13, 34],\n                            loc: {\n                                start: { line: 1, column: 13 },\n                                end: { line: 1, column: 34 }\n                            }\n                        },\n                        range: [1, 34],\n                        loc: {\n                            start: { line: 1, column: 1 },\n                            end: { line: 1, column: 34 }\n                        }\n                    },\n                    'arguments': [],\n                    range: [1, 37],\n                    loc: {\n                        start: { line: 1, column: 1 },\n                        end: { line: 1, column: 37 }\n                    }\n                },\n                range: [0, 37],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 37 }\n                }\n            }],\n            range: [0, 37],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 37 }\n            },\n            errors: [{\n                index: 29,\n                lineNumber: 1,\n                column: 30,\n                message: 'Error: Line 1: Octal literals are not allowed in strict mode.'\n            }]\n        },\n\n        '\"use strict\"; delete x': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'UnaryExpression',\n                    operator: 'delete',\n                    argument: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [21, 22],\n                        loc: {\n                            start: { line: 1, column: 21 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    range: [14, 22],\n                    loc: {\n                        start: { line: 1, column: 14 },\n                        end: { line: 1, column: 22 }\n                    }\n                },\n                range: [14, 22],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 22 }\n                }\n            }],\n            range: [0, 22],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 22 }\n            },\n            errors: [{\n                index: 22,\n                lineNumber: 1,\n                column: 23,\n                message: 'Error: Line 1: Delete of an unqualified identifier in strict mode.'\n            }]\n        },\n\n        '\"use strict\"; try {} catch (eval) {}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'TryStatement',\n                block: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 20],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                handlers: [{\n                    type: 'CatchClause',\n                    param: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [28, 32],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 32 }\n                        }\n                    },\n                    guard: null,\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [34, 36],\n                        loc: {\n                            start: { line: 1, column: 34 },\n                            end: { line: 1, column: 36 }\n                        }\n                    },\n                    range: [21, 36],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 36 }\n                    }\n                }],\n                finalizer: null,\n                range: [14, 36],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 36 }\n                }\n            }],\n            range: [0, 36],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 36 }\n            },\n            errors: [{\n                index: 32,\n                lineNumber: 1,\n                column: 33,\n                message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; try {} catch (arguments) {}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'TryStatement',\n                block: {\n                    type: 'BlockStatement',\n                    body: [],\n                    range: [18, 20],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 20 }\n                    }\n                },\n                handlers: [{\n                    type: 'CatchClause',\n                    param: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [28, 37],\n                        loc: {\n                            start: { line: 1, column: 28 },\n                            end: { line: 1, column: 37 }\n                        }\n                    },\n                    guard: null,\n                    body: {\n                        type: 'BlockStatement',\n                        body: [],\n                        range: [39, 41],\n                        loc: {\n                            start: { line: 1, column: 39 },\n                            end: { line: 1, column: 41 }\n                        }\n                    },\n                    range: [21, 41],\n                    loc: {\n                        start: { line: 1, column: 21 },\n                        end: { line: 1, column: 41 }\n                    }\n                }],\n                finalizer: null,\n                range: [14, 41],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 41 }\n                }\n            }],\n            range: [0, 41],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 41 }\n            },\n            errors: [{\n                index: 37,\n                lineNumber: 1,\n                column: 38,\n                message: 'Error: Line 1: Catch variable may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; var eval;': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'eval',\n                        range: [18, 22],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 22 }\n                        }\n                    },\n                    init: null,\n                    range: [18, 22],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 22 }\n                    }\n                }],\n                kind: 'var',\n                range: [14, 23],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 23 }\n                }\n            }],\n            range: [0, 23],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 23 }\n            },\n            errors: [{\n                index: 22,\n                lineNumber: 1,\n                column: 23,\n                message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\"; var arguments;': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'VariableDeclaration',\n                declarations: [{\n                    type: 'VariableDeclarator',\n                    id: {\n                        type: 'Identifier',\n                        name: 'arguments',\n                        range: [18, 27],\n                        loc: {\n                            start: { line: 1, column: 18 },\n                            end: { line: 1, column: 27 }\n                        }\n                    },\n                    init: null,\n                    range: [18, 27],\n                    loc: {\n                        start: { line: 1, column: 18 },\n                        end: { line: 1, column: 27 }\n                    }\n                }],\n                kind: 'var',\n                range: [14, 28],\n                loc: {\n                    start: { line: 1, column: 14 },\n                    end: { line: 1, column: 28 }\n                }\n            }],\n            range: [0, 28],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 28 }\n            },\n            errors: [{\n                index: 27,\n                lineNumber: 1,\n                column: 28,\n                message: 'Error: Line 1: Variable name may not be eval or arguments in strict mode'\n            }]\n        },\n\n        '\"use strict\";x={y:1,y:1}': {\n            type: 'Program',\n            body: [{\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'Literal',\n                    value: 'use strict',\n                    raw: '\"use strict\"',\n                    range: [0, 12],\n                    loc: {\n                        start: { line: 1, column: 0 },\n                        end: { line: 1, column: 12 }\n                    }\n                },\n                range: [0, 13],\n                loc: {\n                    start: { line: 1, column: 0 },\n                    end: { line: 1, column: 13 }\n                }\n            }, {\n                type: 'ExpressionStatement',\n                expression: {\n                    type: 'AssignmentExpression',\n                    operator: '=',\n                    left: {\n                        type: 'Identifier',\n                        name: 'x',\n                        range: [13, 14],\n                        loc: {\n                            start: { line: 1, column: 13 },\n                            end: { line: 1, column: 14 }\n                        }\n                    },\n                    right: {\n                        type: 'ObjectExpression',\n                        properties: [{\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'y',\n                                range: [16, 17],\n                                loc: {\n                                    start: { line: 1, column: 16 },\n                                    end: { line: 1, column: 17 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [18, 19],\n                                loc: {\n                                    start: { line: 1, column: 18 },\n                                    end: { line: 1, column: 19 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [16, 19],\n                            loc: {\n                                start: { line: 1, column: 16 },\n                                end: { line: 1, column: 19 }\n                            }\n                        }, {\n                            type: 'Property',\n                            key: {\n                                type: 'Identifier',\n                                name: 'y',\n                                range: [20, 21],\n                                loc: {\n                                    start: { line: 1, column: 20 },\n                                    end: { line: 1, column: 21 }\n                                }\n                            },\n                            value: {\n                                type: 'Literal',\n                                value: 1,\n                                raw: '1',\n                                range: [22, 23],\n                                loc: {\n                                    start: { line: 1, column: 22 },\n                                    end: { line: 1, column: 23 }\n                                }\n                            },\n                            kind: 'init',\n                            range: [20, 23],\n                            loc: {\n                                start: { line: 1, column: 20 },\n                                end: { line: 1, column: 23 }\n                            }\n                        }],\n                        range: [15, 24],\n                        loc: {\n                            start: { line: 1, column: 15 },\n                            end: { line: 1, column: 24 }\n                        }\n                    },\n                    range: [13, 24],\n                    loc: {\n                        start: { line: 1, column: 13 },\n                        end: { line: 1, column: 24 }\n                    }\n                },\n                range: [13, 24],\n                loc: {\n                    start: { line: 1, column: 13 },\n                    end: { line: 1, column: 24 }\n                }\n            }],\n            range: [0, 24],\n            loc: {\n                start: { line: 1, column: 0 },\n                end: { line: 1, column: 24 }\n            },\n            errors: [{\n                index: 23,\n                lineNumber: 1,\n                column: 24,\n                message: 'Error: Line 1: Duplicate data property in object literal not allowed in strict mode'\n            }]\n        }\n\n    }\n};\n\n// Special handling for regular expression literal since we need to\n// convert it to a string literal, otherwise it will be decoded\n// as object \"{}\" and the regular expression would be lost.\nfunction adjustRegexLiteral(key, value) {\n    'use strict';\n    if (key === 'value' && value instanceof RegExp) {\n        value = value.toString();\n    }\n    return value;\n}\n\nif (typeof window === 'undefined') {\n    var esprima = require('../esprima');\n}\n\nfunction NotMatchingError(expected, actual) {\n    'use strict';\n    Error.call(this, 'Expected ');\n    this.expected = expected;\n    this.actual = actual;\n}\nNotMatchingError.prototype = new Error();\n\nfunction errorToObject(e) {\n    'use strict';\n    var msg = e.toString();\n\n    // Opera 9.64 produces an non-standard string in toString().\n    if (msg.substr(0, 6) !== 'Error:') {\n        if (typeof e.message === 'string') {\n            msg = 'Error: ' + e.message;\n        }\n    }\n\n    return {\n        index: e.index,\n        lineNumber: e.lineNumber,\n        column: e.column,\n        message: msg\n    };\n}\n\nfunction testParse(code, syntax) {\n    'use strict';\n    var expected, tree, actual, options, StringObject, i, len, err;\n\n    // alias, so that JSLint does not complain.\n    StringObject = String;\n\n    options = {\n        comment: (typeof syntax.comments !== 'undefined'),\n        range: true,\n        loc: true,\n        tokens: (typeof syntax.tokens !== 'undefined'),\n        raw: true,\n        tolerant: (typeof syntax.errors !== 'undefined')\n    };\n\n    expected = JSON.stringify(syntax, null, 4);\n    try {\n        tree = esprima.parse(code, options);\n        tree = (options.comment || options.tokens || options.tolerant) ? tree : tree.body[0];\n\n        if (options.tolerant) {\n            for (i = 0, len = tree.errors.length; i < len; i += 1) {\n                tree.errors[i] = errorToObject(tree.errors[i]);\n            }\n        }\n\n        actual = JSON.stringify(tree, adjustRegexLiteral, 4);\n\n        // Only to ensure that there is no error when using string object.\n        esprima.parse(new StringObject(code), options);\n\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction testError(code, exception) {\n    'use strict';\n    var i, options, expected, actual, handleInvalidRegexFlag;\n\n    // Different parsing options should give the same error.\n    options = [\n        {},\n        { comment: true },\n        { raw: true },\n        { raw: true, comment: true }\n    ];\n\n    // If handleInvalidRegexFlag is true, an invalid flag in a regular expression\n    // will throw an exception. In some old version V8, this is not the case\n    // and hence handleInvalidRegexFlag is false.\n    handleInvalidRegexFlag = false;\n    try {\n        'test'.match(new RegExp('[a-z]', 'x'));\n    } catch (e) {\n        handleInvalidRegexFlag = true;\n    }\n\n    expected = JSON.stringify(exception);\n\n    for (i = 0; i < options.length; i += 1) {\n\n        try {\n            esprima.parse(code, options[i]);\n        } catch (e) {\n            actual = JSON.stringify(errorToObject(e));\n        }\n\n        if (expected !== actual) {\n\n            // Compensate for old V8 which does not handle invalid flag.\n            if (exception.message.indexOf('Invalid regular expression') > 0) {\n                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {\n                    return;\n                }\n            }\n\n            throw new NotMatchingError(expected, actual);\n        }\n\n    }\n}\n\nfunction testAPI(code, result) {\n    'use strict';\n    var expected, res, actual;\n\n    expected = JSON.stringify(result.result, null, 4);\n    try {\n        if (typeof result.property !== 'undefined') {\n            res = esprima[result.property];\n        } else {\n            res = esprima[result.call].apply(esprima, result.args);\n        }\n        actual = JSON.stringify(res, adjustRegexLiteral, 4);\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction runTest(code, result) {\n    'use strict';\n    if (result.hasOwnProperty('lineNumber')) {\n        testError(code, result);\n    } else if (result.hasOwnProperty('result')) {\n        testAPI(code, result);\n    } else {\n        testParse(code, result);\n    }\n}\n\nif (typeof window !== 'undefined') {\n    // Run all tests in a browser environment.\n    runTests = function () {\n        'use strict';\n        var total = 0,\n            failures = 0,\n            category,\n            fixture,\n            source,\n            tick,\n            expected,\n            index,\n            len;\n\n        function setText(el, str) {\n            if (typeof el.innerText === 'string') {\n                el.innerText = str;\n            } else {\n                el.textContent = str;\n            }\n        }\n\n        function startCategory(category) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('h4');\n            setText(e, category);\n            report.appendChild(e);\n        }\n\n        function reportSuccess(code) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n        }\n\n        function reportFailure(code, expected, actual) {\n            var report, e;\n\n            report = document.getElementById('report');\n\n            e = document.createElement('p');\n            setText(e, 'Code:');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Expected');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'expected');\n            setText(e, expected);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Actual');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'actual');\n            setText(e, actual);\n            report.appendChild(e);\n        }\n\n        setText(document.getElementById('version'), esprima.version);\n\n        tick = new Date();\n        for (category in data) {\n            if (data.hasOwnProperty(category)) {\n                startCategory(category);\n                fixture = data[category];\n                for (source in fixture) {\n                    if (fixture.hasOwnProperty(source)) {\n                        expected = fixture[source];\n                        total += 1;\n                        try {\n                            runTest(source, expected);\n                            reportSuccess(source, JSON.stringify(expected, null, 4));\n                        } catch (e) {\n                            failures += 1;\n                            reportFailure(source, e.expected, e.actual);\n                        }\n                    }\n                }\n            }\n        }\n        tick = (new Date()) - tick;\n\n        if (failures > 0) {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'Failures: ' + failures + '. ' + tick + ' ms');\n        } else {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'No failure. ' + tick + ' ms');\n        }\n    };\n} else {\n    (function () {\n        'use strict';\n\n        var total = 0,\n            failures = [],\n            tick = new Date(),\n            expected,\n            header;\n\n        Object.keys(data).forEach(function (category) {\n            Object.keys(data[category]).forEach(function (source) {\n                total += 1;\n                expected = data[category][source];\n                try {\n                    runTest(source, expected);\n                } catch (e) {\n                    e.source = source;\n                    failures.push(e);\n                }\n            });\n        });\n        tick = (new Date()) - tick;\n\n        header = total + ' tests. ' + failures.length + ' failures. ' +\n            tick + ' ms';\n        if (failures.length) {\n            console.error(header);\n            failures.forEach(function (failure) {\n                console.error(failure.source + ': Expected\\n    ' +\n                    failure.expected.split('\\n').join('\\n    ') +\n                    '\\nto match\\n    ' + failure.actual);\n            });\n        } else {\n            console.log(header);\n        }\n        process.exit(failures.length === 0 ? 0 : 1);\n    }());\n}\n/* vim: set sw=4 ts=4 et tw=80 : */","nodes":{"0":{"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":19}},"id":0},"1":{"loc":{"start":{"line":36,"column":0},"end":{"line":20538,"column":2}},"id":1},"2":{"loc":{"start":{"line":20544,"column":4},"end":{"line":20544,"column":17}},"id":2},"3":{"loc":{"start":{"line":20545,"column":8},"end":{"line":20545,"column":50}},"id":3},"4":{"loc":{"start":{"line":20545,"column":8},"end":{"line":20545,"column":23}},"id":4},"5":{"loc":{"start":{"line":20545,"column":27},"end":{"line":20545,"column":50}},"id":5},"6":{"loc":{"start":{"line":20546,"column":8},"end":{"line":20546,"column":33}},"id":6},"7":{"loc":{"start":{"line":20546,"column":16},"end":{"line":20546,"column":32}},"id":7},"8":{"loc":{"start":{"line":20548,"column":4},"end":{"line":20548,"column":17}},"id":8},"9":{"loc":{"start":{"line":20551,"column":4},"end":{"line":20551,"column":33}},"id":9},"10":{"loc":{"start":{"line":20552,"column":4},"end":{"line":20552,"column":40}},"id":10},"11":{"loc":{"start":{"line":20552,"column":18},"end":{"line":20552,"column":39}},"id":11},"12":{"loc":{"start":{"line":20556,"column":4},"end":{"line":20556,"column":17}},"id":12},"13":{"loc":{"start":{"line":20557,"column":4},"end":{"line":20557,"column":34}},"id":13},"14":{"loc":{"start":{"line":20557,"column":4},"end":{"line":20557,"column":33}},"id":14},"15":{"loc":{"start":{"line":20558,"column":4},"end":{"line":20558,"column":29}},"id":15},"16":{"loc":{"start":{"line":20559,"column":4},"end":{"line":20559,"column":25}},"id":16},"17":{"loc":{"start":{"line":20561,"column":0},"end":{"line":20561,"column":41}},"id":17},"18":{"loc":{"start":{"line":20564,"column":4},"end":{"line":20564,"column":17}},"id":18},"19":{"loc":{"start":{"line":20565,"column":4},"end":{"line":20565,"column":27}},"id":19},"20":{"loc":{"start":{"line":20565,"column":14},"end":{"line":20565,"column":26}},"id":20},"21":{"loc":{"start":{"line":20568,"column":8},"end":{"line":20568,"column":37}},"id":21},"22":{"loc":{"start":{"line":20568,"column":8},"end":{"line":20568,"column":24}},"id":22},"23":{"loc":{"start":{"line":20569,"column":12},"end":{"line":20569,"column":41}},"id":23},"24":{"loc":{"start":{"line":20570,"column":12},"end":{"line":20570,"column":40}},"id":24},"25":{"loc":{"start":{"line":20570,"column":18},"end":{"line":20570,"column":39}},"id":25},"26":{"loc":{"start":{"line":20574,"column":4},"end":{"line":20579,"column":6}},"id":26},"27":{"loc":{"start":{"line":20583,"column":4},"end":{"line":20583,"column":17}},"id":27},"28":{"loc":{"start":{"line":20584,"column":4},"end":{"line":20584,"column":67}},"id":28},"29":{"loc":{"start":{"line":20587,"column":4},"end":{"line":20587,"column":26}},"id":29},"30":{"loc":{"start":{"line":20589,"column":4},"end":{"line":20596,"column":6}},"id":30},"31":{"loc":{"start":{"line":20590,"column":17},"end":{"line":20590,"column":57}},"id":31},"32":{"loc":{"start":{"line":20593,"column":16},"end":{"line":20593,"column":54}},"id":32},"33":{"loc":{"start":{"line":20595,"column":18},"end":{"line":20595,"column":56}},"id":33},"34":{"loc":{"start":{"line":20598,"column":4},"end":{"line":20598,"column":47}},"id":34},"35":{"loc":{"start":{"line":20598,"column":15},"end":{"line":20598,"column":46}},"id":35},"36":{"loc":{"start":{"line":20600,"column":8},"end":{"line":20600,"column":44}},"id":36},"37":{"loc":{"start":{"line":20600,"column":15},"end":{"line":20600,"column":43}},"id":37},"38":{"loc":{"start":{"line":20601,"column":8},"end":{"line":20601,"column":93}},"id":38},"39":{"loc":{"start":{"line":20601,"column":73},"end":{"line":20601,"column":77}},"id":39},"40":{"loc":{"start":{"line":20601,"column":80},"end":{"line":20601,"column":92}},"id":40},"41":{"loc":{"start":{"line":20601,"column":15},"end":{"line":20601,"column":70}},"id":41},"42":{"loc":{"start":{"line":20601,"column":16},"end":{"line":20601,"column":49}},"id":42},"43":{"loc":{"start":{"line":20604,"column":50},"end":{"line":20604,"column":57}},"id":43},"44":{"loc":{"start":{"line":20605,"column":16},"end":{"line":20605,"column":63}},"id":44},"45":{"loc":{"start":{"line":20605,"column":33},"end":{"line":20605,"column":62}},"id":45},"46":{"loc":{"start":{"line":20609,"column":8},"end":{"line":20609,"column":61}},"id":46},"47":{"loc":{"start":{"line":20609,"column":17},"end":{"line":20609,"column":60}},"id":47},"48":{"loc":{"start":{"line":20612,"column":8},"end":{"line":20612,"column":55}},"id":48},"49":{"loc":{"start":{"line":20612,"column":8},"end":{"line":20612,"column":54}},"id":49},"50":{"loc":{"start":{"line":20615,"column":8},"end":{"line":20615,"column":59}},"id":50},"51":{"loc":{"start":{"line":20615,"column":45},"end":{"line":20615,"column":57}},"id":51},"52":{"loc":{"start":{"line":20617,"column":8},"end":{"line":20617,"column":27}},"id":52},"53":{"loc":{"start":{"line":20618,"column":8},"end":{"line":20618,"column":53}},"id":53},"54":{"loc":{"start":{"line":20623,"column":4},"end":{"line":20623,"column":17}},"id":54},"55":{"loc":{"start":{"line":20624,"column":4},"end":{"line":20624,"column":61}},"id":55},"56":{"loc":{"start":{"line":20627,"column":4},"end":{"line":20632,"column":6}},"id":56},"57":{"loc":{"start":{"line":20637,"column":4},"end":{"line":20637,"column":35}},"id":57},"58":{"loc":{"start":{"line":20639,"column":8},"end":{"line":20639,"column":47}},"id":58},"59":{"loc":{"start":{"line":20639,"column":8},"end":{"line":20639,"column":46}},"id":59},"60":{"loc":{"start":{"line":20641,"column":8},"end":{"line":20641,"column":38}},"id":60},"61":{"loc":{"start":{"line":20644,"column":4},"end":{"line":20644,"column":41}},"id":61},"62":{"loc":{"start":{"line":20644,"column":15},"end":{"line":20644,"column":40}},"id":62},"63":{"loc":{"start":{"line":20646,"column":16},"end":{"line":20646,"column":34}},"id":63},"64":{"loc":{"start":{"line":20649,"column":12},"end":{"line":20649,"column":44}},"id":64},"65":{"loc":{"start":{"line":20649,"column":12},"end":{"line":20649,"column":43}},"id":65},"66":{"loc":{"start":{"line":20651,"column":12},"end":{"line":20651,"column":54}},"id":66},"67":{"loc":{"start":{"line":20651,"column":21},"end":{"line":20651,"column":53}},"id":67},"68":{"loc":{"start":{"line":20651,"column":36},"end":{"line":20651,"column":52}},"id":68},"69":{"loc":{"start":{"line":20654,"column":12},"end":{"line":20654,"column":31}},"id":69},"70":{"loc":{"start":{"line":20657,"column":16},"end":{"line":20657,"column":75}},"id":70},"71":{"loc":{"start":{"line":20657,"column":16},"end":{"line":20657,"column":71}},"id":71},"72":{"loc":{"start":{"line":20658,"column":20},"end":{"line":20658,"column":76}},"id":72},"73":{"loc":{"start":{"line":20658,"column":20},"end":{"line":20658,"column":49}},"id":73},"74":{"loc":{"start":{"line":20659,"column":20},"end":{"line":20659,"column":27}},"id":74},"75":{"loc":{"start":{"line":20663,"column":12},"end":{"line":20663,"column":57}},"id":75},"76":{"loc":{"start":{"line":20670,"column":4},"end":{"line":20670,"column":17}},"id":76},"77":{"loc":{"start":{"line":20671,"column":4},"end":{"line":20671,"column":30}},"id":77},"78":{"loc":{"start":{"line":20673,"column":4},"end":{"line":20673,"column":54}},"id":78},"79":{"loc":{"start":{"line":20673,"column":15},"end":{"line":20673,"column":53}},"id":79},"80":{"loc":{"start":{"line":20675,"column":12},"end":{"line":20675,"column":50}},"id":80},"81":{"loc":{"start":{"line":20676,"column":12},"end":{"line":20676,"column":43}},"id":81},"82":{"loc":{"start":{"line":20678,"column":12},"end":{"line":20678,"column":67}},"id":82},"83":{"loc":{"start":{"line":20678,"column":18},"end":{"line":20678,"column":66}},"id":83},"84":{"loc":{"start":{"line":20680,"column":8},"end":{"line":20680,"column":60}},"id":84},"85":{"loc":{"start":{"line":20680,"column":17},"end":{"line":20680,"column":59}},"id":85},"86":{"loc":{"start":{"line":20682,"column":8},"end":{"line":20682,"column":59}},"id":86},"87":{"loc":{"start":{"line":20682,"column":45},"end":{"line":20682,"column":57}},"id":87},"88":{"loc":{"start":{"line":20684,"column":8},"end":{"line":20684,"column":27}},"id":88},"89":{"loc":{"start":{"line":20685,"column":8},"end":{"line":20685,"column":53}},"id":89},"90":{"loc":{"start":{"line":20690,"column":4},"end":{"line":20690,"column":17}},"id":90},"91":{"loc":{"start":{"line":20691,"column":8},"end":{"line":20691,"column":43}},"id":91},"92":{"loc":{"start":{"line":20692,"column":8},"end":{"line":20692,"column":32}},"id":92},"93":{"loc":{"start":{"line":20692,"column":8},"end":{"line":20692,"column":31}},"id":93},"94":{"loc":{"start":{"line":20693,"column":15},"end":{"line":20693,"column":46}},"id":94},"95":{"loc":{"start":{"line":20694,"column":8},"end":{"line":20694,"column":30}},"id":95},"96":{"loc":{"start":{"line":20694,"column":8},"end":{"line":20694,"column":29}},"id":96},"97":{"loc":{"start":{"line":20696,"column":8},"end":{"line":20696,"column":32}},"id":97},"98":{"loc":{"start":{"line":20696,"column":8},"end":{"line":20696,"column":31}},"id":98},"99":{"loc":{"start":{"line":20700,"column":4},"end":{"line":20700,"column":33}},"id":99},"100":{"loc":{"start":{"line":20702,"column":4},"end":{"line":20803,"column":6}},"id":100},"101":{"loc":{"start":{"line":20703,"column":8},"end":{"line":20703,"column":21}},"id":101},"102":{"loc":{"start":{"line":20704,"column":8},"end":{"line":20712,"column":16}},"id":102},"103":{"loc":{"start":{"line":20715,"column":16},"end":{"line":20715,"column":48}},"id":103},"104":{"loc":{"start":{"line":20716,"column":16},"end":{"line":20716,"column":35}},"id":104},"105":{"loc":{"start":{"line":20718,"column":16},"end":{"line":20718,"column":37}},"id":105},"106":{"loc":{"start":{"line":20723,"column":12},"end":{"line":20723,"column":26}},"id":106},"107":{"loc":{"start":{"line":20724,"column":12},"end":{"line":20724,"column":55}},"id":107},"108":{"loc":{"start":{"line":20724,"column":21},"end":{"line":20724,"column":54}},"id":108},"109":{"loc":{"start":{"line":20725,"column":12},"end":{"line":20725,"column":45}},"id":109},"110":{"loc":{"start":{"line":20725,"column":16},"end":{"line":20725,"column":44}},"id":110},"111":{"loc":{"start":{"line":20726,"column":12},"end":{"line":20726,"column":33}},"id":111},"112":{"loc":{"start":{"line":20726,"column":12},"end":{"line":20726,"column":32}},"id":112},"113":{"loc":{"start":{"line":20727,"column":12},"end":{"line":20727,"column":34}},"id":113},"114":{"loc":{"start":{"line":20727,"column":12},"end":{"line":20727,"column":33}},"id":114},"115":{"loc":{"start":{"line":20731,"column":12},"end":{"line":20731,"column":26}},"id":115},"116":{"loc":{"start":{"line":20732,"column":12},"end":{"line":20732,"column":55}},"id":116},"117":{"loc":{"start":{"line":20732,"column":21},"end":{"line":20732,"column":54}},"id":117},"118":{"loc":{"start":{"line":20733,"column":12},"end":{"line":20733,"column":46}},"id":118},"119":{"loc":{"start":{"line":20733,"column":16},"end":{"line":20733,"column":45}},"id":119},"120":{"loc":{"start":{"line":20734,"column":12},"end":{"line":20734,"column":44}},"id":120},"121":{"loc":{"start":{"line":20734,"column":12},"end":{"line":20734,"column":43}},"id":121},"122":{"loc":{"start":{"line":20735,"column":12},"end":{"line":20735,"column":29}},"id":122},"123":{"loc":{"start":{"line":20735,"column":12},"end":{"line":20735,"column":28}},"id":123},"124":{"loc":{"start":{"line":20736,"column":12},"end":{"line":20736,"column":34}},"id":124},"125":{"loc":{"start":{"line":20736,"column":12},"end":{"line":20736,"column":33}},"id":125},"126":{"loc":{"start":{"line":20740,"column":12},"end":{"line":20740,"column":26}},"id":126},"127":{"loc":{"start":{"line":20742,"column":12},"end":{"line":20742,"column":55}},"id":127},"128":{"loc":{"start":{"line":20742,"column":21},"end":{"line":20742,"column":54}},"id":128},"129":{"loc":{"start":{"line":20744,"column":12},"end":{"line":20744,"column":44}},"id":129},"130":{"loc":{"start":{"line":20744,"column":16},"end":{"line":20744,"column":43}},"id":130},"131":{"loc":{"start":{"line":20745,"column":12},"end":{"line":20745,"column":32}},"id":131},"132":{"loc":{"start":{"line":20745,"column":12},"end":{"line":20745,"column":31}},"id":132},"133":{"loc":{"start":{"line":20746,"column":12},"end":{"line":20746,"column":34}},"id":133},"134":{"loc":{"start":{"line":20746,"column":12},"end":{"line":20746,"column":33}},"id":134},"135":{"loc":{"start":{"line":20748,"column":12},"end":{"line":20748,"column":46}},"id":135},"136":{"loc":{"start":{"line":20748,"column":16},"end":{"line":20748,"column":45}},"id":136},"137":{"loc":{"start":{"line":20749,"column":12},"end":{"line":20749,"column":44}},"id":137},"138":{"loc":{"start":{"line":20749,"column":12},"end":{"line":20749,"column":43}},"id":138},"139":{"loc":{"start":{"line":20750,"column":12},"end":{"line":20750,"column":29}},"id":139},"140":{"loc":{"start":{"line":20750,"column":12},"end":{"line":20750,"column":28}},"id":140},"141":{"loc":{"start":{"line":20751,"column":12},"end":{"line":20751,"column":34}},"id":141},"142":{"loc":{"start":{"line":20751,"column":12},"end":{"line":20751,"column":33}},"id":142},"143":{"loc":{"start":{"line":20753,"column":12},"end":{"line":20753,"column":44}},"id":143},"144":{"loc":{"start":{"line":20753,"column":16},"end":{"line":20753,"column":43}},"id":144},"145":{"loc":{"start":{"line":20754,"column":12},"end":{"line":20754,"column":35}},"id":145},"146":{"loc":{"start":{"line":20754,"column":12},"end":{"line":20754,"column":34}},"id":146},"147":{"loc":{"start":{"line":20755,"column":12},"end":{"line":20755,"column":34}},"id":147},"148":{"loc":{"start":{"line":20755,"column":12},"end":{"line":20755,"column":33}},"id":148},"149":{"loc":{"start":{"line":20757,"column":12},"end":{"line":20757,"column":46}},"id":149},"150":{"loc":{"start":{"line":20757,"column":16},"end":{"line":20757,"column":45}},"id":150},"151":{"loc":{"start":{"line":20758,"column":12},"end":{"line":20758,"column":48}},"id":151},"152":{"loc":{"start":{"line":20758,"column":12},"end":{"line":20758,"column":47}},"id":152},"153":{"loc":{"start":{"line":20759,"column":12},"end":{"line":20759,"column":33}},"id":153},"154":{"loc":{"start":{"line":20759,"column":12},"end":{"line":20759,"column":32}},"id":154},"155":{"loc":{"start":{"line":20760,"column":12},"end":{"line":20760,"column":34}},"id":155},"156":{"loc":{"start":{"line":20760,"column":12},"end":{"line":20760,"column":33}},"id":156},"157":{"loc":{"start":{"line":20762,"column":12},"end":{"line":20762,"column":44}},"id":157},"158":{"loc":{"start":{"line":20762,"column":16},"end":{"line":20762,"column":43}},"id":158},"159":{"loc":{"start":{"line":20763,"column":12},"end":{"line":20763,"column":33}},"id":159},"160":{"loc":{"start":{"line":20763,"column":12},"end":{"line":20763,"column":32}},"id":160},"161":{"loc":{"start":{"line":20764,"column":12},"end":{"line":20764,"column":34}},"id":161},"162":{"loc":{"start":{"line":20764,"column":12},"end":{"line":20764,"column":33}},"id":162},"163":{"loc":{"start":{"line":20766,"column":12},"end":{"line":20766,"column":46}},"id":163},"164":{"loc":{"start":{"line":20766,"column":16},"end":{"line":20766,"column":45}},"id":164},"165":{"loc":{"start":{"line":20767,"column":12},"end":{"line":20767,"column":46}},"id":165},"166":{"loc":{"start":{"line":20767,"column":12},"end":{"line":20767,"column":45}},"id":166},"167":{"loc":{"start":{"line":20768,"column":12},"end":{"line":20768,"column":31}},"id":167},"168":{"loc":{"start":{"line":20768,"column":12},"end":{"line":20768,"column":30}},"id":168},"169":{"loc":{"start":{"line":20769,"column":12},"end":{"line":20769,"column":34}},"id":169},"170":{"loc":{"start":{"line":20769,"column":12},"end":{"line":20769,"column":33}},"id":170},"171":{"loc":{"start":{"line":20772,"column":8},"end":{"line":20772,"column":69}},"id":171},"172":{"loc":{"start":{"line":20772,"column":8},"end":{"line":20772,"column":68}},"id":172},"173":{"loc":{"start":{"line":20772,"column":16},"end":{"line":20772,"column":50}},"id":173},"174":{"loc":{"start":{"line":20774,"column":8},"end":{"line":20774,"column":26}},"id":174},"175":{"loc":{"start":{"line":20776,"column":16},"end":{"line":20776,"column":45}},"id":175},"176":{"loc":{"start":{"line":20777,"column":16},"end":{"line":20777,"column":40}},"id":176},"177":{"loc":{"start":{"line":20777,"column":16},"end":{"line":20777,"column":39}},"id":177},"178":{"loc":{"start":{"line":20778,"column":16},"end":{"line":20778,"column":41}},"id":178},"179":{"loc":{"start":{"line":20780,"column":24},"end":{"line":20780,"column":54}},"id":179},"180":{"loc":{"start":{"line":20781,"column":24},"end":{"line":20781,"column":51}},"id":180},"181":{"loc":{"start":{"line":20782,"column":24},"end":{"line":20782,"column":35}},"id":181},"182":{"loc":{"start":{"line":20784,"column":28},"end":{"line":20784,"column":54}},"id":182},"183":{"loc":{"start":{"line":20784,"column":28},"end":{"line":20784,"column":53}},"id":183},"184":{"loc":{"start":{"line":20785,"column":28},"end":{"line":20785,"column":85}},"id":184},"185":{"loc":{"start":{"line":20785,"column":28},"end":{"line":20785,"column":84}},"id":185},"186":{"loc":{"start":{"line":20785,"column":50},"end":{"line":20785,"column":83}},"id":186},"187":{"loc":{"start":{"line":20787,"column":28},"end":{"line":20787,"column":42}},"id":187},"188":{"loc":{"start":{"line":20788,"column":28},"end":{"line":20788,"column":72}},"id":188},"189":{"loc":{"start":{"line":20788,"column":28},"end":{"line":20788,"column":71}},"id":189},"190":{"loc":{"start":{"line":20794,"column":8},"end":{"line":20794,"column":35}},"id":190},"191":{"loc":{"start":{"line":20794,"column":15},"end":{"line":20794,"column":34}},"id":191},"192":{"loc":{"start":{"line":20796,"column":12},"end":{"line":20796,"column":24}},"id":192},"193":{"loc":{"start":{"line":20797,"column":12},"end":{"line":20798,"column":63}},"id":193},"194":{"loc":{"start":{"line":20797,"column":12},"end":{"line":20798,"column":62}},"id":194},"195":{"loc":{"start":{"line":20797,"column":20},"end":{"line":20797,"column":53}},"id":195},"196":{"loc":{"start":{"line":20797,"column":55},"end":{"line":20798,"column":61}},"id":196},"197":{"loc":{"start":{"line":20797,"column":55},"end":{"line":20798,"column":53}},"id":197},"198":{"loc":{"start":{"line":20797,"column":55},"end":{"line":20798,"column":46}},"id":198},"199":{"loc":{"start":{"line":20797,"column":55},"end":{"line":20798,"column":39}},"id":199},"200":{"loc":{"start":{"line":20797,"column":55},"end":{"line":20798,"column":28}},"id":200},"201":{"loc":{"start":{"line":20797,"column":55},"end":{"line":20797,"column":73}},"id":201},"202":{"loc":{"start":{"line":20800,"column":12},"end":{"line":20801,"column":47}},"id":202},"203":{"loc":{"start":{"line":20800,"column":12},"end":{"line":20801,"column":46}},"id":203},"204":{"loc":{"start":{"line":20800,"column":20},"end":{"line":20800,"column":53}},"id":204},"205":{"loc":{"start":{"line":20800,"column":55},"end":{"line":20801,"column":45}},"id":205},"206":{"loc":{"start":{"line":20800,"column":55},"end":{"line":20801,"column":37}},"id":206},"207":{"loc":{"start":{"line":20800,"column":55},"end":{"line":20801,"column":30}},"id":207},"208":{"loc":{"start":{"line":20800,"column":55},"end":{"line":20800,"column":73}},"id":208},"209":{"loc":{"start":{"line":20805,"column":4},"end":{"line":20841,"column":9}},"id":209},"210":{"loc":{"start":{"line":20805,"column":4},"end":{"line":20841,"column":8}},"id":210},"211":{"loc":{"start":{"line":20806,"column":8},"end":{"line":20806,"column":21}},"id":211},"212":{"loc":{"start":{"line":20808,"column":8},"end":{"line":20812,"column":19}},"id":212},"213":{"loc":{"start":{"line":20814,"column":8},"end":{"line":20825,"column":11}},"id":213},"214":{"loc":{"start":{"line":20814,"column":8},"end":{"line":20825,"column":10}},"id":214},"215":{"loc":{"start":{"line":20814,"column":19},"end":{"line":20814,"column":25}},"id":215},"216":{"loc":{"start":{"line":20815,"column":12},"end":{"line":20824,"column":15}},"id":216},"217":{"loc":{"start":{"line":20815,"column":12},"end":{"line":20824,"column":14}},"id":217},"218":{"loc":{"start":{"line":20815,"column":23},"end":{"line":20815,"column":39}},"id":218},"219":{"loc":{"start":{"line":20816,"column":16},"end":{"line":20816,"column":27}},"id":219},"220":{"loc":{"start":{"line":20817,"column":16},"end":{"line":20817,"column":50}},"id":220},"221":{"loc":{"start":{"line":20819,"column":20},"end":{"line":20819,"column":46}},"id":221},"222":{"loc":{"start":{"line":20819,"column":20},"end":{"line":20819,"column":45}},"id":222},"223":{"loc":{"start":{"line":20821,"column":20},"end":{"line":20821,"column":38}},"id":223},"224":{"loc":{"start":{"line":20822,"column":20},"end":{"line":20822,"column":37}},"id":224},"225":{"loc":{"start":{"line":20822,"column":20},"end":{"line":20822,"column":36}},"id":225},"226":{"loc":{"start":{"line":20826,"column":8},"end":{"line":20826,"column":35}},"id":226},"227":{"loc":{"start":{"line":20826,"column":15},"end":{"line":20826,"column":34}},"id":227},"228":{"loc":{"start":{"line":20828,"column":8},"end":{"line":20829,"column":25}},"id":228},"229":{"loc":{"start":{"line":20828,"column":17},"end":{"line":20829,"column":24}},"id":229},"230":{"loc":{"start":{"line":20828,"column":17},"end":{"line":20829,"column":16}},"id":230},"231":{"loc":{"start":{"line":20828,"column":17},"end":{"line":20828,"column":69}},"id":231},"232":{"loc":{"start":{"line":20828,"column":17},"end":{"line":20828,"column":53}},"id":232},"233":{"loc":{"start":{"line":20828,"column":17},"end":{"line":20828,"column":35}},"id":233},"234":{"loc":{"start":{"line":20831,"column":12},"end":{"line":20831,"column":34}},"id":234},"235":{"loc":{"start":{"line":20831,"column":12},"end":{"line":20831,"column":33}},"id":235},"236":{"loc":{"start":{"line":20832,"column":12},"end":{"line":20836,"column":15}},"id":236},"237":{"loc":{"start":{"line":20832,"column":12},"end":{"line":20836,"column":14}},"id":237},"238":{"loc":{"start":{"line":20833,"column":16},"end":{"line":20835,"column":57}},"id":238},"239":{"loc":{"start":{"line":20833,"column":16},"end":{"line":20835,"column":56}},"id":239},"240":{"loc":{"start":{"line":20833,"column":30},"end":{"line":20835,"column":55}},"id":240},"241":{"loc":{"start":{"line":20833,"column":30},"end":{"line":20835,"column":38}},"id":241},"242":{"loc":{"start":{"line":20833,"column":30},"end":{"line":20834,"column":63}},"id":242},"243":{"loc":{"start":{"line":20833,"column":30},"end":{"line":20833,"column":65}},"id":243},"244":{"loc":{"start":{"line":20834,"column":20},"end":{"line":20834,"column":63}},"id":244},"245":{"loc":{"start":{"line":20834,"column":42},"end":{"line":20834,"column":48}},"id":245},"246":{"loc":{"start":{"line":20838,"column":12},"end":{"line":20838,"column":32}},"id":246},"247":{"loc":{"start":{"line":20838,"column":12},"end":{"line":20838,"column":31}},"id":247},"248":{"loc":{"start":{"line":20840,"column":8},"end":{"line":20840,"column":52}},"id":248},"249":{"loc":{"start":{"line":20840,"column":8},"end":{"line":20840,"column":51}},"id":249},"250":{"loc":{"start":{"line":20840,"column":45},"end":{"line":20840,"column":46}},"id":250},"251":{"loc":{"start":{"line":20840,"column":49},"end":{"line":20840,"column":50}},"id":251},"252":{"loc":{"start":{"line":20840,"column":21},"end":{"line":20840,"column":42}},"id":252}}}},"/Users/voloko/code/esprima/esprima.js":{"nodes":{"0":{"index":0,"count":1},"1":{"index":1,"count":1},"2":{"index":2,"count":1},"3":{"index":3,"count":1},"4":{"index":4,"count":1},"5":{"index":5,"count":1},"6":{"index":6,"count":1},"7":{"index":7,"count":1},"8":{"index":8,"count":1},"9":{"index":9,"count":1},"10":{"index":10,"count":1},"11":{"index":11,"count":1},"12":{"index":12,"count":1},"13":{"index":13,"count":1},"14":{"index":14,"count":1},"15":{"index":15,"count":1},"16":{"index":16,"count":1},"17":{"index":17,"count":1},"20":{"index":20,"count":1064},"21":{"index":21,"count":1064},"22":{"index":22,"count":1},"27":{"index":27,"count":5462},"28":{"index":28,"count":5462},"29":{"index":29,"count":5462},"30":{"index":30,"count":154},"31":{"index":31,"count":154},"32":{"index":32,"count":154},"33":{"index":33,"count":352},"34":{"index":34,"count":352},"35":{"index":35,"count":352},"36":{"index":36,"count":40502},"37":{"index":37,"count":40502},"38":{"index":38,"count":40502},"39":{"index":39,"count":40502},"40":{"index":40,"count":40502},"41":{"index":41,"count":40502},"42":{"index":42,"count":40502},"43":{"index":43,"count":34758},"44":{"index":44,"count":34758},"45":{"index":45,"count":34758},"46":{"index":46,"count":34758},"47":{"index":47,"count":34758},"48":{"index":48,"count":34758},"49":{"index":49,"count":34758},"50":{"index":50,"count":132},"51":{"index":51,"count":132},"52":{"index":52,"count":40058},"53":{"index":53,"count":40058},"54":{"index":54,"count":40058},"55":{"index":55,"count":40058},"56":{"index":56,"count":40058},"57":{"index":57,"count":39782},"58":{"index":58,"count":39740},"59":{"index":59,"count":39740},"60":{"index":60,"count":4012},"61":{"index":61,"count":4012},"62":{"index":62,"count":4012},"63":{"index":63,"count":4012},"64":{"index":64,"count":4012},"65":{"index":65,"count":4012},"66":{"index":66,"count":4012},"67":{"index":67,"count":4012},"68":{"index":68,"count":4012},"69":{"index":69,"count":3992},"70":{"index":70,"count":3992},"71":{"index":71,"count":3600},"72":{"index":72,"count":414},"73":{"index":73,"count":414},"74":{"index":74,"count":110},"75":{"index":75,"count":332},"76":{"index":76,"count":332},"77":{"index":77,"count":332},"78":{"index":78,"count":18},"79":{"index":79,"count":14312},"80":{"index":80,"count":14312},"81":{"index":81,"count":14312},"82":{"index":82,"count":14312},"83":{"index":83,"count":14312},"84":{"index":84,"count":14312},"85":{"index":85,"count":14312},"86":{"index":86,"count":14312},"87":{"index":87,"count":14312},"88":{"index":88,"count":14296},"89":{"index":89,"count":14272},"90":{"index":90,"count":14272},"91":{"index":91,"count":10830},"92":{"index":92,"count":3458},"93":{"index":93,"count":3458},"94":{"index":94,"count":116},"95":{"index":95,"count":3376},"96":{"index":96,"count":3376},"97":{"index":97,"count":372},"98":{"index":98,"count":3368},"99":{"index":99,"count":3368},"100":{"index":100,"count":3368},"101":{"index":101,"count":16},"102":{"index":102,"count":70},"103":{"index":103,"count":1310},"104":{"index":104,"count":92},"105":{"index":105,"count":450},"106":{"index":106,"count":534},"107":{"index":107,"count":534},"108":{"index":108,"count":534},"109":{"index":109,"count":440},"110":{"index":110,"count":2518},"111":{"index":111,"count":174},"112":{"index":112,"count":174},"113":{"index":113,"count":174},"114":{"index":114,"count":174},"115":{"index":115,"count":114},"116":{"index":116,"count":76},"117":{"index":117,"count":500},"118":{"index":118,"count":500},"119":{"index":119,"count":500},"120":{"index":120,"count":500},"121":{"index":121,"count":500},"122":{"index":122,"count":356},"123":{"index":123,"count":284},"124":{"index":124,"count":260},"125":{"index":125,"count":346},"126":{"index":126,"count":346},"127":{"index":127,"count":346},"128":{"index":128,"count":346},"129":{"index":129,"count":346},"130":{"index":130,"count":346},"131":{"index":131,"count":344},"132":{"index":132,"count":338},"133":{"index":133,"count":332},"134":{"index":134,"count":330},"135":{"index":135,"count":530},"136":{"index":136,"count":530},"137":{"index":137,"count":530},"138":{"index":138,"count":530},"139":{"index":139,"count":530},"140":{"index":140,"count":458},"141":{"index":141,"count":412},"142":{"index":142,"count":388},"143":{"index":143,"count":196},"144":{"index":144,"count":196},"145":{"index":145,"count":196},"146":{"index":146,"count":196},"147":{"index":147,"count":196},"148":{"index":148,"count":168},"149":{"index":149,"count":166},"150":{"index":150,"count":158},"151":{"index":151,"count":84},"152":{"index":152,"count":84},"153":{"index":153,"count":84},"154":{"index":154,"count":78},"155":{"index":155,"count":542},"156":{"index":156,"count":542},"157":{"index":157,"count":542},"158":{"index":158,"count":542},"159":{"index":159,"count":124},"160":{"index":160,"count":82},"161":{"index":161,"count":12},"162":{"index":162,"count":12},"163":{"index":163,"count":1106},"164":{"index":164,"count":24},"165":{"index":165,"count":46},"166":{"index":166,"count":1342},"167":{"index":167,"count":184},"168":{"index":168,"count":32},"169":{"index":169,"count":1310},"170":{"index":170,"count":30},"171":{"index":171,"count":1280},"172":{"index":172,"count":1280},"173":{"index":173,"count":22574},"174":{"index":174,"count":22574},"175":{"index":175,"count":32996},"176":{"index":176,"count":32996},"177":{"index":177,"count":32996},"178":{"index":178,"count":38610},"179":{"index":179,"count":36834},"180":{"index":180,"count":250},"181":{"index":181,"count":250},"182":{"index":182,"count":250},"183":{"index":183,"count":32},"184":{"index":184,"count":32},"185":{"index":185,"count":32},"186":{"index":186,"count":4},"187":{"index":187,"count":2},"188":{"index":188,"count":2},"189":{"index":189,"count":32},"190":{"index":190,"count":32},"191":{"index":191,"count":32},"192":{"index":192,"count":736},"193":{"index":193,"count":54},"194":{"index":194,"count":54},"195":{"index":195,"count":6},"196":{"index":196,"count":6},"197":{"index":197,"count":2},"198":{"index":198,"count":2},"199":{"index":199,"count":54},"200":{"index":200,"count":54},"201":{"index":201,"count":54},"202":{"index":202,"count":54},"203":{"index":203,"count":54},"204":{"index":204,"count":54},"205":{"index":205,"count":2},"206":{"index":206,"count":2},"207":{"index":207,"count":682},"208":{"index":208,"count":682},"209":{"index":209,"count":682},"210":{"index":210,"count":8},"211":{"index":211,"count":8},"212":{"index":212,"count":674},"213":{"index":213,"count":40},"214":{"index":214,"count":40},"215":{"index":215,"count":40},"216":{"index":216,"count":40},"217":{"index":217,"count":40},"218":{"index":218,"count":35848},"219":{"index":219,"count":342},"220":{"index":220,"count":342},"221":{"index":221,"count":342},"222":{"index":222,"count":32},"223":{"index":223,"count":32},"224":{"index":224,"count":310},"225":{"index":225,"count":52},"226":{"index":226,"count":52},"227":{"index":227,"count":52},"228":{"index":228,"count":2},"229":{"index":229,"count":2},"230":{"index":230,"count":35506},"231":{"index":231,"count":4438},"232":{"index":232,"count":4438},"233":{"index":233,"count":31068},"234":{"index":234,"count":118},"235":{"index":235,"count":118},"236":{"index":236,"count":118},"237":{"index":237,"count":118},"238":{"index":238,"count":8},"239":{"index":239,"count":2},"240":{"index":240,"count":2},"241":{"index":241,"count":118},"242":{"index":242,"count":118},"243":{"index":243,"count":118},"244":{"index":244,"count":42},"245":{"index":245,"count":42},"246":{"index":246,"count":38},"247":{"index":247,"count":4},"248":{"index":248,"count":42},"249":{"index":249,"count":148},"250":{"index":250,"count":106},"251":{"index":251,"count":122},"252":{"index":252,"count":122},"253":{"index":253,"count":114},"254":{"index":254,"count":106},"255":{"index":255,"count":106},"256":{"index":256,"count":106},"257":{"index":257,"count":106},"258":{"index":258,"count":106},"259":{"index":259,"count":106},"260":{"index":260,"count":106},"261":{"index":261,"count":16},"262":{"index":262,"count":26},"263":{"index":263,"count":26},"264":{"index":264,"count":3654},"265":{"index":265,"count":3654},"266":{"index":266,"count":3654},"267":{"index":267,"count":12},"268":{"index":268,"count":3642},"269":{"index":269,"count":3642},"270":{"index":270,"count":20},"271":{"index":271,"count":20},"272":{"index":272,"count":20},"273":{"index":273,"count":8},"274":{"index":274,"count":12},"275":{"index":275,"count":12},"276":{"index":276,"count":12},"277":{"index":277,"count":12},"278":{"index":278,"count":12},"279":{"index":279,"count":10},"280":{"index":280,"count":10},"281":{"index":281,"count":6},"282":{"index":282,"count":8},"283":{"index":283,"count":2},"284":{"index":284,"count":2},"285":{"index":285,"count":2},"286":{"index":286,"count":3622},"287":{"index":287,"count":3622},"288":{"index":288,"count":14546},"289":{"index":289,"count":14282},"290":{"index":290,"count":14282},"291":{"index":291,"count":10932},"292":{"index":292,"count":16},"293":{"index":293,"count":16},"294":{"index":294,"count":16},"295":{"index":295,"count":4},"296":{"index":296,"count":12},"297":{"index":297,"count":12},"298":{"index":298,"count":12},"299":{"index":299,"count":12},"300":{"index":300,"count":12},"301":{"index":301,"count":10},"302":{"index":302,"count":10},"303":{"index":303,"count":6},"304":{"index":304,"count":8},"305":{"index":305,"count":2},"306":{"index":306,"count":2},"307":{"index":307,"count":2},"308":{"index":308,"count":10916},"309":{"index":309,"count":10916},"310":{"index":310,"count":3614},"311":{"index":311,"count":1096},"312":{"index":312,"count":2518},"313":{"index":313,"count":1300},"314":{"index":314,"count":1218},"315":{"index":315,"count":39},"316":{"index":316,"count":1179},"317":{"index":317,"count":1179},"318":{"index":318,"count":1089},"319":{"index":319,"count":124},"320":{"index":320,"count":1055},"321":{"index":321,"count":9550},"322":{"index":322,"count":9550},"323":{"index":323,"count":9550},"324":{"index":324,"count":9550},"325":{"index":325,"count":9000},"326":{"index":326,"count":8156},"327":{"index":327,"count":1886},"328":{"index":328,"count":1886},"329":{"index":329,"count":1886},"330":{"index":330,"count":7664},"331":{"index":331,"count":7664},"332":{"index":332,"count":7664},"333":{"index":333,"count":7494},"334":{"index":334,"count":6474},"335":{"index":335,"count":1990},"336":{"index":336,"count":1990},"337":{"index":337,"count":1990},"338":{"index":338,"count":5674},"339":{"index":339,"count":5674},"340":{"index":340,"count":5674},"341":{"index":341,"count":5674},"342":{"index":342,"count":80},"343":{"index":343,"count":78},"344":{"index":344,"count":78},"345":{"index":345,"count":5596},"346":{"index":346,"count":5596},"347":{"index":347,"count":5596},"348":{"index":348,"count":5596},"349":{"index":349,"count":5596},"350":{"index":350,"count":5596},"351":{"index":351,"count":5596},"352":{"index":352,"count":12},"353":{"index":353,"count":8},"354":{"index":354,"count":4},"355":{"index":355,"count":2},"356":{"index":356,"count":2},"357":{"index":357,"count":5594},"358":{"index":358,"count":5594},"359":{"index":359,"count":5594},"360":{"index":360,"count":306},"361":{"index":361,"count":4},"362":{"index":362,"count":2},"363":{"index":363,"count":2},"364":{"index":364,"count":5592},"365":{"index":365,"count":5592},"366":{"index":366,"count":5592},"367":{"index":367,"count":6},"368":{"index":368,"count":4},"369":{"index":369,"count":2},"370":{"index":370,"count":2},"371":{"index":371,"count":5590},"372":{"index":372,"count":5590},"373":{"index":373,"count":5590},"374":{"index":374,"count":10},"375":{"index":375,"count":6},"376":{"index":376,"count":2},"377":{"index":377,"count":2},"378":{"index":378,"count":5588},"379":{"index":379,"count":5588},"380":{"index":380,"count":5588},"381":{"index":381,"count":54},"382":{"index":382,"count":8},"383":{"index":383,"count":2},"384":{"index":384,"count":2},"385":{"index":385,"count":5586},"386":{"index":386,"count":5586},"387":{"index":387,"count":5586},"388":{"index":388,"count":8},"389":{"index":389,"count":4},"390":{"index":390,"count":2},"391":{"index":391,"count":2},"392":{"index":392,"count":5584},"393":{"index":393,"count":30},"394":{"index":394,"count":30},"395":{"index":395,"count":28},"396":{"index":396,"count":28},"397":{"index":397,"count":28},"398":{"index":398,"count":5556},"399":{"index":399,"count":5556},"400":{"index":400,"count":110},"401":{"index":401,"count":110},"402":{"index":402,"count":100},"403":{"index":403,"count":100},"404":{"index":404,"count":100},"405":{"index":405,"count":100},"406":{"index":406,"count":100},"407":{"index":407,"count":5456},"408":{"index":408,"count":5456},"409":{"index":409,"count":44},"410":{"index":410,"count":32},"411":{"index":411,"count":32},"412":{"index":412,"count":5424},"413":{"index":413,"count":5424},"414":{"index":414,"count":836},"415":{"index":415,"count":836},"416":{"index":416,"count":526},"417":{"index":417,"count":526},"418":{"index":418,"count":526},"419":{"index":419,"count":526},"420":{"index":420,"count":526},"421":{"index":421,"count":526},"422":{"index":422,"count":2},"423":{"index":423,"count":526},"424":{"index":424,"count":526},"425":{"index":425,"count":526},"426":{"index":426,"count":524},"427":{"index":427,"count":524},"428":{"index":428,"count":524},"429":{"index":429,"count":524},"430":{"index":430,"count":176},"431":{"index":431,"count":176},"432":{"index":432,"count":158},"433":{"index":433,"count":22},"434":{"index":434,"count":22},"435":{"index":435,"count":58},"436":{"index":436,"count":40},"437":{"index":437,"count":40},"438":{"index":438,"count":36},"439":{"index":439,"count":36},"440":{"index":440,"count":22},"441":{"index":441,"count":4},"442":{"index":442,"count":4},"443":{"index":443,"count":18},"444":{"index":444,"count":4},"445":{"index":445,"count":4},"446":{"index":446,"count":4},"447":{"index":447,"count":4},"448":{"index":448,"count":14},"449":{"index":449,"count":14},"450":{"index":450,"count":154},"451":{"index":451,"count":154},"452":{"index":452,"count":128},"453":{"index":453,"count":52},"454":{"index":454,"count":52},"455":{"index":455,"count":52},"456":{"index":456,"count":92},"457":{"index":457,"count":72},"458":{"index":458,"count":72},"459":{"index":459,"count":72},"460":{"index":460,"count":64},"461":{"index":461,"count":40},"462":{"index":462,"count":40},"463":{"index":463,"count":52},"464":{"index":464,"count":16},"465":{"index":465,"count":16},"466":{"index":466,"count":36},"467":{"index":467,"count":24},"468":{"index":468,"count":24},"469":{"index":469,"count":24},"470":{"index":470,"count":16},"471":{"index":471,"count":24},"472":{"index":472,"count":24},"473":{"index":473,"count":12},"474":{"index":474,"count":12},"475":{"index":475,"count":102},"476":{"index":476,"count":102},"477":{"index":477,"count":102},"478":{"index":478,"count":78},"479":{"index":479,"count":54},"480":{"index":480,"count":74},"481":{"index":481,"count":26},"482":{"index":482,"count":26},"483":{"index":483,"count":26},"484":{"index":484,"count":48},"485":{"index":485,"count":48},"486":{"index":486,"count":48},"487":{"index":487,"count":48},"488":{"index":488,"count":126},"489":{"index":489,"count":98},"490":{"index":490,"count":98},"491":{"index":491,"count":52},"492":{"index":492,"count":52},"493":{"index":493,"count":74},"494":{"index":494,"count":16},"495":{"index":495,"count":16},"496":{"index":496,"count":58},"497":{"index":497,"count":38},"498":{"index":498,"count":38},"499":{"index":499,"count":38},"500":{"index":500,"count":30},"501":{"index":501,"count":20},"502":{"index":502,"count":20},"503":{"index":503,"count":38},"504":{"index":504,"count":38},"505":{"index":505,"count":28},"506":{"index":506,"count":4},"507":{"index":507,"count":4},"508":{"index":508,"count":600},"509":{"index":509,"count":522},"510":{"index":510,"count":522},"511":{"index":511,"count":228},"512":{"index":512,"count":228},"513":{"index":513,"count":374},"514":{"index":514,"count":8},"515":{"index":515,"count":8},"516":{"index":516,"count":56},"517":{"index":517,"count":52},"518":{"index":518,"count":52},"519":{"index":519,"count":48},"520":{"index":520,"count":48},"521":{"index":521,"count":374},"522":{"index":522,"count":374},"523":{"index":523,"count":352},"524":{"index":524,"count":22},"525":{"index":525,"count":22},"526":{"index":526,"count":22},"527":{"index":527,"count":22},"528":{"index":528,"count":22},"529":{"index":529,"count":14},"530":{"index":530,"count":14},"531":{"index":531,"count":14},"532":{"index":532,"count":22},"533":{"index":533,"count":22},"534":{"index":534,"count":6},"535":{"index":535,"count":6},"536":{"index":536,"count":14},"537":{"index":537,"count":8},"538":{"index":538,"count":8},"539":{"index":539,"count":8},"540":{"index":540,"count":8},"541":{"index":541,"count":16},"542":{"index":542,"count":16},"543":{"index":543,"count":16},"544":{"index":544,"count":12},"545":{"index":545,"count":16},"546":{"index":546,"count":16},"547":{"index":547,"count":358},"548":{"index":548,"count":270},"549":{"index":549,"count":270},"550":{"index":550,"count":16},"551":{"index":551,"count":16},"552":{"index":552,"count":342},"553":{"index":553,"count":342},"554":{"index":554,"count":408},"555":{"index":555,"count":408},"556":{"index":556,"count":408},"557":{"index":557,"count":408},"558":{"index":558,"count":408},"559":{"index":559,"count":408},"560":{"index":560,"count":214},"561":{"index":561,"count":408},"562":{"index":562,"count":408},"563":{"index":563,"count":408},"564":{"index":564,"count":4190},"565":{"index":565,"count":4182},"566":{"index":566,"count":4182},"567":{"index":567,"count":4182},"568":{"index":568,"count":392},"569":{"index":569,"count":3790},"570":{"index":570,"count":94},"571":{"index":571,"count":94},"572":{"index":572,"count":94},"573":{"index":573,"count":4},"574":{"index":574,"count":2},"575":{"index":575,"count":2},"576":{"index":576,"count":12},"577":{"index":577,"count":12},"578":{"index":578,"count":12},"579":{"index":579,"count":4},"580":{"index":580,"count":8},"581":{"index":581,"count":8},"582":{"index":582,"count":2},"583":{"index":583,"count":2},"584":{"index":584,"count":2},"585":{"index":585,"count":64},"586":{"index":586,"count":52},"587":{"index":587,"count":52},"588":{"index":588,"count":52},"589":{"index":589,"count":42},"590":{"index":590,"count":52},"591":{"index":591,"count":52},"592":{"index":592,"count":52},"593":{"index":593,"count":14},"594":{"index":594,"count":14},"595":{"index":595,"count":14},"596":{"index":596,"count":14},"597":{"index":597,"count":14},"598":{"index":598,"count":14},"599":{"index":599,"count":14},"600":{"index":600,"count":14},"601":{"index":601,"count":14},"602":{"index":602,"count":14},"603":{"index":603,"count":10},"604":{"index":604,"count":10},"605":{"index":605,"count":8},"606":{"index":606,"count":8},"607":{"index":607,"count":8},"608":{"index":608,"count":8},"609":{"index":609,"count":8},"610":{"index":610,"count":52},"611":{"index":611,"count":52},"612":{"index":612,"count":12},"613":{"index":613,"count":4},"614":{"index":614,"count":4},"615":{"index":615,"count":4},"616":{"index":616,"count":4},"617":{"index":617,"count":2},"618":{"index":618,"count":2},"619":{"index":619,"count":2},"620":{"index":620,"count":3696},"621":{"index":621,"count":3688},"622":{"index":622,"count":408},"623":{"index":623,"count":16},"624":{"index":624,"count":16},"625":{"index":625,"count":392},"626":{"index":626,"count":36},"627":{"index":627,"count":36},"628":{"index":628,"count":36},"629":{"index":629,"count":36},"630":{"index":630,"count":36},"631":{"index":631,"count":36},"632":{"index":632,"count":36},"633":{"index":633,"count":36},"634":{"index":634,"count":36},"635":{"index":635,"count":36},"636":{"index":636,"count":36},"637":{"index":637,"count":166},"638":{"index":638,"count":162},"639":{"index":639,"count":162},"640":{"index":640,"count":162},"641":{"index":641,"count":64},"642":{"index":642,"count":14},"643":{"index":643,"count":98},"644":{"index":644,"count":6},"645":{"index":645,"count":6},"646":{"index":646,"count":6},"647":{"index":647,"count":4},"648":{"index":648,"count":4},"649":{"index":649,"count":2},"650":{"index":650,"count":92},"651":{"index":651,"count":68},"652":{"index":652,"count":14},"653":{"index":653,"count":54},"654":{"index":654,"count":4},"655":{"index":655,"count":4},"656":{"index":656,"count":28},"657":{"index":657,"count":4},"658":{"index":658,"count":4},"659":{"index":659,"count":24},"660":{"index":660,"count":24},"661":{"index":661,"count":24},"662":{"index":662,"count":24},"663":{"index":663,"count":48},"664":{"index":664,"count":24},"665":{"index":665,"count":24},"666":{"index":666,"count":24},"667":{"index":667,"count":24},"668":{"index":668,"count":24},"669":{"index":669,"count":24},"670":{"index":670,"count":8},"671":{"index":671,"count":8},"672":{"index":672,"count":8},"673":{"index":673,"count":6},"674":{"index":674,"count":6},"675":{"index":675,"count":6},"676":{"index":676,"count":6},"677":{"index":677,"count":6},"678":{"index":678,"count":2},"679":{"index":679,"count":2},"680":{"index":680,"count":10},"681":{"index":681,"count":8},"682":{"index":682,"count":8},"683":{"index":683,"count":4},"684":{"index":684,"count":4},"685":{"index":685,"count":4},"686":{"index":686,"count":2},"687":{"index":687,"count":16},"688":{"index":688,"count":16},"689":{"index":689,"count":24},"690":{"index":690,"count":8},"691":{"index":691,"count":8},"692":{"index":692,"count":16},"693":{"index":693,"count":62},"694":{"index":694,"count":62},"695":{"index":695,"count":62},"696":{"index":696,"count":62},"697":{"index":697,"count":62},"698":{"index":698,"count":32},"699":{"index":699,"count":30},"700":{"index":700,"count":26},"701":{"index":701,"count":10274},"702":{"index":702,"count":10274},"703":{"index":703,"count":10274},"704":{"index":704,"count":10250},"705":{"index":705,"count":700},"706":{"index":706,"count":9550},"707":{"index":707,"count":9550},"708":{"index":708,"count":9550},"709":{"index":709,"count":4962},"710":{"index":710,"count":4588},"711":{"index":711,"count":4588},"712":{"index":712,"count":4588},"713":{"index":713,"count":4394},"714":{"index":714,"count":408},"715":{"index":715,"count":408},"716":{"index":716,"count":4180},"717":{"index":717,"count":4180},"718":{"index":718,"count":4178},"719":{"index":719,"count":526},"720":{"index":720,"count":526},"721":{"index":721,"count":3654},"722":{"index":722,"count":3654},"723":{"index":723,"count":3654},"724":{"index":724,"count":3614},"725":{"index":725,"count":40},"726":{"index":726,"count":40},"727":{"index":727,"count":9194},"728":{"index":728,"count":7660},"729":{"index":729,"count":7660},"730":{"index":730,"count":7660},"731":{"index":731,"count":7660},"732":{"index":732,"count":7660},"733":{"index":733,"count":7660},"734":{"index":734,"count":1534},"735":{"index":735,"count":1534},"736":{"index":736,"count":1534},"737":{"index":737,"count":109123},"738":{"index":738,"count":109123},"739":{"index":739,"count":100383},"740":{"index":740,"count":8740},"741":{"index":741,"count":8740},"742":{"index":742,"count":8740},"743":{"index":743,"count":8740},"744":{"index":744,"count":8740},"745":{"index":745,"count":8540},"746":{"index":746,"count":8540},"747":{"index":747,"count":8540},"748":{"index":748,"count":8540},"749":{"index":749,"count":2104},"750":{"index":750,"count":2104},"751":{"index":751,"count":2104},"752":{"index":752,"count":2104},"753":{"index":753,"count":2104},"754":{"index":754,"count":2104},"755":{"index":755,"count":2104},"756":{"index":756,"count":2104},"757":{"index":757,"count":2104},"758":{"index":758,"count":2104},"759":{"index":759,"count":2104},"760":{"index":760,"count":2104},"761":{"index":761,"count":930},"762":{"index":762,"count":930},"763":{"index":763,"count":930},"764":{"index":764,"count":392},"765":{"index":765,"count":392},"766":{"index":766,"count":930},"767":{"index":767,"count":486},"768":{"index":768,"count":486},"769":{"index":769,"count":486},"770":{"index":770,"count":486},"771":{"index":771,"count":486},"772":{"index":772,"count":486},"773":{"index":773,"count":486},"774":{"index":774,"count":486},"775":{"index":775,"count":486},"776":{"index":776,"count":444},"777":{"index":777,"count":444},"778":{"index":778,"count":444},"779":{"index":779,"count":444},"780":{"index":780,"count":444},"781":{"index":781,"count":444},"782":{"index":782,"count":444},"783":{"index":783,"count":444},"784":{"index":784,"count":444},"785":{"index":785,"count":930},"786":{"index":786,"count":74},"787":{"index":787,"count":74},"788":{"index":788,"count":74},"789":{"index":789,"count":18},"790":{"index":790,"count":18},"791":{"index":791,"count":56},"792":{"index":792,"count":324},"793":{"index":793,"count":324},"794":{"index":794,"count":60},"795":{"index":795,"count":60},"796":{"index":796,"count":264},"797":{"index":797,"count":20},"798":{"index":798,"count":20},"799":{"index":799,"count":244},"800":{"index":800,"count":4},"801":{"index":801,"count":4},"802":{"index":802,"count":240},"803":{"index":803,"count":24},"804":{"index":804,"count":24},"805":{"index":805,"count":216},"806":{"index":806,"count":100},"807":{"index":807,"count":8},"808":{"index":808,"count":8},"809":{"index":809,"count":92},"810":{"index":810,"count":40},"811":{"index":811,"count":40},"812":{"index":812,"count":40},"813":{"index":813,"count":52},"814":{"index":814,"count":52},"815":{"index":815,"count":116},"816":{"index":816,"count":116},"817":{"index":817,"count":3318},"818":{"index":818,"count":3318},"819":{"index":819,"count":3318},"820":{"index":820,"count":3318},"821":{"index":821,"count":3282},"822":{"index":822,"count":68},"823":{"index":823,"count":68},"824":{"index":824,"count":1094},"825":{"index":825,"count":1094},"826":{"index":826,"count":1094},"827":{"index":827,"count":1094},"828":{"index":828,"count":1090},"829":{"index":829,"count":4},"830":{"index":830,"count":4},"831":{"index":831,"count":76439},"832":{"index":832,"count":76439},"833":{"index":833,"count":76435},"834":{"index":834,"count":76435},"835":{"index":835,"count":76435},"836":{"index":836,"count":45808},"837":{"index":837,"count":14588},"838":{"index":838,"count":14588},"839":{"index":839,"count":14588},"840":{"index":840,"count":14588},"841":{"index":841,"count":14588},"842":{"index":842,"count":1110},"843":{"index":843,"count":3840},"844":{"index":844,"count":3840},"845":{"index":845,"count":3840},"846":{"index":846,"count":3840},"847":{"index":847,"count":3840},"848":{"index":848,"count":76},"849":{"index":849,"count":1854},"850":{"index":850,"count":1854},"851":{"index":851,"count":1854},"852":{"index":852,"count":634},"853":{"index":853,"count":1220},"854":{"index":854,"count":1220},"855":{"index":855,"count":1220},"856":{"index":856,"count":1220},"857":{"index":857,"count":1220},"858":{"index":858,"count":1220},"859":{"index":859,"count":1220},"860":{"index":860,"count":1220},"861":{"index":861,"count":1220},"862":{"index":862,"count":1220},"863":{"index":863,"count":1220},"864":{"index":864,"count":1220},"865":{"index":865,"count":1220},"866":{"index":866,"count":1032},"867":{"index":867,"count":1030},"868":{"index":868,"count":1028},"869":{"index":869,"count":1026},"870":{"index":870,"count":1024},"871":{"index":871,"count":1022},"872":{"index":872,"count":1020},"873":{"index":873,"count":1018},"874":{"index":874,"count":1016},"875":{"index":875,"count":1014},"876":{"index":876,"count":1012},"877":{"index":877,"count":1178},"878":{"index":878,"count":1178},"879":{"index":879,"count":430},"880":{"index":880,"count":430},"881":{"index":881,"count":430},"882":{"index":882,"count":748},"883":{"index":883,"count":748},"884":{"index":884,"count":748},"885":{"index":885,"count":748},"886":{"index":886,"count":26},"887":{"index":887,"count":722},"888":{"index":888,"count":2},"889":{"index":889,"count":2},"890":{"index":890,"count":2},"891":{"index":891,"count":720},"892":{"index":892,"count":720},"893":{"index":893,"count":720},"894":{"index":894,"count":720},"895":{"index":895,"count":118},"896":{"index":896,"count":36},"897":{"index":897,"count":36},"898":{"index":898,"count":684},"899":{"index":899,"count":16},"900":{"index":900,"count":180},"901":{"index":901,"count":52},"902":{"index":902,"count":52},"903":{"index":903,"count":52},"904":{"index":904,"count":92},"905":{"index":905,"count":48},"906":{"index":906,"count":10},"907":{"index":907,"count":10},"908":{"index":908,"count":10},"909":{"index":909,"count":10},"910":{"index":910,"count":38},"911":{"index":911,"count":38},"912":{"index":912,"count":38},"913":{"index":913,"count":30},"914":{"index":914,"count":18},"915":{"index":915,"count":18},"916":{"index":916,"count":44},"917":{"index":917,"count":44},"918":{"index":918,"count":44},"919":{"index":919,"count":2},"920":{"index":920,"count":2},"921":{"index":921,"count":2},"922":{"index":922,"count":2},"923":{"index":923,"count":90},"924":{"index":924,"count":90},"925":{"index":925,"count":90},"926":{"index":926,"count":90},"927":{"index":927,"count":90},"928":{"index":928,"count":90},"929":{"index":929,"count":8},"930":{"index":930,"count":8},"931":{"index":931,"count":8},"932":{"index":932,"count":82},"933":{"index":933,"count":82},"934":{"index":934,"count":20},"935":{"index":935,"count":20},"936":{"index":936,"count":20},"937":{"index":937,"count":20},"938":{"index":938,"count":20},"939":{"index":939,"count":20},"940":{"index":940,"count":20},"941":{"index":941,"count":10},"942":{"index":942,"count":14},"943":{"index":943,"count":14},"944":{"index":944,"count":14},"945":{"index":945,"count":14},"946":{"index":946,"count":14},"947":{"index":947,"count":14},"948":{"index":948,"count":4},"949":{"index":949,"count":4},"950":{"index":950,"count":10},"951":{"index":951,"count":4},"952":{"index":952,"count":4},"953":{"index":953,"count":6},"954":{"index":954,"count":6},"955":{"index":955,"count":6},"956":{"index":956,"count":6},"957":{"index":957,"count":4},"958":{"index":958,"count":4},"959":{"index":959,"count":12},"960":{"index":960,"count":12},"961":{"index":961,"count":12},"962":{"index":962,"count":12},"963":{"index":963,"count":12},"964":{"index":964,"count":12},"965":{"index":965,"count":320},"966":{"index":966,"count":320},"967":{"index":967,"count":320},"968":{"index":968,"count":320},"969":{"index":969,"count":306},"970":{"index":970,"count":24},"971":{"index":971,"count":8},"972":{"index":972,"count":8},"973":{"index":973,"count":16},"974":{"index":974,"count":16},"975":{"index":975,"count":296},"976":{"index":976,"count":242},"977":{"index":977,"count":242},"978":{"index":978,"count":242},"979":{"index":979,"count":242},"980":{"index":980,"count":210},"981":{"index":981,"count":210},"982":{"index":982,"count":210},"983":{"index":983,"count":210},"984":{"index":984,"count":46},"985":{"index":985,"count":46},"986":{"index":986,"count":40},"987":{"index":987,"count":38},"988":{"index":988,"count":38},"989":{"index":989,"count":38},"990":{"index":990,"count":38},"991":{"index":991,"count":38},"992":{"index":992,"count":38},"993":{"index":993,"count":38},"994":{"index":994,"count":38},"995":{"index":995,"count":172},"996":{"index":996,"count":172},"997":{"index":997,"count":60},"998":{"index":998,"count":60},"999":{"index":999,"count":46},"1000":{"index":1000,"count":44},"1001":{"index":1001,"count":44},"1002":{"index":1002,"count":44},"1003":{"index":1003,"count":44},"1004":{"index":1004,"count":44},"1005":{"index":1005,"count":44},"1006":{"index":1006,"count":44},"1007":{"index":1007,"count":4},"1008":{"index":1008,"count":4},"1009":{"index":1009,"count":4},"1010":{"index":1010,"count":40},"1011":{"index":1011,"count":40},"1012":{"index":1012,"count":40},"1013":{"index":1013,"count":40},"1014":{"index":1014,"count":40},"1015":{"index":1015,"count":40},"1016":{"index":1016,"count":128},"1017":{"index":1017,"count":106},"1018":{"index":1018,"count":106},"1019":{"index":1019,"count":106},"1020":{"index":1020,"count":106},"1021":{"index":1021,"count":22},"1022":{"index":1022,"count":18},"1023":{"index":1023,"count":18},"1024":{"index":1024,"count":4},"1025":{"index":1025,"count":32},"1026":{"index":1026,"count":32},"1027":{"index":1027,"count":24},"1028":{"index":1028,"count":8},"1029":{"index":1029,"count":8},"1030":{"index":1030,"count":24},"1031":{"index":1031,"count":24},"1032":{"index":1032,"count":16},"1033":{"index":1033,"count":10},"1034":{"index":1034,"count":10},"1035":{"index":1035,"count":10},"1036":{"index":1036,"count":10},"1037":{"index":1037,"count":6},"1038":{"index":1038,"count":2},"1039":{"index":1039,"count":2},"1040":{"index":1040,"count":4},"1041":{"index":1041,"count":208},"1042":{"index":1042,"count":208},"1043":{"index":1043,"count":208},"1044":{"index":1044,"count":354},"1045":{"index":1045,"count":242},"1046":{"index":1046,"count":242},"1047":{"index":1047,"count":194},"1048":{"index":1048,"count":178},"1049":{"index":1049,"count":16},"1050":{"index":1050,"count":16},"1051":{"index":1051,"count":194},"1052":{"index":1052,"count":124},"1053":{"index":1053,"count":70},"1054":{"index":1054,"count":194},"1055":{"index":1055,"count":38},"1056":{"index":1056,"count":32},"1057":{"index":1057,"count":70},"1058":{"index":1058,"count":194},"1059":{"index":1059,"count":36},"1060":{"index":1060,"count":20},"1061":{"index":1061,"count":10},"1062":{"index":1062,"count":10},"1063":{"index":1063,"count":10},"1064":{"index":1064,"count":10},"1065":{"index":1065,"count":8},"1066":{"index":1066,"count":8},"1067":{"index":1067,"count":16},"1068":{"index":1068,"count":8},"1069":{"index":1069,"count":8},"1070":{"index":1070,"count":8},"1071":{"index":1071,"count":8},"1072":{"index":1072,"count":8},"1073":{"index":1073,"count":4},"1074":{"index":1074,"count":158},"1075":{"index":1075,"count":162},"1076":{"index":1076,"count":162},"1077":{"index":1077,"count":162},"1078":{"index":1078,"count":68},"1079":{"index":1079,"count":68},"1080":{"index":1080,"count":112},"1081":{"index":1081,"count":112},"1082":{"index":1082,"count":112},"1083":{"index":1083,"count":6},"1084":{"index":1084,"count":6},"1085":{"index":1085,"count":6},"1086":{"index":1086,"count":6},"1087":{"index":1087,"count":2544},"1088":{"index":1088,"count":2544},"1089":{"index":1089,"count":2544},"1090":{"index":1090,"count":1027},"1091":{"index":1091,"count":1027},"1092":{"index":1092,"count":1517},"1093":{"index":1093,"count":1517},"1094":{"index":1094,"count":1149},"1095":{"index":1095,"count":738},"1096":{"index":1096,"count":14},"1097":{"index":1097,"count":14},"1098":{"index":1098,"count":726},"1099":{"index":1099,"count":726},"1100":{"index":1100,"count":726},"1101":{"index":1101,"count":779},"1102":{"index":1102,"count":128},"1103":{"index":1103,"count":2},"1104":{"index":1104,"count":2},"1105":{"index":1105,"count":2},"1106":{"index":1106,"count":126},"1107":{"index":1107,"count":106},"1108":{"index":1108,"count":106},"1109":{"index":1109,"count":20},"1110":{"index":1110,"count":2},"1111":{"index":1111,"count":2},"1112":{"index":1112,"count":18},"1113":{"index":1113,"count":6},"1114":{"index":1114,"count":4},"1115":{"index":1115,"count":4},"1116":{"index":1116,"count":2},"1117":{"index":1117,"count":2},"1118":{"index":1118,"count":2},"1119":{"index":1119,"count":663},"1120":{"index":1120,"count":88},"1121":{"index":1121,"count":88},"1122":{"index":1122,"count":88},"1123":{"index":1123,"count":88},"1124":{"index":1124,"count":88},"1125":{"index":1125,"count":88},"1126":{"index":1126,"count":575},"1127":{"index":1127,"count":3},"1128":{"index":1128,"count":3},"1129":{"index":1129,"count":3},"1130":{"index":1130,"count":3},"1131":{"index":1131,"count":3},"1132":{"index":1132,"count":572},"1133":{"index":1133,"count":48},"1134":{"index":1134,"count":48},"1135":{"index":1135,"count":524},"1136":{"index":1136,"count":200},"1137":{"index":1137,"count":200},"1138":{"index":1138,"count":324},"1139":{"index":1139,"count":204},"1140":{"index":1140,"count":204},"1141":{"index":1141,"count":204},"1142":{"index":1142,"count":204},"1143":{"index":1143,"count":56},"1144":{"index":1144,"count":56},"1145":{"index":1145,"count":56},"1146":{"index":1146,"count":120},"1147":{"index":1147,"count":120},"1148":{"index":1148,"count":90},"1149":{"index":1149,"count":32},"1150":{"index":1150,"count":32},"1151":{"index":1151,"count":32},"1152":{"index":1152,"count":88},"1153":{"index":1153,"count":8},"1154":{"index":1154,"count":8},"1155":{"index":1155,"count":8},"1156":{"index":1156,"count":2},"1157":{"index":1157,"count":2},"1158":{"index":1158,"count":6},"1159":{"index":1159,"count":6},"1160":{"index":1160,"count":6},"1161":{"index":1161,"count":80},"1162":{"index":1162,"count":80},"1163":{"index":1163,"count":80},"1164":{"index":1164,"count":116},"1165":{"index":1165,"count":116},"1166":{"index":1166,"count":116},"1167":{"index":1167,"count":116},"1168":{"index":1168,"count":60},"1169":{"index":1169,"count":60},"1170":{"index":1170,"count":60},"1171":{"index":1171,"count":60},"1172":{"index":1172,"count":56},"1173":{"index":1173,"count":10},"1174":{"index":1174,"count":10},"1175":{"index":1175,"count":112},"1176":{"index":1176,"count":112},"1177":{"index":1177,"count":112},"1178":{"index":1178,"count":62},"1179":{"index":1179,"count":62},"1180":{"index":1180,"count":62},"1181":{"index":1181,"count":4},"1182":{"index":1182,"count":4},"1183":{"index":1183,"count":58},"1184":{"index":1184,"count":62},"1185":{"index":1185,"count":62},"1186":{"index":1186,"count":8},"1187":{"index":1187,"count":8},"1188":{"index":1188,"count":8},"1189":{"index":1189,"count":8},"1190":{"index":1190,"count":8},"1191":{"index":1191,"count":8},"1192":{"index":1192,"count":8},"1193":{"index":1193,"count":8},"1194":{"index":1194,"count":8},"1195":{"index":1195,"count":104},"1196":{"index":1196,"count":104},"1197":{"index":1197,"count":24},"1198":{"index":1198,"count":24},"1199":{"index":1199,"count":24},"1200":{"index":1200,"count":24},"1201":{"index":1201,"count":24},"1202":{"index":1202,"count":24},"1203":{"index":1203,"count":12},"1204":{"index":1204,"count":12},"1205":{"index":1205,"count":24},"1206":{"index":1206,"count":32},"1207":{"index":1207,"count":32},"1208":{"index":1208,"count":32},"1209":{"index":1209,"count":32},"1210":{"index":1210,"count":26},"1211":{"index":1211,"count":12},"1212":{"index":1212,"count":8},"1213":{"index":1213,"count":8},"1214":{"index":1214,"count":4},"1215":{"index":1215,"count":4},"1216":{"index":1216,"count":4},"1217":{"index":1217,"count":20},"1218":{"index":1218,"count":4},"1219":{"index":1219,"count":4},"1220":{"index":1220,"count":4},"1221":{"index":1221,"count":16},"1222":{"index":1222,"count":4},"1223":{"index":1223,"count":4},"1224":{"index":1224,"count":4},"1225":{"index":1225,"count":4},"1226":{"index":1226,"count":4},"1227":{"index":1227,"count":4},"1228":{"index":1228,"count":12},"1229":{"index":1229,"count":2},"1230":{"index":1230,"count":2},"1231":{"index":1231,"count":10},"1232":{"index":1232,"count":2},"1233":{"index":1233,"count":2},"1234":{"index":1234,"count":8},"1235":{"index":1235,"count":8},"1236":{"index":1236,"count":6},"1237":{"index":1237,"count":4},"1238":{"index":1238,"count":4},"1239":{"index":1239,"count":4},"1240":{"index":1240,"count":4},"1241":{"index":1241,"count":4},"1242":{"index":1242,"count":4},"1243":{"index":1243,"count":32},"1244":{"index":1244,"count":32},"1245":{"index":1245,"count":32},"1246":{"index":1246,"count":32},"1247":{"index":1247,"count":2540},"1248":{"index":1248,"count":2540},"1249":{"index":1249,"count":2540},"1250":{"index":1250,"count":2540},"1251":{"index":1251,"count":20},"1252":{"index":1252,"count":2520},"1253":{"index":1253,"count":20},"1254":{"index":1254,"count":2520},"1255":{"index":1255,"count":2282},"1256":{"index":1256,"count":1750},"1257":{"index":1257,"count":58},"1258":{"index":1258,"count":58},"1259":{"index":1259,"count":58},"1260":{"index":1260,"count":58},"1261":{"index":1261,"count":1692},"1262":{"index":1262,"count":6},"1263":{"index":1263,"count":6},"1264":{"index":1264,"count":1686},"1265":{"index":1265,"count":30},"1266":{"index":1266,"count":30},"1267":{"index":1267,"count":1656},"1268":{"index":1268,"count":104},"1269":{"index":1269,"count":104},"1270":{"index":1270,"count":2084},"1271":{"index":1271,"count":24},"1272":{"index":1272,"count":24},"1273":{"index":1273,"count":24},"1274":{"index":1274,"count":24},"1275":{"index":1275,"count":4},"1276":{"index":1276,"count":20},"1277":{"index":1277,"count":4},"1278":{"index":1278,"count":20},"1279":{"index":1279,"count":32},"1280":{"index":1280,"count":20},"1281":{"index":1281,"count":4},"1282":{"index":1282,"count":4},"1283":{"index":1283,"count":4},"1284":{"index":1284,"count":4},"1285":{"index":1285,"count":16},"1286":{"index":1286,"count":2},"1287":{"index":1287,"count":2},"1288":{"index":1288,"count":14},"1289":{"index":1289,"count":2},"1290":{"index":1290,"count":2},"1291":{"index":1291,"count":24},"1292":{"index":1292,"count":2540},"1293":{"index":1293,"count":2540},"1294":{"index":1294,"count":2084},"1295":{"index":1295,"count":2084},"1296":{"index":1296,"count":2084},"1297":{"index":1297,"count":2060},"1298":{"index":1298,"count":44},"1299":{"index":1299,"count":40},"1300":{"index":1300,"count":40},"1301":{"index":1301,"count":16},"1302":{"index":1302,"count":16},"1303":{"index":1303,"count":16},"1304":{"index":1304,"count":16},"1305":{"index":1305,"count":24},"1306":{"index":1306,"count":24},"1307":{"index":1307,"count":2068},"1308":{"index":1308,"count":2604},"1309":{"index":1309,"count":2604},"1310":{"index":1310,"count":2604},"1311":{"index":1311,"count":2584},"1312":{"index":1312,"count":32},"1313":{"index":1313,"count":32},"1314":{"index":1314,"count":32},"1315":{"index":1315,"count":32},"1316":{"index":1316,"count":32},"1317":{"index":1317,"count":32},"1318":{"index":1318,"count":16},"1319":{"index":1319,"count":16},"1320":{"index":1320,"count":16},"1321":{"index":1321,"count":16},"1322":{"index":1322,"count":16},"1323":{"index":1323,"count":16},"1324":{"index":1324,"count":2568},"1325":{"index":1325,"count":2568},"1326":{"index":1326,"count":2568},"1327":{"index":1327,"count":2568},"1328":{"index":1328,"count":2558},"1329":{"index":1329,"count":2556},"1330":{"index":1330,"count":2554},"1331":{"index":1331,"count":16},"1332":{"index":1332,"count":16},"1333":{"index":1333,"count":16},"1334":{"index":1334,"count":16},"1335":{"index":1335,"count":2552},"1336":{"index":1336,"count":2552},"1337":{"index":1337,"count":2552},"1338":{"index":1338,"count":2544},"1339":{"index":1339,"count":2542},"1340":{"index":1340,"count":12},"1341":{"index":1341,"count":12},"1342":{"index":1342,"count":12},"1343":{"index":1343,"count":12},"1344":{"index":1344,"count":12},"1345":{"index":1345,"count":6},"1346":{"index":1346,"count":6},"1347":{"index":1347,"count":6},"1348":{"index":1348,"count":6},"1349":{"index":1349,"count":8},"1350":{"index":1350,"count":2540},"1351":{"index":1351,"count":2540},"1352":{"index":1352,"count":2510},"1353":{"index":1353,"count":2510},"1354":{"index":1354,"count":2048},"1355":{"index":1355,"count":2048},"1356":{"index":1356,"count":2048},"1357":{"index":1357,"count":2028},"1358":{"index":1358,"count":2022},"1359":{"index":1359,"count":34},"1360":{"index":1360,"count":34},"1361":{"index":1361,"count":34},"1362":{"index":1362,"count":2014},"1363":{"index":1363,"count":2456},"1364":{"index":1364,"count":2456},"1365":{"index":1365,"count":2014},"1366":{"index":1366,"count":2014},"1367":{"index":1367,"count":1972},"1368":{"index":1368,"count":54},"1369":{"index":1369,"count":54},"1370":{"index":1370,"count":54},"1371":{"index":1371,"count":1960},"1372":{"index":1372,"count":2446},"1373":{"index":1373,"count":2446},"1374":{"index":1374,"count":1960},"1375":{"index":1375,"count":1960},"1376":{"index":1376,"count":1960},"1377":{"index":1377,"count":1954},"1378":{"index":1378,"count":1952},"1379":{"index":1379,"count":10},"1380":{"index":1380,"count":10},"1381":{"index":1381,"count":10},"1382":{"index":1382,"count":1950},"1383":{"index":1383,"count":2446},"1384":{"index":1384,"count":2446},"1385":{"index":1385,"count":2446},"1386":{"index":1386,"count":2446},"1387":{"index":1387,"count":2446},"1388":{"index":1388,"count":1950},"1389":{"index":1389,"count":1950},"1390":{"index":1390,"count":1950},"1391":{"index":1391,"count":1950},"1392":{"index":1392,"count":1950},"1393":{"index":1393,"count":1938},"1394":{"index":1394,"count":1936},"1395":{"index":1395,"count":1934},"1396":{"index":1396,"count":18},"1397":{"index":1397,"count":18},"1398":{"index":1398,"count":18},"1399":{"index":1399,"count":1932},"1400":{"index":1400,"count":1876},"1401":{"index":1401,"count":12},"1402":{"index":1402,"count":12},"1403":{"index":1403,"count":12},"1404":{"index":1404,"count":12},"1405":{"index":1405,"count":1920},"1406":{"index":1406,"count":2},"1407":{"index":1407,"count":2},"1408":{"index":1408,"count":2},"1409":{"index":1409,"count":2},"1410":{"index":1410,"count":1950},"1411":{"index":1411,"count":2402},"1412":{"index":1412,"count":2402},"1413":{"index":1413,"count":1918},"1414":{"index":1414,"count":1918},"1415":{"index":1415,"count":1918},"1416":{"index":1416,"count":1918},"1417":{"index":1417,"count":1918},"1418":{"index":1418,"count":1918},"1419":{"index":1419,"count":1892},"1420":{"index":1420,"count":1892},"1421":{"index":1421,"count":1890},"1422":{"index":1422,"count":1914},"1423":{"index":1423,"count":1912},"1424":{"index":1424,"count":1910},"1425":{"index":1425,"count":1908},"1426":{"index":1426,"count":12},"1427":{"index":1427,"count":12},"1428":{"index":1428,"count":12},"1429":{"index":1429,"count":1906},"1430":{"index":1430,"count":2392},"1431":{"index":1431,"count":2392},"1432":{"index":1432,"count":1906},"1433":{"index":1433,"count":10},"1434":{"index":1434,"count":10},"1435":{"index":1435,"count":10},"1436":{"index":1436,"count":10},"1437":{"index":1437,"count":1896},"1438":{"index":1438,"count":2380},"1439":{"index":1439,"count":2380},"1440":{"index":1440,"count":1896},"1441":{"index":1441,"count":12},"1442":{"index":1442,"count":12},"1443":{"index":1443,"count":12},"1444":{"index":1444,"count":12},"1445":{"index":1445,"count":1884},"1446":{"index":1446,"count":2370},"1447":{"index":1447,"count":2370},"1448":{"index":1448,"count":1884},"1449":{"index":1449,"count":10},"1450":{"index":1450,"count":10},"1451":{"index":1451,"count":10},"1452":{"index":1452,"count":10},"1453":{"index":1453,"count":1874},"1454":{"index":1454,"count":2360},"1455":{"index":1455,"count":2360},"1456":{"index":1456,"count":1874},"1457":{"index":1457,"count":10},"1458":{"index":1458,"count":10},"1459":{"index":1459,"count":10},"1460":{"index":1460,"count":10},"1461":{"index":1461,"count":1864},"1462":{"index":1462,"count":2350},"1463":{"index":1463,"count":2350},"1464":{"index":1464,"count":1864},"1465":{"index":1465,"count":10},"1466":{"index":1466,"count":10},"1467":{"index":1467,"count":10},"1468":{"index":1468,"count":10},"1469":{"index":1469,"count":1854},"1470":{"index":1470,"count":2350},"1471":{"index":1471,"count":2350},"1472":{"index":1472,"count":2350},"1473":{"index":1473,"count":1854},"1474":{"index":1474,"count":4},"1475":{"index":1475,"count":4},"1476":{"index":1476,"count":4},"1477":{"index":1477,"count":4},"1478":{"index":1478,"count":4},"1479":{"index":1479,"count":4},"1480":{"index":1480,"count":4},"1481":{"index":1481,"count":4},"1482":{"index":1482,"count":4},"1483":{"index":1483,"count":4},"1484":{"index":1484,"count":4},"1485":{"index":1485,"count":1854},"1486":{"index":1486,"count":50},"1487":{"index":1487,"count":4},"1488":{"index":1488,"count":4},"1489":{"index":1489,"count":46},"1490":{"index":1490,"count":18},"1491":{"index":1491,"count":20},"1492":{"index":1492,"count":18},"1493":{"index":1493,"count":18},"1494":{"index":1494,"count":4},"1495":{"index":1495,"count":4},"1496":{"index":1496,"count":14},"1497":{"index":1497,"count":14},"1498":{"index":1498,"count":28},"1499":{"index":1499,"count":6},"1500":{"index":1500,"count":10},"1501":{"index":1501,"count":8},"1502":{"index":1502,"count":8},"1503":{"index":1503,"count":8},"1504":{"index":1504,"count":22},"1505":{"index":1505,"count":14},"1506":{"index":1506,"count":8},"1507":{"index":1507,"count":8},"1508":{"index":1508,"count":8},"1509":{"index":1509,"count":8},"1510":{"index":1510,"count":8},"1511":{"index":1511,"count":8},"1512":{"index":1512,"count":8},"1513":{"index":1513,"count":8},"1514":{"index":1514,"count":8},"1515":{"index":1515,"count":2350},"1516":{"index":1516,"count":2350},"1517":{"index":1517,"count":2350},"1518":{"index":1518,"count":1854},"1519":{"index":1519,"count":210},"1520":{"index":1520,"count":210},"1521":{"index":1521,"count":186},"1522":{"index":1522,"count":8},"1523":{"index":1523,"count":8},"1524":{"index":1524,"count":202},"1525":{"index":1525,"count":202},"1526":{"index":1526,"count":10},"1527":{"index":1527,"count":10},"1528":{"index":1528,"count":8},"1529":{"index":1529,"count":8},"1530":{"index":1530,"count":194},"1531":{"index":1531,"count":194},"1532":{"index":1532,"count":172},"1533":{"index":1533,"count":28},"1534":{"index":1534,"count":28},"1535":{"index":1535,"count":170},"1536":{"index":1536,"count":170},"1537":{"index":1537,"count":170},"1538":{"index":1538,"count":1814},"1539":{"index":1539,"count":1840},"1540":{"index":1540,"count":1840},"1541":{"index":1541,"count":1344},"1542":{"index":1542,"count":4},"1543":{"index":1543,"count":8},"1544":{"index":1544,"count":6},"1545":{"index":1545,"count":4},"1546":{"index":1546,"count":4},"1547":{"index":1547,"count":4},"1548":{"index":1548,"count":4},"1549":{"index":1549,"count":4},"1550":{"index":1550,"count":1344},"1551":{"index":1551,"count":166},"1552":{"index":1552,"count":278},"1553":{"index":1553,"count":270},"1554":{"index":1554,"count":148},"1555":{"index":1555,"count":148},"1556":{"index":1556,"count":112},"1557":{"index":1557,"count":112},"1558":{"index":1558,"count":112},"1559":{"index":1559,"count":130},"1560":{"index":1560,"count":166},"1561":{"index":1561,"count":166},"1562":{"index":1562,"count":166},"1563":{"index":1563,"count":166},"1564":{"index":1564,"count":166},"1565":{"index":1565,"count":130},"1566":{"index":1566,"count":130},"1567":{"index":1567,"count":122},"1568":{"index":1568,"count":858},"1569":{"index":1569,"count":858},"1570":{"index":1570,"count":858},"1571":{"index":1571,"count":88},"1572":{"index":1572,"count":88},"1573":{"index":1573,"count":770},"1574":{"index":1574,"count":228},"1575":{"index":1575,"count":228},"1576":{"index":1576,"count":176},"1577":{"index":1577,"count":12},"1578":{"index":1578,"count":12},"1579":{"index":1579,"count":12},"1580":{"index":1580,"count":168},"1581":{"index":1581,"count":28},"1582":{"index":1582,"count":28},"1583":{"index":1583,"count":16},"1584":{"index":1584,"count":16},"1585":{"index":1585,"count":140},"1586":{"index":1586,"count":90},"1587":{"index":1587,"count":90},"1588":{"index":1588,"count":90},"1589":{"index":1589,"count":90},"1590":{"index":1590,"count":140},"1591":{"index":1591,"count":190},"1592":{"index":1592,"count":228},"1593":{"index":1593,"count":228},"1594":{"index":1594,"count":228},"1595":{"index":1595,"count":228},"1596":{"index":1596,"count":140},"1597":{"index":1597,"count":38},"1598":{"index":1598,"count":38},"1599":{"index":1599,"count":102},"1600":{"index":1600,"count":124},"1601":{"index":1601,"count":124},"1602":{"index":1602,"count":124},"1603":{"index":1603,"count":124},"1604":{"index":1604,"count":124},"1605":{"index":1605,"count":48},"1606":{"index":1606,"count":48},"1607":{"index":1607,"count":48},"1608":{"index":1608,"count":32},"1609":{"index":1609,"count":32},"1610":{"index":1610,"count":32},"1611":{"index":1611,"count":32},"1612":{"index":1612,"count":32},"1613":{"index":1613,"count":20},"1614":{"index":1614,"count":20},"1615":{"index":1615,"count":20},"1616":{"index":1616,"count":24},"1617":{"index":1617,"count":24},"1618":{"index":1618,"count":32},"1619":{"index":1619,"count":32},"1620":{"index":1620,"count":32},"1621":{"index":1621,"count":32},"1622":{"index":1622,"count":32},"1623":{"index":1623,"count":8},"1624":{"index":1624,"count":8},"1625":{"index":1625,"count":24},"1626":{"index":1626,"count":8},"1627":{"index":1627,"count":8},"1628":{"index":1628,"count":8},"1629":{"index":1629,"count":30},"1630":{"index":1630,"count":30},"1631":{"index":1631,"count":30},"1632":{"index":1632,"count":30},"1633":{"index":1633,"count":8},"1634":{"index":1634,"count":8},"1635":{"index":1635,"count":22},"1636":{"index":1636,"count":22},"1637":{"index":1637,"count":22},"1638":{"index":1638,"count":6},"1639":{"index":1639,"count":6},"1640":{"index":1640,"count":16},"1641":{"index":1641,"count":16},"1642":{"index":1642,"count":8},"1643":{"index":1643,"count":8},"1644":{"index":1644,"count":8},"1645":{"index":1645,"count":2},"1646":{"index":1646,"count":2},"1647":{"index":1647,"count":6},"1648":{"index":1648,"count":6},"1649":{"index":1649,"count":8},"1650":{"index":1650,"count":8},"1651":{"index":1651,"count":8},"1652":{"index":1652,"count":4},"1653":{"index":1653,"count":4},"1654":{"index":1654,"count":4},"1655":{"index":1655,"count":4},"1656":{"index":1656,"count":4},"1657":{"index":1657,"count":4},"1658":{"index":1658,"count":4},"1659":{"index":1659,"count":4},"1660":{"index":1660,"count":4},"1661":{"index":1661,"count":14},"1662":{"index":1662,"count":14},"1663":{"index":1663,"count":2},"1664":{"index":1664,"count":2},"1665":{"index":1665,"count":2},"1666":{"index":1666,"count":4},"1667":{"index":1667,"count":4},"1668":{"index":1668,"count":4},"1669":{"index":1669,"count":4},"1670":{"index":1670,"count":4},"1671":{"index":1671,"count":2},"1672":{"index":1672,"count":2},"1673":{"index":1673,"count":2},"1674":{"index":1674,"count":2},"1675":{"index":1675,"count":12},"1676":{"index":1676,"count":4},"1677":{"index":1677,"count":4},"1678":{"index":1678,"count":4},"1679":{"index":1679,"count":2},"1680":{"index":1680,"count":2},"1681":{"index":1681,"count":2},"1682":{"index":1682,"count":2},"1683":{"index":1683,"count":8},"1684":{"index":1684,"count":8},"1685":{"index":1685,"count":12},"1686":{"index":1686,"count":28},"1687":{"index":1687,"count":28},"1688":{"index":1688,"count":28},"1689":{"index":1689,"count":28},"1690":{"index":1690,"count":28},"1691":{"index":1691,"count":28},"1692":{"index":1692,"count":2},"1693":{"index":1693,"count":2},"1694":{"index":1694,"count":2},"1695":{"index":1695,"count":2},"1696":{"index":1696,"count":6},"1697":{"index":1697,"count":6},"1698":{"index":1698,"count":4},"1699":{"index":1699,"count":4},"1700":{"index":1700,"count":4},"1701":{"index":1701,"count":4},"1702":{"index":1702,"count":4},"1703":{"index":1703,"count":10},"1704":{"index":1704,"count":10},"1705":{"index":1705,"count":10},"1706":{"index":1706,"count":6},"1707":{"index":1707,"count":4},"1708":{"index":1708,"count":4},"1709":{"index":1709,"count":4},"1710":{"index":1710,"count":4},"1711":{"index":1711,"count":4},"1712":{"index":1712,"count":4},"1713":{"index":1713,"count":10},"1714":{"index":1714,"count":10},"1715":{"index":1715,"count":10},"1716":{"index":1716,"count":14},"1717":{"index":1717,"count":14},"1718":{"index":1718,"count":14},"1719":{"index":1719,"count":14},"1720":{"index":1720,"count":4},"1721":{"index":1721,"count":4},"1722":{"index":1722,"count":10},"1723":{"index":1723,"count":4},"1724":{"index":1724,"count":4},"1725":{"index":1725,"count":4},"1726":{"index":1726,"count":6},"1727":{"index":1727,"count":6},"1728":{"index":1728,"count":6},"1729":{"index":1729,"count":6},"1730":{"index":1730,"count":6},"1731":{"index":1731,"count":2},"1732":{"index":1732,"count":4},"1733":{"index":1733,"count":4},"1734":{"index":1734,"count":6},"1735":{"index":1735,"count":6},"1736":{"index":1736,"count":14},"1737":{"index":1737,"count":4},"1738":{"index":1738,"count":4},"1739":{"index":1739,"count":10},"1740":{"index":1740,"count":10},"1741":{"index":1741,"count":10},"1742":{"index":1742,"count":10},"1743":{"index":1743,"count":2},"1744":{"index":1744,"count":2},"1745":{"index":1745,"count":8},"1746":{"index":1746,"count":8},"1747":{"index":1747,"count":10},"1748":{"index":1748,"count":10},"1749":{"index":1749,"count":10},"1750":{"index":1750,"count":6},"1751":{"index":1751,"count":6},"1752":{"index":1752,"count":6},"1753":{"index":1753,"count":6},"1754":{"index":1754,"count":4},"1755":{"index":1755,"count":4},"1756":{"index":1756,"count":4},"1757":{"index":1757,"count":4},"1758":{"index":1758,"count":6},"1759":{"index":1759,"count":18},"1760":{"index":1760,"count":18},"1761":{"index":1761,"count":18},"1762":{"index":1762,"count":196},"1763":{"index":1763,"count":196},"1764":{"index":1764,"count":32},"1765":{"index":1765,"count":32},"1766":{"index":1766,"count":32},"1767":{"index":1767,"count":32},"1768":{"index":1768,"count":32},"1769":{"index":1769,"count":32},"1770":{"index":1770,"count":32},"1771":{"index":1771,"count":32},"1772":{"index":1772,"count":28},"1773":{"index":1773,"count":28},"1774":{"index":1774,"count":28},"1775":{"index":1775,"count":28},"1776":{"index":1776,"count":28},"1777":{"index":1777,"count":28},"1778":{"index":1778,"count":16},"1779":{"index":1779,"count":6},"1780":{"index":1780,"count":6},"1781":{"index":1781,"count":6},"1782":{"index":1782,"count":6},"1783":{"index":1783,"count":10},"1784":{"index":1784,"count":12},"1785":{"index":1785,"count":16},"1786":{"index":1786,"count":16},"1787":{"index":1787,"count":16},"1788":{"index":1788,"count":16},"1789":{"index":1789,"count":16},"1790":{"index":1790,"count":16},"1791":{"index":1791,"count":16},"1792":{"index":1792,"count":12},"1793":{"index":1793,"count":12},"1794":{"index":1794,"count":12},"1795":{"index":1795,"count":8},"1796":{"index":1796,"count":8},"1797":{"index":1797,"count":8},"1798":{"index":1798,"count":8},"1799":{"index":1799,"count":8},"1800":{"index":1800,"count":8},"1801":{"index":1801,"count":8},"1802":{"index":1802,"count":2},"1803":{"index":1803,"count":2},"1804":{"index":1804,"count":8},"1805":{"index":1805,"count":64},"1806":{"index":1806,"count":64},"1807":{"index":1807,"count":64},"1808":{"index":1808,"count":64},"1809":{"index":1809,"count":64},"1810":{"index":1810,"count":64},"1811":{"index":1811,"count":64},"1812":{"index":1812,"count":64},"1813":{"index":1813,"count":64},"1814":{"index":1814,"count":64},"1815":{"index":1815,"count":64},"1816":{"index":1816,"count":64},"1817":{"index":1817,"count":64},"1818":{"index":1818,"count":32},"1819":{"index":1819,"count":32},"1820":{"index":1820,"count":34},"1821":{"index":1821,"count":34},"1822":{"index":1822,"count":34},"1823":{"index":1823,"count":34},"1824":{"index":1824,"count":68},"1825":{"index":1825,"count":68},"1826":{"index":1826,"count":68},"1827":{"index":1827,"count":68},"1828":{"index":1828,"count":68},"1829":{"index":1829,"count":68},"1830":{"index":1830,"count":68},"1831":{"index":1831,"count":10},"1832":{"index":1832,"count":10},"1833":{"index":1833,"count":58},"1834":{"index":1834,"count":58},"1835":{"index":1835,"count":58},"1836":{"index":1836,"count":38},"1837":{"index":1837,"count":24},"1838":{"index":1838,"count":34},"1839":{"index":1839,"count":34},"1840":{"index":1840,"count":34},"1841":{"index":1841,"count":34},"1842":{"index":1842,"count":34},"1843":{"index":1843,"count":28},"1844":{"index":1844,"count":28},"1845":{"index":1845,"count":16},"1846":{"index":1846,"count":24},"1847":{"index":1847,"count":24},"1848":{"index":1848,"count":24},"1849":{"index":1849,"count":24},"1850":{"index":1850,"count":24},"1851":{"index":1851,"count":12},"1852":{"index":1852,"count":12},"1853":{"index":1853,"count":12},"1854":{"index":1854,"count":12},"1855":{"index":1855,"count":12},"1856":{"index":1856,"count":12},"1857":{"index":1857,"count":12},"1858":{"index":1858,"count":24},"1859":{"index":1859,"count":24},"1860":{"index":1860,"count":24},"1861":{"index":1861,"count":24},"1862":{"index":1862,"count":24},"1863":{"index":1863,"count":2},"1864":{"index":1864,"count":2},"1865":{"index":1865,"count":2},"1866":{"index":1866,"count":2},"1867":{"index":1867,"count":2},"1868":{"index":1868,"count":2},"1869":{"index":1869,"count":22},"1870":{"index":1870,"count":10},"1871":{"index":1871,"count":10},"1872":{"index":1872,"count":10},"1873":{"index":1873,"count":10},"1874":{"index":1874,"count":10},"1875":{"index":1875,"count":8},"1876":{"index":1876,"count":8},"1877":{"index":1877,"count":2},"1878":{"index":1878,"count":2},"1879":{"index":1879,"count":2},"1880":{"index":1880,"count":2},"1881":{"index":1881,"count":2},"1882":{"index":1882,"count":2},"1883":{"index":1883,"count":50},"1884":{"index":1884,"count":34},"1885":{"index":1885,"count":34},"1886":{"index":1886,"count":40},"1887":{"index":1887,"count":24},"1888":{"index":1888,"count":6},"1889":{"index":1889,"count":6},"1890":{"index":1890,"count":24},"1891":{"index":1891,"count":24},"1892":{"index":1892,"count":24},"1893":{"index":1893,"count":4},"1894":{"index":1894,"count":4},"1895":{"index":1895,"count":40},"1896":{"index":1896,"count":40},"1897":{"index":1897,"count":40},"1898":{"index":1898,"count":40},"1899":{"index":1899,"count":40},"1900":{"index":1900,"count":40},"1901":{"index":1901,"count":36},"1902":{"index":1902,"count":36},"1903":{"index":1903,"count":20},"1904":{"index":1904,"count":16},"1905":{"index":1905,"count":6},"1906":{"index":1906,"count":10},"1907":{"index":1907,"count":42},"1908":{"index":1908,"count":42},"1909":{"index":1909,"count":42},"1910":{"index":1910,"count":42},"1911":{"index":1911,"count":10},"1912":{"index":1912,"count":10},"1913":{"index":1913,"count":8},"1914":{"index":1914,"count":8},"1915":{"index":1915,"count":2},"1916":{"index":1916,"count":32},"1917":{"index":1917,"count":4},"1918":{"index":1918,"count":4},"1919":{"index":1919,"count":6},"1920":{"index":1920,"count":22},"1921":{"index":1921,"count":22},"1922":{"index":1922,"count":22},"1923":{"index":1923,"count":12},"1924":{"index":1924,"count":12},"1925":{"index":1925,"count":12},"1926":{"index":1926,"count":8},"1927":{"index":1927,"count":8},"1928":{"index":1928,"count":14},"1929":{"index":1929,"count":14},"1930":{"index":1930,"count":10},"1931":{"index":1931,"count":10},"1932":{"index":1932,"count":4},"1933":{"index":1933,"count":4},"1934":{"index":1934,"count":6},"1935":{"index":1935,"count":46},"1936":{"index":1936,"count":46},"1937":{"index":1937,"count":46},"1938":{"index":1938,"count":46},"1939":{"index":1939,"count":8},"1940":{"index":1940,"count":8},"1941":{"index":1941,"count":8},"1942":{"index":1942,"count":4},"1943":{"index":1943,"count":4},"1944":{"index":1944,"count":4},"1945":{"index":1945,"count":38},"1946":{"index":1946,"count":10},"1947":{"index":1947,"count":4},"1948":{"index":1948,"count":4},"1949":{"index":1949,"count":6},"1950":{"index":1950,"count":28},"1951":{"index":1951,"count":28},"1952":{"index":1952,"count":28},"1953":{"index":1953,"count":16},"1954":{"index":1954,"count":16},"1955":{"index":1955,"count":16},"1956":{"index":1956,"count":8},"1957":{"index":1957,"count":8},"1958":{"index":1958,"count":20},"1959":{"index":1959,"count":20},"1960":{"index":1960,"count":16},"1961":{"index":1961,"count":16},"1962":{"index":1962,"count":8},"1963":{"index":1963,"count":4},"1964":{"index":1964,"count":4},"1965":{"index":1965,"count":12},"1966":{"index":1966,"count":28},"1967":{"index":1967,"count":28},"1968":{"index":1968,"count":28},"1969":{"index":1969,"count":6},"1970":{"index":1970,"count":6},"1971":{"index":1971,"count":24},"1972":{"index":1972,"count":16},"1973":{"index":1973,"count":16},"1974":{"index":1974,"count":6},"1975":{"index":1975,"count":6},"1976":{"index":1976,"count":6},"1977":{"index":1977,"count":6},"1978":{"index":1978,"count":6},"1979":{"index":1979,"count":18},"1980":{"index":1980,"count":6},"1981":{"index":1981,"count":12},"1982":{"index":1982,"count":10},"1983":{"index":1983,"count":10},"1984":{"index":1984,"count":10},"1985":{"index":1985,"count":10},"1986":{"index":1986,"count":8},"1987":{"index":1987,"count":6},"1988":{"index":1988,"count":6},"1989":{"index":1989,"count":12},"1990":{"index":1990,"count":12},"1991":{"index":1991,"count":12},"1992":{"index":1992,"count":16},"1993":{"index":1993,"count":6},"1994":{"index":1994,"count":6},"1995":{"index":1995,"count":12},"1996":{"index":1996,"count":12},"1997":{"index":1997,"count":12},"1998":{"index":1998,"count":12},"1999":{"index":1999,"count":12},"2000":{"index":2000,"count":12},"2001":{"index":2001,"count":12},"2002":{"index":2002,"count":12},"2003":{"index":2003,"count":12},"2004":{"index":2004,"count":12},"2005":{"index":2005,"count":8},"2006":{"index":2006,"count":12},"2007":{"index":2007,"count":12},"2008":{"index":2008,"count":6},"2009":{"index":2009,"count":6},"2010":{"index":2010,"count":6},"2011":{"index":2011,"count":6},"2012":{"index":2012,"count":6},"2013":{"index":2013,"count":6},"2014":{"index":2014,"count":6},"2015":{"index":2015,"count":12},"2016":{"index":2016,"count":12},"2017":{"index":2017,"count":24},"2018":{"index":2018,"count":24},"2019":{"index":2019,"count":24},"2020":{"index":2020,"count":24},"2021":{"index":2021,"count":18},"2022":{"index":2022,"count":16},"2023":{"index":2023,"count":16},"2024":{"index":2024,"count":16},"2025":{"index":2025,"count":12},"2026":{"index":2026,"count":12},"2027":{"index":2027,"count":12},"2028":{"index":2028,"count":8},"2029":{"index":2029,"count":12},"2030":{"index":2030,"count":12},"2031":{"index":2031,"count":12},"2032":{"index":2032,"count":12},"2033":{"index":2033,"count":12},"2034":{"index":2034,"count":12},"2035":{"index":2035,"count":12},"2036":{"index":2036,"count":12},"2037":{"index":2037,"count":12},"2038":{"index":2038,"count":12},"2039":{"index":2039,"count":12},"2040":{"index":2040,"count":12},"2041":{"index":2041,"count":2},"2042":{"index":2042,"count":2},"2043":{"index":2043,"count":2},"2044":{"index":2044,"count":10},"2045":{"index":2045,"count":10},"2046":{"index":2046,"count":10},"2047":{"index":2047,"count":18},"2048":{"index":2048,"count":18},"2049":{"index":2049,"count":12},"2050":{"index":2050,"count":12},"2051":{"index":2051,"count":12},"2052":{"index":2052,"count":6},"2053":{"index":2053,"count":6},"2054":{"index":2054,"count":6},"2055":{"index":2055,"count":6},"2056":{"index":2056,"count":24},"2057":{"index":2057,"count":24},"2058":{"index":2058,"count":24},"2059":{"index":2059,"count":24},"2060":{"index":2060,"count":4},"2061":{"index":2061,"count":4},"2062":{"index":2062,"count":20},"2063":{"index":2063,"count":20},"2064":{"index":2064,"count":12},"2065":{"index":2065,"count":12},"2066":{"index":2066,"count":12},"2067":{"index":2067,"count":24},"2068":{"index":2068,"count":24},"2069":{"index":2069,"count":24},"2070":{"index":2070,"count":24},"2071":{"index":2071,"count":24},"2072":{"index":2072,"count":24},"2073":{"index":2073,"count":24},"2074":{"index":2074,"count":24},"2075":{"index":2075,"count":24},"2076":{"index":2076,"count":24},"2077":{"index":2077,"count":12},"2078":{"index":2078,"count":12},"2079":{"index":2079,"count":12},"2080":{"index":2080,"count":12},"2081":{"index":2081,"count":16},"2082":{"index":2082,"count":16},"2083":{"index":2083,"count":16},"2084":{"index":2084,"count":16},"2085":{"index":2085,"count":30},"2086":{"index":2086,"count":30},"2087":{"index":2087,"count":30},"2088":{"index":2088,"count":30},"2089":{"index":2089,"count":30},"2090":{"index":2090,"count":30},"2091":{"index":2091,"count":24},"2092":{"index":2092,"count":24},"2093":{"index":2093,"count":24},"2094":{"index":2094,"count":22},"2095":{"index":2095,"count":4},"2096":{"index":2096,"count":4},"2097":{"index":2097,"count":4},"2098":{"index":2098,"count":4},"2099":{"index":2099,"count":22},"2100":{"index":2100,"count":22},"2101":{"index":2101,"count":4},"2102":{"index":2102,"count":4},"2103":{"index":2103,"count":18},"2104":{"index":2104,"count":2},"2105":{"index":2105,"count":2},"2106":{"index":2106,"count":2},"2107":{"index":2107,"count":2},"2108":{"index":2108,"count":2},"2109":{"index":2109,"count":2058},"2110":{"index":2110,"count":2058},"2111":{"index":2111,"count":2058},"2112":{"index":2112,"count":24},"2113":{"index":2113,"count":24},"2114":{"index":2114,"count":2034},"2115":{"index":2115,"count":18},"2116":{"index":2116,"count":18},"2117":{"index":2117,"count":116},"2118":{"index":2118,"count":116},"2119":{"index":2119,"count":196},"2120":{"index":2120,"count":196},"2121":{"index":2121,"count":1704},"2122":{"index":2122,"count":46},"2123":{"index":2123,"count":46},"2124":{"index":2124,"count":42},"2125":{"index":2125,"count":42},"2126":{"index":2126,"count":2},"2127":{"index":2127,"count":2},"2128":{"index":2128,"count":16},"2129":{"index":2129,"count":16},"2130":{"index":2130,"count":68},"2131":{"index":2131,"count":68},"2132":{"index":2132,"count":2},"2133":{"index":2133,"count":2},"2134":{"index":2134,"count":2},"2135":{"index":2135,"count":2},"2136":{"index":2136,"count":32},"2137":{"index":2137,"count":32},"2138":{"index":2138,"count":28},"2139":{"index":2139,"count":28},"2140":{"index":2140,"count":12},"2141":{"index":2141,"count":12},"2142":{"index":2142,"count":24},"2143":{"index":2143,"count":24},"2144":{"index":2144,"count":30},"2145":{"index":2145,"count":30},"2146":{"index":2146,"count":124},"2147":{"index":2147,"count":124},"2148":{"index":2148,"count":64},"2149":{"index":2149,"count":64},"2150":{"index":2150,"count":16},"2151":{"index":2151,"count":16},"2152":{"index":2152,"count":1196},"2153":{"index":2153,"count":1196},"2154":{"index":2154,"count":1020},"2155":{"index":2155,"count":1020},"2156":{"index":2156,"count":121},"2157":{"index":2157,"count":36},"2158":{"index":2158,"count":36},"2159":{"index":2159,"count":36},"2160":{"index":2160,"count":4},"2161":{"index":2161,"count":4},"2162":{"index":2162,"count":32},"2163":{"index":2163,"count":32},"2164":{"index":2164,"count":32},"2165":{"index":2165,"count":12},"2166":{"index":2166,"count":12},"2167":{"index":2167,"count":984},"2168":{"index":2168,"count":984},"2169":{"index":2169,"count":956},"2170":{"index":2170,"count":94},"2171":{"index":2171,"count":88},"2172":{"index":2172,"count":88},"2173":{"index":2173,"count":6},"2174":{"index":2174,"count":6},"2175":{"index":2175,"count":430},"2176":{"index":2176,"count":430},"2177":{"index":2177,"count":430},"2178":{"index":2178,"count":700},"2179":{"index":2179,"count":700},"2180":{"index":2180,"count":700},"2181":{"index":2181,"count":700},"2182":{"index":2182,"count":286},"2183":{"index":2183,"count":286},"2184":{"index":2184,"count":278},"2185":{"index":2185,"count":278},"2186":{"index":2186,"count":278},"2187":{"index":2187,"count":278},"2188":{"index":2188,"count":278},"2189":{"index":2189,"count":278},"2190":{"index":2190,"count":278},"2191":{"index":2191,"count":278},"2192":{"index":2192,"count":266},"2193":{"index":2193,"count":8},"2194":{"index":2194,"count":8},"2195":{"index":2195,"count":12},"2196":{"index":2196,"count":8},"2197":{"index":2197,"count":414},"2198":{"index":2198,"count":414},"2199":{"index":2199,"count":414},"2200":{"index":2200,"count":414},"2201":{"index":2201,"count":414},"2202":{"index":2202,"count":414},"2203":{"index":2203,"count":414},"2204":{"index":2204,"count":414},"2205":{"index":2205,"count":478},"2206":{"index":2206,"count":478},"2207":{"index":2207,"count":264},"2208":{"index":2208,"count":264},"2209":{"index":2209,"count":64},"2210":{"index":2210,"count":64},"2211":{"index":2211,"count":64},"2212":{"index":2212,"count":214},"2213":{"index":2213,"count":214},"2214":{"index":2214,"count":214},"2215":{"index":2215,"count":214},"2216":{"index":2216,"count":214},"2217":{"index":2217,"count":214},"2218":{"index":2218,"count":214},"2219":{"index":2219,"count":308},"2220":{"index":2220,"count":308},"2221":{"index":2221,"count":308},"2222":{"index":2222,"count":308},"2223":{"index":2223,"count":308},"2224":{"index":2224,"count":308},"2225":{"index":2225,"count":308},"2226":{"index":2226,"count":24},"2227":{"index":2227,"count":8},"2228":{"index":2228,"count":8},"2229":{"index":2229,"count":264},"2230":{"index":2230,"count":14},"2231":{"index":2231,"count":14},"2232":{"index":2232,"count":250},"2233":{"index":2233,"count":4},"2234":{"index":2234,"count":4},"2235":{"index":2235,"count":280},"2236":{"index":2236,"count":280},"2237":{"index":2237,"count":280},"2238":{"index":2238,"count":58},"2239":{"index":2239,"count":70},"2240":{"index":2240,"count":70},"2241":{"index":2241,"count":70},"2242":{"index":2242,"count":70},"2243":{"index":2243,"count":70},"2244":{"index":2244,"count":16},"2245":{"index":2245,"count":8},"2246":{"index":2246,"count":8},"2247":{"index":2247,"count":8},"2248":{"index":2248,"count":4},"2249":{"index":2249,"count":4},"2250":{"index":2250,"count":38},"2251":{"index":2251,"count":12},"2252":{"index":2252,"count":12},"2253":{"index":2253,"count":26},"2254":{"index":2254,"count":8},"2255":{"index":2255,"count":8},"2256":{"index":2256,"count":18},"2257":{"index":2257,"count":6},"2258":{"index":2258,"count":6},"2259":{"index":2259,"count":42},"2260":{"index":2260,"count":42},"2261":{"index":2261,"count":42},"2262":{"index":2262,"count":42},"2263":{"index":2263,"count":12},"2264":{"index":2264,"count":12},"2265":{"index":2265,"count":252},"2266":{"index":2266,"count":252},"2267":{"index":2267,"count":252},"2268":{"index":2268,"count":252},"2269":{"index":2269,"count":252},"2270":{"index":2270,"count":60},"2271":{"index":2271,"count":36},"2272":{"index":2272,"count":36},"2273":{"index":2273,"count":24},"2274":{"index":2274,"count":24},"2275":{"index":2275,"count":110},"2276":{"index":2276,"count":110},"2277":{"index":2277,"count":110},"2278":{"index":2278,"count":110},"2279":{"index":2279,"count":56},"2280":{"index":2280,"count":56},"2281":{"index":2281,"count":56},"2282":{"index":2282,"count":56},"2283":{"index":2283,"count":20},"2284":{"index":2284,"count":12},"2285":{"index":2285,"count":12},"2286":{"index":2286,"count":36},"2287":{"index":2287,"count":12},"2288":{"index":2288,"count":12},"2289":{"index":2289,"count":24},"2290":{"index":2290,"count":4},"2291":{"index":2291,"count":4},"2292":{"index":2292,"count":98},"2293":{"index":2293,"count":98},"2294":{"index":2294,"count":98},"2295":{"index":2295,"count":22},"2296":{"index":2296,"count":22},"2297":{"index":2297,"count":14},"2298":{"index":2298,"count":14},"2299":{"index":2299,"count":14},"2300":{"index":2300,"count":90},"2301":{"index":2301,"count":90},"2302":{"index":2302,"count":90},"2303":{"index":2303,"count":90},"2304":{"index":2304,"count":90},"2305":{"index":2305,"count":66},"2306":{"index":2306,"count":24},"2307":{"index":2307,"count":24},"2308":{"index":2308,"count":42},"2309":{"index":2309,"count":42},"2310":{"index":2310,"count":22},"2311":{"index":2311,"count":32},"2312":{"index":2312,"count":32},"2313":{"index":2313,"count":32},"2314":{"index":2314,"count":32},"2315":{"index":2315,"count":32},"2316":{"index":2316,"count":12},"2317":{"index":2317,"count":4},"2318":{"index":2318,"count":4},"2319":{"index":2319,"count":8},"2320":{"index":2320,"count":4},"2321":{"index":2321,"count":4},"2322":{"index":2322,"count":20},"2323":{"index":2323,"count":4},"2324":{"index":2324,"count":4},"2325":{"index":2325,"count":16},"2326":{"index":2326,"count":4},"2327":{"index":2327,"count":4},"2328":{"index":2328,"count":12},"2329":{"index":2329,"count":6},"2330":{"index":2330,"count":6},"2331":{"index":2331,"count":24},"2332":{"index":2332,"count":24},"2333":{"index":2333,"count":24},"2334":{"index":2334,"count":24},"2335":{"index":2335,"count":10},"2336":{"index":2336,"count":10},"2337":{"index":2337,"count":14},"2338":{"index":2338,"count":2},"2339":{"index":2339,"count":2},"2340":{"index":2340,"count":2},"2341":{"index":2341,"count":2},"2342":{"index":2342,"count":2},"2343":{"index":2343,"count":2},"2346":{"index":2346,"count":2},"2347":{"index":2347,"count":2},"2349":{"index":2349,"count":2},"2350":{"index":2350,"count":2},"2351":{"index":2351,"count":2},"2352":{"index":2352,"count":2},"2353":{"index":2353,"count":2},"2354":{"index":2354,"count":2},"2355":{"index":2355,"count":2},"2359":{"index":2359,"count":2},"2360":{"index":2360,"count":2},"2361":{"index":2361,"count":4},"2362":{"index":2362,"count":4},"2363":{"index":2363,"count":4},"2364":{"index":2364,"count":4},"2365":{"index":2365,"count":4},"2366":{"index":2366,"count":4},"2369":{"index":2369,"count":4},"2370":{"index":2370,"count":2},"2371":{"index":2371,"count":2},"2372":{"index":2372,"count":2},"2373":{"index":2373,"count":2},"2374":{"index":2374,"count":2},"2375":{"index":2375,"count":2},"2376":{"index":2376,"count":2},"2377":{"index":2377,"count":2},"2378":{"index":2378,"count":2},"2379":{"index":2379,"count":2},"2380":{"index":2380,"count":2},"2399":{"index":2399,"count":2},"2400":{"index":2400,"count":2},"2401":{"index":2401,"count":2},"2402":{"index":2402,"count":2},"2403":{"index":2403,"count":2},"2406":{"index":2406,"count":2},"2407":{"index":2407,"count":2},"2408":{"index":2408,"count":2},"2409":{"index":2409,"count":2},"2410":{"index":2410,"count":4},"2411":{"index":2411,"count":4},"2412":{"index":2412,"count":4},"2413":{"index":2413,"count":4},"2414":{"index":2414,"count":4},"2415":{"index":2415,"count":8},"2416":{"index":2416,"count":8},"2417":{"index":2417,"count":4},"2418":{"index":2418,"count":4},"2419":{"index":2419,"count":4},"2420":{"index":2420,"count":4},"2421":{"index":2421,"count":4},"2422":{"index":2422,"count":4},"2423":{"index":2423,"count":4},"2424":{"index":2424,"count":4},"2425":{"index":2425,"count":4},"2426":{"index":2426,"count":4},"2427":{"index":2427,"count":4},"2428":{"index":2428,"count":4},"2429":{"index":2429,"count":4},"2430":{"index":2430,"count":4},"2431":{"index":2431,"count":4},"2432":{"index":2432,"count":2},"2435":{"index":2435,"count":2},"2438":{"index":2438,"count":4},"2439":{"index":2439,"count":4},"2440":{"index":2440,"count":4},"2441":{"index":2441,"count":2},"2442":{"index":2442,"count":2},"2443":{"index":2443,"count":2},"2444":{"index":2444,"count":2},"2445":{"index":2445,"count":4},"2446":{"index":2446,"count":4},"2447":{"index":2447,"count":4},"2448":{"index":2448,"count":2170},"2449":{"index":2449,"count":2170},"2450":{"index":2450,"count":2170},"2451":{"index":2451,"count":26},"2452":{"index":2452,"count":26},"2453":{"index":2453,"count":304},"2454":{"index":2454,"count":304},"2455":{"index":2455,"count":494},"2456":{"index":2456,"count":494},"2457":{"index":2457,"count":1346},"2458":{"index":2458,"count":1346},"2459":{"index":2459,"count":1346},"2460":{"index":2460,"count":1542},"2461":{"index":2461,"count":1542},"2462":{"index":2462,"count":1542},"2463":{"index":2463,"count":28},"2464":{"index":2464,"count":28},"2465":{"index":2465,"count":28},"2466":{"index":2466,"count":28},"2467":{"index":2467,"count":14},"2468":{"index":2468,"count":14},"2469":{"index":2469,"count":1472},"2470":{"index":2470,"count":1472},"2471":{"index":2471,"count":1696},"2472":{"index":2472,"count":1768},"2473":{"index":2473,"count":1728},"2474":{"index":2474,"count":1728},"2475":{"index":2475,"count":1532},"2476":{"index":2476,"count":76},"2477":{"index":2477,"count":76},"2478":{"index":2478,"count":76},"2479":{"index":2479,"count":76},"2480":{"index":2480,"count":76},"2481":{"index":2481,"count":76},"2482":{"index":2482,"count":76},"2483":{"index":2483,"count":76},"2484":{"index":2484,"count":76},"2485":{"index":2485,"count":76},"2486":{"index":2486,"count":34},"2487":{"index":2487,"count":4},"2488":{"index":2488,"count":4},"2489":{"index":2489,"count":42},"2490":{"index":2490,"count":20},"2491":{"index":2491,"count":2248},"2492":{"index":2492,"count":1464},"2493":{"index":2493,"count":1464},"2494":{"index":2494,"count":752},"2495":{"index":2495,"count":752},"2496":{"index":2496,"count":752},"2497":{"index":2497,"count":784},"2498":{"index":2498,"count":2},"2499":{"index":2499,"count":2},"2500":{"index":2500,"count":6},"2501":{"index":2501,"count":8},"2502":{"index":2502,"count":8},"2503":{"index":2503,"count":2},"2504":{"index":2504,"count":2},"2505":{"index":2505,"count":2},"2506":{"index":2506,"count":2},"2507":{"index":2507,"count":2},"2508":{"index":2508,"count":6},"2509":{"index":2509,"count":6},"2510":{"index":2510,"count":6},"2511":{"index":2511,"count":6},"2512":{"index":2512,"count":6},"2513":{"index":2513,"count":6},"2514":{"index":2514,"count":6},"2515":{"index":2515,"count":6},"2516":{"index":2516,"count":6},"2517":{"index":2517,"count":1696},"2518":{"index":2518,"count":1696},"2519":{"index":2519,"count":1696},"2520":{"index":2520,"count":1696},"2521":{"index":2521,"count":784},"2522":{"index":2522,"count":56},"2523":{"index":2523,"count":56},"2524":{"index":2524,"count":56},"2525":{"index":2525,"count":56},"2526":{"index":2526,"count":20},"2527":{"index":2527,"count":20},"2528":{"index":2528,"count":16},"2529":{"index":2529,"count":40},"2530":{"index":2530,"count":40},"2531":{"index":2531,"count":3786},"2532":{"index":2532,"count":3786},"2533":{"index":2533,"count":3786},"2534":{"index":2534,"count":3786},"2535":{"index":2535,"count":5678},"2536":{"index":2536,"count":5560},"2537":{"index":2537,"count":236},"2538":{"index":2538,"count":236},"2539":{"index":2539,"count":236},"2540":{"index":2540,"count":6},"2541":{"index":2541,"count":6},"2542":{"index":2542,"count":6},"2543":{"index":2543,"count":6},"2544":{"index":2544,"count":230},"2545":{"index":2545,"count":18},"2546":{"index":2546,"count":18},"2547":{"index":2547,"count":18},"2548":{"index":2548,"count":18},"2549":{"index":2549,"count":18},"2550":{"index":2550,"count":4},"2551":{"index":2551,"count":2},"2552":{"index":2552,"count":2},"2553":{"index":2553,"count":18},"2554":{"index":2554,"count":18},"2555":{"index":2555,"count":18},"2556":{"index":2556,"count":18},"2557":{"index":2557,"count":212},"2558":{"index":2558,"count":240},"2559":{"index":2559,"count":28},"2560":{"index":2560,"count":28},"2561":{"index":2561,"count":10},"2562":{"index":2562,"count":10},"2563":{"index":2563,"count":4},"2564":{"index":2564,"count":4},"2565":{"index":2565,"count":4},"2566":{"index":2566,"count":24},"2567":{"index":2567,"count":28},"2568":{"index":2568,"count":28},"2569":{"index":2569,"count":28},"2570":{"index":2570,"count":28},"2571":{"index":2571,"count":28},"2572":{"index":2572,"count":28},"2573":{"index":2573,"count":2},"2574":{"index":2574,"count":2},"2575":{"index":2575,"count":212},"2576":{"index":2576,"count":212},"2577":{"index":2577,"count":212},"2578":{"index":2578,"count":8},"2579":{"index":2579,"count":8},"2580":{"index":2580,"count":204},"2581":{"index":2581,"count":204},"2582":{"index":2582,"count":32},"2583":{"index":2583,"count":32},"2584":{"index":2584,"count":32},"2585":{"index":2585,"count":32},"2586":{"index":2586,"count":32},"2587":{"index":2587,"count":32},"2588":{"index":2588,"count":32},"2589":{"index":2589,"count":32},"2590":{"index":2590,"count":32},"2591":{"index":2591,"count":32},"2592":{"index":2592,"count":32},"2593":{"index":2593,"count":5084},"2594":{"index":2594,"count":88},"2595":{"index":2595,"count":88},"2596":{"index":2596,"count":88},"2597":{"index":2597,"count":24},"2598":{"index":2598,"count":24},"2599":{"index":2599,"count":24},"2600":{"index":2600,"count":64},"2601":{"index":2601,"count":44},"2602":{"index":2602,"count":44},"2603":{"index":2603,"count":44},"2604":{"index":2604,"count":44},"2605":{"index":2605,"count":2},"2606":{"index":2606,"count":2},"2607":{"index":2607,"count":4996},"2608":{"index":2608,"count":1312},"2609":{"index":2609,"count":1312},"2610":{"index":2610,"count":3684},"2611":{"index":2611,"count":48},"2612":{"index":2612,"count":48},"2613":{"index":2613,"count":48},"2614":{"index":2614,"count":48},"2615":{"index":2615,"count":8},"2616":{"index":2616,"count":2},"2617":{"index":2617,"count":2},"2618":{"index":2618,"count":48},"2619":{"index":2619,"count":48},"2620":{"index":2620,"count":48},"2621":{"index":2621,"count":94},"2622":{"index":2622,"count":94},"2623":{"index":2623,"count":94},"2624":{"index":2624,"count":72},"2625":{"index":2625,"count":72},"2626":{"index":2626,"count":72},"2627":{"index":2627,"count":72},"2628":{"index":2628,"count":72},"2629":{"index":2629,"count":94},"2630":{"index":2630,"count":12},"2631":{"index":2631,"count":12},"2632":{"index":2632,"count":12},"2633":{"index":2633,"count":12},"2634":{"index":2634,"count":12},"2635":{"index":2635,"count":12},"2636":{"index":2636,"count":12},"2637":{"index":2637,"count":12},"2638":{"index":2638,"count":12},"2639":{"index":2639,"count":12},"2640":{"index":2640,"count":12},"2641":{"index":2641,"count":12},"2642":{"index":2642,"count":12},"2643":{"index":2643,"count":12},"2644":{"index":2644,"count":2},"2645":{"index":2645,"count":12},"2646":{"index":2646,"count":12},"2647":{"index":2647,"count":12},"2648":{"index":2648,"count":12},"2649":{"index":2649,"count":12},"2650":{"index":2650,"count":219},"2651":{"index":2651,"count":638},"2652":{"index":2652,"count":638},"2653":{"index":2653,"count":776},"2654":{"index":2654,"count":26864},"2655":{"index":2655,"count":26864},"2656":{"index":2656,"count":26864},"2657":{"index":2657,"count":26780},"2658":{"index":2658,"count":1628},"2659":{"index":2659,"count":334},"2660":{"index":2660,"count":334},"2661":{"index":2661,"count":1628},"2662":{"index":2662,"count":102},"2663":{"index":2663,"count":102},"2664":{"index":2664,"count":1628},"2665":{"index":2665,"count":1628},"2666":{"index":2666,"count":28},"2667":{"index":2667,"count":1628},"2668":{"index":2668,"count":1628},"2669":{"index":2669,"count":28},"2670":{"index":2670,"count":39576},"2671":{"index":2671,"count":23608},"2672":{"index":2672,"count":23608},"2673":{"index":2673,"count":23608},"2674":{"index":2674,"count":23608},"2675":{"index":2675,"count":23608},"2676":{"index":2676,"count":23608},"2677":{"index":2677,"count":23608},"2678":{"index":2678,"count":23608},"2679":{"index":2679,"count":23608},"2680":{"index":2680,"count":23608},"2681":{"index":2681,"count":23608},"2682":{"index":2682,"count":23608},"2683":{"index":2683,"count":23608},"2684":{"index":2684,"count":23608},"2685":{"index":2685,"count":23608},"2686":{"index":2686,"count":1192},"2687":{"index":2687,"count":1192},"2688":{"index":2688,"count":23608},"2689":{"index":2689,"count":426},"2690":{"index":2690,"count":426},"2691":{"index":2691,"count":426},"2692":{"index":2692,"count":426},"2693":{"index":2693,"count":23608},"2694":{"index":2694,"count":1318},"2695":{"index":2695,"count":1318},"2696":{"index":2696,"count":1318},"2697":{"index":2697,"count":1318},"2698":{"index":2698,"count":23608},"2699":{"index":2699,"count":1696},"2700":{"index":2700,"count":480},"2701":{"index":2701,"count":480},"2702":{"index":2702,"count":1232},"2703":{"index":2703,"count":1232},"2704":{"index":2704,"count":1696},"2705":{"index":2705,"count":776},"2706":{"index":2706,"count":776},"2707":{"index":2707,"count":776},"2708":{"index":2708,"count":776},"2709":{"index":2709,"count":776},"2710":{"index":2710,"count":776},"2711":{"index":2711,"count":776},"2712":{"index":2712,"count":776},"2713":{"index":2713,"count":776},"2714":{"index":2714,"count":776},"2715":{"index":2715,"count":776},"2716":{"index":2716,"count":776},"2717":{"index":2717,"count":776},"2718":{"index":2718,"count":776},"2719":{"index":2719,"count":776},"2720":{"index":2720,"count":776},"2721":{"index":2721,"count":776},"2722":{"index":2722,"count":776},"2723":{"index":2723,"count":776},"2724":{"index":2724,"count":776},"2725":{"index":2725,"count":776},"2726":{"index":2726,"count":776},"2727":{"index":2727,"count":776},"2728":{"index":2728,"count":776},"2729":{"index":2729,"count":776},"2730":{"index":2730,"count":776},"2731":{"index":2731,"count":776},"2732":{"index":2732,"count":776},"2733":{"index":2733,"count":776},"2734":{"index":2734,"count":776},"2735":{"index":2735,"count":776},"2736":{"index":2736,"count":776},"2737":{"index":2737,"count":776},"2738":{"index":2738,"count":776},"2739":{"index":2739,"count":776},"2740":{"index":2740,"count":776},"2741":{"index":2741,"count":776},"2742":{"index":2742,"count":776},"2743":{"index":2743,"count":776},"2744":{"index":2744,"count":776},"2745":{"index":2745,"count":776},"2746":{"index":2746,"count":776},"2747":{"index":2747,"count":776},"2748":{"index":2748,"count":776},"2749":{"index":2749,"count":776},"2750":{"index":2750,"count":776},"2751":{"index":2751,"count":776},"2752":{"index":2752,"count":776},"2753":{"index":2753,"count":776},"2754":{"index":2754,"count":776},"2755":{"index":2755,"count":776},"2756":{"index":2756,"count":776},"2757":{"index":2757,"count":776},"2758":{"index":2758,"count":776},"2759":{"index":2759,"count":776},"2760":{"index":2760,"count":776},"2761":{"index":2761,"count":776},"2762":{"index":2762,"count":776},"2763":{"index":2763,"count":776},"2764":{"index":2764,"count":776},"2765":{"index":2765,"count":776},"2766":{"index":2766,"count":776},"2767":{"index":2767,"count":776},"2768":{"index":2768,"count":776},"2769":{"index":2769,"count":776},"2770":{"index":2770,"count":776},"2771":{"index":2771,"count":776},"2772":{"index":2772,"count":776},"2773":{"index":2773,"count":776},"2774":{"index":2774,"count":776},"2775":{"index":2775,"count":776},"2776":{"index":2776,"count":776},"2777":{"index":2777,"count":776},"2778":{"index":2778,"count":776},"2779":{"index":2779,"count":776},"2780":{"index":2780,"count":776},"2781":{"index":2781,"count":776},"2782":{"index":2782,"count":776},"2783":{"index":2783,"count":776},"2784":{"index":2784,"count":776},"2785":{"index":2785,"count":776},"2786":{"index":2786,"count":776},"2787":{"index":2787,"count":776},"2788":{"index":2788,"count":776},"2789":{"index":2789,"count":776},"2790":{"index":2790,"count":776},"2791":{"index":2791,"count":776},"2792":{"index":2792,"count":776},"2793":{"index":2793,"count":776},"2794":{"index":2794,"count":776},"2795":{"index":2795,"count":776},"2796":{"index":2796,"count":776},"2797":{"index":2797,"count":776},"2798":{"index":2798,"count":776},"2799":{"index":2799,"count":776},"2800":{"index":2800,"count":776},"2801":{"index":2801,"count":776},"2802":{"index":2802,"count":776},"2803":{"index":2803,"count":776},"2804":{"index":2804,"count":776},"2805":{"index":2805,"count":776},"2806":{"index":2806,"count":776},"2807":{"index":2807,"count":776},"2808":{"index":2808,"count":776},"2809":{"index":2809,"count":776},"2810":{"index":2810,"count":776},"2811":{"index":2811,"count":776},"2812":{"index":2812,"count":776},"2813":{"index":2813,"count":776},"2814":{"index":2814,"count":776},"2815":{"index":2815,"count":776},"2816":{"index":2816,"count":776},"2817":{"index":2817,"count":776},"2818":{"index":2818,"count":776},"2819":{"index":2819,"count":776},"2820":{"index":2820,"count":776},"2821":{"index":2821,"count":776},"2822":{"index":2822,"count":776},"2823":{"index":2823,"count":776},"2824":{"index":2824,"count":776},"2825":{"index":2825,"count":776},"2826":{"index":2826,"count":776},"2827":{"index":2827,"count":776},"2828":{"index":2828,"count":776},"2829":{"index":2829,"count":776},"2830":{"index":2830,"count":776},"2831":{"index":2831,"count":776},"2832":{"index":2832,"count":776},"2833":{"index":2833,"count":776},"2834":{"index":2834,"count":776},"2835":{"index":2835,"count":776},"2836":{"index":2836,"count":776},"2837":{"index":2837,"count":776},"2838":{"index":2838,"count":776},"2839":{"index":2839,"count":776},"2840":{"index":2840,"count":776},"2841":{"index":2841,"count":776},"2842":{"index":2842,"count":776},"2843":{"index":2843,"count":776},"2844":{"index":2844,"count":776},"2845":{"index":2845,"count":776},"2846":{"index":2846,"count":776},"2847":{"index":2847,"count":776},"2848":{"index":2848,"count":776},"2849":{"index":2849,"count":776},"2850":{"index":2850,"count":776},"2851":{"index":2851,"count":776},"2852":{"index":2852,"count":776},"2853":{"index":2853,"count":776},"2854":{"index":2854,"count":776},"2855":{"index":2855,"count":776},"2856":{"index":2856,"count":776},"2857":{"index":2857,"count":776},"2858":{"index":2858,"count":776},"2859":{"index":2859,"count":776},"2860":{"index":2860,"count":1696},"2861":{"index":2861,"count":24},"2862":{"index":2862,"count":24},"2863":{"index":2863,"count":24},"2864":{"index":2864,"count":24},"2865":{"index":2865,"count":1696},"2866":{"index":2866,"count":480},"2867":{"index":2867,"count":1232},"2868":{"index":2868,"count":1696},"2869":{"index":2869,"count":776},"2870":{"index":2870,"count":776},"2871":{"index":2871,"count":776},"2872":{"index":2872,"count":776},"2873":{"index":2873,"count":776},"2874":{"index":2874,"count":776},"2875":{"index":2875,"count":776},"2876":{"index":2876,"count":776},"2877":{"index":2877,"count":776},"2878":{"index":2878,"count":776},"2879":{"index":2879,"count":776},"2880":{"index":2880,"count":776},"2881":{"index":2881,"count":776},"2882":{"index":2882,"count":776},"2883":{"index":2883,"count":776},"2884":{"index":2884,"count":776},"2885":{"index":2885,"count":776},"2886":{"index":2886,"count":776},"2887":{"index":2887,"count":776},"2888":{"index":2888,"count":776},"2889":{"index":2889,"count":776},"2890":{"index":2890,"count":776},"2891":{"index":2891,"count":776},"2892":{"index":2892,"count":776},"2893":{"index":2893,"count":776},"2894":{"index":2894,"count":776},"2895":{"index":2895,"count":776},"2896":{"index":2896,"count":776},"2897":{"index":2897,"count":776},"2898":{"index":2898,"count":776},"2899":{"index":2899,"count":776},"2900":{"index":2900,"count":776},"2901":{"index":2901,"count":776},"2902":{"index":2902,"count":776},"2903":{"index":2903,"count":776},"2904":{"index":2904,"count":776},"2905":{"index":2905,"count":776},"2906":{"index":2906,"count":776},"2907":{"index":2907,"count":776},"2908":{"index":2908,"count":776},"2909":{"index":2909,"count":776},"2910":{"index":2910,"count":776},"2911":{"index":2911,"count":776},"2912":{"index":2912,"count":776},"2913":{"index":2913,"count":776},"2914":{"index":2914,"count":776},"2915":{"index":2915,"count":776},"2916":{"index":2916,"count":776},"2917":{"index":2917,"count":776},"2918":{"index":2918,"count":776},"2919":{"index":2919,"count":776},"2920":{"index":2920,"count":1696},"2921":{"index":2921,"count":24},"2922":{"index":2922,"count":24},"2929":{"index":2929,"count":1696},"2930":{"index":2930,"count":1696},"2931":{"index":2931,"count":1696},"2932":{"index":2932,"count":1696},"2933":{"index":2933,"count":396},"2934":{"index":2934,"count":7},"2935":{"index":2935,"count":7},"2936":{"index":2936,"count":1696},"2937":{"index":2937,"count":1696},"2938":{"index":2938,"count":1696},"2939":{"index":2939,"count":1694},"2940":{"index":2940,"count":2},"2941":{"index":2941,"count":1696},"2942":{"index":2942,"count":1696},"2943":{"index":2943,"count":1696},"2944":{"index":2944,"count":1696},"2945":{"index":2945,"count":1696},"2946":{"index":2946,"count":1696},"2947":{"index":2947,"count":1696},"2948":{"index":2948,"count":1688},"2949":{"index":2949,"count":1688},"2950":{"index":2950,"count":1688},"2951":{"index":2951,"count":1688},"2952":{"index":2952,"count":1688},"2953":{"index":2953,"count":1688},"2954":{"index":2954,"count":1688},"2955":{"index":2955,"count":1688},"2956":{"index":2956,"count":1688},"2957":{"index":2957,"count":1688},"2958":{"index":2958,"count":1688},"2959":{"index":2959,"count":24},"2960":{"index":2960,"count":1688},"2961":{"index":2961,"count":1688},"2962":{"index":2962,"count":480},"2963":{"index":2963,"count":1688},"2964":{"index":2964,"count":1688},"2965":{"index":2965,"count":18},"2966":{"index":2966,"count":1696},"2967":{"index":2967,"count":1694},"2974":{"index":2974,"count":1696},"2975":{"index":2975,"count":1696},"2976":{"index":2976,"count":1696},"2977":{"index":2977,"count":1696},"2978":{"index":2978,"count":784},"2979":{"index":2979,"count":24},"2980":{"index":2980,"count":784},"2981":{"index":2981,"count":24},"2982":{"index":2982,"count":784},"2983":{"index":2983,"count":18},"2984":{"index":2984,"count":912},"2985":{"index":2985,"count":1696},"2986":{"index":2986,"count":1696},"2987":{"index":2987,"count":1696},"2988":{"index":2988,"count":784},"2989":{"index":2989,"count":1},"2990":{"index":2990,"count":1},"2991":{"index":2991,"count":1},"2992":{"index":2992,"count":1},"2993":{"index":2993,"count":1},"2994":{"index":2994,"count":1},"2995":{"index":2995,"count":1},"2996":{"index":2996,"count":1},"2997":{"index":2997,"count":56},"2998":{"index":2998,"count":56},"2999":{"index":2999,"count":1},"3000":{"index":3000,"count":1},"3001":{"index":3001,"count":1},"3002":{"index":3002,"count":1},"3004":{"index":3004,"count":1},"3005":{"index":3005,"count":1}},"blocks":{"0":{"index":0,"count":1},"1":{"index":1,"count":1026},"3":{"index":3,"count":1064},"6":{"index":6,"count":5462},"7":{"index":7,"count":154},"8":{"index":8,"count":352},"9":{"index":9,"count":40502},"10":{"index":10,"count":40058},"11":{"index":11,"count":4012},"12":{"index":12,"count":14312},"13":{"index":13,"count":1380},"14":{"index":14,"count":70},"15":{"index":15,"count":542},"16":{"index":16,"count":92},"17":{"index":17,"count":534},"18":{"index":18,"count":2518},"19":{"index":19,"count":174},"20":{"index":20,"count":500},"21":{"index":21,"count":346},"22":{"index":22,"count":530},"23":{"index":23,"count":196},"24":{"index":24,"count":84},"25":{"index":25,"count":542},"26":{"index":26,"count":12},"27":{"index":27,"count":1106},"28":{"index":28,"count":24},"29":{"index":29,"count":46},"30":{"index":30,"count":32},"31":{"index":31,"count":30},"32":{"index":32,"count":22574},"33":{"index":33,"count":32996},"34":{"index":34,"count":36834},"35":{"index":35,"count":250},"36":{"index":36,"count":32},"37":{"index":37,"count":2},"38":{"index":38,"count":736},"39":{"index":39,"count":54},"40":{"index":40,"count":2},"41":{"index":41,"count":2},"42":{"index":42,"count":682},"43":{"index":43,"count":8},"44":{"index":44,"count":40},"45":{"index":45,"count":40},"46":{"index":46,"count":342},"47":{"index":47,"count":32},"48":{"index":48,"count":52},"49":{"index":49,"count":2},"50":{"index":50,"count":258},"51":{"index":51,"count":4438},"52":{"index":52,"count":118},"53":{"index":53,"count":2},"54":{"index":54,"count":30950},"55":{"index":55,"count":42},"56":{"index":56,"count":122},"57":{"index":57,"count":106},"58":{"index":58,"count":16},"59":{"index":59,"count":3654},"60":{"index":60,"count":12},"61":{"index":61,"count":20},"62":{"index":62,"count":8},"63":{"index":63,"count":10},"64":{"index":64,"count":8},"65":{"index":65,"count":2},"66":{"index":66,"count":3622},"67":{"index":67,"count":14282},"68":{"index":68,"count":3350},"69":{"index":69,"count":16},"70":{"index":70,"count":4},"71":{"index":71,"count":10},"72":{"index":72,"count":8},"73":{"index":73,"count":2},"74":{"index":74,"count":10916},"75":{"index":75,"count":1096},"76":{"index":76,"count":1300},"77":{"index":77,"count":39},"78":{"index":78,"count":124},"79":{"index":79,"count":9550},"80":{"index":80,"count":1886},"81":{"index":81,"count":1990},"82":{"index":82,"count":78},"83":{"index":83,"count":4},"84":{"index":84,"count":2},"85":{"index":85,"count":2},"86":{"index":86,"count":2},"87":{"index":87,"count":2},"88":{"index":88,"count":2},"89":{"index":89,"count":2},"90":{"index":90,"count":30},"91":{"index":91,"count":28},"92":{"index":92,"count":100},"93":{"index":93,"count":100},"94":{"index":94,"count":32},"95":{"index":95,"count":836},"96":{"index":96,"count":526},"97":{"index":97,"count":524},"98":{"index":98,"count":176},"99":{"index":99,"count":22},"100":{"index":100,"count":40},"101":{"index":101,"count":4},"102":{"index":102,"count":4},"103":{"index":103,"count":4},"104":{"index":104,"count":4},"105":{"index":105,"count":52},"106":{"index":106,"count":72},"107":{"index":107,"count":32},"108":{"index":108,"count":16},"109":{"index":109,"count":24},"110":{"index":110,"count":24},"111":{"index":111,"count":74},"112":{"index":112,"count":26},"113":{"index":113,"count":48},"114":{"index":114,"count":98},"115":{"index":115,"count":46},"116":{"index":116,"count":16},"117":{"index":117,"count":38},"118":{"index":118,"count":20},"119":{"index":119,"count":4},"120":{"index":120,"count":522},"121":{"index":121,"count":294},"122":{"index":122,"count":8},"123":{"index":123,"count":52},"124":{"index":124,"count":4},"125":{"index":125,"count":22},"126":{"index":126,"count":14},"127":{"index":127,"count":6},"128":{"index":128,"count":8},"130":{"index":130,"count":16},"131":{"index":131,"count":12},"132":{"index":132,"count":270},"133":{"index":133,"count":16},"134":{"index":134,"count":408},"135":{"index":135,"count":4182},"136":{"index":136,"count":392},"137":{"index":137,"count":94},"138":{"index":138,"count":90},"139":{"index":139,"count":4},"140":{"index":140,"count":2},"141":{"index":141,"count":2},"142":{"index":142,"count":12},"143":{"index":143,"count":4},"144":{"index":144,"count":8},"145":{"index":145,"count":2},"146":{"index":146,"count":2},"147":{"index":147,"count":2},"148":{"index":148,"count":64},"149":{"index":149,"count":52},"150":{"index":150,"count":42},"151":{"index":151,"count":14},"152":{"index":152,"count":8},"153":{"index":153,"count":12},"154":{"index":154,"count":4},"155":{"index":155,"count":2},"156":{"index":156,"count":8},"157":{"index":157,"count":3688},"158":{"index":158,"count":16},"159":{"index":159,"count":36},"160":{"index":160,"count":162},"161":{"index":161,"count":64},"162":{"index":162,"count":14},"163":{"index":163,"count":98},"164":{"index":164,"count":6},"165":{"index":165,"count":4},"166":{"index":166,"count":24},"167":{"index":167,"count":14},"168":{"index":168,"count":4},"169":{"index":169,"count":4},"170":{"index":170,"count":24},"172":{"index":172,"count":8},"173":{"index":173,"count":6},"174":{"index":174,"count":2},"175":{"index":175,"count":8},"176":{"index":176,"count":4},"177":{"index":177,"count":2},"178":{"index":178,"count":16},"179":{"index":179,"count":24},"180":{"index":180,"count":8},"181":{"index":181,"count":62},"182":{"index":182,"count":10274},"183":{"index":183,"count":700},"184":{"index":184,"count":4962},"185":{"index":185,"count":408},"186":{"index":186,"count":526},"187":{"index":187,"count":3614},"188":{"index":188,"count":9194},"189":{"index":189,"count":7660},"190":{"index":190,"count":109123},"191":{"index":191,"count":100383},"192":{"index":192,"count":2104},"193":{"index":193,"count":930},"194":{"index":194,"count":392},"195":{"index":195,"count":486},"196":{"index":196,"count":444},"197":{"index":197,"count":74},"198":{"index":198,"count":74},"199":{"index":199,"count":74},"200":{"index":200,"count":18},"201":{"index":201,"count":56},"202":{"index":202,"count":324},"203":{"index":203,"count":60},"204":{"index":204,"count":20},"205":{"index":205,"count":4},"206":{"index":206,"count":24},"207":{"index":207,"count":100},"208":{"index":208,"count":8},"209":{"index":209,"count":40},"210":{"index":210,"count":3318},"211":{"index":211,"count":68},"212":{"index":212,"count":1094},"213":{"index":213,"count":4},"214":{"index":214,"count":76439},"215":{"index":215,"count":14588},"216":{"index":216,"count":3840},"217":{"index":217,"count":1854},"218":{"index":218,"count":634},"219":{"index":219,"count":1178},"220":{"index":220,"count":430},"221":{"index":221,"count":26},"222":{"index":222,"count":2},"223":{"index":223,"count":36},"224":{"index":224,"count":196},"225":{"index":225,"count":16},"226":{"index":226,"count":52},"227":{"index":227,"count":48},"228":{"index":228,"count":10},"229":{"index":229,"count":38},"230":{"index":230,"count":18},"231":{"index":231,"count":2},"232":{"index":232,"count":90},"233":{"index":233,"count":8},"234":{"index":234,"count":20},"235":{"index":235,"count":10},"236":{"index":236,"count":14},"237":{"index":237,"count":4},"238":{"index":238,"count":4},"239":{"index":239,"count":2},"240":{"index":240,"count":320},"241":{"index":241,"count":24},"242":{"index":242,"count":8},"243":{"index":243,"count":242},"244":{"index":244,"count":210},"245":{"index":245,"count":38},"246":{"index":246,"count":44},"247":{"index":247,"count":4},"248":{"index":248,"count":128},"249":{"index":249,"count":106},"250":{"index":250,"count":18},"251":{"index":251,"count":4},"252":{"index":252,"count":8},"253":{"index":253,"count":24},"254":{"index":254,"count":10},"255":{"index":255,"count":2},"256":{"index":256,"count":4},"257":{"index":257,"count":208},"258":{"index":258,"count":242},"259":{"index":259,"count":178},"260":{"index":260,"count":16},"261":{"index":261,"count":36},"262":{"index":262,"count":20},"263":{"index":263,"count":10},"264":{"index":264,"count":8},"265":{"index":265,"count":16},"266":{"index":266,"count":8},"267":{"index":267,"count":8},"268":{"index":268,"count":158},"269":{"index":269,"count":68},"270":{"index":270,"count":6},"271":{"index":271,"count":2544},"272":{"index":272,"count":1027},"273":{"index":273,"count":738},"274":{"index":274,"count":14},"275":{"index":275,"count":128},"276":{"index":276,"count":2},"277":{"index":277,"count":106},"278":{"index":278,"count":2},"279":{"index":279,"count":6},"280":{"index":280,"count":4},"281":{"index":281,"count":88},"282":{"index":282,"count":3},"283":{"index":283,"count":48},"284":{"index":284,"count":200},"285":{"index":285,"count":204},"286":{"index":286,"count":32},"287":{"index":287,"count":8},"288":{"index":288,"count":2},"289":{"index":289,"count":6},"290":{"index":290,"count":116},"291":{"index":291,"count":50},"292":{"index":292,"count":60},"293":{"index":293,"count":46},"294":{"index":294,"count":62},"295":{"index":295,"count":4},"296":{"index":296,"count":62},"297":{"index":297,"count":8},"298":{"index":298,"count":104},"299":{"index":299,"count":24},"300":{"index":300,"count":12},"301":{"index":301,"count":32},"302":{"index":302,"count":12},"303":{"index":303,"count":8},"304":{"index":304,"count":4},"305":{"index":305,"count":4},"306":{"index":306,"count":4},"307":{"index":307,"count":2},"308":{"index":308,"count":2},"309":{"index":309,"count":4},"310":{"index":310,"count":32},"311":{"index":311,"count":2540},"312":{"index":312,"count":1750},"313":{"index":313,"count":58},"314":{"index":314,"count":6},"315":{"index":315,"count":30},"316":{"index":316,"count":104},"317":{"index":317,"count":1552},"318":{"index":318,"count":24},"319":{"index":319,"count":20},"320":{"index":320,"count":4},"321":{"index":321,"count":2},"322":{"index":322,"count":2},"323":{"index":323,"count":12},"324":{"index":324,"count":2540},"325":{"index":325,"count":40},"326":{"index":326,"count":16},"327":{"index":327,"count":2604},"328":{"index":328,"count":32},"329":{"index":329,"count":16},"330":{"index":330,"count":16},"331":{"index":331,"count":12},"332":{"index":332,"count":6},"333":{"index":333,"count":2510},"334":{"index":334,"count":34},"335":{"index":335,"count":2456},"336":{"index":336,"count":54},"337":{"index":337,"count":2446},"338":{"index":338,"count":10},"339":{"index":339,"count":2446},"340":{"index":340,"count":18},"341":{"index":341,"count":12},"342":{"index":342,"count":2},"343":{"index":343,"count":2402},"344":{"index":344,"count":12},"345":{"index":345,"count":2392},"346":{"index":346,"count":10},"347":{"index":347,"count":2380},"348":{"index":348,"count":12},"349":{"index":349,"count":2370},"350":{"index":350,"count":10},"351":{"index":351,"count":2360},"352":{"index":352,"count":10},"353":{"index":353,"count":2350},"354":{"index":354,"count":10},"355":{"index":355,"count":2350},"356":{"index":356,"count":4},"357":{"index":357,"count":50},"358":{"index":358,"count":4},"359":{"index":359,"count":18},"360":{"index":360,"count":18},"361":{"index":361,"count":4},"362":{"index":362,"count":6},"363":{"index":363,"count":8},"364":{"index":364,"count":8},"365":{"index":365,"count":14},"366":{"index":366,"count":8},"367":{"index":367,"count":8},"368":{"index":368,"count":8},"369":{"index":369,"count":2350},"370":{"index":370,"count":210},"371":{"index":371,"count":8},"372":{"index":372,"count":8},"373":{"index":373,"count":28},"374":{"index":374,"count":1840},"375":{"index":375,"count":4},"376":{"index":376,"count":6},"377":{"index":377,"count":2},"378":{"index":378,"count":166},"379":{"index":379,"count":270},"380":{"index":380,"count":122},"382":{"index":382,"count":166},"383":{"index":383,"count":858},"384":{"index":384,"count":88},"385":{"index":385,"count":228},"386":{"index":386,"count":12},"387":{"index":387,"count":28},"388":{"index":388,"count":90},"389":{"index":389,"count":190},"390":{"index":390,"count":228},"391":{"index":391,"count":102},"392":{"index":392,"count":124},"393":{"index":393,"count":32},"394":{"index":394,"count":24},"395":{"index":395,"count":32},"396":{"index":396,"count":24},"397":{"index":397,"count":8},"398":{"index":398,"count":30},"399":{"index":399,"count":8},"400":{"index":400,"count":6},"401":{"index":401,"count":2},"402":{"index":402,"count":6},"403":{"index":403,"count":4},"404":{"index":404,"count":4},"405":{"index":405,"count":14},"406":{"index":406,"count":2},"407":{"index":407,"count":4},"408":{"index":408,"count":4},"409":{"index":409,"count":2},"410":{"index":410,"count":8},"411":{"index":411,"count":28},"412":{"index":412,"count":18},"413":{"index":413,"count":2},"414":{"index":414,"count":2},"415":{"index":415,"count":6},"416":{"index":416,"count":4},"417":{"index":417,"count":2},"418":{"index":418,"count":4},"420":{"index":420,"count":14},"421":{"index":421,"count":4},"422":{"index":422,"count":4},"423":{"index":423,"count":6},"424":{"index":424,"count":6},"425":{"index":425,"count":4},"426":{"index":426,"count":2},"427":{"index":427,"count":8},"428":{"index":428,"count":6},"429":{"index":429,"count":4},"430":{"index":430,"count":18},"431":{"index":431,"count":196},"432":{"index":432,"count":32},"433":{"index":433,"count":6},"434":{"index":434,"count":10},"435":{"index":435,"count":16},"436":{"index":436,"count":2},"437":{"index":437,"count":64},"438":{"index":438,"count":34},"439":{"index":439,"count":68},"440":{"index":440,"count":10},"441":{"index":441,"count":58},"442":{"index":442,"count":34},"443":{"index":443,"count":28},"444":{"index":444,"count":24},"445":{"index":445,"count":12},"446":{"index":446,"count":24},"447":{"index":447,"count":2},"448":{"index":448,"count":10},"449":{"index":449,"count":8},"450":{"index":450,"count":34},"451":{"index":451,"count":24},"452":{"index":452,"count":6},"453":{"index":453,"count":4},"454":{"index":454,"count":20},"455":{"index":455,"count":6},"456":{"index":456,"count":10},"457":{"index":457,"count":42},"458":{"index":458,"count":10},"459":{"index":459,"count":8},"460":{"index":460,"count":10},"461":{"index":461,"count":4},"462":{"index":462,"count":12},"463":{"index":463,"count":8},"464":{"index":464,"count":4},"465":{"index":465,"count":46},"466":{"index":466,"count":8},"467":{"index":467,"count":4},"468":{"index":468,"count":10},"469":{"index":469,"count":4},"470":{"index":470,"count":16},"471":{"index":471,"count":8},"472":{"index":472,"count":4},"473":{"index":473,"count":28},"474":{"index":474,"count":6},"475":{"index":475,"count":16},"476":{"index":476,"count":6},"477":{"index":477,"count":6},"478":{"index":478,"count":10},"479":{"index":479,"count":6},"480":{"index":480,"count":16},"481":{"index":481,"count":6},"482":{"index":482,"count":12},"483":{"index":483,"count":6},"484":{"index":484,"count":6},"485":{"index":485,"count":24},"486":{"index":486,"count":8},"488":{"index":488,"count":12},"489":{"index":489,"count":2},"490":{"index":490,"count":18},"491":{"index":491,"count":6},"492":{"index":492,"count":24},"493":{"index":493,"count":4},"494":{"index":494,"count":24},"495":{"index":495,"count":24},"496":{"index":496,"count":12},"497":{"index":497,"count":30},"498":{"index":498,"count":24},"499":{"index":499,"count":4},"500":{"index":500,"count":4},"501":{"index":501,"count":2},"502":{"index":502,"count":2058},"503":{"index":503,"count":24},"504":{"index":504,"count":444},"505":{"index":505,"count":18},"506":{"index":506,"count":116},"507":{"index":507,"count":196},"508":{"index":508,"count":114},"509":{"index":509,"count":556},"510":{"index":510,"count":46},"511":{"index":511,"count":42},"512":{"index":512,"count":2},"513":{"index":513,"count":16},"514":{"index":514,"count":68},"515":{"index":515,"count":2},"516":{"index":516,"count":2},"517":{"index":517,"count":32},"518":{"index":518,"count":28},"519":{"index":519,"count":12},"520":{"index":520,"count":24},"521":{"index":521,"count":30},"522":{"index":522,"count":124},"523":{"index":523,"count":64},"524":{"index":524,"count":16},"525":{"index":525,"count":48},"526":{"index":526,"count":36},"527":{"index":527,"count":4},"528":{"index":528,"count":94},"529":{"index":529,"count":88},"530":{"index":530,"count":6},"531":{"index":531,"count":430},"532":{"index":532,"count":700},"533":{"index":533,"count":414},"535":{"index":535,"count":266},"536":{"index":536,"count":8},"537":{"index":537,"count":12},"538":{"index":538,"count":8},"539":{"index":539,"count":478},"540":{"index":540,"count":214},"542":{"index":542,"count":308},"543":{"index":543,"count":24},"544":{"index":544,"count":8},"545":{"index":545,"count":264},"546":{"index":546,"count":14},"547":{"index":547,"count":4},"548":{"index":548,"count":58},"549":{"index":549,"count":70},"550":{"index":550,"count":16},"551":{"index":551,"count":8},"552":{"index":552,"count":4},"553":{"index":553,"count":38},"554":{"index":554,"count":12},"555":{"index":555,"count":8},"556":{"index":556,"count":6},"557":{"index":557,"count":30},"558":{"index":558,"count":36},"559":{"index":559,"count":110},"560":{"index":560,"count":56},"561":{"index":561,"count":20},"562":{"index":562,"count":12},"563":{"index":563,"count":36},"564":{"index":564,"count":12},"565":{"index":565,"count":4},"566":{"index":566,"count":22},"567":{"index":567,"count":14},"568":{"index":568,"count":24},"569":{"index":569,"count":22},"570":{"index":570,"count":32},"571":{"index":571,"count":12},"572":{"index":572,"count":4},"573":{"index":573,"count":4},"574":{"index":574,"count":20},"575":{"index":575,"count":4},"576":{"index":576,"count":4},"577":{"index":577,"count":6},"578":{"index":578,"count":14},"579":{"index":579,"count":2},"581":{"index":581,"count":2},"583":{"index":583,"count":4},"585":{"index":585,"count":2},"588":{"index":588,"count":2},"590":{"index":590,"count":4},"591":{"index":591,"count":8},"592":{"index":592,"count":4},"593":{"index":593,"count":4},"594":{"index":594,"count":4},"595":{"index":595,"count":2},"598":{"index":598,"count":2},"599":{"index":599,"count":2170},"600":{"index":600,"count":824},"601":{"index":601,"count":26},"602":{"index":602,"count":304},"603":{"index":603,"count":494},"604":{"index":604,"count":1346},"605":{"index":605,"count":1542},"606":{"index":606,"count":708},"607":{"index":607,"count":28},"608":{"index":608,"count":28},"609":{"index":609,"count":14},"610":{"index":610,"count":1696},"611":{"index":611,"count":1728},"612":{"index":612,"count":1456},"614":{"index":614,"count":34},"615":{"index":615,"count":4},"616":{"index":616,"count":42},"617":{"index":617,"count":20},"618":{"index":618,"count":1464},"620":{"index":620,"count":2},"621":{"index":621,"count":6},"622":{"index":622,"count":8},"623":{"index":623,"count":6},"625":{"index":625,"count":6},"626":{"index":626,"count":1696},"627":{"index":627,"count":56},"628":{"index":628,"count":20},"629":{"index":629,"count":16},"630":{"index":630,"count":3786},"631":{"index":631,"count":5560},"632":{"index":632,"count":236},"633":{"index":633,"count":6},"634":{"index":634,"count":18},"635":{"index":635,"count":2},"636":{"index":636,"count":212},"637":{"index":637,"count":240},"638":{"index":638,"count":28},"639":{"index":639,"count":4},"640":{"index":640,"count":24},"641":{"index":641,"count":2},"642":{"index":642,"count":212},"643":{"index":643,"count":8},"644":{"index":644,"count":32},"645":{"index":645,"count":32},"646":{"index":646,"count":88},"647":{"index":647,"count":24},"648":{"index":648,"count":44},"649":{"index":649,"count":2},"650":{"index":650,"count":20},"651":{"index":651,"count":1312},"652":{"index":652,"count":48},"653":{"index":653,"count":2},"654":{"index":654,"count":3636},"655":{"index":655,"count":94},"656":{"index":656,"count":72},"657":{"index":657,"count":12},"658":{"index":658,"count":12},"659":{"index":659,"count":12},"660":{"index":660,"count":12},"661":{"index":661,"count":219},"662":{"index":662,"count":638},"663":{"index":663,"count":776},"664":{"index":664,"count":39576},"665":{"index":665,"count":26864},"666":{"index":666,"count":1628},"667":{"index":667,"count":334},"668":{"index":668,"count":102},"669":{"index":669,"count":28},"670":{"index":670,"count":28},"671":{"index":671,"count":23608},"672":{"index":672,"count":23608},"673":{"index":673,"count":23608},"674":{"index":674,"count":23608},"675":{"index":675,"count":1192},"676":{"index":676,"count":426},"677":{"index":677,"count":426},"678":{"index":678,"count":426},"679":{"index":679,"count":1318},"680":{"index":680,"count":1318},"681":{"index":681,"count":1318},"682":{"index":682,"count":1696},"683":{"index":683,"count":480},"684":{"index":684,"count":1232},"685":{"index":685,"count":776},"686":{"index":686,"count":24},"687":{"index":687,"count":1696},"688":{"index":688,"count":480},"689":{"index":689,"count":1232},"690":{"index":690,"count":776},"691":{"index":691,"count":24},"694":{"index":694,"count":1696},"695":{"index":695,"count":7},"696":{"index":696,"count":1688},"697":{"index":697,"count":24},"698":{"index":698,"count":480},"699":{"index":699,"count":18},"700":{"index":700,"count":1694},"704":{"index":704,"count":1696},"705":{"index":705,"count":24},"706":{"index":706,"count":24},"707":{"index":707,"count":18},"708":{"index":708,"count":912},"709":{"index":709,"count":1696},"710":{"index":710,"count":1},"711":{"index":711,"count":1},"712":{"index":712,"count":56},"713":{"index":713,"count":56},"714":{"index":714,"count":1}},"hash":"b6f33392f5aef653f4b5dbbd84134528","instrumentor":{"blockCounter":715,"nodeCounter":3006,"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, exports:true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseImportSpecifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true, parseModuleBlock: true, parseConciseBody: true */\n\n(function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        AssignmentExpression: 'AssignmentExpression',\n        BinaryExpression: 'BinaryExpression',\n        BlockStatement: 'BlockStatement',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassElement: 'ClassElement',\n        ClassHeritage: 'ClassHeritage',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportDeclaration: 'ExportDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExportSpecifierSet: 'ExportSpecifierSet',\n        ExpressionStatement: 'ExpressionStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForStatement: 'ForStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Glob: 'Glob',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportSpecifier: 'ImportSpecifier',\n        LabeledStatement: 'LabeledStatement',\n        Literal: 'Literal',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        ModuleDeclaration: 'ModuleDeclaration',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Path:  'Path',\n        Program: 'Program',\n        Property: 'Property',\n        ProtoExpression: 'ProtoExpression',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        NewlineAfterModule:  'Illegal newline after module',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictClassName:  'Class name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode',\n        StrictSuperOutsideClassElement: 'Super keyword is only allowed inside class elements',\n        NoFromAfterImport: 'Missing from after import',\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        // Harmony\n        if (id === 'module') {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // Return the next character and move forward.\n\n    function nextChar() {\n        return source[index++];\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = nextChar();\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = nextChar();\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += nextChar();\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === '<' && ch2 === '|') {\n            index += 2;\n            return {\n                type: Token.Punctuator,\n                value: '<|',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=#/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch, octal;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = nextChar();\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += nextChar();\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (ch === 'b' || ch === 'B') {\n                    nextChar();\n                    number = '';\n\n                    while (index < length) {\n                        ch = source[index];\n                        if (ch !== '0' && ch !== '1') {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length === 0) {\n                        // only 0b or 0B\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 2),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (ch === 'o' || ch === 'O' || isOctalDigit(ch)) {\n                    if (isOctalDigit(ch)) {\n                        octal = true;\n                        number = nextChar();\n                    } else {\n                        octal = false;\n                        nextChar();\n                        number = '';\n                    }\n\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length === 0) {\n                        // only 0o or 0O\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: octal,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === '.') {\n            number += nextChar();\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += nextChar();\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += nextChar();\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += nextChar();\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += nextChar();\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = nextChar();\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = nextChar();\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\v';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(nextChar());\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(nextChar());\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str = '', ch, start, pattern, flags, value, classMarker = false, restore;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = nextChar();\n\n        while (index < length) {\n            ch = nextChar();\n            str += ch;\n            if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '\\\\') {\n                    ch = nextChar();\n                    // ECMA-262 7.8.5\n                    if (isLineTerminator(ch)) {\n                        throwError({}, Messages.UnterminatedRegExp);\n                    }\n                    str += ch;\n                } else if (ch === '/') {\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (str.length === 1) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        var error;\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        var s;\n\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwError(token, Messages.StrictReservedWord);\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n\n    // Return true if the next token matches the specified contextual keyword\n\n    function matchContextualKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Identifier && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n        return;\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        switch (expr.type) {\n        case 'AssignmentExpression':\n        case 'BinaryExpression':\n        case 'ConditionalExpression':\n        case 'LogicalExpression':\n        case 'SequenceExpression':\n        case 'UnaryExpression':\n        case 'UpdateExpression':\n            return false;\n        }\n        return true;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [],\n            undef;\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(undef);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    function parseSealedArrayInitialiser() {\n        var result = parseArrayInitialiser();\n        result.sealed = true;\n        return result;\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseConciseBody();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwError(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            body: body\n        };\n    }\n\n    function parsePropertyMethodFunction() {\n        var token, previousStrict, param, params, paramSet, method;\n\n        previousStrict = strict;\n        strict = true;\n        params = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictParamName);\n                }\n                if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                    throwError(token, Messages.StrictParamDupe);\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        method = parsePropertyFunction(params);\n\n        strict = previousStrict;\n\n        return method;\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwError(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !(match(':') || match('('))) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !(match(':') || match('('))) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    throwUnexpected(lex());\n                }\n                param = [ parseVariableIdentifier() ];\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction(param, token),\n                    kind: 'set'\n                };\n            } else {\n                if (match(':')) {\n                    lex();\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: parseAssignmentExpression(),\n                        kind: 'init'\n                    };\n                } else if (match('(')) {\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: parsePropertyMethodFunction(),\n                        kind: 'init',\n                        method: true\n                    };\n                } else {\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: id,\n                        kind: 'init',\n                        shorthand: true\n                    };\n                }\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            if (match(':')) {\n                lex();\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            } else if (match('(')) {\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyMethodFunction(),\n                    kind: 'init',\n                    method: true\n                };\n            } else {\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: key,\n                    kind: 'init',\n                    shorthand: true\n                };\n            }\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var token, properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwError({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    function parseSealedObjectInitialiser() {\n        var result = parseObjectInitialiser();\n        result.sealed = true;\n        return result;\n    }\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var expr,\n            token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n\n            if (matchKeyword('class')) {\n                return parseClassDeclaration();\n            }\n\n            if (matchKeyword('super')) {\n                if (strict && !state.inClassElement) {\n                    throwError(token, Messages.StrictSuperOutsideClassElement);\n                }\n                lex();\n                return {\n                    type: Syntax.Identifier,\n                    name: 'super'\n                };\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            lex();\n            state.lastParenthesized = expr = parseExpression();\n            expect(')');\n            return expr;\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        if (match('#')) {\n            lex();\n            if (match('[')) {\n                return parseSealedArrayInitialiser();\n            }\n\n            if (match('{')) {\n                return parseSealedObjectInitialiser();\n            }\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember(object) {\n        return {\n            type: Syntax.MemberExpression,\n            computed: false,\n            object: object,\n            property: parseNonComputedProperty()\n        };\n    }\n\n    function parseComputedMember(object) {\n        var property, expr;\n\n        expect('[');\n        property = parseExpression();\n        expr = {\n            type: Syntax.MemberExpression,\n            computed: true,\n            object: object,\n            property: property\n        };\n        expect(']');\n        return expr;\n    }\n\n    function parseCallMember(object) {\n        return {\n            type: Syntax.CallExpression,\n            callee: object,\n            'arguments': parseArguments()\n        };\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseTriangleLiteral() {\n        var expr,\n            token = lookahead(),\n            type = token.type;\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    function parseProtoExpression(proto) {\n        expect('<|');\n        return {\n            type: Syntax.ProtoExpression,\n            proto: proto,\n            literal: parseTriangleLiteral()\n        };\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (match('<|')) {\n                expr = parseProtoExpression(expr);\n            } else if (match('(')) {\n                expr = parseCallMember(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (match('<|')) {\n                expr = parseProtoExpression(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall();\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPostfix);\n            }\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPrefix);\n            }\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n        expr = parseShiftExpression();\n        state.allowIn = previousAllowIn;\n\n        if (match('<') || match('>') || match('<=') || match('>=')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        } else if (state.allowIn && matchKeyword('in')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: 'in',\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        } else if (matchKeyword('instanceof')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: 'instanceof',\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while ((!peekLineTerminator() && (matchContextualKeyword('is') || matchContextualKeyword('isnt'))) || match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function reinterpretAsAssignmentBindingPattern(expr) {\n        var i, len, property, element;\n\n        if (expr.sealed) {\n            throwError({}, Messages.InvalidLHSInAssignment);\n        }\n\n        if (expr.type === Syntax.ObjectExpression) {\n            expr.type = Syntax.ObjectPattern;\n            for (i = 0, len = expr.properties.length; i < len; i += 1) {\n                property = expr.properties[i];\n                if (property.kind !== 'init') {\n                    throwError({}, Messages.InvalidLHSInAssignment);\n                }\n                reinterpretAsAssignmentBindingPattern(property.value);\n            }\n        } else if (expr.type === Syntax.ArrayExpression) {\n            expr.type = Syntax.ArrayPattern;\n            for (i = 0, len = expr.elements.length; i < len; i += 1) {\n                element = expr.elements[i];\n                if (element) {\n                    reinterpretAsAssignmentBindingPattern(element);\n                }\n            }\n        } else if (expr.type === Syntax.Identifier) {\n            if (isRestrictedWord(expr.name)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n        } else {\n            if (expr.type !== Syntax.MemberExpression && expr.type !== Syntax.CallExpression && expr.type !== Syntax.NewExpression) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n        }\n    }\n\n    function parseAssignmentExpression() {\n        var expr;\n\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (state.lastParenthesized !== expr && !isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSAssignment);\n            }\n\n            // ES.next draf 11.13 Runtime Semantics step 1\n            if (expr.type === Syntax.ObjectExpression || expr.type === Syntax.ArrayExpression) {\n                reinterpretAsAssignmentBindingPattern(expr);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        while (index < length) {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        }\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // http://wiki.ecmascript.org/doku.php?id=harmony:modules\n\n    function parsePath() {\n        var result, id;\n\n        result = {\n            type: Syntax.Path,\n            body: []\n        };\n\n        while (true) {\n            id = parseVariableIdentifier();\n            result.body.push(id);\n            if (!match('.')) {\n                break;\n            }\n            lex();\n        }\n\n        return result;\n    }\n\n    function parseGlob() {\n        expect('*');\n        return {\n            type: Syntax.Glob\n        };\n    }\n\n    function parseModuleDeclaration() {\n        var id, token, declaration;\n\n        expectKeyword('module');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterModule);\n        }\n\n        id = parseVariableIdentifier();\n\n        if (match('{')) {\n            return {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                body: parseModuleBlock()\n            };\n        }\n\n        expect('=');\n\n        token = lookahead();\n        if (token.type === Token.StringLiteral) {\n            declaration = {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                from: parsePrimaryExpression()\n            };\n        } else {\n            declaration = {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                from: parsePath()\n            };\n        }\n\n        consumeSemicolon();\n\n        return declaration;\n    }\n\n    function parseExportSpecifierSetProperty() {\n        var specifier;\n\n        specifier = {\n            type: Syntax.ExportSpecifier,\n            id: parseVariableIdentifier(),\n            from: null\n        };\n\n        if (match(':')) {\n            lex();\n            specifier.from = parsePath();\n        }\n\n        return specifier;\n    }\n\n    function parseExportSpecifier() {\n        var specifier, specifiers;\n\n        if (match('{')) {\n            lex();\n            specifiers = [];\n\n            do {\n                specifiers.push(parseExportSpecifierSetProperty());\n            } while (match(',') && lex());\n\n            expect('}');\n\n            return {\n                type: Syntax.ExportSpecifierSet,\n                specifiers: specifiers\n            };\n        }\n\n        if (match('*')) {\n            specifier = {\n                type: Syntax.ExportSpecifier,\n                id: parseGlob(),\n                from: null\n            };\n\n            if (matchContextualKeyword('from')) {\n                lex();\n                specifier.from = parsePath();\n            }\n        } else {\n            specifier = {\n                type: Syntax.ExportSpecifier,\n                id: parseVariableIdentifier(),\n                from: null\n            };\n        }\n        return specifier;\n    }\n\n    function parseExportDeclaration() {\n        var id, token, declaration, specifiers;\n\n        expectKeyword('export');\n\n        token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'function':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseFunctionDeclaration()\n                };\n            case 'module':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseModuleDeclaration()\n                };\n            case 'let':\n            case 'const':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseConstLetDeclaration(token.value)\n                };\n            case 'var':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseStatement()\n                };\n            }\n            throwUnexpected(lex());\n        }\n\n        specifiers = [ parseExportSpecifier() ];\n        if (match(',')) {\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                specifiers.push(parseExportSpecifier());\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExportDeclaration,\n            specifiers: specifiers\n        };\n    }\n\n    function parseImportDeclaration() {\n        var specifiers, from;\n\n        expectKeyword('import');\n\n        if (match('*')) {\n            specifiers = [parseGlob()];\n        } else if (match('{')) {\n            lex();\n            specifiers = [];\n\n            do {\n                specifiers.push(parseImportSpecifier());\n            } while (match(',') && lex());\n\n            expect('}');\n        } else {\n            specifiers = [parseVariableIdentifier()];\n        }\n\n        if (!matchContextualKeyword('from')) {\n            throwError({}, Messages.NoFromAfterImport);\n        }\n\n        lex();\n\n        if (lookahead().type === Token.StringLiteral) {\n            from = parsePrimaryExpression();\n        } else {\n            from = parsePath();\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ImportDeclaration,\n            specifiers: specifiers,\n            from: from\n        };\n    }\n\n    function parseImportSpecifier() {\n        var specifier;\n\n        specifier = {\n            type: Syntax.ImportSpecifier,\n            id: parseVariableIdentifier(),\n            from: null\n        };\n\n        if (match(':')) {\n            lex();\n            specifier.from = parsePath();\n        }\n\n        return specifier;\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, operator, oldInIteration, i, len;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let') || matchKeyword('const')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1) {\n                    if (matchKeyword('in') || matchContextualKeyword('of')) {\n                        operator = lookahead();\n                        if (!((operator.value === 'in' || init.kind !== 'var') && init.declarations[0].init)) {\n                            lex();\n                            left = init;\n                            right = parseExpression();\n                            init = null;\n                        }\n                    }\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchContextualKeyword('of')) {\n                    operator = lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                } else if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (matchKeyword('in') && (state.lastParenthesized !== init && !isLeftHandSide(init))) {\n                        throwError({}, Messages.InvalidLHSInForIn);\n                    }\n                    operator = lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        if (operator.value === 'in') {\n            return {\n                type: Syntax.ForInStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        } else {\n            return {\n                type: Syntax.ForOfStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        }\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, oldInSwitch;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant\n            };\n        }\n\n        cases = [];\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            cases.push(parseSwitchCase());\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (!match(')')) {\n            param = parseExpression();\n            // 12.14.1\n            if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {\n                throwErrorTolerant({}, Messages.StrictCatchVariable);\n            }\n        }\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            guard: null,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'class':\n                return parseClassDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseConciseBody() {\n        if (match('{')) {\n            return parseFunctionSourceElements();\n        } else {\n            return parseAssignmentExpression();\n        }\n    }\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwError(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        throwError(token, Messages.StrictParamName);\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        throwError(token, Messages.StrictParamDupe);\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            body: body\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, firstRestricted, message, params = [], paramsResult, body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramsResult = checkAndParseFormalParameterList();\n            params = paramsResult.params;\n            if (!firstRestricted) {\n                firstRestricted = paramsResult.firstRestricted;\n                message = paramsResult.message;\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            body: body\n        };\n    }\n\n    function checkAndParseFormalParameterList() {\n        var token, param, params = [], paramSet = {}, firstRestricted, message;\n\n        while (index < length) {\n            token = lookahead();\n            param = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictParamName);\n                }\n                if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                    throwError(token, Messages.StrictParamDupe);\n                }\n            } else if (!firstRestricted) {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictParamName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictParamDupe;\n                }\n            }\n            params.push(param);\n            paramSet[param.name] = true;\n            if (match(')')) {\n                break;\n            }\n            expect(',');\n        }\n        return {\n            params: params,\n            firstRestricted: firstRestricted,\n            message: message\n        };\n    }\n\n    // 14 Classes\n\n    function parseClassMethodExpression(paramsResult) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseConciseBody();\n        if (strict && paramsResult && paramsResult.firstRestricted) {\n            throwError(firstRestricted, paramsResult.message);\n        }\n        strict = previousStrict;\n\n\n        return {\n            type: Syntax.FunctionExpression,\n            params: paramsResult ? paramsResult.params : [],\n            body: body,\n            id: null\n        }\n    }\n\n    function parseClassPropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseConciseBody();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwError(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            body: body\n        };\n    }\n\n\n    function parseClassElement() {\n        var token, key, result, param, paramsResult, previousStrict, oldInClassElement;\n\n        token = lookahead();\n\n        oldInClassElement = state.inClassElement;\n        state.inClassElement = true;\n\n        if (token.value === ';') {\n            lex();\n        } else if (token.value === 'get') {\n            lex();\n            key = parseObjectPropertyKey();\n            expect('(');\n            expect(')');\n            result = {\n                type: Syntax.ClassElement,\n                key: key,\n                value: parseClassPropertyFunction([]),\n                kind: 'get'\n            };\n        } else if (token.value === 'set') {\n            lex();\n            key = parseObjectPropertyKey();\n            expect('(');\n            token = lookahead();\n            if (token.type !== Token.Identifier) {\n                throwUnexpected(lex());\n            }\n            param = [ parseVariableIdentifier() ];\n            expect(')');\n            result = {\n                type: Syntax.ClassElement,\n                key: key,\n                value: parseClassPropertyFunction(param, token),\n                kind: 'set'\n            };\n        } else {\n            key = parseObjectPropertyKey();\n            expect('(');\n            if (!match(')')) {\n                paramsResult = checkAndParseFormalParameterList();\n            }\n            expect(')');\n\n            result = {\n                type: Syntax.ClassElement,\n                key: key,\n                value: parseClassMethodExpression(paramsResult),\n                kind: ''\n            };\n        }\n\n        state.inClassElement = oldInClassElement;\n        return result;\n    }\n\n    function parseClassBody() {\n        var token, classElement, classElements = [];\n\n        expect('{');\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            classElement = parseClassElement();\n            if (typeof classElement !== 'undefined') {\n                classElements.push(classElement);\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ClassBody,\n            body: classElements\n        };\n    }\n\n    function parseClassDeclaration() {\n        var token, id, body, subclassOf, elements;\n\n        expectKeyword('class');\n\n        token = lookahead();\n        id = parseVariableIdentifier();\n\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwError(token, Messages.StrictClassName);\n            } else if (isStrictModeReservedWord(token.value)) {\n                throwError(token, Messages.StrictFunctionName);\n            }\n        }\n\n        token = lookahead();\n        if (token.value === 'extends') {\n            expectKeyword('extends');\n            subclassOf = parseAssignmentExpression();\n        }\n\n        body = parseClassBody();\n        return {\n            id: id,\n            type: Syntax.ClassDeclaration,\n            body: body,\n            subclassOf: subclassOf\n        };\n    }\n\n    // 15 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseProgramElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'module':\n                return parseModuleDeclaration(token.value);\n            case 'export':\n                return parseExportDeclaration();\n            case 'import':\n                return parseImportDeclaration();\n            }\n        }\n\n        return parseSourceElement();\n    }\n\n    function parseProgramElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseProgramElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseProgramElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseModuleElement() {\n        return parseProgramElement();\n    }\n\n    function parseModuleElements() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseModuleElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseModuleBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseModuleElements();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseProgramElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(start, end, type, value) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            range: [start, end],\n            type: type,\n            value: value\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    addComment(start, index, 'Line', comment);\n                } else if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    addComment(start, index, 'Line', comment);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            addComment(start, index, 'Block', comment);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function collectToken() {\n        var token = extra.advance(),\n            range,\n            value;\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, regex, token;\n\n        skipComment();\n\n        pos = index;\n        regex = extra.scanRegExp();\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index]\n        });\n\n        return regex;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range && typeof node.range === 'undefined') {\n                    node.range = [node.left.range[0], node.right.range[1]];\n                }\n                if (loc && typeof node.loc === 'undefined') {\n                    node.loc = {\n                        start: node.left.loc.start,\n                        end: node.right.loc.end\n                    };\n                }\n            }\n\n            return function () {\n                var node, rangeInfo, locInfo;\n\n                skipComment();\n                rangeInfo = [index, 0];\n                locInfo = {\n                    start: {\n                        line: lineNumber,\n                        column: index - lineStart\n                    }\n                };\n\n                node = parseFunction.apply(null, arguments);\n                if (typeof node !== 'undefined') {\n\n                    if (range) {\n                        rangeInfo[1] = index;\n                        node.range = rangeInfo;\n                    }\n\n                    if (loc) {\n                        locInfo.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        node.loc = locInfo;\n                    }\n\n                    if (isBinary(node)) {\n                        visit(node);\n                    }\n\n                    if (node.type === Syntax.MemberExpression) {\n                        if (typeof node.object.range !== 'undefined') {\n                            node.range[0] = node.object.range[0];\n                        }\n                        if (typeof node.object.loc !== 'undefined') {\n                            node.loc.start = node.object.loc.start;\n                        }\n                    }\n\n                    if (node.type === Syntax.CallExpression) {\n                        if (typeof node.callee.range !== 'undefined') {\n                            node.range[0] = node.callee.range[0];\n                        }\n                        if (typeof node.callee.loc !== 'undefined') {\n                            node.loc.start = node.callee.loc.start;\n                        }\n                    }\n                    return node;\n                }\n            };\n\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCallMember = parseCallMember;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExportDeclaration = parseExportDeclaration;\n            extra.parseExportSpecifier = parseExportSpecifier;\n            extra.parseExportSpecifierSetProperty = parseExportSpecifierSetProperty;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseGlob = parseGlob;\n            extra.parseImportDeclaration = parseImportDeclaration;\n            extra.parseImportSpecifier = parseImportSpecifier;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseModuleDeclaration = parseModuleDeclaration;\n            extra.parseModuleBlock = parseModuleBlock;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedMember = parseNonComputedMember;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePath = parsePath;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseProtoExpression = parseProtoExpression;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseTriangleLiteral = parseTriangleLiteral;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n            extra.parseClassElement = parseClassElement;\n            extra.parseClassDeclaration = parseClassDeclaration;\n            extra.parseClassBody = parseClassBody;\n            extra.parseClassMethodExpression = parseClassMethodExpression;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCallMember = wrapTracking(extra.parseCallMember);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseExportDeclaration = wrapTracking(parseExportDeclaration);\n            parseExportSpecifier = wrapTracking(parseExportSpecifier);\n            parseExportSpecifierSetProperty = wrapTracking(parseExportSpecifierSetProperty);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseGlob = wrapTracking(extra.parseGlob);\n            parseImportDeclaration = wrapTracking(extra.parseImportDeclaration);\n            parseImportSpecifier = wrapTracking(extra.parseImportSpecifier);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseModuleDeclaration = wrapTracking(extra.parseModuleDeclaration);\n            parseModuleBlock = wrapTracking(extra.parseModuleBlock);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedMember = wrapTracking(extra.parseNonComputedMember);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePath = wrapTracking(extra.parsePath);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseProtoExpression = wrapTracking(parseProtoExpression);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseTriangleLiteral = wrapTracking(extra.parseTriangleLiteral);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n            parseClassElement = wrapTracking(extra.parseClassElement);\n            parseClassDeclaration = wrapTracking(extra.parseClassDeclaration);\n            parseClassBody = wrapTracking(extra.parseClassBody);\n            parseClassMethodExpression = wrapTracking(extra.parseClassMethodExpression);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCallMember = extra.parseCallMember;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExportDeclaration = extra.parseExportDeclaration;\n            parseExportSpecifier = extra.parseExportSpecifier;\n            parseExportSpecifierSetProperty = extra.parseExportSpecifierSetProperty;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGlob = extra.parseGlob;\n            parseImportDeclaration = extra.parseImportDeclaration;\n            parseImportSpecifier = extra.parseImportSpecifier;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseModuleDeclaration = extra.parseModuleDeclaration;\n            parseModuleBlock = extra.parseModuleBlock;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedMember = extra.parseNonComputedMember;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePath = extra.parsePath;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseProtoExpression = extra.parseProtoExpression;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseTriangleLiteral = extra.parseTriangleLiteral;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n            parseClassElement = extra.parseClassElement;\n            parseClassDeclaration = extra.parseClassDeclaration;\n            parseClassBody = extra.parseClassBody;\n            parseClassMethodExpression = extra.parseClassMethodExpression;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            lastParenthesized: null,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.0-dev';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}(typeof exports === 'undefined' ? (esprima = {}) : exports));\n/* vim: set sw=4 ts=4 et tw=80 : */","nodes":{"0":{"loc":{"start":{"line":41,"column":0},"end":{"line":4410,"column":62}},"id":0},"1":{"loc":{"start":{"line":41,"column":0},"end":{"line":4410,"column":61}},"id":1},"2":{"loc":{"start":{"line":42,"column":4},"end":{"line":42,"column":17}},"id":2},"3":{"loc":{"start":{"line":44,"column":4},"end":{"line":58,"column":14}},"id":3},"4":{"loc":{"start":{"line":60,"column":4},"end":{"line":69,"column":6}},"id":4},"5":{"loc":{"start":{"line":71,"column":4},"end":{"line":71,"column":19}},"id":5},"6":{"loc":{"start":{"line":72,"column":4},"end":{"line":72,"column":48}},"id":6},"7":{"loc":{"start":{"line":73,"column":4},"end":{"line":73,"column":35}},"id":7},"8":{"loc":{"start":{"line":74,"column":4},"end":{"line":74,"column":47}},"id":8},"9":{"loc":{"start":{"line":75,"column":4},"end":{"line":75,"column":41}},"id":9},"10":{"loc":{"start":{"line":76,"column":4},"end":{"line":76,"column":42}},"id":10},"11":{"loc":{"start":{"line":77,"column":4},"end":{"line":77,"column":48}},"id":11},"12":{"loc":{"start":{"line":78,"column":4},"end":{"line":78,"column":47}},"id":12},"13":{"loc":{"start":{"line":79,"column":4},"end":{"line":79,"column":46}},"id":13},"14":{"loc":{"start":{"line":81,"column":4},"end":{"line":138,"column":6}},"id":14},"15":{"loc":{"start":{"line":140,"column":4},"end":{"line":144,"column":6}},"id":15},"16":{"loc":{"start":{"line":147,"column":4},"end":{"line":184,"column":6}},"id":16},"17":{"loc":{"start":{"line":187,"column":4},"end":{"line":190,"column":6}},"id":17},"18":{"loc":{"start":{"line":199,"column":12},"end":{"line":199,"column":50}},"id":18},"19":{"loc":{"start":{"line":199,"column":28},"end":{"line":199,"column":48}},"id":19},"20":{"loc":{"start":{"line":204,"column":8},"end":{"line":204,"column":38}},"id":20},"21":{"loc":{"start":{"line":204,"column":15},"end":{"line":204,"column":37}},"id":21},"22":{"loc":{"start":{"line":207,"column":8},"end":{"line":207,"column":43}},"id":22},"23":{"loc":{"start":{"line":208,"column":8},"end":{"line":210,"column":10}},"id":23},"24":{"loc":{"start":{"line":209,"column":12},"end":{"line":209,"column":51}},"id":24},"25":{"loc":{"start":{"line":209,"column":19},"end":{"line":209,"column":50}},"id":25},"26":{"loc":{"start":{"line":209,"column":31},"end":{"line":209,"column":41}},"id":26},"27":{"loc":{"start":{"line":214,"column":8},"end":{"line":214,"column":45}},"id":27},"28":{"loc":{"start":{"line":214,"column":15},"end":{"line":214,"column":44}},"id":28},"29":{"loc":{"start":{"line":214,"column":15},"end":{"line":214,"column":39}},"id":29},"30":{"loc":{"start":{"line":218,"column":8},"end":{"line":218,"column":57}},"id":30},"31":{"loc":{"start":{"line":218,"column":15},"end":{"line":218,"column":56}},"id":31},"32":{"loc":{"start":{"line":218,"column":15},"end":{"line":218,"column":51}},"id":32},"33":{"loc":{"start":{"line":222,"column":8},"end":{"line":222,"column":43}},"id":33},"34":{"loc":{"start":{"line":222,"column":15},"end":{"line":222,"column":42}},"id":34},"35":{"loc":{"start":{"line":222,"column":15},"end":{"line":222,"column":37}},"id":35},"36":{"loc":{"start":{"line":229,"column":8},"end":{"line":232,"column":136}},"id":36},"37":{"loc":{"start":{"line":229,"column":15},"end":{"line":232,"column":135}},"id":37},"38":{"loc":{"start":{"line":229,"column":15},"end":{"line":230,"column":50}},"id":38},"39":{"loc":{"start":{"line":229,"column":15},"end":{"line":230,"column":29}},"id":39},"40":{"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":69}},"id":40},"41":{"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":48}},"id":41},"42":{"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":27}},"id":42},"43":{"loc":{"start":{"line":229,"column":31},"end":{"line":229,"column":48}},"id":43},"44":{"loc":{"start":{"line":229,"column":52},"end":{"line":229,"column":69}},"id":44},"45":{"loc":{"start":{"line":230,"column":12},"end":{"line":230,"column":29}},"id":45},"46":{"loc":{"start":{"line":230,"column":33},"end":{"line":230,"column":50}},"id":46},"47":{"loc":{"start":{"line":231,"column":12},"end":{"line":232,"column":135}},"id":47},"48":{"loc":{"start":{"line":231,"column":13},"end":{"line":231,"column":39}},"id":48},"49":{"loc":{"start":{"line":231,"column":13},"end":{"line":231,"column":29}},"id":49},"50":{"loc":{"start":{"line":232,"column":13},"end":{"line":232,"column":134}},"id":50},"51":{"loc":{"start":{"line":232,"column":13},"end":{"line":232,"column":129}},"id":51},"52":{"loc":{"start":{"line":238,"column":8},"end":{"line":238,"column":82}},"id":52},"53":{"loc":{"start":{"line":238,"column":15},"end":{"line":238,"column":81}},"id":53},"54":{"loc":{"start":{"line":238,"column":16},"end":{"line":238,"column":61}},"id":54},"55":{"loc":{"start":{"line":238,"column":16},"end":{"line":238,"column":42}},"id":55},"56":{"loc":{"start":{"line":238,"column":16},"end":{"line":238,"column":27}},"id":56},"57":{"loc":{"start":{"line":238,"column":31},"end":{"line":238,"column":42}},"id":57},"58":{"loc":{"start":{"line":238,"column":46},"end":{"line":238,"column":61}},"id":58},"59":{"loc":{"start":{"line":238,"column":65},"end":{"line":238,"column":80}},"id":59},"60":{"loc":{"start":{"line":244,"column":8},"end":{"line":246,"column":83}},"id":60},"61":{"loc":{"start":{"line":244,"column":15},"end":{"line":246,"column":82}},"id":61},"62":{"loc":{"start":{"line":244,"column":15},"end":{"line":245,"column":64}},"id":62},"63":{"loc":{"start":{"line":244,"column":15},"end":{"line":245,"column":36}},"id":63},"64":{"loc":{"start":{"line":244,"column":15},"end":{"line":244,"column":60}},"id":64},"65":{"loc":{"start":{"line":244,"column":15},"end":{"line":244,"column":43}},"id":65},"66":{"loc":{"start":{"line":244,"column":15},"end":{"line":244,"column":27}},"id":66},"67":{"loc":{"start":{"line":244,"column":31},"end":{"line":244,"column":43}},"id":67},"68":{"loc":{"start":{"line":244,"column":47},"end":{"line":244,"column":60}},"id":68},"69":{"loc":{"start":{"line":245,"column":12},"end":{"line":245,"column":36}},"id":69},"70":{"loc":{"start":{"line":245,"column":13},"end":{"line":245,"column":22}},"id":70},"71":{"loc":{"start":{"line":245,"column":26},"end":{"line":245,"column":35}},"id":71},"72":{"loc":{"start":{"line":245,"column":40},"end":{"line":245,"column":64}},"id":72},"73":{"loc":{"start":{"line":245,"column":41},"end":{"line":245,"column":50}},"id":73},"74":{"loc":{"start":{"line":245,"column":54},"end":{"line":245,"column":63}},"id":74},"75":{"loc":{"start":{"line":246,"column":12},"end":{"line":246,"column":82}},"id":75},"76":{"loc":{"start":{"line":246,"column":13},"end":{"line":246,"column":39}},"id":76},"77":{"loc":{"start":{"line":246,"column":14},"end":{"line":246,"column":30}},"id":77},"78":{"loc":{"start":{"line":246,"column":43},"end":{"line":246,"column":81}},"id":78},"79":{"loc":{"start":{"line":250,"column":8},"end":{"line":253,"column":82}},"id":79},"80":{"loc":{"start":{"line":250,"column":15},"end":{"line":253,"column":81}},"id":80},"81":{"loc":{"start":{"line":250,"column":15},"end":{"line":252,"column":40}},"id":81},"82":{"loc":{"start":{"line":250,"column":15},"end":{"line":251,"column":64}},"id":82},"83":{"loc":{"start":{"line":250,"column":15},"end":{"line":251,"column":36}},"id":83},"84":{"loc":{"start":{"line":250,"column":15},"end":{"line":250,"column":60}},"id":84},"85":{"loc":{"start":{"line":250,"column":15},"end":{"line":250,"column":43}},"id":85},"86":{"loc":{"start":{"line":250,"column":15},"end":{"line":250,"column":27}},"id":86},"87":{"loc":{"start":{"line":250,"column":31},"end":{"line":250,"column":43}},"id":87},"88":{"loc":{"start":{"line":250,"column":47},"end":{"line":250,"column":60}},"id":88},"89":{"loc":{"start":{"line":251,"column":12},"end":{"line":251,"column":36}},"id":89},"90":{"loc":{"start":{"line":251,"column":13},"end":{"line":251,"column":22}},"id":90},"91":{"loc":{"start":{"line":251,"column":26},"end":{"line":251,"column":35}},"id":91},"92":{"loc":{"start":{"line":251,"column":40},"end":{"line":251,"column":64}},"id":92},"93":{"loc":{"start":{"line":251,"column":41},"end":{"line":251,"column":50}},"id":93},"94":{"loc":{"start":{"line":251,"column":54},"end":{"line":251,"column":63}},"id":94},"95":{"loc":{"start":{"line":252,"column":12},"end":{"line":252,"column":40}},"id":95},"96":{"loc":{"start":{"line":252,"column":13},"end":{"line":252,"column":24}},"id":96},"97":{"loc":{"start":{"line":252,"column":28},"end":{"line":252,"column":39}},"id":97},"98":{"loc":{"start":{"line":253,"column":12},"end":{"line":253,"column":81}},"id":98},"99":{"loc":{"start":{"line":253,"column":13},"end":{"line":253,"column":39}},"id":99},"100":{"loc":{"start":{"line":253,"column":14},"end":{"line":253,"column":30}},"id":100},"101":{"loc":{"start":{"line":253,"column":43},"end":{"line":253,"column":80}},"id":101},"102":{"loc":{"start":{"line":268,"column":12},"end":{"line":268,"column":24}},"id":102},"103":{"loc":{"start":{"line":271,"column":8},"end":{"line":271,"column":21}},"id":103},"104":{"loc":{"start":{"line":287,"column":12},"end":{"line":287,"column":24}},"id":104},"105":{"loc":{"start":{"line":290,"column":8},"end":{"line":290,"column":21}},"id":105},"106":{"loc":{"start":{"line":294,"column":8},"end":{"line":294,"column":51}},"id":106},"107":{"loc":{"start":{"line":294,"column":15},"end":{"line":294,"column":50}},"id":107},"108":{"loc":{"start":{"line":294,"column":15},"end":{"line":294,"column":28}},"id":108},"109":{"loc":{"start":{"line":294,"column":32},"end":{"line":294,"column":50}},"id":109},"110":{"loc":{"start":{"line":300,"column":8},"end":{"line":300,"column":28}},"id":110},"111":{"loc":{"start":{"line":303,"column":12},"end":{"line":303,"column":70}},"id":111},"112":{"loc":{"start":{"line":303,"column":22},"end":{"line":303,"column":69}},"id":112},"113":{"loc":{"start":{"line":303,"column":22},"end":{"line":303,"column":52}},"id":113},"114":{"loc":{"start":{"line":303,"column":22},"end":{"line":303,"column":35}},"id":114},"115":{"loc":{"start":{"line":303,"column":39},"end":{"line":303,"column":52}},"id":115},"116":{"loc":{"start":{"line":303,"column":56},"end":{"line":303,"column":69}},"id":116},"117":{"loc":{"start":{"line":306,"column":12},"end":{"line":306,"column":91}},"id":117},"118":{"loc":{"start":{"line":306,"column":22},"end":{"line":306,"column":90}},"id":118},"119":{"loc":{"start":{"line":306,"column":22},"end":{"line":306,"column":72}},"id":119},"120":{"loc":{"start":{"line":306,"column":22},"end":{"line":306,"column":54}},"id":120},"121":{"loc":{"start":{"line":306,"column":22},"end":{"line":306,"column":36}},"id":121},"122":{"loc":{"start":{"line":306,"column":40},"end":{"line":306,"column":54}},"id":122},"123":{"loc":{"start":{"line":306,"column":58},"end":{"line":306,"column":72}},"id":123},"124":{"loc":{"start":{"line":306,"column":76},"end":{"line":306,"column":90}},"id":124},"125":{"loc":{"start":{"line":309,"column":12},"end":{"line":309,"column":114}},"id":125},"126":{"loc":{"start":{"line":309,"column":22},"end":{"line":309,"column":113}},"id":126},"127":{"loc":{"start":{"line":309,"column":22},"end":{"line":309,"column":94}},"id":127},"128":{"loc":{"start":{"line":309,"column":22},"end":{"line":309,"column":75}},"id":128},"129":{"loc":{"start":{"line":309,"column":22},"end":{"line":309,"column":56}},"id":129},"130":{"loc":{"start":{"line":309,"column":22},"end":{"line":309,"column":37}},"id":130},"131":{"loc":{"start":{"line":309,"column":41},"end":{"line":309,"column":56}},"id":131},"132":{"loc":{"start":{"line":309,"column":60},"end":{"line":309,"column":75}},"id":132},"133":{"loc":{"start":{"line":309,"column":79},"end":{"line":309,"column":94}},"id":133},"134":{"loc":{"start":{"line":309,"column":98},"end":{"line":309,"column":113}},"id":134},"135":{"loc":{"start":{"line":312,"column":12},"end":{"line":312,"column":99}},"id":135},"136":{"loc":{"start":{"line":312,"column":22},"end":{"line":312,"column":98}},"id":136},"137":{"loc":{"start":{"line":312,"column":22},"end":{"line":312,"column":78}},"id":137},"138":{"loc":{"start":{"line":312,"column":22},"end":{"line":312,"column":58}},"id":138},"139":{"loc":{"start":{"line":312,"column":22},"end":{"line":312,"column":38}},"id":139},"140":{"loc":{"start":{"line":312,"column":42},"end":{"line":312,"column":58}},"id":140},"141":{"loc":{"start":{"line":312,"column":62},"end":{"line":312,"column":78}},"id":141},"142":{"loc":{"start":{"line":312,"column":82},"end":{"line":312,"column":98}},"id":142},"143":{"loc":{"start":{"line":315,"column":12},"end":{"line":315,"column":103}},"id":143},"144":{"loc":{"start":{"line":315,"column":22},"end":{"line":315,"column":102}},"id":144},"145":{"loc":{"start":{"line":315,"column":22},"end":{"line":315,"column":81}},"id":145},"146":{"loc":{"start":{"line":315,"column":22},"end":{"line":315,"column":60}},"id":146},"147":{"loc":{"start":{"line":315,"column":22},"end":{"line":315,"column":39}},"id":147},"148":{"loc":{"start":{"line":315,"column":43},"end":{"line":315,"column":60}},"id":148},"149":{"loc":{"start":{"line":315,"column":64},"end":{"line":315,"column":81}},"id":149},"150":{"loc":{"start":{"line":315,"column":85},"end":{"line":315,"column":102}},"id":150},"151":{"loc":{"start":{"line":318,"column":12},"end":{"line":318,"column":63}},"id":151},"152":{"loc":{"start":{"line":318,"column":22},"end":{"line":318,"column":62}},"id":152},"153":{"loc":{"start":{"line":318,"column":22},"end":{"line":318,"column":40}},"id":153},"154":{"loc":{"start":{"line":318,"column":44},"end":{"line":318,"column":62}},"id":154},"155":{"loc":{"start":{"line":321,"column":12},"end":{"line":321,"column":88}},"id":155},"156":{"loc":{"start":{"line":321,"column":22},"end":{"line":321,"column":87}},"id":156},"157":{"loc":{"start":{"line":321,"column":22},"end":{"line":321,"column":64}},"id":157},"158":{"loc":{"start":{"line":321,"column":22},"end":{"line":321,"column":41}},"id":158},"159":{"loc":{"start":{"line":321,"column":45},"end":{"line":321,"column":64}},"id":159},"160":{"loc":{"start":{"line":321,"column":68},"end":{"line":321,"column":87}},"id":160},"161":{"loc":{"start":{"line":324,"column":12},"end":{"line":324,"column":44}},"id":161},"162":{"loc":{"start":{"line":324,"column":22},"end":{"line":324,"column":43}},"id":162},"163":{"loc":{"start":{"line":329,"column":12},"end":{"line":329,"column":24}},"id":163},"164":{"loc":{"start":{"line":336,"column":12},"end":{"line":336,"column":24}},"id":164},"165":{"loc":{"start":{"line":341,"column":12},"end":{"line":341,"column":24}},"id":165},"166":{"loc":{"start":{"line":344,"column":12},"end":{"line":344,"column":50}},"id":166},"167":{"loc":{"start":{"line":344,"column":22},"end":{"line":344,"column":50}},"id":167},"168":{"loc":{"start":{"line":345,"column":12},"end":{"line":345,"column":24}},"id":168},"169":{"loc":{"start":{"line":349,"column":12},"end":{"line":349,"column":27}},"id":169},"170":{"loc":{"start":{"line":350,"column":12},"end":{"line":350,"column":24}},"id":170},"171":{"loc":{"start":{"line":353,"column":8},"end":{"line":353,"column":40}},"id":171},"172":{"loc":{"start":{"line":353,"column":15},"end":{"line":353,"column":39}},"id":172},"173":{"loc":{"start":{"line":359,"column":8},"end":{"line":359,"column":31}},"id":173},"174":{"loc":{"start":{"line":359,"column":22},"end":{"line":359,"column":29}},"id":174},"175":{"loc":{"start":{"line":365,"column":8},"end":{"line":365,"column":42}},"id":175},"176":{"loc":{"start":{"line":367,"column":8},"end":{"line":367,"column":29}},"id":176},"177":{"loc":{"start":{"line":368,"column":8},"end":{"line":368,"column":28}},"id":177},"178":{"loc":{"start":{"line":370,"column":15},"end":{"line":370,"column":29}},"id":178},"179":{"loc":{"start":{"line":371,"column":12},"end":{"line":371,"column":31}},"id":179},"180":{"loc":{"start":{"line":374,"column":16},"end":{"line":374,"column":32}},"id":180},"181":{"loc":{"start":{"line":374,"column":21},"end":{"line":374,"column":31}},"id":181},"182":{"loc":{"start":{"line":375,"column":20},"end":{"line":375,"column":40}},"id":182},"183":{"loc":{"start":{"line":376,"column":20},"end":{"line":376,"column":40}},"id":183},"184":{"loc":{"start":{"line":377,"column":24},"end":{"line":377,"column":61}},"id":184},"185":{"loc":{"start":{"line":377,"column":24},"end":{"line":377,"column":35}},"id":185},"186":{"loc":{"start":{"line":377,"column":39},"end":{"line":377,"column":61}},"id":186},"187":{"loc":{"start":{"line":378,"column":24},"end":{"line":378,"column":32}},"id":187},"188":{"loc":{"start":{"line":378,"column":24},"end":{"line":378,"column":31}},"id":188},"189":{"loc":{"start":{"line":380,"column":20},"end":{"line":380,"column":33}},"id":189},"190":{"loc":{"start":{"line":380,"column":20},"end":{"line":380,"column":32}},"id":190},"191":{"loc":{"start":{"line":381,"column":20},"end":{"line":381,"column":38}},"id":191},"192":{"loc":{"start":{"line":384,"column":20},"end":{"line":384,"column":40}},"id":192},"193":{"loc":{"start":{"line":385,"column":24},"end":{"line":385,"column":65}},"id":193},"194":{"loc":{"start":{"line":385,"column":24},"end":{"line":385,"column":35}},"id":194},"195":{"loc":{"start":{"line":385,"column":39},"end":{"line":385,"column":65}},"id":195},"196":{"loc":{"start":{"line":385,"column":46},"end":{"line":385,"column":55}},"id":196},"197":{"loc":{"start":{"line":386,"column":24},"end":{"line":386,"column":32}},"id":197},"198":{"loc":{"start":{"line":386,"column":24},"end":{"line":386,"column":31}},"id":198},"199":{"loc":{"start":{"line":388,"column":20},"end":{"line":388,"column":33}},"id":199},"200":{"loc":{"start":{"line":388,"column":20},"end":{"line":388,"column":32}},"id":200},"201":{"loc":{"start":{"line":389,"column":20},"end":{"line":389,"column":28}},"id":201},"202":{"loc":{"start":{"line":389,"column":20},"end":{"line":389,"column":27}},"id":202},"203":{"loc":{"start":{"line":390,"column":20},"end":{"line":390,"column":38}},"id":203},"204":{"loc":{"start":{"line":391,"column":24},"end":{"line":391,"column":39}},"id":204},"205":{"loc":{"start":{"line":392,"column":24},"end":{"line":392,"column":76}},"id":205},"206":{"loc":{"start":{"line":392,"column":24},"end":{"line":392,"column":75}},"id":206},"207":{"loc":{"start":{"line":395,"column":20},"end":{"line":395,"column":36}},"id":207},"208":{"loc":{"start":{"line":395,"column":25},"end":{"line":395,"column":35}},"id":208},"209":{"loc":{"start":{"line":396,"column":24},"end":{"line":396,"column":39}},"id":209},"210":{"loc":{"start":{"line":397,"column":24},"end":{"line":397,"column":76}},"id":210},"211":{"loc":{"start":{"line":397,"column":24},"end":{"line":397,"column":75}},"id":211},"212":{"loc":{"start":{"line":399,"column":24},"end":{"line":399,"column":34}},"id":212},"213":{"loc":{"start":{"line":400,"column":24},"end":{"line":400,"column":43}},"id":213},"214":{"loc":{"start":{"line":401,"column":28},"end":{"line":401,"column":38}},"id":214},"215":{"loc":{"start":{"line":402,"column":28},"end":{"line":402,"column":36}},"id":215},"216":{"loc":{"start":{"line":402,"column":28},"end":{"line":402,"column":35}},"id":216},"217":{"loc":{"start":{"line":403,"column":28},"end":{"line":403,"column":49}},"id":217},"218":{"loc":{"start":{"line":407,"column":23},"end":{"line":407,"column":33}},"id":218},"219":{"loc":{"start":{"line":408,"column":16},"end":{"line":408,"column":39}},"id":219},"220":{"loc":{"start":{"line":408,"column":28},"end":{"line":408,"column":37}},"id":220},"221":{"loc":{"start":{"line":409,"column":20},"end":{"line":409,"column":30}},"id":221},"222":{"loc":{"start":{"line":410,"column":20},"end":{"line":410,"column":31}},"id":222},"223":{"loc":{"start":{"line":411,"column":20},"end":{"line":411,"column":39}},"id":223},"224":{"loc":{"start":{"line":412,"column":27},"end":{"line":412,"column":37}},"id":224},"225":{"loc":{"start":{"line":413,"column":20},"end":{"line":413,"column":31}},"id":225},"226":{"loc":{"start":{"line":414,"column":20},"end":{"line":414,"column":40}},"id":226},"227":{"loc":{"start":{"line":415,"column":24},"end":{"line":415,"column":39}},"id":227},"228":{"loc":{"start":{"line":416,"column":24},"end":{"line":416,"column":76}},"id":228},"229":{"loc":{"start":{"line":416,"column":24},"end":{"line":416,"column":75}},"id":229},"230":{"loc":{"start":{"line":421,"column":23},"end":{"line":421,"column":39}},"id":230},"231":{"loc":{"start":{"line":422,"column":16},"end":{"line":422,"column":24}},"id":231},"232":{"loc":{"start":{"line":422,"column":16},"end":{"line":422,"column":23}},"id":232},"233":{"loc":{"start":{"line":423,"column":23},"end":{"line":423,"column":43}},"id":233},"234":{"loc":{"start":{"line":424,"column":16},"end":{"line":424,"column":24}},"id":234},"235":{"loc":{"start":{"line":424,"column":16},"end":{"line":424,"column":23}},"id":235},"236":{"loc":{"start":{"line":425,"column":20},"end":{"line":425,"column":58}},"id":236},"237":{"loc":{"start":{"line":425,"column":20},"end":{"line":425,"column":32}},"id":237},"238":{"loc":{"start":{"line":425,"column":36},"end":{"line":425,"column":58}},"id":238},"239":{"loc":{"start":{"line":426,"column":20},"end":{"line":426,"column":28}},"id":239},"240":{"loc":{"start":{"line":426,"column":20},"end":{"line":426,"column":27}},"id":240},"241":{"loc":{"start":{"line":428,"column":16},"end":{"line":428,"column":29}},"id":241},"242":{"loc":{"start":{"line":428,"column":16},"end":{"line":428,"column":28}},"id":242},"243":{"loc":{"start":{"line":429,"column":16},"end":{"line":429,"column":34}},"id":243},"244":{"loc":{"start":{"line":437,"column":8},"end":{"line":437,"column":33}},"id":244},"245":{"loc":{"start":{"line":439,"column":8},"end":{"line":439,"column":39}},"id":245},"246":{"loc":{"start":{"line":439,"column":33},"end":{"line":439,"column":34}},"id":246},"247":{"loc":{"start":{"line":439,"column":37},"end":{"line":439,"column":38}},"id":247},"248":{"loc":{"start":{"line":439,"column":14},"end":{"line":439,"column":30}},"id":248},"249":{"loc":{"start":{"line":440,"column":20},"end":{"line":440,"column":27}},"id":249},"250":{"loc":{"start":{"line":440,"column":29},"end":{"line":440,"column":32}},"id":250},"251":{"loc":{"start":{"line":441,"column":16},"end":{"line":441,"column":59}},"id":251},"252":{"loc":{"start":{"line":441,"column":16},"end":{"line":441,"column":30}},"id":252},"253":{"loc":{"start":{"line":441,"column":34},"end":{"line":441,"column":59}},"id":253},"254":{"loc":{"start":{"line":442,"column":16},"end":{"line":442,"column":32}},"id":254},"255":{"loc":{"start":{"line":442,"column":21},"end":{"line":442,"column":31}},"id":255},"256":{"loc":{"start":{"line":443,"column":16},"end":{"line":443,"column":80}},"id":256},"257":{"loc":{"start":{"line":443,"column":23},"end":{"line":443,"column":79}},"id":257},"258":{"loc":{"start":{"line":443,"column":23},"end":{"line":443,"column":32}},"id":258},"259":{"loc":{"start":{"line":443,"column":35},"end":{"line":443,"column":79}},"id":259},"260":{"loc":{"start":{"line":443,"column":62},"end":{"line":443,"column":78}},"id":260},"261":{"loc":{"start":{"line":445,"column":16},"end":{"line":445,"column":26}},"id":261},"262":{"loc":{"start":{"line":448,"column":8},"end":{"line":448,"column":41}},"id":262},"263":{"loc":{"start":{"line":448,"column":15},"end":{"line":448,"column":40}},"id":263},"264":{"loc":{"start":{"line":452,"column":8},"end":{"line":452,"column":35}},"id":264},"265":{"loc":{"start":{"line":454,"column":8},"end":{"line":454,"column":27}},"id":265},"266":{"loc":{"start":{"line":455,"column":13},"end":{"line":455,"column":34}},"id":266},"267":{"loc":{"start":{"line":456,"column":12},"end":{"line":456,"column":19}},"id":267},"268":{"loc":{"start":{"line":459,"column":8},"end":{"line":459,"column":22}},"id":268},"269":{"loc":{"start":{"line":460,"column":12},"end":{"line":460,"column":23}},"id":269},"270":{"loc":{"start":{"line":461,"column":12},"end":{"line":461,"column":20}},"id":270},"271":{"loc":{"start":{"line":461,"column":12},"end":{"line":461,"column":19}},"id":271},"272":{"loc":{"start":{"line":462,"column":16},"end":{"line":462,"column":37}},"id":272},"273":{"loc":{"start":{"line":463,"column":16},"end":{"line":463,"column":23}},"id":273},"274":{"loc":{"start":{"line":465,"column":12},"end":{"line":465,"column":20}},"id":274},"275":{"loc":{"start":{"line":465,"column":12},"end":{"line":465,"column":19}},"id":275},"276":{"loc":{"start":{"line":466,"column":12},"end":{"line":466,"column":28}},"id":276},"277":{"loc":{"start":{"line":467,"column":12},"end":{"line":467,"column":36}},"id":277},"278":{"loc":{"start":{"line":467,"column":17},"end":{"line":467,"column":35}},"id":278},"279":{"loc":{"start":{"line":469,"column":20},"end":{"line":469,"column":57}},"id":279},"280":{"loc":{"start":{"line":469,"column":20},"end":{"line":469,"column":31}},"id":280},"281":{"loc":{"start":{"line":469,"column":36},"end":{"line":469,"column":57}},"id":281},"282":{"loc":{"start":{"line":470,"column":20},"end":{"line":470,"column":27}},"id":282},"283":{"loc":{"start":{"line":472,"column":16},"end":{"line":472,"column":24}},"id":283},"284":{"loc":{"start":{"line":474,"column":16},"end":{"line":474,"column":32}},"id":284},"285":{"loc":{"start":{"line":475,"column":16},"end":{"line":475,"column":25}},"id":285},"286":{"loc":{"start":{"line":478,"column":12},"end":{"line":478,"column":28}},"id":286},"287":{"loc":{"start":{"line":478,"column":17},"end":{"line":478,"column":27}},"id":287},"288":{"loc":{"start":{"line":481,"column":15},"end":{"line":481,"column":29}},"id":288},"289":{"loc":{"start":{"line":482,"column":12},"end":{"line":482,"column":31}},"id":289},"290":{"loc":{"start":{"line":483,"column":17},"end":{"line":483,"column":37}},"id":290},"291":{"loc":{"start":{"line":486,"column":16},"end":{"line":486,"column":27}},"id":291},"292":{"loc":{"start":{"line":487,"column":16},"end":{"line":487,"column":24}},"id":292},"293":{"loc":{"start":{"line":487,"column":16},"end":{"line":487,"column":23}},"id":293},"294":{"loc":{"start":{"line":488,"column":20},"end":{"line":488,"column":41}},"id":294},"295":{"loc":{"start":{"line":489,"column":20},"end":{"line":489,"column":27}},"id":295},"296":{"loc":{"start":{"line":491,"column":16},"end":{"line":491,"column":24}},"id":296},"297":{"loc":{"start":{"line":491,"column":16},"end":{"line":491,"column":23}},"id":297},"298":{"loc":{"start":{"line":492,"column":16},"end":{"line":492,"column":32}},"id":298},"299":{"loc":{"start":{"line":493,"column":16},"end":{"line":493,"column":40}},"id":299},"300":{"loc":{"start":{"line":493,"column":21},"end":{"line":493,"column":39}},"id":300},"301":{"loc":{"start":{"line":495,"column":24},"end":{"line":495,"column":60}},"id":301},"302":{"loc":{"start":{"line":495,"column":24},"end":{"line":495,"column":35}},"id":302},"303":{"loc":{"start":{"line":495,"column":40},"end":{"line":495,"column":60}},"id":303},"304":{"loc":{"start":{"line":496,"column":24},"end":{"line":496,"column":31}},"id":304},"305":{"loc":{"start":{"line":498,"column":20},"end":{"line":498,"column":29}},"id":305},"306":{"loc":{"start":{"line":500,"column":20},"end":{"line":500,"column":36}},"id":306},"307":{"loc":{"start":{"line":501,"column":20},"end":{"line":501,"column":30}},"id":307},"308":{"loc":{"start":{"line":504,"column":16},"end":{"line":504,"column":33}},"id":308},"309":{"loc":{"start":{"line":504,"column":22},"end":{"line":504,"column":32}},"id":309},"310":{"loc":{"start":{"line":510,"column":12},"end":{"line":510,"column":27}},"id":310},"311":{"loc":{"start":{"line":511,"column":12},"end":{"line":517,"column":14}},"id":311},"312":{"loc":{"start":{"line":520,"column":12},"end":{"line":520,"column":25}},"id":312},"313":{"loc":{"start":{"line":521,"column":12},"end":{"line":527,"column":14}},"id":313},"314":{"loc":{"start":{"line":532,"column":12},"end":{"line":532,"column":25}},"id":314},"315":{"loc":{"start":{"line":533,"column":12},"end":{"line":539,"column":14}},"id":315},"316":{"loc":{"start":{"line":544,"column":12},"end":{"line":544,"column":43}},"id":316},"317":{"loc":{"start":{"line":544,"column":12},"end":{"line":544,"column":25}},"id":317},"318":{"loc":{"start":{"line":544,"column":29},"end":{"line":544,"column":43}},"id":318},"319":{"loc":{"start":{"line":545,"column":12},"end":{"line":551,"column":14}},"id":319},"320":{"loc":{"start":{"line":554,"column":8},"end":{"line":560,"column":10}},"id":320},"321":{"loc":{"start":{"line":566,"column":8},"end":{"line":570,"column":16}},"id":321},"322":{"loc":{"start":{"line":574,"column":12},"end":{"line":574,"column":53}},"id":322},"323":{"loc":{"start":{"line":574,"column":12},"end":{"line":574,"column":38}},"id":323},"324":{"loc":{"start":{"line":574,"column":12},"end":{"line":574,"column":23}},"id":324},"325":{"loc":{"start":{"line":574,"column":27},"end":{"line":574,"column":38}},"id":325},"326":{"loc":{"start":{"line":574,"column":42},"end":{"line":574,"column":53}},"id":326},"327":{"loc":{"start":{"line":575,"column":12},"end":{"line":575,"column":20}},"id":327},"328":{"loc":{"start":{"line":575,"column":12},"end":{"line":575,"column":19}},"id":328},"329":{"loc":{"start":{"line":576,"column":12},"end":{"line":582,"column":14}},"id":329},"330":{"loc":{"start":{"line":585,"column":12},"end":{"line":585,"column":53}},"id":330},"331":{"loc":{"start":{"line":585,"column":12},"end":{"line":585,"column":38}},"id":331},"332":{"loc":{"start":{"line":585,"column":12},"end":{"line":585,"column":23}},"id":332},"333":{"loc":{"start":{"line":585,"column":27},"end":{"line":585,"column":38}},"id":333},"334":{"loc":{"start":{"line":585,"column":42},"end":{"line":585,"column":53}},"id":334},"335":{"loc":{"start":{"line":586,"column":12},"end":{"line":586,"column":20}},"id":335},"336":{"loc":{"start":{"line":586,"column":12},"end":{"line":586,"column":19}},"id":336},"337":{"loc":{"start":{"line":587,"column":12},"end":{"line":593,"column":14}},"id":337},"338":{"loc":{"start":{"line":599,"column":8},"end":{"line":599,"column":32}},"id":338},"339":{"loc":{"start":{"line":599,"column":21},"end":{"line":599,"column":30}},"id":339},"340":{"loc":{"start":{"line":600,"column":12},"end":{"line":600,"column":47}},"id":340},"341":{"loc":{"start":{"line":600,"column":12},"end":{"line":600,"column":23}},"id":341},"342":{"loc":{"start":{"line":600,"column":28},"end":{"line":600,"column":47}},"id":342},"343":{"loc":{"start":{"line":601,"column":12},"end":{"line":607,"column":14}},"id":343},"344":{"loc":{"start":{"line":603,"column":23},"end":{"line":603,"column":33}},"id":344},"345":{"loc":{"start":{"line":612,"column":8},"end":{"line":612,"column":32}},"id":345},"346":{"loc":{"start":{"line":612,"column":21},"end":{"line":612,"column":30}},"id":346},"347":{"loc":{"start":{"line":613,"column":8},"end":{"line":613,"column":32}},"id":347},"348":{"loc":{"start":{"line":613,"column":21},"end":{"line":613,"column":30}},"id":348},"349":{"loc":{"start":{"line":617,"column":12},"end":{"line":617,"column":53}},"id":349},"350":{"loc":{"start":{"line":617,"column":12},"end":{"line":617,"column":38}},"id":350},"351":{"loc":{"start":{"line":617,"column":12},"end":{"line":617,"column":23}},"id":351},"352":{"loc":{"start":{"line":617,"column":27},"end":{"line":617,"column":38}},"id":352},"353":{"loc":{"start":{"line":617,"column":42},"end":{"line":617,"column":53}},"id":353},"354":{"loc":{"start":{"line":618,"column":16},"end":{"line":618,"column":27}},"id":354},"355":{"loc":{"start":{"line":619,"column":16},"end":{"line":619,"column":27}},"id":355},"356":{"loc":{"start":{"line":620,"column":16},"end":{"line":626,"column":18}},"id":356},"357":{"loc":{"start":{"line":632,"column":12},"end":{"line":632,"column":53}},"id":357},"358":{"loc":{"start":{"line":632,"column":12},"end":{"line":632,"column":38}},"id":358},"359":{"loc":{"start":{"line":632,"column":12},"end":{"line":632,"column":23}},"id":359},"360":{"loc":{"start":{"line":632,"column":27},"end":{"line":632,"column":38}},"id":360},"361":{"loc":{"start":{"line":632,"column":42},"end":{"line":632,"column":53}},"id":361},"362":{"loc":{"start":{"line":633,"column":12},"end":{"line":633,"column":23}},"id":362},"363":{"loc":{"start":{"line":634,"column":12},"end":{"line":640,"column":14}},"id":363},"364":{"loc":{"start":{"line":643,"column":12},"end":{"line":643,"column":53}},"id":364},"365":{"loc":{"start":{"line":643,"column":12},"end":{"line":643,"column":38}},"id":365},"366":{"loc":{"start":{"line":643,"column":12},"end":{"line":643,"column":23}},"id":366},"367":{"loc":{"start":{"line":643,"column":27},"end":{"line":643,"column":38}},"id":367},"368":{"loc":{"start":{"line":643,"column":42},"end":{"line":643,"column":53}},"id":368},"369":{"loc":{"start":{"line":644,"column":12},"end":{"line":644,"column":23}},"id":369},"370":{"loc":{"start":{"line":645,"column":12},"end":{"line":651,"column":14}},"id":370},"371":{"loc":{"start":{"line":654,"column":12},"end":{"line":654,"column":53}},"id":371},"372":{"loc":{"start":{"line":654,"column":12},"end":{"line":654,"column":38}},"id":372},"373":{"loc":{"start":{"line":654,"column":12},"end":{"line":654,"column":23}},"id":373},"374":{"loc":{"start":{"line":654,"column":27},"end":{"line":654,"column":38}},"id":374},"375":{"loc":{"start":{"line":654,"column":42},"end":{"line":654,"column":53}},"id":375},"376":{"loc":{"start":{"line":655,"column":12},"end":{"line":655,"column":23}},"id":376},"377":{"loc":{"start":{"line":656,"column":12},"end":{"line":662,"column":14}},"id":377},"378":{"loc":{"start":{"line":665,"column":12},"end":{"line":665,"column":53}},"id":378},"379":{"loc":{"start":{"line":665,"column":12},"end":{"line":665,"column":38}},"id":379},"380":{"loc":{"start":{"line":665,"column":12},"end":{"line":665,"column":23}},"id":380},"381":{"loc":{"start":{"line":665,"column":27},"end":{"line":665,"column":38}},"id":381},"382":{"loc":{"start":{"line":665,"column":42},"end":{"line":665,"column":53}},"id":382},"383":{"loc":{"start":{"line":666,"column":12},"end":{"line":666,"column":23}},"id":383},"384":{"loc":{"start":{"line":667,"column":12},"end":{"line":673,"column":14}},"id":384},"385":{"loc":{"start":{"line":676,"column":12},"end":{"line":676,"column":53}},"id":385},"386":{"loc":{"start":{"line":676,"column":12},"end":{"line":676,"column":38}},"id":386},"387":{"loc":{"start":{"line":676,"column":12},"end":{"line":676,"column":23}},"id":387},"388":{"loc":{"start":{"line":676,"column":27},"end":{"line":676,"column":38}},"id":388},"389":{"loc":{"start":{"line":676,"column":42},"end":{"line":676,"column":53}},"id":389},"390":{"loc":{"start":{"line":677,"column":12},"end":{"line":677,"column":23}},"id":390},"391":{"loc":{"start":{"line":678,"column":12},"end":{"line":684,"column":14}},"id":391},"392":{"loc":{"start":{"line":690,"column":12},"end":{"line":690,"column":23}},"id":392},"393":{"loc":{"start":{"line":691,"column":16},"end":{"line":691,"column":48}},"id":393},"394":{"loc":{"start":{"line":691,"column":16},"end":{"line":691,"column":43}},"id":394},"395":{"loc":{"start":{"line":692,"column":16},"end":{"line":692,"column":27}},"id":395},"396":{"loc":{"start":{"line":693,"column":16},"end":{"line":699,"column":18}},"id":396},"397":{"loc":{"start":{"line":695,"column":27},"end":{"line":695,"column":36}},"id":397},"398":{"loc":{"start":{"line":703,"column":12},"end":{"line":703,"column":55}},"id":398},"399":{"loc":{"start":{"line":703,"column":12},"end":{"line":703,"column":23}},"id":399},"400":{"loc":{"start":{"line":703,"column":27},"end":{"line":703,"column":55}},"id":400},"401":{"loc":{"start":{"line":703,"column":28},"end":{"line":703,"column":49}},"id":401},"402":{"loc":{"start":{"line":704,"column":16},"end":{"line":704,"column":42}},"id":402},"403":{"loc":{"start":{"line":704,"column":16},"end":{"line":704,"column":37}},"id":403},"404":{"loc":{"start":{"line":705,"column":16},"end":{"line":705,"column":27}},"id":404},"405":{"loc":{"start":{"line":706,"column":16},"end":{"line":712,"column":18}},"id":405},"406":{"loc":{"start":{"line":708,"column":27},"end":{"line":708,"column":36}},"id":406},"407":{"loc":{"start":{"line":716,"column":12},"end":{"line":716,"column":38}},"id":407},"408":{"loc":{"start":{"line":716,"column":12},"end":{"line":716,"column":23}},"id":408},"409":{"loc":{"start":{"line":716,"column":27},"end":{"line":716,"column":38}},"id":409},"410":{"loc":{"start":{"line":717,"column":12},"end":{"line":717,"column":23}},"id":410},"411":{"loc":{"start":{"line":718,"column":12},"end":{"line":724,"column":14}},"id":411},"412":{"loc":{"start":{"line":729,"column":12},"end":{"line":729,"column":50}},"id":412},"413":{"loc":{"start":{"line":729,"column":12},"end":{"line":729,"column":45}},"id":413},"414":{"loc":{"start":{"line":730,"column":12},"end":{"line":736,"column":14}},"id":414},"415":{"loc":{"start":{"line":732,"column":23},"end":{"line":732,"column":33}},"id":415},"416":{"loc":{"start":{"line":743,"column":8},"end":{"line":743,"column":37}},"id":416},"417":{"loc":{"start":{"line":745,"column":8},"end":{"line":745,"column":27}},"id":417},"418":{"loc":{"start":{"line":746,"column":8},"end":{"line":747,"column":82}},"id":418},"419":{"loc":{"start":{"line":746,"column":8},"end":{"line":747,"column":81}},"id":419},"420":{"loc":{"start":{"line":746,"column":15},"end":{"line":746,"column":49}},"id":420},"421":{"loc":{"start":{"line":746,"column":15},"end":{"line":746,"column":33}},"id":421},"422":{"loc":{"start":{"line":746,"column":37},"end":{"line":746,"column":49}},"id":422},"423":{"loc":{"start":{"line":749,"column":8},"end":{"line":749,"column":22}},"id":423},"424":{"loc":{"start":{"line":750,"column":8},"end":{"line":750,"column":20}},"id":424},"425":{"loc":{"start":{"line":751,"column":12},"end":{"line":751,"column":22}},"id":425},"426":{"loc":{"start":{"line":752,"column":12},"end":{"line":752,"column":32}},"id":426},"427":{"loc":{"start":{"line":752,"column":21},"end":{"line":752,"column":31}},"id":427},"428":{"loc":{"start":{"line":753,"column":12},"end":{"line":753,"column":31}},"id":428},"429":{"loc":{"start":{"line":759,"column":16},"end":{"line":759,"column":30}},"id":429},"430":{"loc":{"start":{"line":760,"column":20},"end":{"line":760,"column":44}},"id":430},"431":{"loc":{"start":{"line":760,"column":20},"end":{"line":760,"column":30}},"id":431},"432":{"loc":{"start":{"line":760,"column":34},"end":{"line":760,"column":44}},"id":432},"433":{"loc":{"start":{"line":761,"column":20},"end":{"line":761,"column":41}},"id":433},"434":{"loc":{"start":{"line":761,"column":30},"end":{"line":761,"column":40}},"id":434},"435":{"loc":{"start":{"line":762,"column":27},"end":{"line":762,"column":41}},"id":435},"436":{"loc":{"start":{"line":763,"column":24},"end":{"line":763,"column":43}},"id":436},"437":{"loc":{"start":{"line":764,"column":29},"end":{"line":764,"column":43}},"id":437},"438":{"loc":{"start":{"line":767,"column":24},"end":{"line":767,"column":45}},"id":438},"439":{"loc":{"start":{"line":767,"column":34},"end":{"line":767,"column":44}},"id":439},"440":{"loc":{"start":{"line":770,"column":24},"end":{"line":770,"column":42}},"id":440},"441":{"loc":{"start":{"line":772,"column":24},"end":{"line":772,"column":76}},"id":441},"442":{"loc":{"start":{"line":772,"column":24},"end":{"line":772,"column":75}},"id":442},"443":{"loc":{"start":{"line":775,"column":24},"end":{"line":775,"column":38}},"id":443},"444":{"loc":{"start":{"line":776,"column":24},"end":{"line":776,"column":43}},"id":444},"445":{"loc":{"start":{"line":777,"column":28},"end":{"line":777,"column":49}},"id":445},"446":{"loc":{"start":{"line":778,"column":28},"end":{"line":778,"column":80}},"id":446},"447":{"loc":{"start":{"line":778,"column":28},"end":{"line":778,"column":79}},"id":447},"448":{"loc":{"start":{"line":781,"column":20},"end":{"line":787,"column":22}},"id":448},"449":{"loc":{"start":{"line":783,"column":31},"end":{"line":783,"column":51}},"id":449},"450":{"loc":{"start":{"line":788,"column":27},"end":{"line":788,"column":51}},"id":450},"451":{"loc":{"start":{"line":788,"column":27},"end":{"line":788,"column":37}},"id":451},"452":{"loc":{"start":{"line":788,"column":41},"end":{"line":788,"column":51}},"id":452},"453":{"loc":{"start":{"line":789,"column":20},"end":{"line":789,"column":31}},"id":453},"454":{"loc":{"start":{"line":789,"column":20},"end":{"line":789,"column":30}},"id":454},"455":{"loc":{"start":{"line":790,"column":20},"end":{"line":790,"column":32}},"id":455},"456":{"loc":{"start":{"line":792,"column":27},"end":{"line":792,"column":41}},"id":456},"457":{"loc":{"start":{"line":793,"column":24},"end":{"line":793,"column":43}},"id":457},"458":{"loc":{"start":{"line":794,"column":28},"end":{"line":794,"column":52}},"id":458},"459":{"loc":{"start":{"line":794,"column":28},"end":{"line":794,"column":38}},"id":459},"460":{"loc":{"start":{"line":794,"column":42},"end":{"line":794,"column":52}},"id":460},"461":{"loc":{"start":{"line":797,"column":24},"end":{"line":797,"column":45}},"id":461},"462":{"loc":{"start":{"line":797,"column":34},"end":{"line":797,"column":44}},"id":462},"463":{"loc":{"start":{"line":800,"column":24},"end":{"line":800,"column":43}},"id":463},"464":{"loc":{"start":{"line":802,"column":24},"end":{"line":802,"column":76}},"id":464},"465":{"loc":{"start":{"line":802,"column":24},"end":{"line":802,"column":75}},"id":465},"466":{"loc":{"start":{"line":805,"column":24},"end":{"line":805,"column":38}},"id":466},"467":{"loc":{"start":{"line":806,"column":24},"end":{"line":806,"column":43}},"id":467},"468":{"loc":{"start":{"line":807,"column":28},"end":{"line":807,"column":71}},"id":468},"469":{"loc":{"start":{"line":807,"column":28},"end":{"line":807,"column":49}},"id":469},"470":{"loc":{"start":{"line":807,"column":53},"end":{"line":807,"column":71}},"id":470},"471":{"loc":{"start":{"line":808,"column":28},"end":{"line":808,"column":80}},"id":471},"472":{"loc":{"start":{"line":808,"column":28},"end":{"line":808,"column":79}},"id":472},"473":{"loc":{"start":{"line":811,"column":20},"end":{"line":817,"column":22}},"id":473},"474":{"loc":{"start":{"line":813,"column":31},"end":{"line":813,"column":50}},"id":474},"475":{"loc":{"start":{"line":818,"column":27},"end":{"line":818,"column":71}},"id":475},"476":{"loc":{"start":{"line":818,"column":27},"end":{"line":818,"column":51}},"id":476},"477":{"loc":{"start":{"line":818,"column":27},"end":{"line":818,"column":37}},"id":477},"478":{"loc":{"start":{"line":818,"column":41},"end":{"line":818,"column":51}},"id":478},"479":{"loc":{"start":{"line":818,"column":55},"end":{"line":818,"column":71}},"id":479},"480":{"loc":{"start":{"line":819,"column":24},"end":{"line":819,"column":40}},"id":480},"481":{"loc":{"start":{"line":820,"column":24},"end":{"line":820,"column":37}},"id":481},"482":{"loc":{"start":{"line":821,"column":24},"end":{"line":821,"column":44}},"id":482},"483":{"loc":{"start":{"line":821,"column":33},"end":{"line":821,"column":43}},"id":483},"484":{"loc":{"start":{"line":823,"column":24},"end":{"line":823,"column":38}},"id":484},"485":{"loc":{"start":{"line":824,"column":24},"end":{"line":824,"column":35}},"id":485},"486":{"loc":{"start":{"line":824,"column":24},"end":{"line":824,"column":34}},"id":486},"487":{"loc":{"start":{"line":825,"column":24},"end":{"line":825,"column":36}},"id":487},"488":{"loc":{"start":{"line":828,"column":27},"end":{"line":828,"column":41}},"id":488},"489":{"loc":{"start":{"line":829,"column":24},"end":{"line":829,"column":43}},"id":489},"490":{"loc":{"start":{"line":830,"column":29},"end":{"line":830,"column":45}},"id":490},"491":{"loc":{"start":{"line":833,"column":24},"end":{"line":833,"column":45}},"id":491},"492":{"loc":{"start":{"line":833,"column":34},"end":{"line":833,"column":44}},"id":492},"493":{"loc":{"start":{"line":836,"column":24},"end":{"line":836,"column":43}},"id":493},"494":{"loc":{"start":{"line":838,"column":24},"end":{"line":838,"column":76}},"id":494},"495":{"loc":{"start":{"line":838,"column":24},"end":{"line":838,"column":75}},"id":495},"496":{"loc":{"start":{"line":841,"column":24},"end":{"line":841,"column":38}},"id":496},"497":{"loc":{"start":{"line":842,"column":24},"end":{"line":842,"column":43}},"id":497},"498":{"loc":{"start":{"line":843,"column":28},"end":{"line":843,"column":71}},"id":498},"499":{"loc":{"start":{"line":843,"column":28},"end":{"line":843,"column":49}},"id":499},"500":{"loc":{"start":{"line":843,"column":53},"end":{"line":843,"column":71}},"id":500},"501":{"loc":{"start":{"line":844,"column":28},"end":{"line":844,"column":80}},"id":501},"502":{"loc":{"start":{"line":844,"column":28},"end":{"line":844,"column":79}},"id":502},"503":{"loc":{"start":{"line":848,"column":20},"end":{"line":855,"column":22}},"id":503},"504":{"loc":{"start":{"line":850,"column":31},"end":{"line":850,"column":50}},"id":504},"505":{"loc":{"start":{"line":859,"column":20},"end":{"line":859,"column":38}},"id":505},"506":{"loc":{"start":{"line":860,"column":20},"end":{"line":860,"column":72}},"id":506},"507":{"loc":{"start":{"line":860,"column":20},"end":{"line":860,"column":71}},"id":507},"508":{"loc":{"start":{"line":864,"column":19},"end":{"line":864,"column":33}},"id":508},"509":{"loc":{"start":{"line":865,"column":16},"end":{"line":865,"column":35}},"id":509},"510":{"loc":{"start":{"line":866,"column":21},"end":{"line":866,"column":39}},"id":510},"511":{"loc":{"start":{"line":869,"column":16},"end":{"line":869,"column":37}},"id":511},"512":{"loc":{"start":{"line":869,"column":26},"end":{"line":869,"column":36}},"id":512},"513":{"loc":{"start":{"line":873,"column":12},"end":{"line":873,"column":22}},"id":513},"514":{"loc":{"start":{"line":874,"column":12},"end":{"line":874,"column":33}},"id":514},"515":{"loc":{"start":{"line":874,"column":22},"end":{"line":874,"column":32}},"id":515},"516":{"loc":{"start":{"line":875,"column":19},"end":{"line":875,"column":33}},"id":516},"517":{"loc":{"start":{"line":876,"column":16},"end":{"line":876,"column":35}},"id":517},"518":{"loc":{"start":{"line":877,"column":21},"end":{"line":877,"column":39}},"id":518},"519":{"loc":{"start":{"line":880,"column":16},"end":{"line":880,"column":37}},"id":519},"520":{"loc":{"start":{"line":880,"column":26},"end":{"line":880,"column":36}},"id":520},"521":{"loc":{"start":{"line":884,"column":12},"end":{"line":884,"column":36}},"id":521},"522":{"loc":{"start":{"line":884,"column":12},"end":{"line":884,"column":22}},"id":522},"523":{"loc":{"start":{"line":884,"column":26},"end":{"line":884,"column":36}},"id":523},"524":{"loc":{"start":{"line":885,"column":12},"end":{"line":885,"column":33}},"id":524},"525":{"loc":{"start":{"line":885,"column":22},"end":{"line":885,"column":32}},"id":525},"526":{"loc":{"start":{"line":887,"column":12},"end":{"line":887,"column":31}},"id":526},"527":{"loc":{"start":{"line":888,"column":16},"end":{"line":888,"column":40}},"id":527},"528":{"loc":{"start":{"line":888,"column":16},"end":{"line":888,"column":26}},"id":528},"529":{"loc":{"start":{"line":888,"column":30},"end":{"line":888,"column":40}},"id":529},"530":{"loc":{"start":{"line":889,"column":16},"end":{"line":889,"column":37}},"id":530},"531":{"loc":{"start":{"line":889,"column":26},"end":{"line":889,"column":36}},"id":531},"532":{"loc":{"start":{"line":892,"column":12},"end":{"line":892,"column":31}},"id":532},"533":{"loc":{"start":{"line":893,"column":16},"end":{"line":893,"column":34}},"id":533},"534":{"loc":{"start":{"line":894,"column":16},"end":{"line":894,"column":37}},"id":534},"535":{"loc":{"start":{"line":894,"column":26},"end":{"line":894,"column":36}},"id":535},"536":{"loc":{"start":{"line":895,"column":23},"end":{"line":895,"column":37}},"id":536},"537":{"loc":{"start":{"line":896,"column":20},"end":{"line":896,"column":39}},"id":537},"538":{"loc":{"start":{"line":897,"column":25},"end":{"line":897,"column":43}},"id":538},"539":{"loc":{"start":{"line":900,"column":20},"end":{"line":900,"column":41}},"id":539},"540":{"loc":{"start":{"line":900,"column":30},"end":{"line":900,"column":40}},"id":540},"541":{"loc":{"start":{"line":903,"column":16},"end":{"line":903,"column":39}},"id":541},"542":{"loc":{"start":{"line":903,"column":21},"end":{"line":903,"column":38}},"id":542},"543":{"loc":{"start":{"line":904,"column":20},"end":{"line":904,"column":35}},"id":543},"544":{"loc":{"start":{"line":905,"column":20},"end":{"line":905,"column":33}},"id":544},"545":{"loc":{"start":{"line":907,"column":16},"end":{"line":907,"column":68}},"id":545},"546":{"loc":{"start":{"line":907,"column":16},"end":{"line":907,"column":67}},"id":546},"547":{"loc":{"start":{"line":911,"column":12},"end":{"line":911,"column":26}},"id":547},"548":{"loc":{"start":{"line":912,"column":12},"end":{"line":912,"column":31}},"id":548},"549":{"loc":{"start":{"line":913,"column":16},"end":{"line":913,"column":37}},"id":549},"550":{"loc":{"start":{"line":914,"column":16},"end":{"line":914,"column":68}},"id":550},"551":{"loc":{"start":{"line":914,"column":16},"end":{"line":914,"column":67}},"id":551},"552":{"loc":{"start":{"line":918,"column":8},"end":{"line":924,"column":10}},"id":552},"553":{"loc":{"start":{"line":920,"column":19},"end":{"line":920,"column":37}},"id":553},"554":{"loc":{"start":{"line":930,"column":8},"end":{"line":930,"column":80}},"id":554},"555":{"loc":{"start":{"line":932,"column":8},"end":{"line":932,"column":30}},"id":555},"556":{"loc":{"start":{"line":933,"column":8},"end":{"line":934,"column":55}},"id":556},"557":{"loc":{"start":{"line":933,"column":8},"end":{"line":934,"column":54}},"id":557},"558":{"loc":{"start":{"line":933,"column":15},"end":{"line":933,"column":48}},"id":558},"559":{"loc":{"start":{"line":933,"column":16},"end":{"line":933,"column":30}},"id":559},"560":{"loc":{"start":{"line":933,"column":34},"end":{"line":933,"column":47}},"id":560},"561":{"loc":{"start":{"line":936,"column":8},"end":{"line":936,"column":22}},"id":561},"562":{"loc":{"start":{"line":937,"column":8},"end":{"line":937,"column":16}},"id":562},"563":{"loc":{"start":{"line":937,"column":8},"end":{"line":937,"column":15}},"id":563},"564":{"loc":{"start":{"line":939,"column":15},"end":{"line":939,"column":29}},"id":564},"565":{"loc":{"start":{"line":940,"column":12},"end":{"line":940,"column":28}},"id":565},"566":{"loc":{"start":{"line":940,"column":17},"end":{"line":940,"column":27}},"id":566},"567":{"loc":{"start":{"line":942,"column":16},"end":{"line":942,"column":28}},"id":567},"568":{"loc":{"start":{"line":943,"column":16},"end":{"line":943,"column":27}},"id":568},"569":{"loc":{"start":{"line":945,"column":23},"end":{"line":945,"column":34}},"id":569},"570":{"loc":{"start":{"line":946,"column":16},"end":{"line":946,"column":32}},"id":570},"571":{"loc":{"start":{"line":946,"column":21},"end":{"line":946,"column":31}},"id":571},"572":{"loc":{"start":{"line":947,"column":21},"end":{"line":947,"column":41}},"id":572},"573":{"loc":{"start":{"line":950,"column":24},"end":{"line":950,"column":36}},"id":573},"574":{"loc":{"start":{"line":953,"column":24},"end":{"line":953,"column":36}},"id":574},"575":{"loc":{"start":{"line":956,"column":24},"end":{"line":956,"column":36}},"id":575},"576":{"loc":{"start":{"line":960,"column":24},"end":{"line":960,"column":40}},"id":576},"577":{"loc":{"start":{"line":961,"column":24},"end":{"line":961,"column":54}},"id":577},"578":{"loc":{"start":{"line":961,"column":36},"end":{"line":961,"column":53}},"id":578},"579":{"loc":{"start":{"line":963,"column":28},"end":{"line":963,"column":45}},"id":579},"580":{"loc":{"start":{"line":965,"column":28},"end":{"line":965,"column":44}},"id":580},"581":{"loc":{"start":{"line":966,"column":28},"end":{"line":966,"column":38}},"id":581},"582":{"loc":{"start":{"line":970,"column":24},"end":{"line":970,"column":36}},"id":582},"583":{"loc":{"start":{"line":973,"column":24},"end":{"line":973,"column":36}},"id":583},"584":{"loc":{"start":{"line":976,"column":24},"end":{"line":976,"column":36}},"id":584},"585":{"loc":{"start":{"line":980,"column":28},"end":{"line":980,"column":44}},"id":585},"586":{"loc":{"start":{"line":981,"column":28},"end":{"line":981,"column":58}},"id":586},"587":{"loc":{"start":{"line":981,"column":35},"end":{"line":981,"column":57}},"id":587},"588":{"loc":{"start":{"line":984,"column":32},"end":{"line":984,"column":42}},"id":588},"589":{"loc":{"start":{"line":985,"column":32},"end":{"line":985,"column":45}},"id":589},"590":{"loc":{"start":{"line":988,"column":32},"end":{"line":988,"column":77}},"id":590},"591":{"loc":{"start":{"line":988,"column":32},"end":{"line":988,"column":46}},"id":591},"592":{"loc":{"start":{"line":988,"column":50},"end":{"line":988,"column":77}},"id":592},"593":{"loc":{"start":{"line":989,"column":32},"end":{"line":989,"column":45}},"id":593},"594":{"loc":{"start":{"line":990,"column":32},"end":{"line":990,"column":81}},"id":594},"595":{"loc":{"start":{"line":990,"column":39},"end":{"line":990,"column":80}},"id":595},"596":{"loc":{"start":{"line":990,"column":39},"end":{"line":990,"column":47}},"id":596},"597":{"loc":{"start":{"line":990,"column":50},"end":{"line":990,"column":80}},"id":597},"598":{"loc":{"start":{"line":990,"column":69},"end":{"line":990,"column":79}},"id":598},"599":{"loc":{"start":{"line":994,"column":36},"end":{"line":996,"column":67}},"id":599},"600":{"loc":{"start":{"line":994,"column":36},"end":{"line":995,"column":54}},"id":600},"601":{"loc":{"start":{"line":994,"column":36},"end":{"line":994,"column":59}},"id":601},"602":{"loc":{"start":{"line":994,"column":36},"end":{"line":994,"column":54}},"id":602},"603":{"loc":{"start":{"line":995,"column":40},"end":{"line":995,"column":54}},"id":603},"604":{"loc":{"start":{"line":996,"column":40},"end":{"line":996,"column":67}},"id":604},"605":{"loc":{"start":{"line":997,"column":36},"end":{"line":997,"column":85}},"id":605},"606":{"loc":{"start":{"line":997,"column":43},"end":{"line":997,"column":84}},"id":606},"607":{"loc":{"start":{"line":997,"column":43},"end":{"line":997,"column":51}},"id":607},"608":{"loc":{"start":{"line":997,"column":54},"end":{"line":997,"column":84}},"id":608},"609":{"loc":{"start":{"line":997,"column":73},"end":{"line":997,"column":83}},"id":609},"610":{"loc":{"start":{"line":1000,"column":28},"end":{"line":1000,"column":61}},"id":610},"611":{"loc":{"start":{"line":1000,"column":35},"end":{"line":1000,"column":60}},"id":611},"612":{"loc":{"start":{"line":1002,"column":28},"end":{"line":1002,"column":38}},"id":612},"613":{"loc":{"start":{"line":1007,"column":20},"end":{"line":1007,"column":33}},"id":613},"614":{"loc":{"start":{"line":1007,"column":20},"end":{"line":1007,"column":32}},"id":614},"615":{"loc":{"start":{"line":1008,"column":24},"end":{"line":1008,"column":62}},"id":615},"616":{"loc":{"start":{"line":1008,"column":24},"end":{"line":1008,"column":36}},"id":616},"617":{"loc":{"start":{"line":1008,"column":40},"end":{"line":1008,"column":62}},"id":617},"618":{"loc":{"start":{"line":1009,"column":24},"end":{"line":1009,"column":32}},"id":618},"619":{"loc":{"start":{"line":1009,"column":24},"end":{"line":1009,"column":31}},"id":619},"620":{"loc":{"start":{"line":1012,"column":23},"end":{"line":1012,"column":43}},"id":620},"621":{"loc":{"start":{"line":1015,"column":16},"end":{"line":1015,"column":26}},"id":621},"622":{"loc":{"start":{"line":1019,"column":12},"end":{"line":1019,"column":24}},"id":622},"623":{"loc":{"start":{"line":1020,"column":12},"end":{"line":1020,"column":64}},"id":623},"624":{"loc":{"start":{"line":1020,"column":12},"end":{"line":1020,"column":63}},"id":624},"625":{"loc":{"start":{"line":1023,"column":8},"end":{"line":1030,"column":10}},"id":625},"626":{"loc":{"start":{"line":1034,"column":8},"end":{"line":1034,"column":85}},"id":626},"627":{"loc":{"start":{"line":1036,"column":8},"end":{"line":1036,"column":22}},"id":627},"628":{"loc":{"start":{"line":1037,"column":8},"end":{"line":1037,"column":22}},"id":628},"629":{"loc":{"start":{"line":1037,"column":8},"end":{"line":1037,"column":21}},"id":629},"630":{"loc":{"start":{"line":1039,"column":8},"end":{"line":1039,"column":22}},"id":630},"631":{"loc":{"start":{"line":1040,"column":8},"end":{"line":1040,"column":27}},"id":631},"632":{"loc":{"start":{"line":1041,"column":8},"end":{"line":1041,"column":81}},"id":632},"633":{"loc":{"start":{"line":1041,"column":8},"end":{"line":1041,"column":80}},"id":633},"634":{"loc":{"start":{"line":1041,"column":15},"end":{"line":1041,"column":25}},"id":634},"635":{"loc":{"start":{"line":1042,"column":8},"end":{"line":1042,"column":25}},"id":635},"636":{"loc":{"start":{"line":1042,"column":14},"end":{"line":1042,"column":24}},"id":636},"637":{"loc":{"start":{"line":1044,"column":15},"end":{"line":1044,"column":29}},"id":637},"638":{"loc":{"start":{"line":1045,"column":12},"end":{"line":1045,"column":28}},"id":638},"639":{"loc":{"start":{"line":1045,"column":17},"end":{"line":1045,"column":27}},"id":639},"640":{"loc":{"start":{"line":1046,"column":12},"end":{"line":1046,"column":22}},"id":640},"641":{"loc":{"start":{"line":1048,"column":20},"end":{"line":1048,"column":30}},"id":641},"642":{"loc":{"start":{"line":1049,"column":20},"end":{"line":1049,"column":40}},"id":642},"643":{"loc":{"start":{"line":1052,"column":20},"end":{"line":1052,"column":31}},"id":643},"644":{"loc":{"start":{"line":1053,"column":20},"end":{"line":1053,"column":36}},"id":644},"645":{"loc":{"start":{"line":1053,"column":25},"end":{"line":1053,"column":35}},"id":645},"646":{"loc":{"start":{"line":1055,"column":24},"end":{"line":1055,"column":44}},"id":646},"647":{"loc":{"start":{"line":1056,"column":24},"end":{"line":1056,"column":68}},"id":647},"648":{"loc":{"start":{"line":1056,"column":24},"end":{"line":1056,"column":67}},"id":648},"649":{"loc":{"start":{"line":1058,"column":20},"end":{"line":1058,"column":30}},"id":649},"650":{"loc":{"start":{"line":1059,"column":27},"end":{"line":1059,"column":37}},"id":650},"651":{"loc":{"start":{"line":1061,"column":27},"end":{"line":1061,"column":37}},"id":651},"652":{"loc":{"start":{"line":1062,"column":20},"end":{"line":1062,"column":39}},"id":652},"653":{"loc":{"start":{"line":1063,"column":27},"end":{"line":1063,"column":47}},"id":653},"654":{"loc":{"start":{"line":1064,"column":20},"end":{"line":1064,"column":64}},"id":654},"655":{"loc":{"start":{"line":1064,"column":20},"end":{"line":1064,"column":63}},"id":655},"656":{"loc":{"start":{"line":1069,"column":12},"end":{"line":1069,"column":28}},"id":656},"657":{"loc":{"start":{"line":1070,"column":12},"end":{"line":1070,"column":56}},"id":657},"658":{"loc":{"start":{"line":1070,"column":12},"end":{"line":1070,"column":55}},"id":658},"659":{"loc":{"start":{"line":1074,"column":8},"end":{"line":1074,"column":48}},"id":659},"660":{"loc":{"start":{"line":1074,"column":18},"end":{"line":1074,"column":47}},"id":660},"661":{"loc":{"start":{"line":1074,"column":32},"end":{"line":1074,"column":46}},"id":661},"662":{"loc":{"start":{"line":1076,"column":8},"end":{"line":1076,"column":19}},"id":662},"663":{"loc":{"start":{"line":1077,"column":15},"end":{"line":1077,"column":29}},"id":663},"664":{"loc":{"start":{"line":1078,"column":12},"end":{"line":1078,"column":31}},"id":664},"665":{"loc":{"start":{"line":1079,"column":17},"end":{"line":1079,"column":37}},"id":665},"666":{"loc":{"start":{"line":1083,"column":12},"end":{"line":1083,"column":20}},"id":666},"667":{"loc":{"start":{"line":1083,"column":12},"end":{"line":1083,"column":19}},"id":667},"668":{"loc":{"start":{"line":1084,"column":16},"end":{"line":1084,"column":45}},"id":668},"669":{"loc":{"start":{"line":1084,"column":16},"end":{"line":1084,"column":27}},"id":669},"670":{"loc":{"start":{"line":1084,"column":31},"end":{"line":1084,"column":45}},"id":670},"671":{"loc":{"start":{"line":1085,"column":16},"end":{"line":1085,"column":35}},"id":671},"672":{"loc":{"start":{"line":1086,"column":20},"end":{"line":1086,"column":30}},"id":672},"673":{"loc":{"start":{"line":1087,"column":20},"end":{"line":1087,"column":28}},"id":673},"674":{"loc":{"start":{"line":1087,"column":20},"end":{"line":1087,"column":27}},"id":674},"675":{"loc":{"start":{"line":1088,"column":20},"end":{"line":1088,"column":36}},"id":675},"676":{"loc":{"start":{"line":1089,"column":20},"end":{"line":1089,"column":44}},"id":676},"677":{"loc":{"start":{"line":1089,"column":25},"end":{"line":1089,"column":43}},"id":677},"678":{"loc":{"start":{"line":1091,"column":24},"end":{"line":1091,"column":36}},"id":678},"679":{"loc":{"start":{"line":1092,"column":24},"end":{"line":1092,"column":37}},"id":679},"680":{"loc":{"start":{"line":1093,"column":31},"end":{"line":1093,"column":46}},"id":680},"681":{"loc":{"start":{"line":1093,"column":48},"end":{"line":1093,"column":57}},"id":681},"682":{"loc":{"start":{"line":1094,"column":28},"end":{"line":1094,"column":51}},"id":682},"683":{"loc":{"start":{"line":1097,"column":24},"end":{"line":1097,"column":40}},"id":683},"684":{"loc":{"start":{"line":1098,"column":24},"end":{"line":1098,"column":37}},"id":684},"685":{"loc":{"start":{"line":1099,"column":24},"end":{"line":1099,"column":37}},"id":685},"686":{"loc":{"start":{"line":1102,"column":20},"end":{"line":1102,"column":32}},"id":686},"687":{"loc":{"start":{"line":1105,"column":16},"end":{"line":1105,"column":28}},"id":687},"688":{"loc":{"start":{"line":1106,"column":16},"end":{"line":1106,"column":26}},"id":688},"689":{"loc":{"start":{"line":1111,"column":12},"end":{"line":1111,"column":47}},"id":689},"690":{"loc":{"start":{"line":1113,"column":12},"end":{"line":1113,"column":51}},"id":690},"691":{"loc":{"start":{"line":1113,"column":12},"end":{"line":1113,"column":50}},"id":691},"692":{"loc":{"start":{"line":1116,"column":8},"end":{"line":1120,"column":10}},"id":692},"693":{"loc":{"start":{"line":1124,"column":8},"end":{"line":1127,"column":45}},"id":693},"694":{"loc":{"start":{"line":1124,"column":15},"end":{"line":1127,"column":44}},"id":694},"695":{"loc":{"start":{"line":1124,"column":15},"end":{"line":1126,"column":47}},"id":695},"696":{"loc":{"start":{"line":1124,"column":15},"end":{"line":1125,"column":40}},"id":696},"697":{"loc":{"start":{"line":1124,"column":15},"end":{"line":1124,"column":46}},"id":697},"698":{"loc":{"start":{"line":1125,"column":12},"end":{"line":1125,"column":40}},"id":698},"699":{"loc":{"start":{"line":1126,"column":12},"end":{"line":1126,"column":47}},"id":699},"700":{"loc":{"start":{"line":1127,"column":12},"end":{"line":1127,"column":44}},"id":700},"701":{"loc":{"start":{"line":1131,"column":8},"end":{"line":1131,"column":22}},"id":701},"702":{"loc":{"start":{"line":1133,"column":8},"end":{"line":1133,"column":22}},"id":702},"703":{"loc":{"start":{"line":1133,"column":8},"end":{"line":1133,"column":21}},"id":703},"704":{"loc":{"start":{"line":1135,"column":12},"end":{"line":1135,"column":27}},"id":704},"705":{"loc":{"start":{"line":1136,"column":12},"end":{"line":1141,"column":14}},"id":705},"706":{"loc":{"start":{"line":1144,"column":8},"end":{"line":1144,"column":33}},"id":706},"707":{"loc":{"start":{"line":1144,"column":16},"end":{"line":1144,"column":32}},"id":707},"708":{"loc":{"start":{"line":1145,"column":12},"end":{"line":1145,"column":40}},"id":708},"709":{"loc":{"start":{"line":1146,"column":12},"end":{"line":1146,"column":25}},"id":709},"710":{"loc":{"start":{"line":1149,"column":8},"end":{"line":1149,"column":27}},"id":710},"711":{"loc":{"start":{"line":1151,"column":12},"end":{"line":1151,"column":37}},"id":711},"712":{"loc":{"start":{"line":1151,"column":12},"end":{"line":1151,"column":23}},"id":712},"713":{"loc":{"start":{"line":1151,"column":27},"end":{"line":1151,"column":37}},"id":713},"714":{"loc":{"start":{"line":1152,"column":12},"end":{"line":1152,"column":39}},"id":714},"715":{"loc":{"start":{"line":1152,"column":19},"end":{"line":1152,"column":38}},"id":715},"716":{"loc":{"start":{"line":1155,"column":12},"end":{"line":1155,"column":44}},"id":716},"717":{"loc":{"start":{"line":1155,"column":12},"end":{"line":1155,"column":22}},"id":717},"718":{"loc":{"start":{"line":1155,"column":26},"end":{"line":1155,"column":44}},"id":718},"719":{"loc":{"start":{"line":1156,"column":12},"end":{"line":1156,"column":40}},"id":719},"720":{"loc":{"start":{"line":1156,"column":19},"end":{"line":1156,"column":39}},"id":720},"721":{"loc":{"start":{"line":1159,"column":8},"end":{"line":1159,"column":33}},"id":721},"722":{"loc":{"start":{"line":1159,"column":16},"end":{"line":1159,"column":32}},"id":722},"723":{"loc":{"start":{"line":1160,"column":12},"end":{"line":1160,"column":40}},"id":723},"724":{"loc":{"start":{"line":1161,"column":12},"end":{"line":1161,"column":25}},"id":724},"725":{"loc":{"start":{"line":1164,"column":8},"end":{"line":1164,"column":60}},"id":725},"726":{"loc":{"start":{"line":1164,"column":8},"end":{"line":1164,"column":59}},"id":726},"727":{"loc":{"start":{"line":1168,"column":8},"end":{"line":1168,"column":18}},"id":727},"728":{"loc":{"start":{"line":1171,"column":12},"end":{"line":1171,"column":36}},"id":728},"729":{"loc":{"start":{"line":1172,"column":12},"end":{"line":1172,"column":43}},"id":729},"730":{"loc":{"start":{"line":1173,"column":12},"end":{"line":1173,"column":41}},"id":730},"731":{"loc":{"start":{"line":1174,"column":12},"end":{"line":1174,"column":27}},"id":731},"732":{"loc":{"start":{"line":1175,"column":12},"end":{"line":1175,"column":26}},"id":732},"733":{"loc":{"start":{"line":1176,"column":12},"end":{"line":1176,"column":25}},"id":733},"734":{"loc":{"start":{"line":1179,"column":8},"end":{"line":1179,"column":22}},"id":734},"735":{"loc":{"start":{"line":1180,"column":8},"end":{"line":1180,"column":25}},"id":735},"736":{"loc":{"start":{"line":1180,"column":15},"end":{"line":1180,"column":24}},"id":736},"737":{"loc":{"start":{"line":1184,"column":8},"end":{"line":1184,"column":29}},"id":737},"738":{"loc":{"start":{"line":1186,"column":12},"end":{"line":1186,"column":27}},"id":738},"739":{"loc":{"start":{"line":1187,"column":12},"end":{"line":1187,"column":26}},"id":739},"740":{"loc":{"start":{"line":1190,"column":8},"end":{"line":1190,"column":20}},"id":740},"741":{"loc":{"start":{"line":1191,"column":8},"end":{"line":1191,"column":26}},"id":741},"742":{"loc":{"start":{"line":1192,"column":8},"end":{"line":1192,"column":26}},"id":742},"743":{"loc":{"start":{"line":1193,"column":8},"end":{"line":1193,"column":27}},"id":743},"744":{"loc":{"start":{"line":1193,"column":17},"end":{"line":1193,"column":26}},"id":744},"745":{"loc":{"start":{"line":1194,"column":8},"end":{"line":1194,"column":20}},"id":745},"746":{"loc":{"start":{"line":1195,"column":8},"end":{"line":1195,"column":26}},"id":746},"747":{"loc":{"start":{"line":1196,"column":8},"end":{"line":1196,"column":26}},"id":747},"748":{"loc":{"start":{"line":1198,"column":8},"end":{"line":1198,"column":22}},"id":748},"749":{"loc":{"start":{"line":1204,"column":8},"end":{"line":1204,"column":36}},"id":749},"750":{"loc":{"start":{"line":1206,"column":8},"end":{"line":1206,"column":20}},"id":750},"751":{"loc":{"start":{"line":1207,"column":8},"end":{"line":1207,"column":26}},"id":751},"752":{"loc":{"start":{"line":1208,"column":8},"end":{"line":1208,"column":26}},"id":752},"753":{"loc":{"start":{"line":1209,"column":8},"end":{"line":1209,"column":22}},"id":753},"754":{"loc":{"start":{"line":1209,"column":8},"end":{"line":1209,"column":21}},"id":754},"755":{"loc":{"start":{"line":1210,"column":8},"end":{"line":1210,"column":36}},"id":755},"756":{"loc":{"start":{"line":1210,"column":16},"end":{"line":1210,"column":35}},"id":756},"757":{"loc":{"start":{"line":1211,"column":8},"end":{"line":1211,"column":20}},"id":757},"758":{"loc":{"start":{"line":1212,"column":8},"end":{"line":1212,"column":26}},"id":758},"759":{"loc":{"start":{"line":1213,"column":8},"end":{"line":1213,"column":26}},"id":759},"760":{"loc":{"start":{"line":1215,"column":8},"end":{"line":1215,"column":21}},"id":760},"761":{"loc":{"start":{"line":1221,"column":8},"end":{"line":1228,"column":14}},"id":761},"762":{"loc":{"start":{"line":1222,"column":19},"end":{"line":1222,"column":59}},"id":762},"763":{"loc":{"start":{"line":1223,"column":18},"end":{"line":1228,"column":13}},"id":763},"764":{"loc":{"start":{"line":1226,"column":20},"end":{"line":1226,"column":45}},"id":764},"765":{"loc":{"start":{"line":1226,"column":27},"end":{"line":1226,"column":44}},"id":765},"766":{"loc":{"start":{"line":1230,"column":12},"end":{"line":1230,"column":48}},"id":766},"767":{"loc":{"start":{"line":1231,"column":12},"end":{"line":1231,"column":71}},"id":767},"768":{"loc":{"start":{"line":1231,"column":30},"end":{"line":1231,"column":69}},"id":768},"769":{"loc":{"start":{"line":1231,"column":30},"end":{"line":1231,"column":63}},"id":769},"770":{"loc":{"start":{"line":1231,"column":30},"end":{"line":1231,"column":56}},"id":770},"771":{"loc":{"start":{"line":1232,"column":12},"end":{"line":1232,"column":41}},"id":771},"772":{"loc":{"start":{"line":1233,"column":12},"end":{"line":1233,"column":48}},"id":772},"773":{"loc":{"start":{"line":1234,"column":12},"end":{"line":1234,"column":58}},"id":773},"774":{"loc":{"start":{"line":1234,"column":27},"end":{"line":1234,"column":57}},"id":774},"775":{"loc":{"start":{"line":1234,"column":27},"end":{"line":1234,"column":53}},"id":775},"776":{"loc":{"start":{"line":1236,"column":12},"end":{"line":1236,"column":65}},"id":776},"777":{"loc":{"start":{"line":1236,"column":30},"end":{"line":1236,"column":63}},"id":777},"778":{"loc":{"start":{"line":1236,"column":30},"end":{"line":1236,"column":57}},"id":778},"779":{"loc":{"start":{"line":1236,"column":30},"end":{"line":1236,"column":50}},"id":779},"780":{"loc":{"start":{"line":1237,"column":12},"end":{"line":1237,"column":32}},"id":780},"781":{"loc":{"start":{"line":1238,"column":12},"end":{"line":1238,"column":42}},"id":781},"782":{"loc":{"start":{"line":1239,"column":12},"end":{"line":1239,"column":49}},"id":782},"783":{"loc":{"start":{"line":1239,"column":27},"end":{"line":1239,"column":48}},"id":783},"784":{"loc":{"start":{"line":1239,"column":27},"end":{"line":1239,"column":44}},"id":784},"785":{"loc":{"start":{"line":1242,"column":8},"end":{"line":1242,"column":20}},"id":785},"786":{"loc":{"start":{"line":1246,"column":8},"end":{"line":1246,"column":18}},"id":786},"787":{"loc":{"start":{"line":1248,"column":12},"end":{"line":1248,"column":46}},"id":787},"788":{"loc":{"start":{"line":1248,"column":12},"end":{"line":1248,"column":45}},"id":788},"789":{"loc":{"start":{"line":1251,"column":16},"end":{"line":1251,"column":37}},"id":789},"790":{"loc":{"start":{"line":1251,"column":16},"end":{"line":1251,"column":36}},"id":790},"791":{"loc":{"start":{"line":1253,"column":16},"end":{"line":1253,"column":24}},"id":791},"792":{"loc":{"start":{"line":1262,"column":8},"end":{"line":1262,"column":14}},"id":792},"793":{"loc":{"start":{"line":1264,"column":12},"end":{"line":1264,"column":36}},"id":793},"794":{"loc":{"start":{"line":1265,"column":12},"end":{"line":1265,"column":54}},"id":794},"795":{"loc":{"start":{"line":1265,"column":12},"end":{"line":1265,"column":53}},"id":795},"796":{"loc":{"start":{"line":1268,"column":12},"end":{"line":1268,"column":47}},"id":796},"797":{"loc":{"start":{"line":1269,"column":12},"end":{"line":1269,"column":57}},"id":797},"798":{"loc":{"start":{"line":1269,"column":12},"end":{"line":1269,"column":56}},"id":798},"799":{"loc":{"start":{"line":1272,"column":12},"end":{"line":1272,"column":46}},"id":799},"800":{"loc":{"start":{"line":1273,"column":12},"end":{"line":1273,"column":57}},"id":800},"801":{"loc":{"start":{"line":1273,"column":12},"end":{"line":1273,"column":56}},"id":801},"802":{"loc":{"start":{"line":1276,"column":12},"end":{"line":1276,"column":43}},"id":802},"803":{"loc":{"start":{"line":1277,"column":12},"end":{"line":1277,"column":61}},"id":803},"804":{"loc":{"start":{"line":1277,"column":12},"end":{"line":1277,"column":60}},"id":804},"805":{"loc":{"start":{"line":1280,"column":12},"end":{"line":1280,"column":40}},"id":805},"806":{"loc":{"start":{"line":1281,"column":16},"end":{"line":1281,"column":49}},"id":806},"807":{"loc":{"start":{"line":1282,"column":16},"end":{"line":1282,"column":63}},"id":807},"808":{"loc":{"start":{"line":1282,"column":16},"end":{"line":1282,"column":62}},"id":808},"809":{"loc":{"start":{"line":1283,"column":23},"end":{"line":1283,"column":70}},"id":809},"810":{"loc":{"start":{"line":1283,"column":33},"end":{"line":1283,"column":70}},"id":810},"811":{"loc":{"start":{"line":1284,"column":16},"end":{"line":1284,"column":63}},"id":811},"812":{"loc":{"start":{"line":1284,"column":16},"end":{"line":1284,"column":62}},"id":812},"813":{"loc":{"start":{"line":1286,"column":12},"end":{"line":1286,"column":69}},"id":813},"814":{"loc":{"start":{"line":1286,"column":12},"end":{"line":1286,"column":68}},"id":814},"815":{"loc":{"start":{"line":1290,"column":8},"end":{"line":1290,"column":65}},"id":815},"816":{"loc":{"start":{"line":1290,"column":8},"end":{"line":1290,"column":64}},"id":816},"817":{"loc":{"start":{"line":1297,"column":8},"end":{"line":1297,"column":26}},"id":817},"818":{"loc":{"start":{"line":1297,"column":20},"end":{"line":1297,"column":25}},"id":818},"819":{"loc":{"start":{"line":1298,"column":12},"end":{"line":1298,"column":68}},"id":819},"820":{"loc":{"start":{"line":1298,"column":12},"end":{"line":1298,"column":43}},"id":820},"821":{"loc":{"start":{"line":1298,"column":47},"end":{"line":1298,"column":68}},"id":821},"822":{"loc":{"start":{"line":1299,"column":12},"end":{"line":1299,"column":35}},"id":822},"823":{"loc":{"start":{"line":1299,"column":12},"end":{"line":1299,"column":34}},"id":823},"824":{"loc":{"start":{"line":1307,"column":8},"end":{"line":1307,"column":26}},"id":824},"825":{"loc":{"start":{"line":1307,"column":20},"end":{"line":1307,"column":25}},"id":825},"826":{"loc":{"start":{"line":1308,"column":12},"end":{"line":1308,"column":67}},"id":826},"827":{"loc":{"start":{"line":1308,"column":12},"end":{"line":1308,"column":40}},"id":827},"828":{"loc":{"start":{"line":1308,"column":44},"end":{"line":1308,"column":67}},"id":828},"829":{"loc":{"start":{"line":1309,"column":12},"end":{"line":1309,"column":35}},"id":829},"830":{"loc":{"start":{"line":1309,"column":12},"end":{"line":1309,"column":34}},"id":830},"831":{"loc":{"start":{"line":1316,"column":8},"end":{"line":1316,"column":32}},"id":831},"832":{"loc":{"start":{"line":1316,"column":20},"end":{"line":1316,"column":31}},"id":832},"833":{"loc":{"start":{"line":1317,"column":8},"end":{"line":1317,"column":72}},"id":833},"834":{"loc":{"start":{"line":1317,"column":15},"end":{"line":1317,"column":71}},"id":834},"835":{"loc":{"start":{"line":1317,"column":15},"end":{"line":1317,"column":46}},"id":835},"836":{"loc":{"start":{"line":1317,"column":50},"end":{"line":1317,"column":71}},"id":836},"837":{"loc":{"start":{"line":1323,"column":8},"end":{"line":1323,"column":32}},"id":837},"838":{"loc":{"start":{"line":1323,"column":20},"end":{"line":1323,"column":31}},"id":838},"839":{"loc":{"start":{"line":1324,"column":8},"end":{"line":1324,"column":71}},"id":839},"840":{"loc":{"start":{"line":1324,"column":15},"end":{"line":1324,"column":70}},"id":840},"841":{"loc":{"start":{"line":1324,"column":15},"end":{"line":1324,"column":43}},"id":841},"842":{"loc":{"start":{"line":1324,"column":47},"end":{"line":1324,"column":70}},"id":842},"843":{"loc":{"start":{"line":1331,"column":8},"end":{"line":1331,"column":32}},"id":843},"844":{"loc":{"start":{"line":1331,"column":20},"end":{"line":1331,"column":31}},"id":844},"845":{"loc":{"start":{"line":1332,"column":8},"end":{"line":1332,"column":74}},"id":845},"846":{"loc":{"start":{"line":1332,"column":15},"end":{"line":1332,"column":73}},"id":846},"847":{"loc":{"start":{"line":1332,"column":15},"end":{"line":1332,"column":46}},"id":847},"848":{"loc":{"start":{"line":1332,"column":50},"end":{"line":1332,"column":73}},"id":848},"849":{"loc":{"start":{"line":1338,"column":8},"end":{"line":1339,"column":29}},"id":849},"850":{"loc":{"start":{"line":1338,"column":20},"end":{"line":1338,"column":31}},"id":850},"851":{"loc":{"start":{"line":1341,"column":12},"end":{"line":1341,"column":43}},"id":851},"852":{"loc":{"start":{"line":1342,"column":12},"end":{"line":1342,"column":25}},"id":852},"853":{"loc":{"start":{"line":1344,"column":8},"end":{"line":1355,"column":24}},"id":853},"854":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1355,"column":23}},"id":854},"855":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1354,"column":23}},"id":855},"856":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1353,"column":23}},"id":856},"857":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1352,"column":25}},"id":857},"858":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1351,"column":24}},"id":858},"859":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1350,"column":24}},"id":859},"860":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1349,"column":23}},"id":860},"861":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1348,"column":23}},"id":861},"862":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1347,"column":23}},"id":862},"863":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1346,"column":23}},"id":863},"864":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1345,"column":23}},"id":864},"865":{"loc":{"start":{"line":1344,"column":15},"end":{"line":1344,"column":25}},"id":865},"866":{"loc":{"start":{"line":1345,"column":12},"end":{"line":1345,"column":23}},"id":866},"867":{"loc":{"start":{"line":1346,"column":12},"end":{"line":1346,"column":23}},"id":867},"868":{"loc":{"start":{"line":1347,"column":12},"end":{"line":1347,"column":23}},"id":868},"869":{"loc":{"start":{"line":1348,"column":12},"end":{"line":1348,"column":23}},"id":869},"870":{"loc":{"start":{"line":1349,"column":12},"end":{"line":1349,"column":23}},"id":870},"871":{"loc":{"start":{"line":1350,"column":12},"end":{"line":1350,"column":24}},"id":871},"872":{"loc":{"start":{"line":1351,"column":12},"end":{"line":1351,"column":24}},"id":872},"873":{"loc":{"start":{"line":1352,"column":12},"end":{"line":1352,"column":25}},"id":873},"874":{"loc":{"start":{"line":1353,"column":12},"end":{"line":1353,"column":23}},"id":874},"875":{"loc":{"start":{"line":1354,"column":12},"end":{"line":1354,"column":23}},"id":875},"876":{"loc":{"start":{"line":1355,"column":12},"end":{"line":1355,"column":23}},"id":876},"877":{"loc":{"start":{"line":1359,"column":8},"end":{"line":1359,"column":24}},"id":877},"878":{"loc":{"start":{"line":1362,"column":12},"end":{"line":1362,"column":33}},"id":878},"879":{"loc":{"start":{"line":1363,"column":12},"end":{"line":1363,"column":18}},"id":879},"880":{"loc":{"start":{"line":1363,"column":12},"end":{"line":1363,"column":17}},"id":880},"881":{"loc":{"start":{"line":1364,"column":12},"end":{"line":1364,"column":19}},"id":881},"882":{"loc":{"start":{"line":1367,"column":8},"end":{"line":1367,"column":26}},"id":882},"883":{"loc":{"start":{"line":1368,"column":8},"end":{"line":1368,"column":22}},"id":883},"884":{"loc":{"start":{"line":1368,"column":8},"end":{"line":1368,"column":21}},"id":884},"885":{"loc":{"start":{"line":1369,"column":12},"end":{"line":1369,"column":31}},"id":885},"886":{"loc":{"start":{"line":1370,"column":12},"end":{"line":1370,"column":19}},"id":886},"887":{"loc":{"start":{"line":1373,"column":12},"end":{"line":1373,"column":22}},"id":887},"888":{"loc":{"start":{"line":1374,"column":12},"end":{"line":1374,"column":18}},"id":888},"889":{"loc":{"start":{"line":1374,"column":12},"end":{"line":1374,"column":17}},"id":889},"890":{"loc":{"start":{"line":1375,"column":12},"end":{"line":1375,"column":19}},"id":890},"891":{"loc":{"start":{"line":1378,"column":8},"end":{"line":1378,"column":28}},"id":891},"892":{"loc":{"start":{"line":1378,"column":16},"end":{"line":1378,"column":27}},"id":892},"893":{"loc":{"start":{"line":1379,"column":12},"end":{"line":1379,"column":51}},"id":893},"894":{"loc":{"start":{"line":1379,"column":12},"end":{"line":1379,"column":36}},"id":894},"895":{"loc":{"start":{"line":1379,"column":41},"end":{"line":1379,"column":51}},"id":895},"896":{"loc":{"start":{"line":1380,"column":12},"end":{"line":1380,"column":35}},"id":896},"897":{"loc":{"start":{"line":1380,"column":12},"end":{"line":1380,"column":34}},"id":897},"898":{"loc":{"start":{"line":1382,"column":8},"end":{"line":1382,"column":15}},"id":898},"899":{"loc":{"start":{"line":1396,"column":12},"end":{"line":1396,"column":25}},"id":899},"900":{"loc":{"start":{"line":1398,"column":8},"end":{"line":1398,"column":20}},"id":900},"901":{"loc":{"start":{"line":1404,"column":8},"end":{"line":1405,"column":18}},"id":901},"902":{"loc":{"start":{"line":1407,"column":8},"end":{"line":1407,"column":20}},"id":902},"903":{"loc":{"start":{"line":1407,"column":8},"end":{"line":1407,"column":19}},"id":903},"904":{"loc":{"start":{"line":1409,"column":16},"end":{"line":1409,"column":26}},"id":904},"905":{"loc":{"start":{"line":1410,"column":16},"end":{"line":1410,"column":26}},"id":905},"906":{"loc":{"start":{"line":1411,"column":16},"end":{"line":1411,"column":22}},"id":906},"907":{"loc":{"start":{"line":1411,"column":16},"end":{"line":1411,"column":21}},"id":907},"908":{"loc":{"start":{"line":1412,"column":16},"end":{"line":1412,"column":37}},"id":908},"909":{"loc":{"start":{"line":1412,"column":16},"end":{"line":1412,"column":36}},"id":909},"910":{"loc":{"start":{"line":1414,"column":16},"end":{"line":1414,"column":59}},"id":910},"911":{"loc":{"start":{"line":1414,"column":16},"end":{"line":1414,"column":58}},"id":911},"912":{"loc":{"start":{"line":1414,"column":30},"end":{"line":1414,"column":57}},"id":912},"913":{"loc":{"start":{"line":1416,"column":21},"end":{"line":1416,"column":31}},"id":913},"914":{"loc":{"start":{"line":1417,"column":20},"end":{"line":1417,"column":32}},"id":914},"915":{"loc":{"start":{"line":1417,"column":20},"end":{"line":1417,"column":31}},"id":915},"916":{"loc":{"start":{"line":1422,"column":8},"end":{"line":1422,"column":20}},"id":916},"917":{"loc":{"start":{"line":1422,"column":8},"end":{"line":1422,"column":19}},"id":917},"918":{"loc":{"start":{"line":1424,"column":8},"end":{"line":1427,"column":10}},"id":918},"919":{"loc":{"start":{"line":1431,"column":8},"end":{"line":1431,"column":45}},"id":919},"920":{"loc":{"start":{"line":1431,"column":21},"end":{"line":1431,"column":44}},"id":920},"921":{"loc":{"start":{"line":1432,"column":8},"end":{"line":1432,"column":29}},"id":921},"922":{"loc":{"start":{"line":1433,"column":8},"end":{"line":1433,"column":22}},"id":922},"923":{"loc":{"start":{"line":1439,"column":8},"end":{"line":1439,"column":33}},"id":923},"924":{"loc":{"start":{"line":1441,"column":8},"end":{"line":1441,"column":32}},"id":924},"925":{"loc":{"start":{"line":1442,"column":8},"end":{"line":1442,"column":34}},"id":925},"926":{"loc":{"start":{"line":1442,"column":15},"end":{"line":1442,"column":33}},"id":926},"927":{"loc":{"start":{"line":1443,"column":12},"end":{"line":1443,"column":62}},"id":927},"928":{"loc":{"start":{"line":1443,"column":12},"end":{"line":1443,"column":27}},"id":928},"929":{"loc":{"start":{"line":1443,"column":31},"end":{"line":1443,"column":62}},"id":929},"930":{"loc":{"start":{"line":1444,"column":12},"end":{"line":1444,"column":56}},"id":930},"931":{"loc":{"start":{"line":1444,"column":12},"end":{"line":1444,"column":55}},"id":931},"932":{"loc":{"start":{"line":1446,"column":8},"end":{"line":1446,"column":32}},"id":932},"933":{"loc":{"start":{"line":1448,"column":8},"end":{"line":1453,"column":10}},"id":933},"934":{"loc":{"start":{"line":1457,"column":8},"end":{"line":1457,"column":67}},"id":934},"935":{"loc":{"start":{"line":1459,"column":8},"end":{"line":1459,"column":32}},"id":935},"936":{"loc":{"start":{"line":1460,"column":8},"end":{"line":1460,"column":22}},"id":936},"937":{"loc":{"start":{"line":1461,"column":8},"end":{"line":1461,"column":20}},"id":937},"938":{"loc":{"start":{"line":1463,"column":8},"end":{"line":1463,"column":20}},"id":938},"939":{"loc":{"start":{"line":1463,"column":8},"end":{"line":1463,"column":19}},"id":939},"940":{"loc":{"start":{"line":1465,"column":13},"end":{"line":1465,"column":23}},"id":940},"941":{"loc":{"start":{"line":1466,"column":12},"end":{"line":1466,"column":26}},"id":941},"942":{"loc":{"start":{"line":1467,"column":19},"end":{"line":1467,"column":33}},"id":942},"943":{"loc":{"start":{"line":1468,"column":16},"end":{"line":1468,"column":36}},"id":943},"944":{"loc":{"start":{"line":1468,"column":24},"end":{"line":1468,"column":35}},"id":944},"945":{"loc":{"start":{"line":1469,"column":16},"end":{"line":1469,"column":50}},"id":945},"946":{"loc":{"start":{"line":1469,"column":24},"end":{"line":1469,"column":49}},"id":946},"947":{"loc":{"start":{"line":1470,"column":20},"end":{"line":1470,"column":49}},"id":947},"948":{"loc":{"start":{"line":1471,"column":20},"end":{"line":1471,"column":64}},"id":948},"949":{"loc":{"start":{"line":1471,"column":20},"end":{"line":1471,"column":63}},"id":949},"950":{"loc":{"start":{"line":1473,"column":20},"end":{"line":1473,"column":79}},"id":950},"951":{"loc":{"start":{"line":1474,"column":20},"end":{"line":1474,"column":64}},"id":951},"952":{"loc":{"start":{"line":1474,"column":20},"end":{"line":1474,"column":63}},"id":952},"953":{"loc":{"start":{"line":1476,"column":16},"end":{"line":1476,"column":35}},"id":953},"954":{"loc":{"start":{"line":1476,"column":16},"end":{"line":1476,"column":34}},"id":954},"955":{"loc":{"start":{"line":1477,"column":16},"end":{"line":1477,"column":44}},"id":955},"956":{"loc":{"start":{"line":1478,"column":20},"end":{"line":1478,"column":30}},"id":956},"957":{"loc":{"start":{"line":1481,"column":16},"end":{"line":1481,"column":28}},"id":957},"958":{"loc":{"start":{"line":1481,"column":16},"end":{"line":1481,"column":27}},"id":958},"959":{"loc":{"start":{"line":1485,"column":8},"end":{"line":1485,"column":20}},"id":959},"960":{"loc":{"start":{"line":1485,"column":8},"end":{"line":1485,"column":19}},"id":960},"961":{"loc":{"start":{"line":1487,"column":8},"end":{"line":1487,"column":47}},"id":961},"962":{"loc":{"start":{"line":1487,"column":17},"end":{"line":1487,"column":46}},"id":962},"963":{"loc":{"start":{"line":1489,"column":8},"end":{"line":1489,"column":32}},"id":963},"964":{"loc":{"start":{"line":1491,"column":8},"end":{"line":1491,"column":22}},"id":964},"965":{"loc":{"start":{"line":1495,"column":8},"end":{"line":1495,"column":26}},"id":965},"966":{"loc":{"start":{"line":1495,"column":20},"end":{"line":1495,"column":25}},"id":966},"967":{"loc":{"start":{"line":1500,"column":12},"end":{"line":1500,"column":85}},"id":967},"968":{"loc":{"start":{"line":1500,"column":12},"end":{"line":1500,"column":46}},"id":968},"969":{"loc":{"start":{"line":1500,"column":50},"end":{"line":1500,"column":85}},"id":969},"970":{"loc":{"start":{"line":1501,"column":16},"end":{"line":1501,"column":37}},"id":970},"971":{"loc":{"start":{"line":1502,"column":16},"end":{"line":1502,"column":63}},"id":971},"972":{"loc":{"start":{"line":1502,"column":16},"end":{"line":1502,"column":62}},"id":972},"973":{"loc":{"start":{"line":1504,"column":12},"end":{"line":1504,"column":40}},"id":973},"974":{"loc":{"start":{"line":1504,"column":19},"end":{"line":1504,"column":39}},"id":974},"975":{"loc":{"start":{"line":1507,"column":8},"end":{"line":1510,"column":10}},"id":975},"976":{"loc":{"start":{"line":1514,"column":8},"end":{"line":1514,"column":34}},"id":976},"977":{"loc":{"start":{"line":1516,"column":8},"end":{"line":1516,"column":28}},"id":977},"978":{"loc":{"start":{"line":1516,"column":16},"end":{"line":1516,"column":27}},"id":978},"979":{"loc":{"start":{"line":1518,"column":12},"end":{"line":1518,"column":43}},"id":979},"980":{"loc":{"start":{"line":1520,"column":12},"end":{"line":1520,"column":42}},"id":980},"981":{"loc":{"start":{"line":1520,"column":17},"end":{"line":1520,"column":41}},"id":981},"982":{"loc":{"start":{"line":1524,"column":16},"end":{"line":1524,"column":68}},"id":982},"983":{"loc":{"start":{"line":1524,"column":16},"end":{"line":1524,"column":37}},"id":983},"984":{"loc":{"start":{"line":1524,"column":42},"end":{"line":1524,"column":68}},"id":984},"985":{"loc":{"start":{"line":1524,"column":43},"end":{"line":1524,"column":53}},"id":985},"986":{"loc":{"start":{"line":1524,"column":57},"end":{"line":1524,"column":67}},"id":986},"987":{"loc":{"start":{"line":1525,"column":16},"end":{"line":1525,"column":47}},"id":987},"988":{"loc":{"start":{"line":1525,"column":22},"end":{"line":1525,"column":46}},"id":988},"989":{"loc":{"start":{"line":1526,"column":16},"end":{"line":1526,"column":28}},"id":989},"990":{"loc":{"start":{"line":1526,"column":16},"end":{"line":1526,"column":27}},"id":990},"991":{"loc":{"start":{"line":1527,"column":16},"end":{"line":1527,"column":28}},"id":991},"992":{"loc":{"start":{"line":1527,"column":16},"end":{"line":1527,"column":27}},"id":992},"993":{"loc":{"start":{"line":1528,"column":16},"end":{"line":1533,"column":18}},"id":993},"994":{"loc":{"start":{"line":1531,"column":27},"end":{"line":1531,"column":52}},"id":994},"995":{"loc":{"start":{"line":1534,"column":23},"end":{"line":1534,"column":75}},"id":995},"996":{"loc":{"start":{"line":1534,"column":23},"end":{"line":1534,"column":44}},"id":996},"997":{"loc":{"start":{"line":1534,"column":49},"end":{"line":1534,"column":75}},"id":997},"998":{"loc":{"start":{"line":1534,"column":50},"end":{"line":1534,"column":60}},"id":998},"999":{"loc":{"start":{"line":1534,"column":64},"end":{"line":1534,"column":74}},"id":999},"1000":{"loc":{"start":{"line":1535,"column":16},"end":{"line":1535,"column":47}},"id":1000},"1001":{"loc":{"start":{"line":1535,"column":22},"end":{"line":1535,"column":46}},"id":1001},"1002":{"loc":{"start":{"line":1536,"column":16},"end":{"line":1536,"column":28}},"id":1002},"1003":{"loc":{"start":{"line":1536,"column":16},"end":{"line":1536,"column":27}},"id":1003},"1004":{"loc":{"start":{"line":1537,"column":16},"end":{"line":1537,"column":36}},"id":1004},"1005":{"loc":{"start":{"line":1537,"column":24},"end":{"line":1537,"column":35}},"id":1005},"1006":{"loc":{"start":{"line":1538,"column":20},"end":{"line":1538,"column":51}},"id":1006},"1007":{"loc":{"start":{"line":1539,"column":20},"end":{"line":1539,"column":43}},"id":1007},"1008":{"loc":{"start":{"line":1539,"column":20},"end":{"line":1539,"column":42}},"id":1008},"1009":{"loc":{"start":{"line":1539,"column":36},"end":{"line":1539,"column":41}},"id":1009},"1010":{"loc":{"start":{"line":1541,"column":16},"end":{"line":1541,"column":54}},"id":1010},"1011":{"loc":{"start":{"line":1541,"column":26},"end":{"line":1541,"column":51}},"id":1011},"1012":{"loc":{"start":{"line":1542,"column":16},"end":{"line":1542,"column":28}},"id":1012},"1013":{"loc":{"start":{"line":1542,"column":16},"end":{"line":1542,"column":27}},"id":1013},"1014":{"loc":{"start":{"line":1543,"column":16},"end":{"line":1548,"column":18}},"id":1014},"1015":{"loc":{"start":{"line":1546,"column":27},"end":{"line":1546,"column":62}},"id":1015},"1016":{"loc":{"start":{"line":1550,"column":20},"end":{"line":1550,"column":30}},"id":1016},"1017":{"loc":{"start":{"line":1551,"column":20},"end":{"line":1551,"column":26}},"id":1017},"1018":{"loc":{"start":{"line":1551,"column":20},"end":{"line":1551,"column":25}},"id":1018},"1019":{"loc":{"start":{"line":1552,"column":20},"end":{"line":1557,"column":22}},"id":1019},"1020":{"loc":{"start":{"line":1555,"column":31},"end":{"line":1555,"column":58}},"id":1020},"1021":{"loc":{"start":{"line":1558,"column":27},"end":{"line":1558,"column":37}},"id":1021},"1022":{"loc":{"start":{"line":1559,"column":20},"end":{"line":1565,"column":22}},"id":1022},"1023":{"loc":{"start":{"line":1562,"column":31},"end":{"line":1562,"column":60}},"id":1023},"1024":{"loc":{"start":{"line":1567,"column":20},"end":{"line":1573,"column":22}},"id":1024},"1025":{"loc":{"start":{"line":1576,"column":19},"end":{"line":1576,"column":78}},"id":1025},"1026":{"loc":{"start":{"line":1576,"column":19},"end":{"line":1576,"column":43}},"id":1026},"1027":{"loc":{"start":{"line":1576,"column":47},"end":{"line":1576,"column":78}},"id":1027},"1028":{"loc":{"start":{"line":1577,"column":12},"end":{"line":1577,"column":35}},"id":1028},"1029":{"loc":{"start":{"line":1577,"column":12},"end":{"line":1577,"column":34}},"id":1029},"1030":{"loc":{"start":{"line":1579,"column":12},"end":{"line":1579,"column":43}},"id":1030},"1031":{"loc":{"start":{"line":1579,"column":18},"end":{"line":1579,"column":42}},"id":1031},"1032":{"loc":{"start":{"line":1580,"column":16},"end":{"line":1580,"column":26}},"id":1032},"1033":{"loc":{"start":{"line":1581,"column":16},"end":{"line":1581,"column":22}},"id":1033},"1034":{"loc":{"start":{"line":1581,"column":16},"end":{"line":1581,"column":21}},"id":1034},"1035":{"loc":{"start":{"line":1582,"column":16},"end":{"line":1587,"column":18}},"id":1035},"1036":{"loc":{"start":{"line":1585,"column":27},"end":{"line":1585,"column":54}},"id":1036},"1037":{"loc":{"start":{"line":1588,"column":23},"end":{"line":1588,"column":33}},"id":1037},"1038":{"loc":{"start":{"line":1589,"column":16},"end":{"line":1595,"column":18}},"id":1038},"1039":{"loc":{"start":{"line":1592,"column":27},"end":{"line":1592,"column":56}},"id":1039},"1040":{"loc":{"start":{"line":1597,"column":16},"end":{"line":1603,"column":18}},"id":1040},"1041":{"loc":{"start":{"line":1609,"column":8},"end":{"line":1609,"column":86}},"id":1041},"1042":{"loc":{"start":{"line":1611,"column":8},"end":{"line":1611,"column":20}},"id":1042},"1043":{"loc":{"start":{"line":1611,"column":8},"end":{"line":1611,"column":19}},"id":1043},"1044":{"loc":{"start":{"line":1613,"column":16},"end":{"line":1613,"column":26}},"id":1044},"1045":{"loc":{"start":{"line":1614,"column":12},"end":{"line":1614,"column":45}},"id":1045},"1046":{"loc":{"start":{"line":1614,"column":23},"end":{"line":1614,"column":44}},"id":1046},"1047":{"loc":{"start":{"line":1616,"column":16},"end":{"line":1616,"column":55}},"id":1047},"1048":{"loc":{"start":{"line":1617,"column":16},"end":{"line":1617,"column":41}},"id":1048},"1049":{"loc":{"start":{"line":1619,"column":16},"end":{"line":1619,"column":52}},"id":1049},"1050":{"loc":{"start":{"line":1619,"column":23},"end":{"line":1619,"column":51}},"id":1050},"1051":{"loc":{"start":{"line":1621,"column":12},"end":{"line":1621,"column":132}},"id":1051},"1052":{"loc":{"start":{"line":1621,"column":48},"end":{"line":1621,"column":65}},"id":1052},"1053":{"loc":{"start":{"line":1621,"column":68},"end":{"line":1621,"column":131}},"id":1053},"1054":{"loc":{"start":{"line":1621,"column":19},"end":{"line":1621,"column":45}},"id":1054},"1055":{"loc":{"start":{"line":1621,"column":96},"end":{"line":1621,"column":112}},"id":1055},"1056":{"loc":{"start":{"line":1621,"column":115},"end":{"line":1621,"column":131}},"id":1056},"1057":{"loc":{"start":{"line":1621,"column":68},"end":{"line":1621,"column":93}},"id":1057},"1058":{"loc":{"start":{"line":1622,"column":16},"end":{"line":1622,"column":63}},"id":1058},"1059":{"loc":{"start":{"line":1623,"column":20},"end":{"line":1623,"column":51}},"id":1059},"1060":{"loc":{"start":{"line":1624,"column":24},"end":{"line":1624,"column":60}},"id":1060},"1061":{"loc":{"start":{"line":1624,"column":34},"end":{"line":1624,"column":60}},"id":1061},"1062":{"loc":{"start":{"line":1625,"column":24},"end":{"line":1625,"column":81}},"id":1062},"1063":{"loc":{"start":{"line":1625,"column":24},"end":{"line":1625,"column":80}},"id":1063},"1064":{"loc":{"start":{"line":1626,"column":31},"end":{"line":1626,"column":57}},"id":1064},"1065":{"loc":{"start":{"line":1627,"column":24},"end":{"line":1627,"column":70}},"id":1065},"1066":{"loc":{"start":{"line":1627,"column":24},"end":{"line":1627,"column":69}},"id":1066},"1067":{"loc":{"start":{"line":1630,"column":24},"end":{"line":1630,"column":50}},"id":1067},"1068":{"loc":{"start":{"line":1631,"column":24},"end":{"line":1631,"column":70}},"id":1068},"1069":{"loc":{"start":{"line":1631,"column":24},"end":{"line":1631,"column":69}},"id":1069},"1070":{"loc":{"start":{"line":1632,"column":31},"end":{"line":1632,"column":47}},"id":1070},"1071":{"loc":{"start":{"line":1633,"column":24},"end":{"line":1633,"column":64}},"id":1071},"1072":{"loc":{"start":{"line":1633,"column":24},"end":{"line":1633,"column":63}},"id":1072},"1073":{"loc":{"start":{"line":1636,"column":16},"end":{"line":1636,"column":34}},"id":1073},"1074":{"loc":{"start":{"line":1638,"column":16},"end":{"line":1638,"column":33}},"id":1074},"1075":{"loc":{"start":{"line":1641,"column":12},"end":{"line":1641,"column":38}},"id":1075},"1076":{"loc":{"start":{"line":1641,"column":12},"end":{"line":1641,"column":37}},"id":1076},"1077":{"loc":{"start":{"line":1643,"column":17},"end":{"line":1643,"column":27}},"id":1077},"1078":{"loc":{"start":{"line":1644,"column":16},"end":{"line":1644,"column":28}},"id":1078},"1079":{"loc":{"start":{"line":1644,"column":16},"end":{"line":1644,"column":27}},"id":1079},"1080":{"loc":{"start":{"line":1648,"column":8},"end":{"line":1648,"column":20}},"id":1080},"1081":{"loc":{"start":{"line":1648,"column":8},"end":{"line":1648,"column":19}},"id":1081},"1082":{"loc":{"start":{"line":1650,"column":8},"end":{"line":1653,"column":10}},"id":1082},"1083":{"loc":{"start":{"line":1657,"column":8},"end":{"line":1657,"column":46}},"id":1083},"1084":{"loc":{"start":{"line":1657,"column":21},"end":{"line":1657,"column":45}},"id":1084},"1085":{"loc":{"start":{"line":1658,"column":8},"end":{"line":1658,"column":29}},"id":1085},"1086":{"loc":{"start":{"line":1659,"column":8},"end":{"line":1659,"column":22}},"id":1086},"1087":{"loc":{"start":{"line":1665,"column":8},"end":{"line":1667,"column":30}},"id":1087},"1088":{"loc":{"start":{"line":1666,"column":20},"end":{"line":1666,"column":31}},"id":1088},"1089":{"loc":{"start":{"line":1669,"column":12},"end":{"line":1669,"column":37}},"id":1089},"1090":{"loc":{"start":{"line":1670,"column":12},"end":{"line":1673,"column":14}},"id":1090},"1091":{"loc":{"start":{"line":1672,"column":25},"end":{"line":1672,"column":27}},"id":1091},"1092":{"loc":{"start":{"line":1676,"column":12},"end":{"line":1676,"column":73}},"id":1092},"1093":{"loc":{"start":{"line":1676,"column":12},"end":{"line":1676,"column":40}},"id":1093},"1094":{"loc":{"start":{"line":1676,"column":44},"end":{"line":1676,"column":73}},"id":1094},"1095":{"loc":{"start":{"line":1677,"column":16},"end":{"line":1677,"column":37}},"id":1095},"1096":{"loc":{"start":{"line":1678,"column":16},"end":{"line":1678,"column":71}},"id":1096},"1097":{"loc":{"start":{"line":1678,"column":16},"end":{"line":1678,"column":70}},"id":1097},"1098":{"loc":{"start":{"line":1680,"column":12},"end":{"line":1680,"column":40}},"id":1098},"1099":{"loc":{"start":{"line":1680,"column":19},"end":{"line":1680,"column":39}},"id":1099},"1100":{"loc":{"start":{"line":1680,"column":33},"end":{"line":1680,"column":38}},"id":1100},"1101":{"loc":{"start":{"line":1683,"column":12},"end":{"line":1683,"column":34}},"id":1101},"1102":{"loc":{"start":{"line":1684,"column":16},"end":{"line":1684,"column":36}},"id":1102},"1103":{"loc":{"start":{"line":1685,"column":16},"end":{"line":1685,"column":22}},"id":1103},"1104":{"loc":{"start":{"line":1685,"column":16},"end":{"line":1685,"column":21}},"id":1104},"1105":{"loc":{"start":{"line":1686,"column":16},"end":{"line":1688,"column":18}},"id":1105},"1106":{"loc":{"start":{"line":1691,"column":16},"end":{"line":1691,"column":40}},"id":1106},"1107":{"loc":{"start":{"line":1692,"column":16},"end":{"line":1692,"column":49}},"id":1107},"1108":{"loc":{"start":{"line":1692,"column":23},"end":{"line":1692,"column":48}},"id":1108},"1109":{"loc":{"start":{"line":1695,"column":16},"end":{"line":1695,"column":37}},"id":1109},"1110":{"loc":{"start":{"line":1696,"column":16},"end":{"line":1696,"column":47}},"id":1110},"1111":{"loc":{"start":{"line":1696,"column":23},"end":{"line":1696,"column":46}},"id":1111},"1112":{"loc":{"start":{"line":1699,"column":16},"end":{"line":1699,"column":37}},"id":1112},"1113":{"loc":{"start":{"line":1700,"column":20},"end":{"line":1700,"column":51}},"id":1113},"1114":{"loc":{"start":{"line":1701,"column":20},"end":{"line":1701,"column":79}},"id":1114},"1115":{"loc":{"start":{"line":1701,"column":20},"end":{"line":1701,"column":78}},"id":1115},"1116":{"loc":{"start":{"line":1703,"column":16},"end":{"line":1703,"column":22}},"id":1116},"1117":{"loc":{"start":{"line":1703,"column":16},"end":{"line":1703,"column":21}},"id":1117},"1118":{"loc":{"start":{"line":1704,"column":16},"end":{"line":1707,"column":18}},"id":1118},"1119":{"loc":{"start":{"line":1711,"column":12},"end":{"line":1711,"column":41}},"id":1119},"1120":{"loc":{"start":{"line":1712,"column":12},"end":{"line":1712,"column":18}},"id":1120},"1121":{"loc":{"start":{"line":1712,"column":12},"end":{"line":1712,"column":17}},"id":1121},"1122":{"loc":{"start":{"line":1713,"column":12},"end":{"line":1713,"column":51}},"id":1122},"1123":{"loc":{"start":{"line":1713,"column":26},"end":{"line":1713,"column":50}},"id":1123},"1124":{"loc":{"start":{"line":1714,"column":12},"end":{"line":1714,"column":40}},"id":1124},"1125":{"loc":{"start":{"line":1714,"column":19},"end":{"line":1714,"column":39}},"id":1125},"1126":{"loc":{"start":{"line":1717,"column":12},"end":{"line":1717,"column":38}},"id":1126},"1127":{"loc":{"start":{"line":1718,"column":12},"end":{"line":1718,"column":18}},"id":1127},"1128":{"loc":{"start":{"line":1718,"column":12},"end":{"line":1718,"column":17}},"id":1128},"1129":{"loc":{"start":{"line":1719,"column":12},"end":{"line":1719,"column":31}},"id":1129},"1130":{"loc":{"start":{"line":1720,"column":12},"end":{"line":1720,"column":40}},"id":1130},"1131":{"loc":{"start":{"line":1720,"column":19},"end":{"line":1720,"column":39}},"id":1131},"1132":{"loc":{"start":{"line":1723,"column":12},"end":{"line":1723,"column":22}},"id":1132},"1133":{"loc":{"start":{"line":1724,"column":12},"end":{"line":1724,"column":43}},"id":1133},"1134":{"loc":{"start":{"line":1724,"column":19},"end":{"line":1724,"column":42}},"id":1134},"1135":{"loc":{"start":{"line":1727,"column":12},"end":{"line":1727,"column":22}},"id":1135},"1136":{"loc":{"start":{"line":1728,"column":12},"end":{"line":1728,"column":44}},"id":1136},"1137":{"loc":{"start":{"line":1728,"column":19},"end":{"line":1728,"column":43}},"id":1137},"1138":{"loc":{"start":{"line":1731,"column":12},"end":{"line":1731,"column":22}},"id":1138},"1139":{"loc":{"start":{"line":1732,"column":12},"end":{"line":1732,"column":18}},"id":1139},"1140":{"loc":{"start":{"line":1732,"column":12},"end":{"line":1732,"column":17}},"id":1140},"1141":{"loc":{"start":{"line":1733,"column":12},"end":{"line":1733,"column":63}},"id":1141},"1142":{"loc":{"start":{"line":1733,"column":45},"end":{"line":1733,"column":62}},"id":1142},"1143":{"loc":{"start":{"line":1734,"column":12},"end":{"line":1734,"column":24}},"id":1143},"1144":{"loc":{"start":{"line":1734,"column":12},"end":{"line":1734,"column":23}},"id":1144},"1145":{"loc":{"start":{"line":1735,"column":12},"end":{"line":1735,"column":24}},"id":1145},"1146":{"loc":{"start":{"line":1738,"column":12},"end":{"line":1738,"column":37}},"id":1146},"1147":{"loc":{"start":{"line":1738,"column":12},"end":{"line":1738,"column":22}},"id":1147},"1148":{"loc":{"start":{"line":1738,"column":26},"end":{"line":1738,"column":37}},"id":1148},"1149":{"loc":{"start":{"line":1739,"column":12},"end":{"line":1739,"column":47}},"id":1149},"1150":{"loc":{"start":{"line":1739,"column":19},"end":{"line":1739,"column":46}},"id":1150},"1151":{"loc":{"start":{"line":1739,"column":33},"end":{"line":1739,"column":45}},"id":1151},"1152":{"loc":{"start":{"line":1742,"column":12},"end":{"line":1742,"column":22}},"id":1152},"1153":{"loc":{"start":{"line":1743,"column":12},"end":{"line":1743,"column":18}},"id":1153},"1154":{"loc":{"start":{"line":1743,"column":12},"end":{"line":1743,"column":17}},"id":1154},"1155":{"loc":{"start":{"line":1744,"column":16},"end":{"line":1744,"column":26}},"id":1155},"1156":{"loc":{"start":{"line":1745,"column":16},"end":{"line":1745,"column":53}},"id":1156},"1157":{"loc":{"start":{"line":1745,"column":23},"end":{"line":1745,"column":52}},"id":1157},"1158":{"loc":{"start":{"line":1748,"column":16},"end":{"line":1748,"column":26}},"id":1158},"1159":{"loc":{"start":{"line":1749,"column":16},"end":{"line":1749,"column":54}},"id":1159},"1160":{"loc":{"start":{"line":1749,"column":23},"end":{"line":1749,"column":53}},"id":1160},"1161":{"loc":{"start":{"line":1753,"column":8},"end":{"line":1753,"column":38}},"id":1161},"1162":{"loc":{"start":{"line":1753,"column":15},"end":{"line":1753,"column":37}},"id":1162},"1163":{"loc":{"start":{"line":1753,"column":31},"end":{"line":1753,"column":36}},"id":1163},"1164":{"loc":{"start":{"line":1759,"column":8},"end":{"line":1759,"column":22}},"id":1164},"1165":{"loc":{"start":{"line":1761,"column":8},"end":{"line":1761,"column":20}},"id":1165},"1166":{"loc":{"start":{"line":1761,"column":8},"end":{"line":1761,"column":19}},"id":1166},"1167":{"loc":{"start":{"line":1763,"column":13},"end":{"line":1763,"column":23}},"id":1167},"1168":{"loc":{"start":{"line":1764,"column":19},"end":{"line":1764,"column":33}},"id":1168},"1169":{"loc":{"start":{"line":1765,"column":16},"end":{"line":1765,"column":55}},"id":1169},"1170":{"loc":{"start":{"line":1765,"column":16},"end":{"line":1765,"column":54}},"id":1170},"1171":{"loc":{"start":{"line":1765,"column":26},"end":{"line":1765,"column":53}},"id":1171},"1172":{"loc":{"start":{"line":1766,"column":20},"end":{"line":1766,"column":30}},"id":1172},"1173":{"loc":{"start":{"line":1769,"column":16},"end":{"line":1769,"column":28}},"id":1173},"1174":{"loc":{"start":{"line":1769,"column":16},"end":{"line":1769,"column":27}},"id":1174},"1175":{"loc":{"start":{"line":1773,"column":8},"end":{"line":1773,"column":20}},"id":1175},"1176":{"loc":{"start":{"line":1773,"column":8},"end":{"line":1773,"column":19}},"id":1176},"1177":{"loc":{"start":{"line":1775,"column":8},"end":{"line":1775,"column":20}},"id":1177},"1178":{"loc":{"start":{"line":1779,"column":8},"end":{"line":1779,"column":26}},"id":1178},"1179":{"loc":{"start":{"line":1779,"column":20},"end":{"line":1779,"column":25}},"id":1179},"1180":{"loc":{"start":{"line":1781,"column":13},"end":{"line":1781,"column":36}},"id":1180},"1181":{"loc":{"start":{"line":1782,"column":12},"end":{"line":1782,"column":35}},"id":1181},"1182":{"loc":{"start":{"line":1782,"column":12},"end":{"line":1782,"column":34}},"id":1182},"1183":{"loc":{"start":{"line":1785,"column":8},"end":{"line":1788,"column":10}},"id":1183},"1184":{"loc":{"start":{"line":1792,"column":8},"end":{"line":1797,"column":10}},"id":1184},"1185":{"loc":{"start":{"line":1796,"column":22},"end":{"line":1796,"column":48}},"id":1185},"1186":{"loc":{"start":{"line":1801,"column":8},"end":{"line":1801,"column":27}},"id":1186},"1187":{"loc":{"start":{"line":1803,"column":8},"end":{"line":1803,"column":20}},"id":1187},"1188":{"loc":{"start":{"line":1803,"column":8},"end":{"line":1803,"column":19}},"id":1188},"1189":{"loc":{"start":{"line":1804,"column":8},"end":{"line":1804,"column":37}},"id":1189},"1190":{"loc":{"start":{"line":1804,"column":19},"end":{"line":1804,"column":36}},"id":1190},"1191":{"loc":{"start":{"line":1805,"column":8},"end":{"line":1810,"column":10}},"id":1191},"1192":{"loc":{"start":{"line":1811,"column":8},"end":{"line":1811,"column":20}},"id":1192},"1193":{"loc":{"start":{"line":1811,"column":8},"end":{"line":1811,"column":19}},"id":1193},"1194":{"loc":{"start":{"line":1812,"column":8},"end":{"line":1812,"column":20}},"id":1194},"1195":{"loc":{"start":{"line":1816,"column":8},"end":{"line":1820,"column":10}},"id":1195},"1196":{"loc":{"start":{"line":1819,"column":25},"end":{"line":1819,"column":41}},"id":1196},"1197":{"loc":{"start":{"line":1824,"column":8},"end":{"line":1824,"column":17}},"id":1197},"1198":{"loc":{"start":{"line":1826,"column":8},"end":{"line":1826,"column":29}},"id":1198},"1199":{"loc":{"start":{"line":1826,"column":8},"end":{"line":1826,"column":28}},"id":1199},"1200":{"loc":{"start":{"line":1828,"column":8},"end":{"line":1832,"column":10}},"id":1200},"1201":{"loc":{"start":{"line":1830,"column":20},"end":{"line":1830,"column":49}},"id":1201},"1202":{"loc":{"start":{"line":1834,"column":12},"end":{"line":1834,"column":22}},"id":1202},"1203":{"loc":{"start":{"line":1835,"column":12},"end":{"line":1835,"column":49}},"id":1203},"1204":{"loc":{"start":{"line":1835,"column":32},"end":{"line":1835,"column":48}},"id":1204},"1205":{"loc":{"start":{"line":1838,"column":8},"end":{"line":1838,"column":20}},"id":1205},"1206":{"loc":{"start":{"line":1842,"column":8},"end":{"line":1844,"column":30}},"id":1206},"1207":{"loc":{"start":{"line":1843,"column":20},"end":{"line":1843,"column":31}},"id":1207},"1208":{"loc":{"start":{"line":1846,"column":12},"end":{"line":1846,"column":73}},"id":1208},"1209":{"loc":{"start":{"line":1846,"column":12},"end":{"line":1846,"column":40}},"id":1209},"1210":{"loc":{"start":{"line":1846,"column":44},"end":{"line":1846,"column":73}},"id":1210},"1211":{"loc":{"start":{"line":1847,"column":16},"end":{"line":1847,"column":37}},"id":1211},"1212":{"loc":{"start":{"line":1848,"column":16},"end":{"line":1848,"column":71}},"id":1212},"1213":{"loc":{"start":{"line":1848,"column":16},"end":{"line":1848,"column":70}},"id":1213},"1214":{"loc":{"start":{"line":1850,"column":12},"end":{"line":1850,"column":40}},"id":1214},"1215":{"loc":{"start":{"line":1850,"column":19},"end":{"line":1850,"column":39}},"id":1215},"1216":{"loc":{"start":{"line":1850,"column":33},"end":{"line":1850,"column":38}},"id":1216},"1217":{"loc":{"start":{"line":1853,"column":12},"end":{"line":1853,"column":34}},"id":1217},"1218":{"loc":{"start":{"line":1854,"column":16},"end":{"line":1854,"column":40}},"id":1218},"1219":{"loc":{"start":{"line":1855,"column":16},"end":{"line":1855,"column":49}},"id":1219},"1220":{"loc":{"start":{"line":1855,"column":23},"end":{"line":1855,"column":48}},"id":1220},"1221":{"loc":{"start":{"line":1859,"column":12},"end":{"line":1859,"column":41}},"id":1221},"1222":{"loc":{"start":{"line":1860,"column":12},"end":{"line":1860,"column":18}},"id":1222},"1223":{"loc":{"start":{"line":1860,"column":12},"end":{"line":1860,"column":17}},"id":1223},"1224":{"loc":{"start":{"line":1861,"column":12},"end":{"line":1861,"column":51}},"id":1224},"1225":{"loc":{"start":{"line":1861,"column":26},"end":{"line":1861,"column":50}},"id":1225},"1226":{"loc":{"start":{"line":1862,"column":12},"end":{"line":1862,"column":40}},"id":1226},"1227":{"loc":{"start":{"line":1862,"column":19},"end":{"line":1862,"column":39}},"id":1227},"1228":{"loc":{"start":{"line":1865,"column":12},"end":{"line":1865,"column":22}},"id":1228},"1229":{"loc":{"start":{"line":1866,"column":12},"end":{"line":1866,"column":43}},"id":1229},"1230":{"loc":{"start":{"line":1866,"column":19},"end":{"line":1866,"column":42}},"id":1230},"1231":{"loc":{"start":{"line":1869,"column":12},"end":{"line":1869,"column":22}},"id":1231},"1232":{"loc":{"start":{"line":1870,"column":12},"end":{"line":1870,"column":44}},"id":1232},"1233":{"loc":{"start":{"line":1870,"column":19},"end":{"line":1870,"column":43}},"id":1233},"1234":{"loc":{"start":{"line":1873,"column":12},"end":{"line":1873,"column":37}},"id":1234},"1235":{"loc":{"start":{"line":1873,"column":12},"end":{"line":1873,"column":22}},"id":1235},"1236":{"loc":{"start":{"line":1873,"column":26},"end":{"line":1873,"column":37}},"id":1236},"1237":{"loc":{"start":{"line":1874,"column":12},"end":{"line":1874,"column":47}},"id":1237},"1238":{"loc":{"start":{"line":1874,"column":19},"end":{"line":1874,"column":46}},"id":1238},"1239":{"loc":{"start":{"line":1874,"column":33},"end":{"line":1874,"column":45}},"id":1239},"1240":{"loc":{"start":{"line":1877,"column":8},"end":{"line":1877,"column":38}},"id":1240},"1241":{"loc":{"start":{"line":1877,"column":15},"end":{"line":1877,"column":37}},"id":1241},"1242":{"loc":{"start":{"line":1877,"column":31},"end":{"line":1877,"column":36}},"id":1242},"1243":{"loc":{"start":{"line":1881,"column":8},"end":{"line":1881,"column":21}},"id":1243},"1244":{"loc":{"start":{"line":1881,"column":8},"end":{"line":1881,"column":20}},"id":1244},"1245":{"loc":{"start":{"line":1882,"column":8},"end":{"line":1886,"column":10}},"id":1245},"1246":{"loc":{"start":{"line":1885,"column":21},"end":{"line":1885,"column":43}},"id":1246},"1247":{"loc":{"start":{"line":1890,"column":8},"end":{"line":1890,"column":25}},"id":1247},"1248":{"loc":{"start":{"line":1892,"column":8},"end":{"line":1892,"column":37}},"id":1248},"1249":{"loc":{"start":{"line":1892,"column":17},"end":{"line":1892,"column":36}},"id":1249},"1250":{"loc":{"start":{"line":1893,"column":8},"end":{"line":1893,"column":72}},"id":1250},"1251":{"loc":{"start":{"line":1893,"column":24},"end":{"line":1893,"column":44}},"id":1253},"1252":{"loc":{"start":{"line":1893,"column":47},"end":{"line":1893,"column":71}},"id":1254},"1253":{"loc":{"start":{"line":1893,"column":24},"end":{"line":1893,"column":44}},"id":1253},"1254":{"loc":{"start":{"line":1893,"column":47},"end":{"line":1893,"column":71}},"id":1254},"1255":{"loc":{"start":{"line":1895,"column":15},"end":{"line":1895,"column":29}},"id":1255},"1256":{"loc":{"start":{"line":1896,"column":16},"end":{"line":1896,"column":26}},"id":1256},"1257":{"loc":{"start":{"line":1897,"column":16},"end":{"line":1897,"column":22}},"id":1257},"1258":{"loc":{"start":{"line":1897,"column":16},"end":{"line":1897,"column":21}},"id":1258},"1259":{"loc":{"start":{"line":1898,"column":16},"end":{"line":1898,"column":52}},"id":1259},"1260":{"loc":{"start":{"line":1898,"column":23},"end":{"line":1898,"column":51}},"id":1260},"1261":{"loc":{"start":{"line":1899,"column":23},"end":{"line":1899,"column":33}},"id":1261},"1262":{"loc":{"start":{"line":1900,"column":16},"end":{"line":1900,"column":49}},"id":1262},"1263":{"loc":{"start":{"line":1900,"column":23},"end":{"line":1900,"column":48}},"id":1263},"1264":{"loc":{"start":{"line":1901,"column":23},"end":{"line":1901,"column":34}},"id":1264},"1265":{"loc":{"start":{"line":1902,"column":16},"end":{"line":1902,"column":50}},"id":1265},"1266":{"loc":{"start":{"line":1902,"column":23},"end":{"line":1902,"column":49}},"id":1266},"1267":{"loc":{"start":{"line":1903,"column":23},"end":{"line":1903,"column":33}},"id":1267},"1268":{"loc":{"start":{"line":1904,"column":16},"end":{"line":1904,"column":45}},"id":1268},"1269":{"loc":{"start":{"line":1904,"column":23},"end":{"line":1904,"column":44}},"id":1269},"1270":{"loc":{"start":{"line":1910,"column":8},"end":{"line":1910,"column":20}},"id":1270},"1271":{"loc":{"start":{"line":1914,"column":8},"end":{"line":1914,"column":25}},"id":1271},"1272":{"loc":{"start":{"line":1916,"column":8},"end":{"line":1916,"column":37}},"id":1272},"1273":{"loc":{"start":{"line":1916,"column":17},"end":{"line":1916,"column":36}},"id":1273},"1274":{"loc":{"start":{"line":1917,"column":8},"end":{"line":1917,"column":72}},"id":1274},"1275":{"loc":{"start":{"line":1917,"column":24},"end":{"line":1917,"column":44}},"id":1277},"1276":{"loc":{"start":{"line":1917,"column":47},"end":{"line":1917,"column":71}},"id":1278},"1277":{"loc":{"start":{"line":1917,"column":24},"end":{"line":1917,"column":44}},"id":1277},"1278":{"loc":{"start":{"line":1917,"column":47},"end":{"line":1917,"column":71}},"id":1278},"1279":{"loc":{"start":{"line":1919,"column":15},"end":{"line":1919,"column":29}},"id":1279},"1280":{"loc":{"start":{"line":1920,"column":16},"end":{"line":1920,"column":26}},"id":1280},"1281":{"loc":{"start":{"line":1921,"column":16},"end":{"line":1921,"column":22}},"id":1281},"1282":{"loc":{"start":{"line":1921,"column":16},"end":{"line":1921,"column":21}},"id":1282},"1283":{"loc":{"start":{"line":1922,"column":16},"end":{"line":1922,"column":52}},"id":1283},"1284":{"loc":{"start":{"line":1922,"column":23},"end":{"line":1922,"column":51}},"id":1284},"1285":{"loc":{"start":{"line":1923,"column":23},"end":{"line":1923,"column":33}},"id":1285},"1286":{"loc":{"start":{"line":1924,"column":16},"end":{"line":1924,"column":49}},"id":1286},"1287":{"loc":{"start":{"line":1924,"column":23},"end":{"line":1924,"column":48}},"id":1287},"1288":{"loc":{"start":{"line":1925,"column":23},"end":{"line":1925,"column":34}},"id":1288},"1289":{"loc":{"start":{"line":1926,"column":16},"end":{"line":1926,"column":50}},"id":1289},"1290":{"loc":{"start":{"line":1926,"column":23},"end":{"line":1926,"column":49}},"id":1290},"1291":{"loc":{"start":{"line":1932,"column":8},"end":{"line":1932,"column":20}},"id":1291},"1292":{"loc":{"start":{"line":1938,"column":8},"end":{"line":1938,"column":58}},"id":1292},"1293":{"loc":{"start":{"line":1938,"column":19},"end":{"line":1938,"column":57}},"id":1293},"1294":{"loc":{"start":{"line":1940,"column":12},"end":{"line":1940,"column":65}},"id":1294},"1295":{"loc":{"start":{"line":1940,"column":12},"end":{"line":1940,"column":40}},"id":1295},"1296":{"loc":{"start":{"line":1940,"column":13},"end":{"line":1940,"column":24}},"id":1296},"1297":{"loc":{"start":{"line":1940,"column":28},"end":{"line":1940,"column":39}},"id":1297},"1298":{"loc":{"start":{"line":1940,"column":45},"end":{"line":1940,"column":65}},"id":1298},"1299":{"loc":{"start":{"line":1942,"column":16},"end":{"line":1942,"column":88}},"id":1299},"1300":{"loc":{"start":{"line":1942,"column":16},"end":{"line":1942,"column":57}},"id":1300},"1301":{"loc":{"start":{"line":1942,"column":26},"end":{"line":1942,"column":57}},"id":1301},"1302":{"loc":{"start":{"line":1942,"column":61},"end":{"line":1942,"column":88}},"id":1302},"1303":{"loc":{"start":{"line":1943,"column":16},"end":{"line":1943,"column":58}},"id":1303},"1304":{"loc":{"start":{"line":1943,"column":16},"end":{"line":1943,"column":57}},"id":1304},"1305":{"loc":{"start":{"line":1945,"column":12},"end":{"line":1950,"column":14}},"id":1305},"1306":{"loc":{"start":{"line":1947,"column":29},"end":{"line":1947,"column":31}},"id":1306},"1307":{"loc":{"start":{"line":1953,"column":8},"end":{"line":1953,"column":20}},"id":1307},"1308":{"loc":{"start":{"line":1959,"column":8},"end":{"line":1959,"column":24}},"id":1308},"1309":{"loc":{"start":{"line":1961,"column":12},"end":{"line":1961,"column":38}},"id":1309},"1310":{"loc":{"start":{"line":1961,"column":12},"end":{"line":1961,"column":23}},"id":1310},"1311":{"loc":{"start":{"line":1961,"column":27},"end":{"line":1961,"column":38}},"id":1311},"1312":{"loc":{"start":{"line":1962,"column":12},"end":{"line":1962,"column":26}},"id":1312},"1313":{"loc":{"start":{"line":1962,"column":20},"end":{"line":1962,"column":25}},"id":1313},"1314":{"loc":{"start":{"line":1963,"column":12},"end":{"line":1963,"column":42}},"id":1314},"1315":{"loc":{"start":{"line":1963,"column":19},"end":{"line":1963,"column":41}},"id":1315},"1316":{"loc":{"start":{"line":1965,"column":16},"end":{"line":1965,"column":88}},"id":1316},"1317":{"loc":{"start":{"line":1965,"column":16},"end":{"line":1965,"column":57}},"id":1317},"1318":{"loc":{"start":{"line":1965,"column":26},"end":{"line":1965,"column":57}},"id":1318},"1319":{"loc":{"start":{"line":1965,"column":61},"end":{"line":1965,"column":88}},"id":1319},"1320":{"loc":{"start":{"line":1966,"column":16},"end":{"line":1966,"column":57}},"id":1320},"1321":{"loc":{"start":{"line":1966,"column":16},"end":{"line":1966,"column":56}},"id":1321},"1322":{"loc":{"start":{"line":1968,"column":12},"end":{"line":1973,"column":14}},"id":1322},"1323":{"loc":{"start":{"line":1974,"column":12},"end":{"line":1974,"column":24}},"id":1323},"1324":{"loc":{"start":{"line":1977,"column":12},"end":{"line":1977,"column":64}},"id":1324},"1325":{"loc":{"start":{"line":1977,"column":12},"end":{"line":1977,"column":50}},"id":1325},"1326":{"loc":{"start":{"line":1977,"column":12},"end":{"line":1977,"column":36}},"id":1326},"1327":{"loc":{"start":{"line":1977,"column":12},"end":{"line":1977,"column":22}},"id":1327},"1328":{"loc":{"start":{"line":1977,"column":26},"end":{"line":1977,"column":36}},"id":1328},"1329":{"loc":{"start":{"line":1977,"column":40},"end":{"line":1977,"column":50}},"id":1329},"1330":{"loc":{"start":{"line":1977,"column":54},"end":{"line":1977,"column":64}},"id":1330},"1331":{"loc":{"start":{"line":1978,"column":12},"end":{"line":1982,"column":14}},"id":1331},"1332":{"loc":{"start":{"line":1980,"column":29},"end":{"line":1980,"column":31}},"id":1332},"1333":{"loc":{"start":{"line":1981,"column":26},"end":{"line":1981,"column":48}},"id":1333},"1334":{"loc":{"start":{"line":1983,"column":12},"end":{"line":1983,"column":24}},"id":1334},"1335":{"loc":{"start":{"line":1986,"column":12},"end":{"line":1986,"column":84}},"id":1335},"1336":{"loc":{"start":{"line":1986,"column":12},"end":{"line":1986,"column":58}},"id":1336},"1337":{"loc":{"start":{"line":1986,"column":12},"end":{"line":1986,"column":34}},"id":1337},"1338":{"loc":{"start":{"line":1986,"column":38},"end":{"line":1986,"column":58}},"id":1338},"1339":{"loc":{"start":{"line":1986,"column":62},"end":{"line":1986,"column":84}},"id":1339},"1340":{"loc":{"start":{"line":1987,"column":12},"end":{"line":1991,"column":14}},"id":1340},"1341":{"loc":{"start":{"line":1989,"column":29},"end":{"line":1989,"column":31}},"id":1341},"1342":{"loc":{"start":{"line":1990,"column":26},"end":{"line":1990,"column":48}},"id":1342},"1343":{"loc":{"start":{"line":1992,"column":16},"end":{"line":1992,"column":96}},"id":1343},"1344":{"loc":{"start":{"line":1992,"column":16},"end":{"line":1992,"column":52}},"id":1344},"1345":{"loc":{"start":{"line":1992,"column":26},"end":{"line":1992,"column":52}},"id":1345},"1346":{"loc":{"start":{"line":1992,"column":56},"end":{"line":1992,"column":96}},"id":1346},"1347":{"loc":{"start":{"line":1993,"column":16},"end":{"line":1993,"column":62}},"id":1347},"1348":{"loc":{"start":{"line":1993,"column":16},"end":{"line":1993,"column":61}},"id":1348},"1349":{"loc":{"start":{"line":1995,"column":12},"end":{"line":1995,"column":24}},"id":1349},"1350":{"loc":{"start":{"line":1998,"column":8},"end":{"line":1998,"column":40}},"id":1350},"1351":{"loc":{"start":{"line":1998,"column":15},"end":{"line":1998,"column":39}},"id":1351},"1352":{"loc":{"start":{"line":2004,"column":8},"end":{"line":2004,"column":42}},"id":1352},"1353":{"loc":{"start":{"line":2004,"column":19},"end":{"line":2004,"column":41}},"id":1353},"1354":{"loc":{"start":{"line":2006,"column":15},"end":{"line":2006,"column":53}},"id":1354},"1355":{"loc":{"start":{"line":2006,"column":15},"end":{"line":2006,"column":39}},"id":1355},"1356":{"loc":{"start":{"line":2006,"column":15},"end":{"line":2006,"column":25}},"id":1356},"1357":{"loc":{"start":{"line":2006,"column":29},"end":{"line":2006,"column":39}},"id":1357},"1358":{"loc":{"start":{"line":2006,"column":43},"end":{"line":2006,"column":53}},"id":1358},"1359":{"loc":{"start":{"line":2007,"column":12},"end":{"line":2012,"column":14}},"id":1359},"1360":{"loc":{"start":{"line":2009,"column":29},"end":{"line":2009,"column":31}},"id":1360},"1361":{"loc":{"start":{"line":2011,"column":23},"end":{"line":2011,"column":45}},"id":1361},"1362":{"loc":{"start":{"line":2015,"column":8},"end":{"line":2015,"column":20}},"id":1362},"1363":{"loc":{"start":{"line":2021,"column":8},"end":{"line":2021,"column":51}},"id":1363},"1364":{"loc":{"start":{"line":2021,"column":19},"end":{"line":2021,"column":50}},"id":1364},"1365":{"loc":{"start":{"line":2023,"column":15},"end":{"line":2023,"column":39}},"id":1365},"1366":{"loc":{"start":{"line":2023,"column":15},"end":{"line":2023,"column":25}},"id":1366},"1367":{"loc":{"start":{"line":2023,"column":29},"end":{"line":2023,"column":39}},"id":1367},"1368":{"loc":{"start":{"line":2024,"column":12},"end":{"line":2029,"column":14}},"id":1368},"1369":{"loc":{"start":{"line":2026,"column":29},"end":{"line":2026,"column":31}},"id":1369},"1370":{"loc":{"start":{"line":2028,"column":23},"end":{"line":2028,"column":54}},"id":1370},"1371":{"loc":{"start":{"line":2032,"column":8},"end":{"line":2032,"column":20}},"id":1371},"1372":{"loc":{"start":{"line":2038,"column":8},"end":{"line":2038,"column":45}},"id":1372},"1373":{"loc":{"start":{"line":2038,"column":19},"end":{"line":2038,"column":44}},"id":1373},"1374":{"loc":{"start":{"line":2040,"column":15},"end":{"line":2040,"column":57}},"id":1374},"1375":{"loc":{"start":{"line":2040,"column":15},"end":{"line":2040,"column":41}},"id":1375},"1376":{"loc":{"start":{"line":2040,"column":15},"end":{"line":2040,"column":26}},"id":1376},"1377":{"loc":{"start":{"line":2040,"column":30},"end":{"line":2040,"column":41}},"id":1377},"1378":{"loc":{"start":{"line":2040,"column":45},"end":{"line":2040,"column":57}},"id":1378},"1379":{"loc":{"start":{"line":2041,"column":12},"end":{"line":2046,"column":14}},"id":1379},"1380":{"loc":{"start":{"line":2043,"column":29},"end":{"line":2043,"column":31}},"id":1380},"1381":{"loc":{"start":{"line":2045,"column":23},"end":{"line":2045,"column":48}},"id":1381},"1382":{"loc":{"start":{"line":2049,"column":8},"end":{"line":2049,"column":20}},"id":1382},"1383":{"loc":{"start":{"line":2054,"column":8},"end":{"line":2054,"column":34}},"id":1383},"1384":{"loc":{"start":{"line":2056,"column":8},"end":{"line":2056,"column":40}},"id":1384},"1385":{"loc":{"start":{"line":2057,"column":8},"end":{"line":2057,"column":29}},"id":1385},"1386":{"loc":{"start":{"line":2058,"column":8},"end":{"line":2058,"column":38}},"id":1386},"1387":{"loc":{"start":{"line":2058,"column":15},"end":{"line":2058,"column":37}},"id":1387},"1388":{"loc":{"start":{"line":2059,"column":8},"end":{"line":2059,"column":40}},"id":1388},"1389":{"loc":{"start":{"line":2061,"column":12},"end":{"line":2061,"column":66}},"id":1389},"1390":{"loc":{"start":{"line":2061,"column":12},"end":{"line":2061,"column":51}},"id":1390},"1391":{"loc":{"start":{"line":2061,"column":12},"end":{"line":2061,"column":36}},"id":1391},"1392":{"loc":{"start":{"line":2061,"column":12},"end":{"line":2061,"column":22}},"id":1392},"1393":{"loc":{"start":{"line":2061,"column":26},"end":{"line":2061,"column":36}},"id":1393},"1394":{"loc":{"start":{"line":2061,"column":40},"end":{"line":2061,"column":51}},"id":1394},"1395":{"loc":{"start":{"line":2061,"column":55},"end":{"line":2061,"column":66}},"id":1395},"1396":{"loc":{"start":{"line":2062,"column":12},"end":{"line":2067,"column":14}},"id":1396},"1397":{"loc":{"start":{"line":2064,"column":29},"end":{"line":2064,"column":31}},"id":1397},"1398":{"loc":{"start":{"line":2066,"column":23},"end":{"line":2066,"column":50}},"id":1398},"1399":{"loc":{"start":{"line":2068,"column":19},"end":{"line":2068,"column":54}},"id":1399},"1400":{"loc":{"start":{"line":2068,"column":36},"end":{"line":2068,"column":54}},"id":1400},"1401":{"loc":{"start":{"line":2069,"column":12},"end":{"line":2069,"column":18}},"id":1401},"1402":{"loc":{"start":{"line":2069,"column":12},"end":{"line":2069,"column":17}},"id":1402},"1403":{"loc":{"start":{"line":2070,"column":12},"end":{"line":2075,"column":14}},"id":1403},"1404":{"loc":{"start":{"line":2074,"column":23},"end":{"line":2074,"column":50}},"id":1404},"1405":{"loc":{"start":{"line":2076,"column":19},"end":{"line":2076,"column":45}},"id":1405},"1406":{"loc":{"start":{"line":2077,"column":12},"end":{"line":2077,"column":18}},"id":1406},"1407":{"loc":{"start":{"line":2077,"column":12},"end":{"line":2077,"column":17}},"id":1407},"1408":{"loc":{"start":{"line":2078,"column":12},"end":{"line":2083,"column":14}},"id":1408},"1409":{"loc":{"start":{"line":2082,"column":23},"end":{"line":2082,"column":50}},"id":1409},"1410":{"loc":{"start":{"line":2086,"column":8},"end":{"line":2086,"column":20}},"id":1410},"1411":{"loc":{"start":{"line":2092,"column":8},"end":{"line":2092,"column":47}},"id":1411},"1412":{"loc":{"start":{"line":2092,"column":19},"end":{"line":2092,"column":46}},"id":1412},"1413":{"loc":{"start":{"line":2094,"column":15},"end":{"line":2094,"column":168}},"id":1413},"1414":{"loc":{"start":{"line":2094,"column":15},"end":{"line":2094,"column":152}},"id":1414},"1415":{"loc":{"start":{"line":2094,"column":15},"end":{"line":2094,"column":136}},"id":1415},"1416":{"loc":{"start":{"line":2094,"column":15},"end":{"line":2094,"column":121}},"id":1416},"1417":{"loc":{"start":{"line":2094,"column":15},"end":{"line":2094,"column":106}},"id":1417},"1418":{"loc":{"start":{"line":2094,"column":17},"end":{"line":2094,"column":37}},"id":1418},"1419":{"loc":{"start":{"line":2094,"column":41},"end":{"line":2094,"column":105}},"id":1419},"1420":{"loc":{"start":{"line":2094,"column":42},"end":{"line":2094,"column":70}},"id":1420},"1421":{"loc":{"start":{"line":2094,"column":74},"end":{"line":2094,"column":104}},"id":1421},"1422":{"loc":{"start":{"line":2094,"column":110},"end":{"line":2094,"column":121}},"id":1422},"1423":{"loc":{"start":{"line":2094,"column":125},"end":{"line":2094,"column":136}},"id":1423},"1424":{"loc":{"start":{"line":2094,"column":140},"end":{"line":2094,"column":152}},"id":1424},"1425":{"loc":{"start":{"line":2094,"column":156},"end":{"line":2094,"column":168}},"id":1425},"1426":{"loc":{"start":{"line":2095,"column":12},"end":{"line":2100,"column":14}},"id":1426},"1427":{"loc":{"start":{"line":2097,"column":29},"end":{"line":2097,"column":31}},"id":1427},"1428":{"loc":{"start":{"line":2099,"column":23},"end":{"line":2099,"column":50}},"id":1428},"1429":{"loc":{"start":{"line":2103,"column":8},"end":{"line":2103,"column":20}},"id":1429},"1430":{"loc":{"start":{"line":2109,"column":8},"end":{"line":2109,"column":45}},"id":1430},"1431":{"loc":{"start":{"line":2109,"column":19},"end":{"line":2109,"column":44}},"id":1431},"1432":{"loc":{"start":{"line":2111,"column":15},"end":{"line":2111,"column":25}},"id":1432},"1433":{"loc":{"start":{"line":2112,"column":12},"end":{"line":2112,"column":18}},"id":1433},"1434":{"loc":{"start":{"line":2112,"column":12},"end":{"line":2112,"column":17}},"id":1434},"1435":{"loc":{"start":{"line":2113,"column":12},"end":{"line":2118,"column":14}},"id":1435},"1436":{"loc":{"start":{"line":2117,"column":23},"end":{"line":2117,"column":48}},"id":1436},"1437":{"loc":{"start":{"line":2121,"column":8},"end":{"line":2121,"column":20}},"id":1437},"1438":{"loc":{"start":{"line":2125,"column":8},"end":{"line":2125,"column":47}},"id":1438},"1439":{"loc":{"start":{"line":2125,"column":19},"end":{"line":2125,"column":46}},"id":1439},"1440":{"loc":{"start":{"line":2127,"column":15},"end":{"line":2127,"column":25}},"id":1440},"1441":{"loc":{"start":{"line":2128,"column":12},"end":{"line":2128,"column":18}},"id":1441},"1442":{"loc":{"start":{"line":2128,"column":12},"end":{"line":2128,"column":17}},"id":1442},"1443":{"loc":{"start":{"line":2129,"column":12},"end":{"line":2134,"column":14}},"id":1443},"1444":{"loc":{"start":{"line":2133,"column":23},"end":{"line":2133,"column":50}},"id":1444},"1445":{"loc":{"start":{"line":2137,"column":8},"end":{"line":2137,"column":20}},"id":1445},"1446":{"loc":{"start":{"line":2141,"column":8},"end":{"line":2141,"column":46}},"id":1446},"1447":{"loc":{"start":{"line":2141,"column":19},"end":{"line":2141,"column":45}},"id":1447},"1448":{"loc":{"start":{"line":2143,"column":15},"end":{"line":2143,"column":25}},"id":1448},"1449":{"loc":{"start":{"line":2144,"column":12},"end":{"line":2144,"column":18}},"id":1449},"1450":{"loc":{"start":{"line":2144,"column":12},"end":{"line":2144,"column":17}},"id":1450},"1451":{"loc":{"start":{"line":2145,"column":12},"end":{"line":2150,"column":14}},"id":1451},"1452":{"loc":{"start":{"line":2149,"column":23},"end":{"line":2149,"column":49}},"id":1452},"1453":{"loc":{"start":{"line":2153,"column":8},"end":{"line":2153,"column":20}},"id":1453},"1454":{"loc":{"start":{"line":2159,"column":8},"end":{"line":2159,"column":47}},"id":1454},"1455":{"loc":{"start":{"line":2159,"column":19},"end":{"line":2159,"column":46}},"id":1455},"1456":{"loc":{"start":{"line":2161,"column":15},"end":{"line":2161,"column":26}},"id":1456},"1457":{"loc":{"start":{"line":2162,"column":12},"end":{"line":2162,"column":18}},"id":1457},"1458":{"loc":{"start":{"line":2162,"column":12},"end":{"line":2162,"column":17}},"id":1458},"1459":{"loc":{"start":{"line":2163,"column":12},"end":{"line":2168,"column":14}},"id":1459},"1460":{"loc":{"start":{"line":2167,"column":23},"end":{"line":2167,"column":50}},"id":1460},"1461":{"loc":{"start":{"line":2171,"column":8},"end":{"line":2171,"column":20}},"id":1461},"1462":{"loc":{"start":{"line":2175,"column":8},"end":{"line":2175,"column":47}},"id":1462},"1463":{"loc":{"start":{"line":2175,"column":19},"end":{"line":2175,"column":46}},"id":1463},"1464":{"loc":{"start":{"line":2177,"column":15},"end":{"line":2177,"column":26}},"id":1464},"1465":{"loc":{"start":{"line":2178,"column":12},"end":{"line":2178,"column":18}},"id":1465},"1466":{"loc":{"start":{"line":2178,"column":12},"end":{"line":2178,"column":17}},"id":1466},"1467":{"loc":{"start":{"line":2179,"column":12},"end":{"line":2184,"column":14}},"id":1467},"1468":{"loc":{"start":{"line":2183,"column":23},"end":{"line":2183,"column":50}},"id":1468},"1469":{"loc":{"start":{"line":2187,"column":8},"end":{"line":2187,"column":20}},"id":1469},"1470":{"loc":{"start":{"line":2193,"column":8},"end":{"line":2193,"column":46}},"id":1470},"1471":{"loc":{"start":{"line":2195,"column":8},"end":{"line":2195,"column":42}},"id":1471},"1472":{"loc":{"start":{"line":2195,"column":15},"end":{"line":2195,"column":41}},"id":1472},"1473":{"loc":{"start":{"line":2197,"column":12},"end":{"line":2197,"column":22}},"id":1473},"1474":{"loc":{"start":{"line":2198,"column":12},"end":{"line":2198,"column":18}},"id":1474},"1475":{"loc":{"start":{"line":2198,"column":12},"end":{"line":2198,"column":17}},"id":1475},"1476":{"loc":{"start":{"line":2199,"column":12},"end":{"line":2199,"column":44}},"id":1476},"1477":{"loc":{"start":{"line":2200,"column":12},"end":{"line":2200,"column":33}},"id":1477},"1478":{"loc":{"start":{"line":2201,"column":12},"end":{"line":2201,"column":53}},"id":1478},"1479":{"loc":{"start":{"line":2201,"column":25},"end":{"line":2201,"column":52}},"id":1479},"1480":{"loc":{"start":{"line":2202,"column":12},"end":{"line":2202,"column":44}},"id":1480},"1481":{"loc":{"start":{"line":2203,"column":12},"end":{"line":2203,"column":24}},"id":1481},"1482":{"loc":{"start":{"line":2203,"column":12},"end":{"line":2203,"column":23}},"id":1482},"1483":{"loc":{"start":{"line":2205,"column":12},"end":{"line":2210,"column":14}},"id":1483},"1484":{"loc":{"start":{"line":2209,"column":27},"end":{"line":2209,"column":54}},"id":1484},"1485":{"loc":{"start":{"line":2213,"column":8},"end":{"line":2213,"column":20}},"id":1485},"1486":{"loc":{"start":{"line":2219,"column":8},"end":{"line":2219,"column":38}},"id":1486},"1487":{"loc":{"start":{"line":2222,"column":12},"end":{"line":2222,"column":60}},"id":1487},"1488":{"loc":{"start":{"line":2222,"column":12},"end":{"line":2222,"column":59}},"id":1488},"1489":{"loc":{"start":{"line":2225,"column":12},"end":{"line":2225,"column":49}},"id":1489},"1490":{"loc":{"start":{"line":2226,"column":12},"end":{"line":2226,"column":45}},"id":1490},"1491":{"loc":{"start":{"line":2227,"column":54},"end":{"line":2227,"column":61}},"id":1491},"1492":{"loc":{"start":{"line":2228,"column":16},"end":{"line":2228,"column":46}},"id":1492},"1493":{"loc":{"start":{"line":2229,"column":20},"end":{"line":2229,"column":44}},"id":1493},"1494":{"loc":{"start":{"line":2230,"column":20},"end":{"line":2230,"column":68}},"id":1494},"1495":{"loc":{"start":{"line":2230,"column":20},"end":{"line":2230,"column":67}},"id":1495},"1496":{"loc":{"start":{"line":2232,"column":16},"end":{"line":2232,"column":70}},"id":1496},"1497":{"loc":{"start":{"line":2232,"column":16},"end":{"line":2232,"column":69}},"id":1497},"1498":{"loc":{"start":{"line":2234,"column":19},"end":{"line":2234,"column":55}},"id":1498},"1499":{"loc":{"start":{"line":2235,"column":12},"end":{"line":2235,"column":44}},"id":1499},"1500":{"loc":{"start":{"line":2236,"column":52},"end":{"line":2236,"column":59}},"id":1500},"1501":{"loc":{"start":{"line":2237,"column":16},"end":{"line":2237,"column":43}},"id":1501},"1502":{"loc":{"start":{"line":2239,"column":20},"end":{"line":2239,"column":67}},"id":1502},"1503":{"loc":{"start":{"line":2239,"column":20},"end":{"line":2239,"column":66}},"id":1503},"1504":{"loc":{"start":{"line":2242,"column":19},"end":{"line":2242,"column":50}},"id":1504},"1505":{"loc":{"start":{"line":2243,"column":16},"end":{"line":2243,"column":43}},"id":1505},"1506":{"loc":{"start":{"line":2244,"column":16},"end":{"line":2244,"column":64}},"id":1506},"1507":{"loc":{"start":{"line":2244,"column":16},"end":{"line":2244,"column":63}},"id":1507},"1508":{"loc":{"start":{"line":2247,"column":16},"end":{"line":2247,"column":130}},"id":1508},"1509":{"loc":{"start":{"line":2247,"column":16},"end":{"line":2247,"column":92}},"id":1509},"1510":{"loc":{"start":{"line":2247,"column":16},"end":{"line":2247,"column":53}},"id":1510},"1511":{"loc":{"start":{"line":2247,"column":57},"end":{"line":2247,"column":92}},"id":1511},"1512":{"loc":{"start":{"line":2247,"column":96},"end":{"line":2247,"column":130}},"id":1512},"1513":{"loc":{"start":{"line":2248,"column":16},"end":{"line":2248,"column":64}},"id":1513},"1514":{"loc":{"start":{"line":2248,"column":16},"end":{"line":2248,"column":63}},"id":1514},"1515":{"loc":{"start":{"line":2254,"column":8},"end":{"line":2254,"column":17}},"id":1515},"1516":{"loc":{"start":{"line":2256,"column":8},"end":{"line":2256,"column":44}},"id":1516},"1517":{"loc":{"start":{"line":2256,"column":15},"end":{"line":2256,"column":43}},"id":1517},"1518":{"loc":{"start":{"line":2258,"column":12},"end":{"line":2258,"column":25}},"id":1518},"1519":{"loc":{"start":{"line":2260,"column":16},"end":{"line":2260,"column":73}},"id":1519},"1520":{"loc":{"start":{"line":2260,"column":16},"end":{"line":2260,"column":48}},"id":1520},"1521":{"loc":{"start":{"line":2260,"column":53},"end":{"line":2260,"column":73}},"id":1521},"1522":{"loc":{"start":{"line":2261,"column":16},"end":{"line":2261,"column":64}},"id":1522},"1523":{"loc":{"start":{"line":2261,"column":16},"end":{"line":2261,"column":63}},"id":1523},"1524":{"loc":{"start":{"line":2265,"column":16},"end":{"line":2265,"column":88}},"id":1524},"1525":{"loc":{"start":{"line":2265,"column":16},"end":{"line":2265,"column":57}},"id":1525},"1526":{"loc":{"start":{"line":2265,"column":26},"end":{"line":2265,"column":57}},"id":1526},"1527":{"loc":{"start":{"line":2265,"column":61},"end":{"line":2265,"column":88}},"id":1527},"1528":{"loc":{"start":{"line":2266,"column":16},"end":{"line":2266,"column":61}},"id":1528},"1529":{"loc":{"start":{"line":2266,"column":16},"end":{"line":2266,"column":60}},"id":1529},"1530":{"loc":{"start":{"line":2270,"column":16},"end":{"line":2270,"column":93}},"id":1530},"1531":{"loc":{"start":{"line":2270,"column":16},"end":{"line":2270,"column":53}},"id":1531},"1532":{"loc":{"start":{"line":2270,"column":57},"end":{"line":2270,"column":93}},"id":1532},"1533":{"loc":{"start":{"line":2271,"column":16},"end":{"line":2271,"column":60}},"id":1533},"1534":{"loc":{"start":{"line":2271,"column":16},"end":{"line":2271,"column":59}},"id":1534},"1535":{"loc":{"start":{"line":2274,"column":12},"end":{"line":2279,"column":14}},"id":1535},"1536":{"loc":{"start":{"line":2276,"column":29},"end":{"line":2276,"column":31}},"id":1536},"1537":{"loc":{"start":{"line":2278,"column":23},"end":{"line":2278,"column":50}},"id":1537},"1538":{"loc":{"start":{"line":2282,"column":8},"end":{"line":2282,"column":20}},"id":1538},"1539":{"loc":{"start":{"line":2288,"column":8},"end":{"line":2288,"column":47}},"id":1539},"1540":{"loc":{"start":{"line":2288,"column":19},"end":{"line":2288,"column":46}},"id":1540},"1541":{"loc":{"start":{"line":2290,"column":12},"end":{"line":2290,"column":22}},"id":1541},"1542":{"loc":{"start":{"line":2291,"column":12},"end":{"line":2294,"column":14}},"id":1542},"1543":{"loc":{"start":{"line":2296,"column":19},"end":{"line":2296,"column":33}},"id":1543},"1544":{"loc":{"start":{"line":2297,"column":21},"end":{"line":2297,"column":31}},"id":1544},"1545":{"loc":{"start":{"line":2300,"column":16},"end":{"line":2300,"column":22}},"id":1545},"1546":{"loc":{"start":{"line":2300,"column":16},"end":{"line":2300,"column":21}},"id":1546},"1547":{"loc":{"start":{"line":2301,"column":16},"end":{"line":2301,"column":67}},"id":1547},"1548":{"loc":{"start":{"line":2301,"column":16},"end":{"line":2301,"column":66}},"id":1548},"1549":{"loc":{"start":{"line":2301,"column":38},"end":{"line":2301,"column":65}},"id":1549},"1550":{"loc":{"start":{"line":2305,"column":8},"end":{"line":2305,"column":20}},"id":1550},"1551":{"loc":{"start":{"line":2311,"column":8},"end":{"line":2312,"column":22}},"id":1551},"1552":{"loc":{"start":{"line":2314,"column":15},"end":{"line":2314,"column":29}},"id":1552},"1553":{"loc":{"start":{"line":2315,"column":16},"end":{"line":2315,"column":26}},"id":1553},"1554":{"loc":{"start":{"line":2318,"column":12},"end":{"line":2318,"column":45}},"id":1554},"1555":{"loc":{"start":{"line":2318,"column":24},"end":{"line":2318,"column":44}},"id":1555},"1556":{"loc":{"start":{"line":2319,"column":16},"end":{"line":2319,"column":48}},"id":1556},"1557":{"loc":{"start":{"line":2322,"column":12},"end":{"line":2322,"column":33}},"id":1557},"1558":{"loc":{"start":{"line":2322,"column":12},"end":{"line":2322,"column":32}},"id":1558},"1559":{"loc":{"start":{"line":2325,"column":8},"end":{"line":2325,"column":20}},"id":1559},"1560":{"loc":{"start":{"line":2329,"column":8},"end":{"line":2329,"column":18}},"id":1560},"1561":{"loc":{"start":{"line":2331,"column":8},"end":{"line":2331,"column":20}},"id":1561},"1562":{"loc":{"start":{"line":2331,"column":8},"end":{"line":2331,"column":19}},"id":1562},"1563":{"loc":{"start":{"line":2333,"column":8},"end":{"line":2333,"column":37}},"id":1563},"1564":{"loc":{"start":{"line":2333,"column":16},"end":{"line":2333,"column":36}},"id":1564},"1565":{"loc":{"start":{"line":2335,"column":8},"end":{"line":2335,"column":20}},"id":1565},"1566":{"loc":{"start":{"line":2335,"column":8},"end":{"line":2335,"column":19}},"id":1566},"1567":{"loc":{"start":{"line":2337,"column":8},"end":{"line":2340,"column":10}},"id":1567},"1568":{"loc":{"start":{"line":2346,"column":8},"end":{"line":2346,"column":26}},"id":1568},"1569":{"loc":{"start":{"line":2346,"column":20},"end":{"line":2346,"column":25}},"id":1569},"1570":{"loc":{"start":{"line":2348,"column":12},"end":{"line":2348,"column":43}},"id":1570},"1571":{"loc":{"start":{"line":2349,"column":12},"end":{"line":2349,"column":35}},"id":1571},"1572":{"loc":{"start":{"line":2349,"column":12},"end":{"line":2349,"column":34}},"id":1572},"1573":{"loc":{"start":{"line":2352,"column":8},"end":{"line":2355,"column":10}},"id":1573},"1574":{"loc":{"start":{"line":2359,"column":8},"end":{"line":2360,"column":24}},"id":1574},"1575":{"loc":{"start":{"line":2359,"column":17},"end":{"line":2359,"column":42}},"id":1575},"1576":{"loc":{"start":{"line":2363,"column":12},"end":{"line":2363,"column":47}},"id":1576},"1577":{"loc":{"start":{"line":2363,"column":22},"end":{"line":2363,"column":47}},"id":1577},"1578":{"loc":{"start":{"line":2364,"column":12},"end":{"line":2364,"column":59}},"id":1578},"1579":{"loc":{"start":{"line":2364,"column":12},"end":{"line":2364,"column":58}},"id":1579},"1580":{"loc":{"start":{"line":2367,"column":12},"end":{"line":2367,"column":28}},"id":1580},"1581":{"loc":{"start":{"line":2368,"column":12},"end":{"line":2368,"column":24}},"id":1581},"1582":{"loc":{"start":{"line":2368,"column":12},"end":{"line":2368,"column":23}},"id":1582},"1583":{"loc":{"start":{"line":2369,"column":12},"end":{"line":2369,"column":47}},"id":1583},"1584":{"loc":{"start":{"line":2369,"column":19},"end":{"line":2369,"column":46}},"id":1584},"1585":{"loc":{"start":{"line":2370,"column":19},"end":{"line":2370,"column":29}},"id":1585},"1586":{"loc":{"start":{"line":2371,"column":12},"end":{"line":2371,"column":18}},"id":1586},"1587":{"loc":{"start":{"line":2371,"column":12},"end":{"line":2371,"column":17}},"id":1587},"1588":{"loc":{"start":{"line":2372,"column":12},"end":{"line":2372,"column":47}},"id":1588},"1589":{"loc":{"start":{"line":2372,"column":19},"end":{"line":2372,"column":46}},"id":1589},"1590":{"loc":{"start":{"line":2375,"column":8},"end":{"line":2379,"column":10}},"id":1590},"1591":{"loc":{"start":{"line":2383,"column":8},"end":{"line":2383,"column":22}},"id":1591},"1592":{"loc":{"start":{"line":2385,"column":15},"end":{"line":2385,"column":29}},"id":1592},"1593":{"loc":{"start":{"line":2386,"column":12},"end":{"line":2386,"column":54}},"id":1593},"1594":{"loc":{"start":{"line":2386,"column":12},"end":{"line":2386,"column":53}},"id":1594},"1595":{"loc":{"start":{"line":2386,"column":22},"end":{"line":2386,"column":52}},"id":1595},"1596":{"loc":{"start":{"line":2387,"column":17},"end":{"line":2387,"column":27}},"id":1596},"1597":{"loc":{"start":{"line":2390,"column":12},"end":{"line":2390,"column":18}},"id":1597},"1598":{"loc":{"start":{"line":2390,"column":12},"end":{"line":2390,"column":17}},"id":1598},"1599":{"loc":{"start":{"line":2393,"column":8},"end":{"line":2393,"column":20}},"id":1599},"1600":{"loc":{"start":{"line":2397,"column":8},"end":{"line":2397,"column":25}},"id":1600},"1601":{"loc":{"start":{"line":2399,"column":8},"end":{"line":2399,"column":29}},"id":1601},"1602":{"loc":{"start":{"line":2399,"column":8},"end":{"line":2399,"column":28}},"id":1602},"1603":{"loc":{"start":{"line":2401,"column":8},"end":{"line":2401,"column":54}},"id":1603},"1604":{"loc":{"start":{"line":2401,"column":23},"end":{"line":2401,"column":53}},"id":1604},"1605":{"loc":{"start":{"line":2403,"column":8},"end":{"line":2403,"column":27}},"id":1605},"1606":{"loc":{"start":{"line":2403,"column":8},"end":{"line":2403,"column":26}},"id":1606},"1607":{"loc":{"start":{"line":2405,"column":8},"end":{"line":2409,"column":10}},"id":1607},"1608":{"loc":{"start":{"line":2417,"column":8},"end":{"line":2417,"column":25}},"id":1608},"1609":{"loc":{"start":{"line":2419,"column":8},"end":{"line":2419,"column":28}},"id":1609},"1610":{"loc":{"start":{"line":2419,"column":8},"end":{"line":2419,"column":27}},"id":1610},"1611":{"loc":{"start":{"line":2421,"column":8},"end":{"line":2421,"column":58}},"id":1611},"1612":{"loc":{"start":{"line":2421,"column":23},"end":{"line":2421,"column":57}},"id":1612},"1613":{"loc":{"start":{"line":2423,"column":8},"end":{"line":2423,"column":27}},"id":1613},"1614":{"loc":{"start":{"line":2423,"column":8},"end":{"line":2423,"column":26}},"id":1614},"1615":{"loc":{"start":{"line":2425,"column":8},"end":{"line":2429,"column":10}},"id":1615},"1616":{"loc":{"start":{"line":2435,"column":8},"end":{"line":2435,"column":23}},"id":1616},"1617":{"loc":{"start":{"line":2437,"column":8},"end":{"line":2440,"column":10}},"id":1617},"1618":{"loc":{"start":{"line":2443,"column":12},"end":{"line":2443,"column":43}},"id":1618},"1619":{"loc":{"start":{"line":2443,"column":17},"end":{"line":2443,"column":42}},"id":1619},"1620":{"loc":{"start":{"line":2444,"column":12},"end":{"line":2444,"column":33}},"id":1620},"1621":{"loc":{"start":{"line":2444,"column":12},"end":{"line":2444,"column":32}},"id":1621},"1622":{"loc":{"start":{"line":2445,"column":17},"end":{"line":2445,"column":27}},"id":1622},"1623":{"loc":{"start":{"line":2448,"column":12},"end":{"line":2448,"column":18}},"id":1623},"1624":{"loc":{"start":{"line":2448,"column":12},"end":{"line":2448,"column":17}},"id":1624},"1625":{"loc":{"start":{"line":2451,"column":8},"end":{"line":2451,"column":22}},"id":1625},"1626":{"loc":{"start":{"line":2455,"column":8},"end":{"line":2455,"column":20}},"id":1626},"1627":{"loc":{"start":{"line":2455,"column":8},"end":{"line":2455,"column":19}},"id":1627},"1628":{"loc":{"start":{"line":2456,"column":8},"end":{"line":2458,"column":10}},"id":1628},"1629":{"loc":{"start":{"line":2462,"column":8},"end":{"line":2462,"column":35}},"id":1629},"1630":{"loc":{"start":{"line":2464,"column":8},"end":{"line":2464,"column":32}},"id":1630},"1631":{"loc":{"start":{"line":2464,"column":8},"end":{"line":2464,"column":31}},"id":1631},"1632":{"loc":{"start":{"line":2466,"column":12},"end":{"line":2466,"column":32}},"id":1632},"1633":{"loc":{"start":{"line":2467,"column":12},"end":{"line":2467,"column":56}},"id":1633},"1634":{"loc":{"start":{"line":2467,"column":12},"end":{"line":2467,"column":55}},"id":1634},"1635":{"loc":{"start":{"line":2470,"column":8},"end":{"line":2470,"column":39}},"id":1635},"1636":{"loc":{"start":{"line":2470,"column":13},"end":{"line":2470,"column":38}},"id":1636},"1637":{"loc":{"start":{"line":2472,"column":12},"end":{"line":2472,"column":22}},"id":1637},"1638":{"loc":{"start":{"line":2473,"column":12},"end":{"line":2477,"column":14}},"id":1638},"1639":{"loc":{"start":{"line":2476,"column":22},"end":{"line":2476,"column":40}},"id":1639},"1640":{"loc":{"start":{"line":2480,"column":8},"end":{"line":2480,"column":20}},"id":1640},"1641":{"loc":{"start":{"line":2480,"column":8},"end":{"line":2480,"column":19}},"id":1641},"1642":{"loc":{"start":{"line":2482,"column":8},"end":{"line":2482,"column":28}},"id":1642},"1643":{"loc":{"start":{"line":2482,"column":16},"end":{"line":2482,"column":27}},"id":1643},"1644":{"loc":{"start":{"line":2483,"column":12},"end":{"line":2483,"column":46}},"id":1644},"1645":{"loc":{"start":{"line":2484,"column":12},"end":{"line":2488,"column":14}},"id":1645},"1646":{"loc":{"start":{"line":2487,"column":22},"end":{"line":2487,"column":46}},"id":1646},"1647":{"loc":{"start":{"line":2490,"column":12},"end":{"line":2494,"column":14}},"id":1647},"1648":{"loc":{"start":{"line":2493,"column":22},"end":{"line":2493,"column":33}},"id":1648},"1649":{"loc":{"start":{"line":2497,"column":8},"end":{"line":2497,"column":27}},"id":1649},"1650":{"loc":{"start":{"line":2497,"column":8},"end":{"line":2497,"column":26}},"id":1650},"1651":{"loc":{"start":{"line":2499,"column":8},"end":{"line":2499,"column":27}},"id":1651},"1652":{"loc":{"start":{"line":2503,"column":8},"end":{"line":2503,"column":22}},"id":1652},"1653":{"loc":{"start":{"line":2505,"column":8},"end":{"line":2509,"column":10}},"id":1653},"1654":{"loc":{"start":{"line":2507,"column":16},"end":{"line":2507,"column":41}},"id":1654},"1655":{"loc":{"start":{"line":2511,"column":12},"end":{"line":2511,"column":22}},"id":1655},"1656":{"loc":{"start":{"line":2512,"column":12},"end":{"line":2512,"column":18}},"id":1656},"1657":{"loc":{"start":{"line":2512,"column":12},"end":{"line":2512,"column":17}},"id":1657},"1658":{"loc":{"start":{"line":2513,"column":12},"end":{"line":2513,"column":41}},"id":1658},"1659":{"loc":{"start":{"line":2513,"column":29},"end":{"line":2513,"column":40}},"id":1659},"1660":{"loc":{"start":{"line":2516,"column":8},"end":{"line":2516,"column":25}},"id":1660},"1661":{"loc":{"start":{"line":2520,"column":8},"end":{"line":2520,"column":34}},"id":1661},"1662":{"loc":{"start":{"line":2522,"column":12},"end":{"line":2522,"column":22}},"id":1662},"1663":{"loc":{"start":{"line":2523,"column":12},"end":{"line":2523,"column":18}},"id":1663},"1664":{"loc":{"start":{"line":2523,"column":12},"end":{"line":2523,"column":17}},"id":1664},"1665":{"loc":{"start":{"line":2524,"column":12},"end":{"line":2524,"column":28}},"id":1665},"1666":{"loc":{"start":{"line":2527,"column":16},"end":{"line":2527,"column":67}},"id":1666},"1667":{"loc":{"start":{"line":2527,"column":16},"end":{"line":2527,"column":66}},"id":1667},"1668":{"loc":{"start":{"line":2527,"column":32},"end":{"line":2527,"column":65}},"id":1668},"1669":{"loc":{"start":{"line":2528,"column":21},"end":{"line":2528,"column":40}},"id":1669},"1670":{"loc":{"start":{"line":2528,"column":21},"end":{"line":2528,"column":31}},"id":1670},"1671":{"loc":{"start":{"line":2528,"column":35},"end":{"line":2528,"column":40}},"id":1671},"1672":{"loc":{"start":{"line":2530,"column":12},"end":{"line":2530,"column":24}},"id":1672},"1673":{"loc":{"start":{"line":2530,"column":12},"end":{"line":2530,"column":23}},"id":1673},"1674":{"loc":{"start":{"line":2532,"column":12},"end":{"line":2535,"column":14}},"id":1674},"1675":{"loc":{"start":{"line":2538,"column":12},"end":{"line":2538,"column":22}},"id":1675},"1676":{"loc":{"start":{"line":2539,"column":12},"end":{"line":2543,"column":14}},"id":1676},"1677":{"loc":{"start":{"line":2541,"column":20},"end":{"line":2541,"column":31}},"id":1677},"1678":{"loc":{"start":{"line":2545,"column":16},"end":{"line":2545,"column":46}},"id":1678},"1679":{"loc":{"start":{"line":2546,"column":16},"end":{"line":2546,"column":22}},"id":1679},"1680":{"loc":{"start":{"line":2546,"column":16},"end":{"line":2546,"column":21}},"id":1680},"1681":{"loc":{"start":{"line":2547,"column":16},"end":{"line":2547,"column":45}},"id":1681},"1682":{"loc":{"start":{"line":2547,"column":33},"end":{"line":2547,"column":44}},"id":1682},"1683":{"loc":{"start":{"line":2550,"column":12},"end":{"line":2554,"column":14}},"id":1683},"1684":{"loc":{"start":{"line":2552,"column":20},"end":{"line":2552,"column":45}},"id":1684},"1685":{"loc":{"start":{"line":2556,"column":8},"end":{"line":2556,"column":25}},"id":1685},"1686":{"loc":{"start":{"line":2560,"column":8},"end":{"line":2560,"column":47}},"id":1686},"1687":{"loc":{"start":{"line":2562,"column":8},"end":{"line":2562,"column":32}},"id":1687},"1688":{"loc":{"start":{"line":2562,"column":8},"end":{"line":2562,"column":31}},"id":1688},"1689":{"loc":{"start":{"line":2564,"column":8},"end":{"line":2564,"column":28}},"id":1689},"1690":{"loc":{"start":{"line":2564,"column":16},"end":{"line":2564,"column":27}},"id":1690},"1691":{"loc":{"start":{"line":2566,"column":12},"end":{"line":2566,"column":40}},"id":1691},"1692":{"loc":{"start":{"line":2569,"column":16},"end":{"line":2572,"column":18}},"id":1692},"1693":{"loc":{"start":{"line":2571,"column":33},"end":{"line":2571,"column":59}},"id":1693},"1694":{"loc":{"start":{"line":2574,"column":16},"end":{"line":2577,"column":18}},"id":1694},"1695":{"loc":{"start":{"line":2576,"column":33},"end":{"line":2576,"column":57}},"id":1695},"1696":{"loc":{"start":{"line":2580,"column":16},"end":{"line":2583,"column":18}},"id":1696},"1697":{"loc":{"start":{"line":2582,"column":33},"end":{"line":2582,"column":70}},"id":1697},"1698":{"loc":{"start":{"line":2585,"column":16},"end":{"line":2588,"column":18}},"id":1698},"1699":{"loc":{"start":{"line":2587,"column":33},"end":{"line":2587,"column":49}},"id":1699},"1700":{"loc":{"start":{"line":2590,"column":12},"end":{"line":2590,"column":35}},"id":1700},"1701":{"loc":{"start":{"line":2590,"column":12},"end":{"line":2590,"column":34}},"id":1701},"1702":{"loc":{"start":{"line":2590,"column":28},"end":{"line":2590,"column":33}},"id":1702},"1703":{"loc":{"start":{"line":2593,"column":8},"end":{"line":2593,"column":48}},"id":1703},"1704":{"loc":{"start":{"line":2593,"column":23},"end":{"line":2593,"column":45}},"id":1704},"1705":{"loc":{"start":{"line":2594,"column":12},"end":{"line":2594,"column":22}},"id":1705},"1706":{"loc":{"start":{"line":2595,"column":19},"end":{"line":2595,"column":33}},"id":1706},"1707":{"loc":{"start":{"line":2596,"column":21},"end":{"line":2596,"column":31}},"id":1707},"1708":{"loc":{"start":{"line":2599,"column":16},"end":{"line":2599,"column":22}},"id":1708},"1709":{"loc":{"start":{"line":2599,"column":16},"end":{"line":2599,"column":21}},"id":1709},"1710":{"loc":{"start":{"line":2600,"column":16},"end":{"line":2600,"column":56}},"id":1710},"1711":{"loc":{"start":{"line":2600,"column":16},"end":{"line":2600,"column":55}},"id":1711},"1712":{"loc":{"start":{"line":2600,"column":32},"end":{"line":2600,"column":54}},"id":1712},"1713":{"loc":{"start":{"line":2604,"column":8},"end":{"line":2604,"column":27}},"id":1713},"1714":{"loc":{"start":{"line":2604,"column":8},"end":{"line":2604,"column":26}},"id":1714},"1715":{"loc":{"start":{"line":2606,"column":8},"end":{"line":2609,"column":10}},"id":1715},"1716":{"loc":{"start":{"line":2613,"column":8},"end":{"line":2613,"column":29}},"id":1716},"1717":{"loc":{"start":{"line":2615,"column":8},"end":{"line":2615,"column":32}},"id":1717},"1718":{"loc":{"start":{"line":2615,"column":8},"end":{"line":2615,"column":31}},"id":1718},"1719":{"loc":{"start":{"line":2617,"column":12},"end":{"line":2617,"column":22}},"id":1719},"1720":{"loc":{"start":{"line":2618,"column":12},"end":{"line":2618,"column":39}},"id":1720},"1721":{"loc":{"start":{"line":2618,"column":26},"end":{"line":2618,"column":37}},"id":1721},"1722":{"loc":{"start":{"line":2619,"column":19},"end":{"line":2619,"column":29}},"id":1722},"1723":{"loc":{"start":{"line":2620,"column":12},"end":{"line":2620,"column":18}},"id":1723},"1724":{"loc":{"start":{"line":2620,"column":12},"end":{"line":2620,"column":17}},"id":1724},"1725":{"loc":{"start":{"line":2621,"column":12},"end":{"line":2621,"column":28}},"id":1725},"1726":{"loc":{"start":{"line":2624,"column":16},"end":{"line":2624,"column":56}},"id":1726},"1727":{"loc":{"start":{"line":2624,"column":16},"end":{"line":2624,"column":55}},"id":1727},"1728":{"loc":{"start":{"line":2624,"column":32},"end":{"line":2624,"column":54}},"id":1728},"1729":{"loc":{"start":{"line":2625,"column":21},"end":{"line":2625,"column":40}},"id":1729},"1730":{"loc":{"start":{"line":2625,"column":21},"end":{"line":2625,"column":31}},"id":1730},"1731":{"loc":{"start":{"line":2625,"column":35},"end":{"line":2625,"column":40}},"id":1731},"1732":{"loc":{"start":{"line":2627,"column":12},"end":{"line":2627,"column":24}},"id":1732},"1733":{"loc":{"start":{"line":2627,"column":12},"end":{"line":2627,"column":23}},"id":1733},"1734":{"loc":{"start":{"line":2629,"column":12},"end":{"line":2629,"column":53}},"id":1734},"1735":{"loc":{"start":{"line":2629,"column":26},"end":{"line":2629,"column":51}},"id":1735},"1736":{"loc":{"start":{"line":2632,"column":13},"end":{"line":2632,"column":43}},"id":1736},"1737":{"loc":{"start":{"line":2633,"column":12},"end":{"line":2633,"column":55}},"id":1737},"1738":{"loc":{"start":{"line":2633,"column":12},"end":{"line":2633,"column":54}},"id":1738},"1739":{"loc":{"start":{"line":2636,"column":8},"end":{"line":2636,"column":14}},"id":1739},"1740":{"loc":{"start":{"line":2636,"column":8},"end":{"line":2636,"column":13}},"id":1740},"1741":{"loc":{"start":{"line":2638,"column":12},"end":{"line":2638,"column":52}},"id":1741},"1742":{"loc":{"start":{"line":2638,"column":21},"end":{"line":2638,"column":23}},"id":1742},"1743":{"loc":{"start":{"line":2639,"column":12},"end":{"line":2639,"column":44}},"id":1743},"1744":{"loc":{"start":{"line":2639,"column":19},"end":{"line":2639,"column":43}},"id":1744},"1745":{"loc":{"start":{"line":2641,"column":12},"end":{"line":2641,"column":31}},"id":1745},"1746":{"loc":{"start":{"line":2641,"column":19},"end":{"line":2641,"column":30}},"id":1746},"1747":{"loc":{"start":{"line":2644,"column":8},"end":{"line":2644,"column":27}},"id":1747},"1748":{"loc":{"start":{"line":2644,"column":8},"end":{"line":2644,"column":26}},"id":1748},"1749":{"loc":{"start":{"line":2646,"column":8},"end":{"line":2650,"column":10}},"id":1749},"1750":{"loc":{"start":{"line":2654,"column":8},"end":{"line":2654,"column":22}},"id":1750},"1751":{"loc":{"start":{"line":2656,"column":8},"end":{"line":2660,"column":10}},"id":1751},"1752":{"loc":{"start":{"line":2658,"column":16},"end":{"line":2658,"column":41}},"id":1752},"1753":{"loc":{"start":{"line":2662,"column":12},"end":{"line":2662,"column":22}},"id":1753},"1754":{"loc":{"start":{"line":2663,"column":12},"end":{"line":2663,"column":18}},"id":1754},"1755":{"loc":{"start":{"line":2663,"column":12},"end":{"line":2663,"column":17}},"id":1755},"1756":{"loc":{"start":{"line":2664,"column":12},"end":{"line":2664,"column":41}},"id":1756},"1757":{"loc":{"start":{"line":2664,"column":29},"end":{"line":2664,"column":40}},"id":1757},"1758":{"loc":{"start":{"line":2667,"column":8},"end":{"line":2667,"column":25}},"id":1758},"1759":{"loc":{"start":{"line":2673,"column":8},"end":{"line":2673,"column":20}},"id":1759},"1760":{"loc":{"start":{"line":2673,"column":8},"end":{"line":2673,"column":19}},"id":1760},"1761":{"loc":{"start":{"line":2675,"column":8},"end":{"line":2677,"column":10}},"id":1761},"1762":{"loc":{"start":{"line":2683,"column":8},"end":{"line":2683,"column":37}},"id":1762},"1763":{"loc":{"start":{"line":2683,"column":19},"end":{"line":2683,"column":36}},"id":1763},"1764":{"loc":{"start":{"line":2685,"column":8},"end":{"line":2685,"column":27}},"id":1764},"1765":{"loc":{"start":{"line":2685,"column":8},"end":{"line":2685,"column":26}},"id":1765},"1766":{"loc":{"start":{"line":2687,"column":8},"end":{"line":2690,"column":10}},"id":1766},"1767":{"loc":{"start":{"line":2696,"column":8},"end":{"line":2696,"column":40}},"id":1767},"1768":{"loc":{"start":{"line":2698,"column":8},"end":{"line":2698,"column":28}},"id":1768},"1769":{"loc":{"start":{"line":2698,"column":8},"end":{"line":2698,"column":27}},"id":1769},"1770":{"loc":{"start":{"line":2700,"column":8},"end":{"line":2700,"column":20}},"id":1770},"1771":{"loc":{"start":{"line":2700,"column":8},"end":{"line":2700,"column":19}},"id":1771},"1772":{"loc":{"start":{"line":2702,"column":8},"end":{"line":2702,"column":33}},"id":1772},"1773":{"loc":{"start":{"line":2702,"column":15},"end":{"line":2702,"column":32}},"id":1773},"1774":{"loc":{"start":{"line":2704,"column":8},"end":{"line":2704,"column":20}},"id":1774},"1775":{"loc":{"start":{"line":2704,"column":8},"end":{"line":2704,"column":19}},"id":1775},"1776":{"loc":{"start":{"line":2706,"column":8},"end":{"line":2706,"column":38}},"id":1776},"1777":{"loc":{"start":{"line":2706,"column":21},"end":{"line":2706,"column":37}},"id":1777},"1778":{"loc":{"start":{"line":2708,"column":12},"end":{"line":2708,"column":32}},"id":1778},"1779":{"loc":{"start":{"line":2709,"column":12},"end":{"line":2709,"column":18}},"id":1779},"1780":{"loc":{"start":{"line":2709,"column":12},"end":{"line":2709,"column":17}},"id":1780},"1781":{"loc":{"start":{"line":2710,"column":12},"end":{"line":2710,"column":41}},"id":1781},"1782":{"loc":{"start":{"line":2710,"column":24},"end":{"line":2710,"column":40}},"id":1782},"1783":{"loc":{"start":{"line":2712,"column":12},"end":{"line":2712,"column":29}},"id":1783},"1784":{"loc":{"start":{"line":2715,"column":8},"end":{"line":2720,"column":10}},"id":1784},"1785":{"loc":{"start":{"line":2726,"column":8},"end":{"line":2726,"column":39}},"id":1785},"1786":{"loc":{"start":{"line":2728,"column":8},"end":{"line":2728,"column":28}},"id":1786},"1787":{"loc":{"start":{"line":2728,"column":8},"end":{"line":2728,"column":27}},"id":1787},"1788":{"loc":{"start":{"line":2730,"column":8},"end":{"line":2730,"column":43}},"id":1788},"1789":{"loc":{"start":{"line":2731,"column":8},"end":{"line":2731,"column":33}},"id":1789},"1790":{"loc":{"start":{"line":2733,"column":8},"end":{"line":2733,"column":32}},"id":1790},"1791":{"loc":{"start":{"line":2733,"column":15},"end":{"line":2733,"column":31}},"id":1791},"1792":{"loc":{"start":{"line":2735,"column":8},"end":{"line":2735,"column":43}},"id":1792},"1793":{"loc":{"start":{"line":2737,"column":8},"end":{"line":2737,"column":31}},"id":1793},"1794":{"loc":{"start":{"line":2737,"column":8},"end":{"line":2737,"column":30}},"id":1794},"1795":{"loc":{"start":{"line":2739,"column":8},"end":{"line":2739,"column":20}},"id":1795},"1796":{"loc":{"start":{"line":2739,"column":8},"end":{"line":2739,"column":19}},"id":1796},"1797":{"loc":{"start":{"line":2741,"column":8},"end":{"line":2741,"column":33}},"id":1797},"1798":{"loc":{"start":{"line":2741,"column":15},"end":{"line":2741,"column":32}},"id":1798},"1799":{"loc":{"start":{"line":2743,"column":8},"end":{"line":2743,"column":20}},"id":1799},"1800":{"loc":{"start":{"line":2743,"column":8},"end":{"line":2743,"column":19}},"id":1800},"1801":{"loc":{"start":{"line":2745,"column":12},"end":{"line":2745,"column":22}},"id":1801},"1802":{"loc":{"start":{"line":2746,"column":12},"end":{"line":2746,"column":18}},"id":1802},"1803":{"loc":{"start":{"line":2746,"column":12},"end":{"line":2746,"column":17}},"id":1803},"1804":{"loc":{"start":{"line":2749,"column":8},"end":{"line":2753,"column":10}},"id":1804},"1805":{"loc":{"start":{"line":2757,"column":8},"end":{"line":2757,"column":39}},"id":1805},"1806":{"loc":{"start":{"line":2759,"column":8},"end":{"line":2759,"column":31}},"id":1806},"1807":{"loc":{"start":{"line":2759,"column":8},"end":{"line":2759,"column":30}},"id":1807},"1808":{"loc":{"start":{"line":2761,"column":8},"end":{"line":2761,"column":20}},"id":1808},"1809":{"loc":{"start":{"line":2761,"column":8},"end":{"line":2761,"column":19}},"id":1809},"1810":{"loc":{"start":{"line":2763,"column":8},"end":{"line":2763,"column":33}},"id":1810},"1811":{"loc":{"start":{"line":2763,"column":15},"end":{"line":2763,"column":32}},"id":1811},"1812":{"loc":{"start":{"line":2765,"column":8},"end":{"line":2765,"column":20}},"id":1812},"1813":{"loc":{"start":{"line":2765,"column":8},"end":{"line":2765,"column":19}},"id":1813},"1814":{"loc":{"start":{"line":2767,"column":8},"end":{"line":2767,"column":43}},"id":1814},"1815":{"loc":{"start":{"line":2768,"column":8},"end":{"line":2768,"column":33}},"id":1815},"1816":{"loc":{"start":{"line":2770,"column":8},"end":{"line":2770,"column":32}},"id":1816},"1817":{"loc":{"start":{"line":2770,"column":15},"end":{"line":2770,"column":31}},"id":1817},"1818":{"loc":{"start":{"line":2772,"column":8},"end":{"line":2772,"column":43}},"id":1818},"1819":{"loc":{"start":{"line":2774,"column":8},"end":{"line":2778,"column":10}},"id":1819},"1820":{"loc":{"start":{"line":2782,"column":8},"end":{"line":2782,"column":26}},"id":1820},"1821":{"loc":{"start":{"line":2782,"column":20},"end":{"line":2782,"column":25}},"id":1821},"1822":{"loc":{"start":{"line":2784,"column":8},"end":{"line":2788,"column":10}},"id":1822},"1823":{"loc":{"start":{"line":2786,"column":26},"end":{"line":2786,"column":56}},"id":1823},"1824":{"loc":{"start":{"line":2792,"column":8},"end":{"line":2792,"column":84}},"id":1824},"1825":{"loc":{"start":{"line":2794,"column":8},"end":{"line":2794,"column":36}},"id":1825},"1826":{"loc":{"start":{"line":2796,"column":8},"end":{"line":2796,"column":29}},"id":1826},"1827":{"loc":{"start":{"line":2796,"column":8},"end":{"line":2796,"column":28}},"id":1827},"1828":{"loc":{"start":{"line":2798,"column":8},"end":{"line":2798,"column":20}},"id":1828},"1829":{"loc":{"start":{"line":2798,"column":8},"end":{"line":2798,"column":19}},"id":1829},"1830":{"loc":{"start":{"line":2800,"column":12},"end":{"line":2800,"column":22}},"id":1830},"1831":{"loc":{"start":{"line":2801,"column":12},"end":{"line":2801,"column":18}},"id":1831},"1832":{"loc":{"start":{"line":2801,"column":12},"end":{"line":2801,"column":17}},"id":1832},"1833":{"loc":{"start":{"line":2803,"column":16},"end":{"line":2803,"column":83}},"id":1833},"1834":{"loc":{"start":{"line":2803,"column":16},"end":{"line":2803,"column":58}},"id":1834},"1835":{"loc":{"start":{"line":2803,"column":16},"end":{"line":2803,"column":35}},"id":1835},"1836":{"loc":{"start":{"line":2803,"column":39},"end":{"line":2803,"column":58}},"id":1836},"1837":{"loc":{"start":{"line":2803,"column":62},"end":{"line":2803,"column":83}},"id":1837},"1838":{"loc":{"start":{"line":2804,"column":16},"end":{"line":2804,"column":38}},"id":1838},"1839":{"loc":{"start":{"line":2805,"column":16},"end":{"line":2805,"column":53}},"id":1839},"1840":{"loc":{"start":{"line":2805,"column":23},"end":{"line":2805,"column":52}},"id":1840},"1841":{"loc":{"start":{"line":2806,"column":16},"end":{"line":2806,"column":37}},"id":1841},"1842":{"loc":{"start":{"line":2808,"column":20},"end":{"line":2808,"column":50}},"id":1842},"1843":{"loc":{"start":{"line":2809,"column":24},"end":{"line":2809,"column":74}},"id":1843},"1844":{"loc":{"start":{"line":2809,"column":24},"end":{"line":2809,"column":42}},"id":1844},"1845":{"loc":{"start":{"line":2809,"column":46},"end":{"line":2809,"column":74}},"id":1845},"1846":{"loc":{"start":{"line":2810,"column":24},"end":{"line":2810,"column":47}},"id":1846},"1847":{"loc":{"start":{"line":2810,"column":35},"end":{"line":2810,"column":46}},"id":1847},"1848":{"loc":{"start":{"line":2811,"column":29},"end":{"line":2811,"column":108}},"id":1848},"1849":{"loc":{"start":{"line":2811,"column":30},"end":{"line":2811,"column":78}},"id":1849},"1850":{"loc":{"start":{"line":2811,"column":31},"end":{"line":2811,"column":54}},"id":1850},"1851":{"loc":{"start":{"line":2811,"column":58},"end":{"line":2811,"column":77}},"id":1851},"1852":{"loc":{"start":{"line":2812,"column":28},"end":{"line":2812,"column":34}},"id":1852},"1853":{"loc":{"start":{"line":2812,"column":28},"end":{"line":2812,"column":33}},"id":1853},"1854":{"loc":{"start":{"line":2813,"column":28},"end":{"line":2813,"column":40}},"id":1854},"1855":{"loc":{"start":{"line":2814,"column":28},"end":{"line":2814,"column":54}},"id":1855},"1856":{"loc":{"start":{"line":2814,"column":36},"end":{"line":2814,"column":53}},"id":1856},"1857":{"loc":{"start":{"line":2815,"column":28},"end":{"line":2815,"column":40}},"id":1857},"1858":{"loc":{"start":{"line":2820,"column":16},"end":{"line":2820,"column":38}},"id":1858},"1859":{"loc":{"start":{"line":2821,"column":16},"end":{"line":2821,"column":41}},"id":1859},"1860":{"loc":{"start":{"line":2821,"column":23},"end":{"line":2821,"column":40}},"id":1860},"1861":{"loc":{"start":{"line":2822,"column":16},"end":{"line":2822,"column":37}},"id":1861},"1862":{"loc":{"start":{"line":2824,"column":20},"end":{"line":2824,"column":48}},"id":1862},"1863":{"loc":{"start":{"line":2825,"column":20},"end":{"line":2825,"column":37}},"id":1863},"1864":{"loc":{"start":{"line":2825,"column":31},"end":{"line":2825,"column":36}},"id":1864},"1865":{"loc":{"start":{"line":2826,"column":20},"end":{"line":2826,"column":32}},"id":1865},"1866":{"loc":{"start":{"line":2827,"column":20},"end":{"line":2827,"column":46}},"id":1866},"1867":{"loc":{"start":{"line":2827,"column":28},"end":{"line":2827,"column":45}},"id":1867},"1868":{"loc":{"start":{"line":2828,"column":20},"end":{"line":2828,"column":32}},"id":1868},"1869":{"loc":{"start":{"line":2829,"column":27},"end":{"line":2829,"column":45}},"id":1869},"1870":{"loc":{"start":{"line":2831,"column":24},"end":{"line":2831,"column":105}},"id":1870},"1871":{"loc":{"start":{"line":2831,"column":24},"end":{"line":2831,"column":42}},"id":1871},"1872":{"loc":{"start":{"line":2831,"column":46},"end":{"line":2831,"column":105}},"id":1872},"1873":{"loc":{"start":{"line":2831,"column":47},"end":{"line":2831,"column":79}},"id":1873},"1874":{"loc":{"start":{"line":2831,"column":84},"end":{"line":2831,"column":104}},"id":1874},"1875":{"loc":{"start":{"line":2832,"column":24},"end":{"line":2832,"column":67}},"id":1875},"1876":{"loc":{"start":{"line":2832,"column":24},"end":{"line":2832,"column":66}},"id":1876},"1877":{"loc":{"start":{"line":2834,"column":20},"end":{"line":2834,"column":37}},"id":1877},"1878":{"loc":{"start":{"line":2834,"column":31},"end":{"line":2834,"column":36}},"id":1878},"1879":{"loc":{"start":{"line":2835,"column":20},"end":{"line":2835,"column":32}},"id":1879},"1880":{"loc":{"start":{"line":2836,"column":20},"end":{"line":2836,"column":46}},"id":1880},"1881":{"loc":{"start":{"line":2836,"column":28},"end":{"line":2836,"column":45}},"id":1881},"1882":{"loc":{"start":{"line":2837,"column":20},"end":{"line":2837,"column":32}},"id":1882},"1883":{"loc":{"start":{"line":2841,"column":16},"end":{"line":2841,"column":43}},"id":1883},"1884":{"loc":{"start":{"line":2842,"column":16},"end":{"line":2842,"column":28}},"id":1884},"1885":{"loc":{"start":{"line":2842,"column":16},"end":{"line":2842,"column":27}},"id":1885},"1886":{"loc":{"start":{"line":2846,"column":12},"end":{"line":2846,"column":39}},"id":1886},"1887":{"loc":{"start":{"line":2848,"column":17},"end":{"line":2848,"column":27}},"id":1887},"1888":{"loc":{"start":{"line":2849,"column":16},"end":{"line":2849,"column":41}},"id":1888},"1889":{"loc":{"start":{"line":2849,"column":23},"end":{"line":2849,"column":40}},"id":1889},"1890":{"loc":{"start":{"line":2851,"column":12},"end":{"line":2851,"column":24}},"id":1890},"1891":{"loc":{"start":{"line":2851,"column":12},"end":{"line":2851,"column":23}},"id":1891},"1892":{"loc":{"start":{"line":2853,"column":17},"end":{"line":2853,"column":27}},"id":1892},"1893":{"loc":{"start":{"line":2854,"column":16},"end":{"line":2854,"column":43}},"id":1893},"1894":{"loc":{"start":{"line":2854,"column":25},"end":{"line":2854,"column":42}},"id":1894},"1895":{"loc":{"start":{"line":2858,"column":8},"end":{"line":2858,"column":20}},"id":1895},"1896":{"loc":{"start":{"line":2858,"column":8},"end":{"line":2858,"column":19}},"id":1896},"1897":{"loc":{"start":{"line":2860,"column":8},"end":{"line":2860,"column":43}},"id":1897},"1898":{"loc":{"start":{"line":2861,"column":8},"end":{"line":2861,"column":33}},"id":1898},"1899":{"loc":{"start":{"line":2863,"column":8},"end":{"line":2863,"column":32}},"id":1899},"1900":{"loc":{"start":{"line":2863,"column":15},"end":{"line":2863,"column":31}},"id":1900},"1901":{"loc":{"start":{"line":2865,"column":8},"end":{"line":2865,"column":43}},"id":1901},"1902":{"loc":{"start":{"line":2867,"column":12},"end":{"line":2867,"column":39}},"id":1902},"1903":{"loc":{"start":{"line":2868,"column":12},"end":{"line":2874,"column":14}},"id":1903},"1904":{"loc":{"start":{"line":2877,"column":12},"end":{"line":2877,"column":35}},"id":1904},"1905":{"loc":{"start":{"line":2878,"column":12},"end":{"line":2884,"column":14}},"id":1905},"1906":{"loc":{"start":{"line":2886,"column":12},"end":{"line":2892,"column":14}},"id":1906},"1907":{"loc":{"start":{"line":2899,"column":8},"end":{"line":2899,"column":32}},"id":1907},"1908":{"loc":{"start":{"line":2901,"column":8},"end":{"line":2901,"column":34}},"id":1908},"1909":{"loc":{"start":{"line":2901,"column":8},"end":{"line":2901,"column":33}},"id":1909},"1910":{"loc":{"start":{"line":2904,"column":12},"end":{"line":2904,"column":33}},"id":1910},"1911":{"loc":{"start":{"line":2905,"column":12},"end":{"line":2905,"column":18}},"id":1911},"1912":{"loc":{"start":{"line":2905,"column":12},"end":{"line":2905,"column":17}},"id":1912},"1913":{"loc":{"start":{"line":2908,"column":16},"end":{"line":2908,"column":57}},"id":1913},"1914":{"loc":{"start":{"line":2908,"column":16},"end":{"line":2908,"column":56}},"id":1914},"1915":{"loc":{"start":{"line":2911,"column":12},"end":{"line":2914,"column":14}},"id":1915},"1916":{"loc":{"start":{"line":2917,"column":12},"end":{"line":2917,"column":32}},"id":1916},"1917":{"loc":{"start":{"line":2919,"column":16},"end":{"line":2919,"column":57}},"id":1917},"1918":{"loc":{"start":{"line":2919,"column":16},"end":{"line":2919,"column":56}},"id":1918},"1919":{"loc":{"start":{"line":2922,"column":12},"end":{"line":2925,"column":14}},"id":1919},"1920":{"loc":{"start":{"line":2928,"column":8},"end":{"line":2928,"column":28}},"id":1920},"1921":{"loc":{"start":{"line":2928,"column":16},"end":{"line":2928,"column":27}},"id":1921},"1922":{"loc":{"start":{"line":2929,"column":12},"end":{"line":2929,"column":43}},"id":1922},"1923":{"loc":{"start":{"line":2930,"column":12},"end":{"line":2930,"column":46}},"id":1923},"1924":{"loc":{"start":{"line":2930,"column":20},"end":{"line":2930,"column":45}},"id":1924},"1925":{"loc":{"start":{"line":2932,"column":17},"end":{"line":2932,"column":81}},"id":1925},"1926":{"loc":{"start":{"line":2933,"column":16},"end":{"line":2933,"column":66}},"id":1926},"1927":{"loc":{"start":{"line":2933,"column":16},"end":{"line":2933,"column":65}},"id":1927},"1928":{"loc":{"start":{"line":2937,"column":8},"end":{"line":2937,"column":27}},"id":1928},"1929":{"loc":{"start":{"line":2937,"column":8},"end":{"line":2937,"column":26}},"id":1929},"1930":{"loc":{"start":{"line":2939,"column":12},"end":{"line":2939,"column":48}},"id":1930},"1931":{"loc":{"start":{"line":2939,"column":12},"end":{"line":2939,"column":26}},"id":1931},"1932":{"loc":{"start":{"line":2940,"column":12},"end":{"line":2940,"column":53}},"id":1932},"1933":{"loc":{"start":{"line":2940,"column":12},"end":{"line":2940,"column":52}},"id":1933},"1934":{"loc":{"start":{"line":2943,"column":8},"end":{"line":2946,"column":10}},"id":1934},"1935":{"loc":{"start":{"line":2952,"column":8},"end":{"line":2952,"column":32}},"id":1935},"1936":{"loc":{"start":{"line":2954,"column":8},"end":{"line":2954,"column":31}},"id":1936},"1937":{"loc":{"start":{"line":2954,"column":8},"end":{"line":2954,"column":30}},"id":1937},"1938":{"loc":{"start":{"line":2957,"column":12},"end":{"line":2957,"column":33}},"id":1938},"1939":{"loc":{"start":{"line":2958,"column":12},"end":{"line":2958,"column":18}},"id":1939},"1940":{"loc":{"start":{"line":2958,"column":12},"end":{"line":2958,"column":17}},"id":1940},"1941":{"loc":{"start":{"line":2960,"column":17},"end":{"line":2960,"column":54}},"id":1941},"1942":{"loc":{"start":{"line":2961,"column":16},"end":{"line":2961,"column":54}},"id":1942},"1943":{"loc":{"start":{"line":2961,"column":16},"end":{"line":2961,"column":53}},"id":1943},"1944":{"loc":{"start":{"line":2964,"column":12},"end":{"line":2967,"column":14}},"id":1944},"1945":{"loc":{"start":{"line":2970,"column":12},"end":{"line":2970,"column":32}},"id":1945},"1946":{"loc":{"start":{"line":2971,"column":17},"end":{"line":2971,"column":54}},"id":1946},"1947":{"loc":{"start":{"line":2972,"column":16},"end":{"line":2972,"column":54}},"id":1947},"1948":{"loc":{"start":{"line":2972,"column":16},"end":{"line":2972,"column":53}},"id":1948},"1949":{"loc":{"start":{"line":2975,"column":12},"end":{"line":2978,"column":14}},"id":1949},"1950":{"loc":{"start":{"line":2981,"column":8},"end":{"line":2981,"column":28}},"id":1950},"1951":{"loc":{"start":{"line":2981,"column":16},"end":{"line":2981,"column":27}},"id":1951},"1952":{"loc":{"start":{"line":2982,"column":12},"end":{"line":2982,"column":43}},"id":1952},"1953":{"loc":{"start":{"line":2983,"column":12},"end":{"line":2983,"column":46}},"id":1953},"1954":{"loc":{"start":{"line":2983,"column":20},"end":{"line":2983,"column":45}},"id":1954},"1955":{"loc":{"start":{"line":2985,"column":17},"end":{"line":2985,"column":81}},"id":1955},"1956":{"loc":{"start":{"line":2986,"column":16},"end":{"line":2986,"column":66}},"id":1956},"1957":{"loc":{"start":{"line":2986,"column":16},"end":{"line":2986,"column":65}},"id":1957},"1958":{"loc":{"start":{"line":2990,"column":8},"end":{"line":2990,"column":27}},"id":1958},"1959":{"loc":{"start":{"line":2990,"column":8},"end":{"line":2990,"column":26}},"id":1959},"1960":{"loc":{"start":{"line":2992,"column":12},"end":{"line":2992,"column":68}},"id":1960},"1961":{"loc":{"start":{"line":2992,"column":12},"end":{"line":2992,"column":26}},"id":1961},"1962":{"loc":{"start":{"line":2992,"column":31},"end":{"line":2992,"column":68}},"id":1962},"1963":{"loc":{"start":{"line":2993,"column":12},"end":{"line":2993,"column":50}},"id":1963},"1964":{"loc":{"start":{"line":2993,"column":12},"end":{"line":2993,"column":49}},"id":1964},"1965":{"loc":{"start":{"line":2996,"column":8},"end":{"line":2999,"column":10}},"id":1965},"1966":{"loc":{"start":{"line":3005,"column":8},"end":{"line":3005,"column":35}},"id":1966},"1967":{"loc":{"start":{"line":3007,"column":8},"end":{"line":3007,"column":32}},"id":1967},"1968":{"loc":{"start":{"line":3007,"column":8},"end":{"line":3007,"column":31}},"id":1968},"1969":{"loc":{"start":{"line":3010,"column":12},"end":{"line":3010,"column":59}},"id":1969},"1970":{"loc":{"start":{"line":3010,"column":12},"end":{"line":3010,"column":58}},"id":1970},"1971":{"loc":{"start":{"line":3014,"column":12},"end":{"line":3014,"column":33}},"id":1971},"1972":{"loc":{"start":{"line":3015,"column":16},"end":{"line":3015,"column":52}},"id":1972},"1973":{"loc":{"start":{"line":3015,"column":41},"end":{"line":3015,"column":50}},"id":1973},"1974":{"loc":{"start":{"line":3016,"column":16},"end":{"line":3016,"column":45}},"id":1974},"1975":{"loc":{"start":{"line":3016,"column":27},"end":{"line":3016,"column":44}},"id":1975},"1976":{"loc":{"start":{"line":3017,"column":16},"end":{"line":3017,"column":35}},"id":1976},"1977":{"loc":{"start":{"line":3017,"column":16},"end":{"line":3017,"column":34}},"id":1977},"1978":{"loc":{"start":{"line":3018,"column":16},"end":{"line":3021,"column":18}},"id":1978},"1979":{"loc":{"start":{"line":3025,"column":12},"end":{"line":3025,"column":32}},"id":1979},"1980":{"loc":{"start":{"line":3026,"column":12},"end":{"line":3029,"column":14}},"id":1980},"1981":{"loc":{"start":{"line":3032,"column":13},"end":{"line":3032,"column":23}},"id":1981},"1982":{"loc":{"start":{"line":3033,"column":12},"end":{"line":3033,"column":32}},"id":1982},"1983":{"loc":{"start":{"line":3033,"column":20},"end":{"line":3033,"column":31}},"id":1983},"1984":{"loc":{"start":{"line":3034,"column":16},"end":{"line":3034,"column":55}},"id":1984},"1985":{"loc":{"start":{"line":3034,"column":17},"end":{"line":3034,"column":27}},"id":1985},"1986":{"loc":{"start":{"line":3034,"column":31},"end":{"line":3034,"column":55}},"id":1986},"1987":{"loc":{"start":{"line":3035,"column":16},"end":{"line":3035,"column":45}},"id":1987},"1988":{"loc":{"start":{"line":3035,"column":27},"end":{"line":3035,"column":44}},"id":1988},"1989":{"loc":{"start":{"line":3039,"column":8},"end":{"line":3039,"column":27}},"id":1989},"1990":{"loc":{"start":{"line":3039,"column":8},"end":{"line":3039,"column":26}},"id":1990},"1991":{"loc":{"start":{"line":3041,"column":8},"end":{"line":3044,"column":10}},"id":1991},"1992":{"loc":{"start":{"line":3050,"column":8},"end":{"line":3050,"column":25}},"id":1992},"1993":{"loc":{"start":{"line":3053,"column":12},"end":{"line":3053,"column":60}},"id":1993},"1994":{"loc":{"start":{"line":3053,"column":12},"end":{"line":3053,"column":59}},"id":1994},"1995":{"loc":{"start":{"line":3056,"column":8},"end":{"line":3056,"column":30}},"id":1995},"1996":{"loc":{"start":{"line":3056,"column":8},"end":{"line":3056,"column":29}},"id":1996},"1997":{"loc":{"start":{"line":3058,"column":8},"end":{"line":3058,"column":20}},"id":1997},"1998":{"loc":{"start":{"line":3058,"column":8},"end":{"line":3058,"column":19}},"id":1998},"1999":{"loc":{"start":{"line":3060,"column":8},"end":{"line":3060,"column":35}},"id":1999},"2000":{"loc":{"start":{"line":3060,"column":17},"end":{"line":3060,"column":34}},"id":2000},"2001":{"loc":{"start":{"line":3062,"column":8},"end":{"line":3062,"column":20}},"id":2001},"2002":{"loc":{"start":{"line":3062,"column":8},"end":{"line":3062,"column":19}},"id":2002},"2003":{"loc":{"start":{"line":3064,"column":8},"end":{"line":3064,"column":32}},"id":2003},"2004":{"loc":{"start":{"line":3064,"column":15},"end":{"line":3064,"column":31}},"id":2004},"2005":{"loc":{"start":{"line":3066,"column":8},"end":{"line":3070,"column":10}},"id":2005},"2006":{"loc":{"start":{"line":3076,"column":8},"end":{"line":3078,"column":22}},"id":2006},"2007":{"loc":{"start":{"line":3080,"column":12},"end":{"line":3080,"column":35}},"id":2007},"2008":{"loc":{"start":{"line":3081,"column":12},"end":{"line":3081,"column":18}},"id":2008},"2009":{"loc":{"start":{"line":3081,"column":12},"end":{"line":3081,"column":17}},"id":2009},"2010":{"loc":{"start":{"line":3082,"column":12},"end":{"line":3082,"column":24}},"id":2010},"2011":{"loc":{"start":{"line":3084,"column":12},"end":{"line":3084,"column":34}},"id":2011},"2012":{"loc":{"start":{"line":3084,"column":12},"end":{"line":3084,"column":33}},"id":2012},"2013":{"loc":{"start":{"line":3085,"column":12},"end":{"line":3085,"column":37}},"id":2013},"2014":{"loc":{"start":{"line":3085,"column":19},"end":{"line":3085,"column":36}},"id":2014},"2015":{"loc":{"start":{"line":3087,"column":8},"end":{"line":3087,"column":20}},"id":2015},"2016":{"loc":{"start":{"line":3087,"column":8},"end":{"line":3087,"column":19}},"id":2016},"2017":{"loc":{"start":{"line":3089,"column":15},"end":{"line":3089,"column":29}},"id":2017},"2018":{"loc":{"start":{"line":3090,"column":16},"end":{"line":3090,"column":77}},"id":2018},"2019":{"loc":{"start":{"line":3090,"column":16},"end":{"line":3090,"column":53}},"id":2019},"2020":{"loc":{"start":{"line":3090,"column":16},"end":{"line":3090,"column":26}},"id":2020},"2021":{"loc":{"start":{"line":3090,"column":30},"end":{"line":3090,"column":53}},"id":2021},"2022":{"loc":{"start":{"line":3090,"column":57},"end":{"line":3090,"column":77}},"id":2022},"2023":{"loc":{"start":{"line":3093,"column":12},"end":{"line":3093,"column":41}},"id":2023},"2024":{"loc":{"start":{"line":3093,"column":24},"end":{"line":3093,"column":40}},"id":2024},"2025":{"loc":{"start":{"line":3094,"column":16},"end":{"line":3094,"column":48}},"id":2025},"2026":{"loc":{"start":{"line":3097,"column":12},"end":{"line":3097,"column":39}},"id":2026},"2027":{"loc":{"start":{"line":3097,"column":12},"end":{"line":3097,"column":38}},"id":2027},"2028":{"loc":{"start":{"line":3100,"column":8},"end":{"line":3104,"column":10}},"id":2028},"2029":{"loc":{"start":{"line":3108,"column":8},"end":{"line":3108,"column":45}},"id":2029},"2030":{"loc":{"start":{"line":3110,"column":8},"end":{"line":3110,"column":32}},"id":2030},"2031":{"loc":{"start":{"line":3110,"column":8},"end":{"line":3110,"column":31}},"id":2031},"2032":{"loc":{"start":{"line":3112,"column":8},"end":{"line":3112,"column":20}},"id":2032},"2033":{"loc":{"start":{"line":3112,"column":8},"end":{"line":3112,"column":19}},"id":2033},"2034":{"loc":{"start":{"line":3114,"column":8},"end":{"line":3114,"column":41}},"id":2034},"2035":{"loc":{"start":{"line":3114,"column":23},"end":{"line":3114,"column":40}},"id":2035},"2036":{"loc":{"start":{"line":3116,"column":8},"end":{"line":3116,"column":20}},"id":2036},"2037":{"loc":{"start":{"line":3116,"column":8},"end":{"line":3116,"column":19}},"id":2037},"2038":{"loc":{"start":{"line":3118,"column":8},"end":{"line":3118,"column":20}},"id":2038},"2039":{"loc":{"start":{"line":3118,"column":8},"end":{"line":3118,"column":19}},"id":2039},"2040":{"loc":{"start":{"line":3120,"column":12},"end":{"line":3120,"column":22}},"id":2040},"2041":{"loc":{"start":{"line":3121,"column":12},"end":{"line":3121,"column":18}},"id":2041},"2042":{"loc":{"start":{"line":3121,"column":12},"end":{"line":3121,"column":17}},"id":2042},"2043":{"loc":{"start":{"line":3122,"column":12},"end":{"line":3125,"column":14}},"id":2043},"2044":{"loc":{"start":{"line":3128,"column":8},"end":{"line":3128,"column":19}},"id":2044},"2045":{"loc":{"start":{"line":3130,"column":8},"end":{"line":3130,"column":37}},"id":2045},"2046":{"loc":{"start":{"line":3131,"column":8},"end":{"line":3131,"column":30}},"id":2046},"2047":{"loc":{"start":{"line":3133,"column":15},"end":{"line":3133,"column":29}},"id":2047},"2048":{"loc":{"start":{"line":3134,"column":16},"end":{"line":3134,"column":26}},"id":2048},"2049":{"loc":{"start":{"line":3137,"column":12},"end":{"line":3137,"column":42}},"id":2049},"2050":{"loc":{"start":{"line":3137,"column":12},"end":{"line":3137,"column":41}},"id":2050},"2051":{"loc":{"start":{"line":3137,"column":23},"end":{"line":3137,"column":40}},"id":2051},"2052":{"loc":{"start":{"line":3140,"column":8},"end":{"line":3140,"column":37}},"id":2052},"2053":{"loc":{"start":{"line":3142,"column":8},"end":{"line":3142,"column":20}},"id":2053},"2054":{"loc":{"start":{"line":3142,"column":8},"end":{"line":3142,"column":19}},"id":2054},"2055":{"loc":{"start":{"line":3144,"column":8},"end":{"line":3148,"column":10}},"id":2055},"2056":{"loc":{"start":{"line":3154,"column":8},"end":{"line":3154,"column":21}},"id":2056},"2057":{"loc":{"start":{"line":3156,"column":8},"end":{"line":3156,"column":31}},"id":2057},"2058":{"loc":{"start":{"line":3156,"column":8},"end":{"line":3156,"column":30}},"id":2058},"2059":{"loc":{"start":{"line":3158,"column":12},"end":{"line":3158,"column":32}},"id":2059},"2060":{"loc":{"start":{"line":3159,"column":12},"end":{"line":3159,"column":55}},"id":2060},"2061":{"loc":{"start":{"line":3159,"column":12},"end":{"line":3159,"column":54}},"id":2061},"2062":{"loc":{"start":{"line":3162,"column":8},"end":{"line":3162,"column":37}},"id":2062},"2063":{"loc":{"start":{"line":3162,"column":19},"end":{"line":3162,"column":36}},"id":2063},"2064":{"loc":{"start":{"line":3164,"column":8},"end":{"line":3164,"column":27}},"id":2064},"2065":{"loc":{"start":{"line":3164,"column":8},"end":{"line":3164,"column":26}},"id":2065},"2066":{"loc":{"start":{"line":3166,"column":8},"end":{"line":3169,"column":10}},"id":2066},"2067":{"loc":{"start":{"line":3175,"column":8},"end":{"line":3175,"column":18}},"id":2067},"2068":{"loc":{"start":{"line":3177,"column":8},"end":{"line":3177,"column":31}},"id":2068},"2069":{"loc":{"start":{"line":3177,"column":8},"end":{"line":3177,"column":30}},"id":2069},"2070":{"loc":{"start":{"line":3179,"column":8},"end":{"line":3179,"column":20}},"id":2070},"2071":{"loc":{"start":{"line":3179,"column":8},"end":{"line":3179,"column":19}},"id":2071},"2072":{"loc":{"start":{"line":3180,"column":13},"end":{"line":3180,"column":23}},"id":2072},"2073":{"loc":{"start":{"line":3181,"column":12},"end":{"line":3181,"column":38}},"id":2073},"2074":{"loc":{"start":{"line":3181,"column":20},"end":{"line":3181,"column":37}},"id":2074},"2075":{"loc":{"start":{"line":3183,"column":16},"end":{"line":3183,"column":90}},"id":2075},"2076":{"loc":{"start":{"line":3183,"column":16},"end":{"line":3183,"column":58}},"id":2076},"2077":{"loc":{"start":{"line":3183,"column":26},"end":{"line":3183,"column":58}},"id":2077},"2078":{"loc":{"start":{"line":3183,"column":62},"end":{"line":3183,"column":90}},"id":2078},"2079":{"loc":{"start":{"line":3184,"column":16},"end":{"line":3184,"column":69}},"id":2079},"2080":{"loc":{"start":{"line":3184,"column":16},"end":{"line":3184,"column":68}},"id":2080},"2081":{"loc":{"start":{"line":3187,"column":8},"end":{"line":3187,"column":20}},"id":2081},"2082":{"loc":{"start":{"line":3187,"column":8},"end":{"line":3187,"column":19}},"id":2082},"2083":{"loc":{"start":{"line":3189,"column":8},"end":{"line":3194,"column":10}},"id":2083},"2084":{"loc":{"start":{"line":3193,"column":18},"end":{"line":3193,"column":30}},"id":2084},"2085":{"loc":{"start":{"line":3198,"column":8},"end":{"line":3198,"column":51}},"id":2085},"2086":{"loc":{"start":{"line":3200,"column":8},"end":{"line":3200,"column":29}},"id":2086},"2087":{"loc":{"start":{"line":3200,"column":8},"end":{"line":3200,"column":28}},"id":2087},"2088":{"loc":{"start":{"line":3202,"column":8},"end":{"line":3202,"column":29}},"id":2088},"2089":{"loc":{"start":{"line":3202,"column":16},"end":{"line":3202,"column":28}},"id":2089},"2090":{"loc":{"start":{"line":3204,"column":12},"end":{"line":3204,"column":33}},"id":2090},"2091":{"loc":{"start":{"line":3205,"column":12},"end":{"line":3205,"column":46}},"id":2091},"2092":{"loc":{"start":{"line":3205,"column":12},"end":{"line":3205,"column":45}},"id":2092},"2093":{"loc":{"start":{"line":3205,"column":26},"end":{"line":3205,"column":44}},"id":2093},"2094":{"loc":{"start":{"line":3208,"column":12},"end":{"line":3208,"column":35}},"id":2094},"2095":{"loc":{"start":{"line":3209,"column":12},"end":{"line":3209,"column":18}},"id":2095},"2096":{"loc":{"start":{"line":3209,"column":12},"end":{"line":3209,"column":17}},"id":2096},"2097":{"loc":{"start":{"line":3210,"column":12},"end":{"line":3210,"column":37}},"id":2097},"2098":{"loc":{"start":{"line":3210,"column":24},"end":{"line":3210,"column":36}},"id":2098},"2099":{"loc":{"start":{"line":3213,"column":12},"end":{"line":3213,"column":47}},"id":2099},"2100":{"loc":{"start":{"line":3213,"column":12},"end":{"line":3213,"column":33}},"id":2100},"2101":{"loc":{"start":{"line":3214,"column":12},"end":{"line":3214,"column":54}},"id":2101},"2102":{"loc":{"start":{"line":3214,"column":12},"end":{"line":3214,"column":53}},"id":2102},"2103":{"loc":{"start":{"line":3217,"column":8},"end":{"line":3222,"column":10}},"id":2103},"2104":{"loc":{"start":{"line":3228,"column":8},"end":{"line":3228,"column":34}},"id":2104},"2105":{"loc":{"start":{"line":3228,"column":8},"end":{"line":3228,"column":33}},"id":2105},"2106":{"loc":{"start":{"line":3230,"column":8},"end":{"line":3230,"column":27}},"id":2106},"2107":{"loc":{"start":{"line":3230,"column":8},"end":{"line":3230,"column":26}},"id":2107},"2108":{"loc":{"start":{"line":3232,"column":8},"end":{"line":3234,"column":10}},"id":2108},"2109":{"loc":{"start":{"line":3240,"column":8},"end":{"line":3242,"column":24}},"id":2109},"2110":{"loc":{"start":{"line":3240,"column":20},"end":{"line":3240,"column":31}},"id":2110},"2111":{"loc":{"start":{"line":3244,"column":12},"end":{"line":3244,"column":36}},"id":2111},"2112":{"loc":{"start":{"line":3245,"column":12},"end":{"line":3245,"column":35}},"id":2112},"2113":{"loc":{"start":{"line":3245,"column":12},"end":{"line":3245,"column":34}},"id":2113},"2114":{"loc":{"start":{"line":3248,"column":12},"end":{"line":3248,"column":43}},"id":2114},"2115":{"loc":{"start":{"line":3251,"column":16},"end":{"line":3251,"column":45}},"id":2115},"2116":{"loc":{"start":{"line":3251,"column":23},"end":{"line":3251,"column":44}},"id":2116},"2117":{"loc":{"start":{"line":3253,"column":16},"end":{"line":3253,"column":36}},"id":2117},"2118":{"loc":{"start":{"line":3253,"column":23},"end":{"line":3253,"column":35}},"id":2118},"2119":{"loc":{"start":{"line":3255,"column":16},"end":{"line":3255,"column":50}},"id":2119},"2120":{"loc":{"start":{"line":3255,"column":23},"end":{"line":3255,"column":49}},"id":2120},"2121":{"loc":{"start":{"line":3261,"column":12},"end":{"line":3261,"column":40}},"id":2121},"2122":{"loc":{"start":{"line":3264,"column":16},"end":{"line":3264,"column":45}},"id":2122},"2123":{"loc":{"start":{"line":3264,"column":23},"end":{"line":3264,"column":44}},"id":2123},"2124":{"loc":{"start":{"line":3266,"column":16},"end":{"line":3266,"column":48}},"id":2124},"2125":{"loc":{"start":{"line":3266,"column":23},"end":{"line":3266,"column":47}},"id":2125},"2126":{"loc":{"start":{"line":3268,"column":16},"end":{"line":3268,"column":48}},"id":2126},"2127":{"loc":{"start":{"line":3268,"column":23},"end":{"line":3268,"column":47}},"id":2127},"2128":{"loc":{"start":{"line":3270,"column":16},"end":{"line":3270,"column":47}},"id":2128},"2129":{"loc":{"start":{"line":3270,"column":23},"end":{"line":3270,"column":46}},"id":2129},"2130":{"loc":{"start":{"line":3272,"column":16},"end":{"line":3272,"column":43}},"id":2130},"2131":{"loc":{"start":{"line":3272,"column":23},"end":{"line":3272,"column":42}},"id":2131},"2132":{"loc":{"start":{"line":3274,"column":16},"end":{"line":3274,"column":50}},"id":2132},"2133":{"loc":{"start":{"line":3274,"column":23},"end":{"line":3274,"column":49}},"id":2133},"2134":{"loc":{"start":{"line":3276,"column":16},"end":{"line":3276,"column":47}},"id":2134},"2135":{"loc":{"start":{"line":3276,"column":23},"end":{"line":3276,"column":46}},"id":2135},"2136":{"loc":{"start":{"line":3278,"column":16},"end":{"line":3278,"column":42}},"id":2136},"2137":{"loc":{"start":{"line":3278,"column":23},"end":{"line":3278,"column":41}},"id":2137},"2138":{"loc":{"start":{"line":3280,"column":16},"end":{"line":3280,"column":46}},"id":2138},"2139":{"loc":{"start":{"line":3280,"column":23},"end":{"line":3280,"column":45}},"id":2139},"2140":{"loc":{"start":{"line":3282,"column":16},"end":{"line":3282,"column":46}},"id":2140},"2141":{"loc":{"start":{"line":3282,"column":23},"end":{"line":3282,"column":45}},"id":2141},"2142":{"loc":{"start":{"line":3284,"column":16},"end":{"line":3284,"column":45}},"id":2142},"2143":{"loc":{"start":{"line":3284,"column":23},"end":{"line":3284,"column":44}},"id":2143},"2144":{"loc":{"start":{"line":3286,"column":16},"end":{"line":3286,"column":43}},"id":2144},"2145":{"loc":{"start":{"line":3286,"column":23},"end":{"line":3286,"column":42}},"id":2145},"2146":{"loc":{"start":{"line":3288,"column":16},"end":{"line":3288,"column":48}},"id":2146},"2147":{"loc":{"start":{"line":3288,"column":23},"end":{"line":3288,"column":47}},"id":2147},"2148":{"loc":{"start":{"line":3290,"column":16},"end":{"line":3290,"column":45}},"id":2148},"2149":{"loc":{"start":{"line":3290,"column":23},"end":{"line":3290,"column":44}},"id":2149},"2150":{"loc":{"start":{"line":3292,"column":16},"end":{"line":3292,"column":44}},"id":2150},"2151":{"loc":{"start":{"line":3292,"column":23},"end":{"line":3292,"column":43}},"id":2151},"2152":{"loc":{"start":{"line":3298,"column":8},"end":{"line":3298,"column":33}},"id":2152},"2153":{"loc":{"start":{"line":3298,"column":15},"end":{"line":3298,"column":32}},"id":2153},"2154":{"loc":{"start":{"line":3301,"column":12},"end":{"line":3301,"column":59}},"id":2154},"2155":{"loc":{"start":{"line":3301,"column":12},"end":{"line":3301,"column":45}},"id":2155},"2156":{"loc":{"start":{"line":3301,"column":49},"end":{"line":3301,"column":59}},"id":2156},"2157":{"loc":{"start":{"line":3302,"column":12},"end":{"line":3302,"column":18}},"id":2157},"2158":{"loc":{"start":{"line":3302,"column":12},"end":{"line":3302,"column":17}},"id":2158},"2159":{"loc":{"start":{"line":3304,"column":16},"end":{"line":3304,"column":79}},"id":2159},"2160":{"loc":{"start":{"line":3305,"column":16},"end":{"line":3305,"column":75}},"id":2160},"2161":{"loc":{"start":{"line":3305,"column":16},"end":{"line":3305,"column":74}},"id":2161},"2162":{"loc":{"start":{"line":3308,"column":12},"end":{"line":3308,"column":45}},"id":2162},"2163":{"loc":{"start":{"line":3309,"column":12},"end":{"line":3309,"column":43}},"id":2163},"2164":{"loc":{"start":{"line":3309,"column":26},"end":{"line":3309,"column":42}},"id":2164},"2165":{"loc":{"start":{"line":3310,"column":12},"end":{"line":3310,"column":45}},"id":2165},"2166":{"loc":{"start":{"line":3312,"column":12},"end":{"line":3316,"column":14}},"id":2166},"2167":{"loc":{"start":{"line":3319,"column":8},"end":{"line":3319,"column":27}},"id":2167},"2168":{"loc":{"start":{"line":3319,"column":8},"end":{"line":3319,"column":26}},"id":2168},"2169":{"loc":{"start":{"line":3321,"column":8},"end":{"line":3324,"column":10}},"id":2169},"2170":{"loc":{"start":{"line":3330,"column":12},"end":{"line":3330,"column":22}},"id":2170},"2171":{"loc":{"start":{"line":3331,"column":12},"end":{"line":3331,"column":49}},"id":2171},"2172":{"loc":{"start":{"line":3331,"column":19},"end":{"line":3331,"column":48}},"id":2172},"2173":{"loc":{"start":{"line":3333,"column":12},"end":{"line":3333,"column":47}},"id":2173},"2174":{"loc":{"start":{"line":3333,"column":19},"end":{"line":3333,"column":46}},"id":2174},"2175":{"loc":{"start":{"line":3338,"column":8},"end":{"line":3339,"column":72}},"id":2175},"2176":{"loc":{"start":{"line":3341,"column":8},"end":{"line":3341,"column":20}},"id":2176},"2177":{"loc":{"start":{"line":3341,"column":8},"end":{"line":3341,"column":19}},"id":2177},"2178":{"loc":{"start":{"line":3343,"column":15},"end":{"line":3343,"column":29}},"id":2178},"2179":{"loc":{"start":{"line":3344,"column":12},"end":{"line":3344,"column":32}},"id":2179},"2180":{"loc":{"start":{"line":3344,"column":20},"end":{"line":3344,"column":31}},"id":2180},"2181":{"loc":{"start":{"line":3345,"column":16},"end":{"line":3345,"column":50}},"id":2181},"2182":{"loc":{"start":{"line":3349,"column":12},"end":{"line":3349,"column":49}},"id":2182},"2183":{"loc":{"start":{"line":3349,"column":28},"end":{"line":3349,"column":48}},"id":2183},"2184":{"loc":{"start":{"line":3350,"column":12},"end":{"line":3350,"column":47}},"id":2184},"2185":{"loc":{"start":{"line":3350,"column":12},"end":{"line":3350,"column":46}},"id":2185},"2186":{"loc":{"start":{"line":3351,"column":16},"end":{"line":3351,"column":64}},"id":2186},"2187":{"loc":{"start":{"line":3355,"column":12},"end":{"line":3355,"column":76}},"id":2187},"2188":{"loc":{"start":{"line":3355,"column":24},"end":{"line":3355,"column":75}},"id":2188},"2189":{"loc":{"start":{"line":3355,"column":36},"end":{"line":3355,"column":54}},"id":2189},"2190":{"loc":{"start":{"line":3355,"column":56},"end":{"line":3355,"column":74}},"id":2190},"2191":{"loc":{"start":{"line":3356,"column":16},"end":{"line":3356,"column":42}},"id":2191},"2192":{"loc":{"start":{"line":3357,"column":16},"end":{"line":3357,"column":30}},"id":2192},"2193":{"loc":{"start":{"line":3359,"column":20},"end":{"line":3359,"column":77}},"id":2193},"2194":{"loc":{"start":{"line":3359,"column":20},"end":{"line":3359,"column":76}},"id":2194},"2195":{"loc":{"start":{"line":3362,"column":20},"end":{"line":3362,"column":51}},"id":2195},"2196":{"loc":{"start":{"line":3363,"column":20},"end":{"line":3363,"column":44}},"id":2196},"2197":{"loc":{"start":{"line":3368,"column":8},"end":{"line":3368,"column":37}},"id":2197},"2198":{"loc":{"start":{"line":3369,"column":8},"end":{"line":3369,"column":43}},"id":2198},"2199":{"loc":{"start":{"line":3370,"column":8},"end":{"line":3370,"column":37}},"id":2199},"2200":{"loc":{"start":{"line":3371,"column":8},"end":{"line":3371,"column":49}},"id":2200},"2201":{"loc":{"start":{"line":3373,"column":8},"end":{"line":3373,"column":28}},"id":2201},"2202":{"loc":{"start":{"line":3374,"column":8},"end":{"line":3374,"column":34}},"id":2202},"2203":{"loc":{"start":{"line":3375,"column":8},"end":{"line":3375,"column":31}},"id":2203},"2204":{"loc":{"start":{"line":3376,"column":8},"end":{"line":3376,"column":36}},"id":2204},"2205":{"loc":{"start":{"line":3378,"column":15},"end":{"line":3378,"column":29}},"id":2205},"2206":{"loc":{"start":{"line":3379,"column":16},"end":{"line":3379,"column":26}},"id":2206},"2207":{"loc":{"start":{"line":3382,"column":12},"end":{"line":3382,"column":49}},"id":2207},"2208":{"loc":{"start":{"line":3382,"column":28},"end":{"line":3382,"column":48}},"id":2208},"2209":{"loc":{"start":{"line":3383,"column":16},"end":{"line":3383,"column":52}},"id":2209},"2210":{"loc":{"start":{"line":3386,"column":12},"end":{"line":3386,"column":47}},"id":2210},"2211":{"loc":{"start":{"line":3386,"column":12},"end":{"line":3386,"column":46}},"id":2211},"2212":{"loc":{"start":{"line":3389,"column":8},"end":{"line":3389,"column":20}},"id":2212},"2213":{"loc":{"start":{"line":3389,"column":8},"end":{"line":3389,"column":19}},"id":2213},"2214":{"loc":{"start":{"line":3391,"column":8},"end":{"line":3391,"column":37}},"id":2214},"2215":{"loc":{"start":{"line":3392,"column":8},"end":{"line":3392,"column":43}},"id":2215},"2216":{"loc":{"start":{"line":3393,"column":8},"end":{"line":3393,"column":37}},"id":2216},"2217":{"loc":{"start":{"line":3394,"column":8},"end":{"line":3394,"column":49}},"id":2217},"2218":{"loc":{"start":{"line":3396,"column":8},"end":{"line":3399,"column":10}},"id":2218},"2219":{"loc":{"start":{"line":3403,"column":8},"end":{"line":3403,"column":100}},"id":2219},"2220":{"loc":{"start":{"line":3405,"column":8},"end":{"line":3405,"column":34}},"id":2220},"2221":{"loc":{"start":{"line":3405,"column":8},"end":{"line":3405,"column":33}},"id":2221},"2222":{"loc":{"start":{"line":3406,"column":8},"end":{"line":3406,"column":28}},"id":2222},"2223":{"loc":{"start":{"line":3406,"column":16},"end":{"line":3406,"column":27}},"id":2223},"2224":{"loc":{"start":{"line":3407,"column":8},"end":{"line":3407,"column":39}},"id":2224},"2225":{"loc":{"start":{"line":3407,"column":13},"end":{"line":3407,"column":38}},"id":2225},"2226":{"loc":{"start":{"line":3409,"column":16},"end":{"line":3409,"column":45}},"id":2226},"2227":{"loc":{"start":{"line":3410,"column":16},"end":{"line":3410,"column":63}},"id":2227},"2228":{"loc":{"start":{"line":3410,"column":16},"end":{"line":3410,"column":62}},"id":2228},"2229":{"loc":{"start":{"line":3413,"column":16},"end":{"line":3413,"column":45}},"id":2229},"2230":{"loc":{"start":{"line":3414,"column":16},"end":{"line":3414,"column":40}},"id":2230},"2231":{"loc":{"start":{"line":3415,"column":16},"end":{"line":3415,"column":54}},"id":2231},"2232":{"loc":{"start":{"line":3416,"column":23},"end":{"line":3416,"column":60}},"id":2232},"2233":{"loc":{"start":{"line":3417,"column":16},"end":{"line":3417,"column":40}},"id":2233},"2234":{"loc":{"start":{"line":3418,"column":16},"end":{"line":3418,"column":54}},"id":2234},"2235":{"loc":{"start":{"line":3422,"column":8},"end":{"line":3422,"column":20}},"id":2235},"2236":{"loc":{"start":{"line":3422,"column":8},"end":{"line":3422,"column":19}},"id":2236},"2237":{"loc":{"start":{"line":3424,"column":13},"end":{"line":3424,"column":23}},"id":2237},"2238":{"loc":{"start":{"line":3425,"column":12},"end":{"line":3425,"column":26}},"id":2238},"2239":{"loc":{"start":{"line":3426,"column":19},"end":{"line":3426,"column":33}},"id":2239},"2240":{"loc":{"start":{"line":3427,"column":16},"end":{"line":3427,"column":36}},"id":2240},"2241":{"loc":{"start":{"line":3427,"column":24},"end":{"line":3427,"column":35}},"id":2241},"2242":{"loc":{"start":{"line":3428,"column":16},"end":{"line":3428,"column":50}},"id":2242},"2243":{"loc":{"start":{"line":3428,"column":24},"end":{"line":3428,"column":49}},"id":2243},"2244":{"loc":{"start":{"line":3430,"column":24},"end":{"line":3430,"column":53}},"id":2244},"2245":{"loc":{"start":{"line":3431,"column":24},"end":{"line":3431,"column":68}},"id":2245},"2246":{"loc":{"start":{"line":3431,"column":24},"end":{"line":3431,"column":67}},"id":2246},"2247":{"loc":{"start":{"line":3433,"column":24},"end":{"line":3433,"column":83}},"id":2247},"2248":{"loc":{"start":{"line":3434,"column":24},"end":{"line":3434,"column":68}},"id":2248},"2249":{"loc":{"start":{"line":3434,"column":24},"end":{"line":3434,"column":67}},"id":2249},"2250":{"loc":{"start":{"line":3437,"column":24},"end":{"line":3437,"column":53}},"id":2250},"2251":{"loc":{"start":{"line":3438,"column":24},"end":{"line":3438,"column":48}},"id":2251},"2252":{"loc":{"start":{"line":3439,"column":24},"end":{"line":3439,"column":59}},"id":2252},"2253":{"loc":{"start":{"line":3440,"column":31},"end":{"line":3440,"column":68}},"id":2253},"2254":{"loc":{"start":{"line":3441,"column":24},"end":{"line":3441,"column":48}},"id":2254},"2255":{"loc":{"start":{"line":3442,"column":24},"end":{"line":3442,"column":62}},"id":2255},"2256":{"loc":{"start":{"line":3443,"column":31},"end":{"line":3443,"column":90}},"id":2256},"2257":{"loc":{"start":{"line":3444,"column":24},"end":{"line":3444,"column":48}},"id":2257},"2258":{"loc":{"start":{"line":3445,"column":24},"end":{"line":3445,"column":59}},"id":2258},"2259":{"loc":{"start":{"line":3448,"column":16},"end":{"line":3448,"column":35}},"id":2259},"2260":{"loc":{"start":{"line":3448,"column":16},"end":{"line":3448,"column":34}},"id":2260},"2261":{"loc":{"start":{"line":3449,"column":16},"end":{"line":3449,"column":44}},"id":2261},"2262":{"loc":{"start":{"line":3450,"column":20},"end":{"line":3450,"column":30}},"id":2262},"2263":{"loc":{"start":{"line":3453,"column":16},"end":{"line":3453,"column":28}},"id":2263},"2264":{"loc":{"start":{"line":3453,"column":16},"end":{"line":3453,"column":27}},"id":2264},"2265":{"loc":{"start":{"line":3457,"column":8},"end":{"line":3457,"column":20}},"id":2265},"2266":{"loc":{"start":{"line":3457,"column":8},"end":{"line":3457,"column":19}},"id":2266},"2267":{"loc":{"start":{"line":3459,"column":8},"end":{"line":3459,"column":32}},"id":2267},"2268":{"loc":{"start":{"line":3460,"column":8},"end":{"line":3460,"column":45}},"id":2268},"2269":{"loc":{"start":{"line":3460,"column":15},"end":{"line":3460,"column":44}},"id":2269},"2270":{"loc":{"start":{"line":3461,"column":12},"end":{"line":3461,"column":37}},"id":2270},"2271":{"loc":{"start":{"line":3462,"column":12},"end":{"line":3462,"column":49}},"id":2271},"2272":{"loc":{"start":{"line":3462,"column":12},"end":{"line":3462,"column":48}},"id":2272},"2273":{"loc":{"start":{"line":3464,"column":8},"end":{"line":3464,"column":32}},"id":2273},"2274":{"loc":{"start":{"line":3466,"column":8},"end":{"line":3471,"column":10}},"id":2274},"2275":{"loc":{"start":{"line":3475,"column":8},"end":{"line":3475,"column":114}},"id":2275},"2276":{"loc":{"start":{"line":3477,"column":8},"end":{"line":3477,"column":34}},"id":2276},"2277":{"loc":{"start":{"line":3477,"column":8},"end":{"line":3477,"column":33}},"id":2277},"2278":{"loc":{"start":{"line":3479,"column":13},"end":{"line":3479,"column":23}},"id":2278},"2279":{"loc":{"start":{"line":3480,"column":12},"end":{"line":3480,"column":32}},"id":2279},"2280":{"loc":{"start":{"line":3480,"column":20},"end":{"line":3480,"column":31}},"id":2280},"2281":{"loc":{"start":{"line":3481,"column":12},"end":{"line":3481,"column":43}},"id":2281},"2282":{"loc":{"start":{"line":3481,"column":17},"end":{"line":3481,"column":42}},"id":2282},"2283":{"loc":{"start":{"line":3483,"column":20},"end":{"line":3483,"column":49}},"id":2283},"2284":{"loc":{"start":{"line":3484,"column":20},"end":{"line":3484,"column":67}},"id":2284},"2285":{"loc":{"start":{"line":3484,"column":20},"end":{"line":3484,"column":66}},"id":2285},"2286":{"loc":{"start":{"line":3487,"column":20},"end":{"line":3487,"column":49}},"id":2286},"2287":{"loc":{"start":{"line":3488,"column":20},"end":{"line":3488,"column":44}},"id":2287},"2288":{"loc":{"start":{"line":3489,"column":20},"end":{"line":3489,"column":58}},"id":2288},"2289":{"loc":{"start":{"line":3490,"column":27},"end":{"line":3490,"column":64}},"id":2289},"2290":{"loc":{"start":{"line":3491,"column":20},"end":{"line":3491,"column":44}},"id":2290},"2291":{"loc":{"start":{"line":3492,"column":20},"end":{"line":3492,"column":58}},"id":2291},"2292":{"loc":{"start":{"line":3497,"column":8},"end":{"line":3497,"column":20}},"id":2292},"2293":{"loc":{"start":{"line":3497,"column":8},"end":{"line":3497,"column":19}},"id":2293},"2294":{"loc":{"start":{"line":3499,"column":13},"end":{"line":3499,"column":23}},"id":2294},"2295":{"loc":{"start":{"line":3500,"column":12},"end":{"line":3500,"column":62}},"id":2295},"2296":{"loc":{"start":{"line":3500,"column":27},"end":{"line":3500,"column":61}},"id":2296},"2297":{"loc":{"start":{"line":3501,"column":12},"end":{"line":3501,"column":41}},"id":2297},"2298":{"loc":{"start":{"line":3503,"column":16},"end":{"line":3503,"column":63}},"id":2298},"2299":{"loc":{"start":{"line":3504,"column":16},"end":{"line":3504,"column":47}},"id":2299},"2300":{"loc":{"start":{"line":3508,"column":8},"end":{"line":3508,"column":20}},"id":2300},"2301":{"loc":{"start":{"line":3508,"column":8},"end":{"line":3508,"column":19}},"id":2301},"2302":{"loc":{"start":{"line":3510,"column":8},"end":{"line":3510,"column":32}},"id":2302},"2303":{"loc":{"start":{"line":3511,"column":8},"end":{"line":3511,"column":45}},"id":2303},"2304":{"loc":{"start":{"line":3511,"column":15},"end":{"line":3511,"column":44}},"id":2304},"2305":{"loc":{"start":{"line":3512,"column":12},"end":{"line":3512,"column":37}},"id":2305},"2306":{"loc":{"start":{"line":3513,"column":12},"end":{"line":3513,"column":49}},"id":2306},"2307":{"loc":{"start":{"line":3513,"column":12},"end":{"line":3513,"column":48}},"id":2307},"2308":{"loc":{"start":{"line":3515,"column":8},"end":{"line":3515,"column":32}},"id":2308},"2309":{"loc":{"start":{"line":3517,"column":8},"end":{"line":3522,"column":10}},"id":2309},"2310":{"loc":{"start":{"line":3526,"column":8},"end":{"line":3526,"column":79}},"id":2310},"2311":{"loc":{"start":{"line":3528,"column":15},"end":{"line":3528,"column":29}},"id":2311},"2312":{"loc":{"start":{"line":3529,"column":12},"end":{"line":3529,"column":32}},"id":2312},"2313":{"loc":{"start":{"line":3529,"column":20},"end":{"line":3529,"column":31}},"id":2313},"2314":{"loc":{"start":{"line":3530,"column":12},"end":{"line":3530,"column":46}},"id":2314},"2315":{"loc":{"start":{"line":3530,"column":20},"end":{"line":3530,"column":45}},"id":2315},"2316":{"loc":{"start":{"line":3532,"column":20},"end":{"line":3532,"column":49}},"id":2316},"2317":{"loc":{"start":{"line":3533,"column":20},"end":{"line":3533,"column":64}},"id":2317},"2318":{"loc":{"start":{"line":3533,"column":20},"end":{"line":3533,"column":63}},"id":2318},"2319":{"loc":{"start":{"line":3535,"column":20},"end":{"line":3535,"column":79}},"id":2319},"2320":{"loc":{"start":{"line":3536,"column":20},"end":{"line":3536,"column":64}},"id":2320},"2321":{"loc":{"start":{"line":3536,"column":20},"end":{"line":3536,"column":63}},"id":2321},"2322":{"loc":{"start":{"line":3539,"column":20},"end":{"line":3539,"column":49}},"id":2322},"2323":{"loc":{"start":{"line":3540,"column":20},"end":{"line":3540,"column":44}},"id":2323},"2324":{"loc":{"start":{"line":3541,"column":20},"end":{"line":3541,"column":55}},"id":2324},"2325":{"loc":{"start":{"line":3542,"column":27},"end":{"line":3542,"column":64}},"id":2325},"2326":{"loc":{"start":{"line":3543,"column":20},"end":{"line":3543,"column":44}},"id":2326},"2327":{"loc":{"start":{"line":3544,"column":20},"end":{"line":3544,"column":58}},"id":2327},"2328":{"loc":{"start":{"line":3545,"column":27},"end":{"line":3545,"column":86}},"id":2328},"2329":{"loc":{"start":{"line":3546,"column":20},"end":{"line":3546,"column":44}},"id":2329},"2330":{"loc":{"start":{"line":3547,"column":20},"end":{"line":3547,"column":55}},"id":2330},"2331":{"loc":{"start":{"line":3550,"column":12},"end":{"line":3550,"column":31}},"id":2331},"2332":{"loc":{"start":{"line":3550,"column":12},"end":{"line":3550,"column":30}},"id":2332},"2333":{"loc":{"start":{"line":3551,"column":12},"end":{"line":3551,"column":40}},"id":2333},"2334":{"loc":{"start":{"line":3552,"column":16},"end":{"line":3552,"column":26}},"id":2334},"2335":{"loc":{"start":{"line":3555,"column":12},"end":{"line":3555,"column":24}},"id":2335},"2336":{"loc":{"start":{"line":3555,"column":12},"end":{"line":3555,"column":23}},"id":2336},"2337":{"loc":{"start":{"line":3557,"column":8},"end":{"line":3561,"column":10}},"id":2337},"2338":{"loc":{"start":{"line":3567,"column":8},"end":{"line":3567,"column":33}},"id":2338},"2339":{"loc":{"start":{"line":3569,"column":8},"end":{"line":3569,"column":32}},"id":2339},"2340":{"loc":{"start":{"line":3570,"column":8},"end":{"line":3570,"column":34}},"id":2340},"2341":{"loc":{"start":{"line":3570,"column":15},"end":{"line":3570,"column":33}},"id":2341},"2342":{"loc":{"start":{"line":3571,"column":12},"end":{"line":3571,"column":66}},"id":2342},"2343":{"loc":{"start":{"line":3571,"column":12},"end":{"line":3571,"column":34}},"id":2343},"2344":{"loc":{"start":{"line":3572,"column":12},"end":{"line":3572,"column":62}},"id":2344},"2345":{"loc":{"start":{"line":3572,"column":12},"end":{"line":3572,"column":61}},"id":2345},"2346":{"loc":{"start":{"line":3574,"column":8},"end":{"line":3574,"column":32}},"id":2346},"2347":{"loc":{"start":{"line":3577,"column":8},"end":{"line":3583,"column":4}},"id":2347},"2348":{"loc":{"start":{"line":3579,"column":35},"end":{"line":3579,"column":54}},"id":2348},"2349":{"loc":{"start":{"line":3579,"column":57},"end":{"line":3579,"column":59}},"id":2349},"2350":{"loc":{"start":{"line":3586,"column":8},"end":{"line":3586,"column":33}},"id":2350},"2351":{"loc":{"start":{"line":3588,"column":8},"end":{"line":3588,"column":32}},"id":2351},"2352":{"loc":{"start":{"line":3589,"column":8},"end":{"line":3589,"column":34}},"id":2352},"2353":{"loc":{"start":{"line":3589,"column":15},"end":{"line":3589,"column":33}},"id":2353},"2354":{"loc":{"start":{"line":3590,"column":12},"end":{"line":3590,"column":62}},"id":2354},"2355":{"loc":{"start":{"line":3590,"column":12},"end":{"line":3590,"column":27}},"id":2355},"2356":{"loc":{"start":{"line":3590,"column":31},"end":{"line":3590,"column":62}},"id":2356},"2357":{"loc":{"start":{"line":3591,"column":12},"end":{"line":3591,"column":56}},"id":2357},"2358":{"loc":{"start":{"line":3591,"column":12},"end":{"line":3591,"column":55}},"id":2358},"2359":{"loc":{"start":{"line":3593,"column":8},"end":{"line":3593,"column":32}},"id":2359},"2360":{"loc":{"start":{"line":3595,"column":8},"end":{"line":3600,"column":10}},"id":2360},"2361":{"loc":{"start":{"line":3605,"column":8},"end":{"line":3605,"column":87}},"id":2361},"2362":{"loc":{"start":{"line":3607,"column":8},"end":{"line":3607,"column":28}},"id":2362},"2363":{"loc":{"start":{"line":3607,"column":16},"end":{"line":3607,"column":27}},"id":2363},"2364":{"loc":{"start":{"line":3609,"column":8},"end":{"line":3609,"column":49}},"id":2364},"2365":{"loc":{"start":{"line":3610,"column":8},"end":{"line":3610,"column":36}},"id":2365},"2366":{"loc":{"start":{"line":3612,"column":12},"end":{"line":3612,"column":31}},"id":2366},"2367":{"loc":{"start":{"line":3613,"column":12},"end":{"line":3613,"column":18}},"id":2367},"2368":{"loc":{"start":{"line":3613,"column":12},"end":{"line":3613,"column":17}},"id":2368},"2369":{"loc":{"start":{"line":3614,"column":19},"end":{"line":3614,"column":40}},"id":2369},"2370":{"loc":{"start":{"line":3615,"column":12},"end":{"line":3615,"column":18}},"id":2370},"2371":{"loc":{"start":{"line":3615,"column":12},"end":{"line":3615,"column":17}},"id":2371},"2372":{"loc":{"start":{"line":3616,"column":12},"end":{"line":3616,"column":43}},"id":2372},"2373":{"loc":{"start":{"line":3616,"column":18},"end":{"line":3616,"column":42}},"id":2373},"2374":{"loc":{"start":{"line":3617,"column":12},"end":{"line":3617,"column":24}},"id":2374},"2375":{"loc":{"start":{"line":3617,"column":12},"end":{"line":3617,"column":23}},"id":2375},"2376":{"loc":{"start":{"line":3618,"column":12},"end":{"line":3618,"column":24}},"id":2376},"2377":{"loc":{"start":{"line":3618,"column":12},"end":{"line":3618,"column":23}},"id":2377},"2378":{"loc":{"start":{"line":3619,"column":12},"end":{"line":3624,"column":14}},"id":2378},"2379":{"loc":{"start":{"line":3622,"column":23},"end":{"line":3622,"column":53}},"id":2379},"2380":{"loc":{"start":{"line":3625,"column":19},"end":{"line":3625,"column":40}},"id":2380},"2381":{"loc":{"start":{"line":3626,"column":12},"end":{"line":3626,"column":18}},"id":2381},"2382":{"loc":{"start":{"line":3626,"column":12},"end":{"line":3626,"column":17}},"id":2382},"2383":{"loc":{"start":{"line":3627,"column":12},"end":{"line":3627,"column":43}},"id":2383},"2384":{"loc":{"start":{"line":3627,"column":18},"end":{"line":3627,"column":42}},"id":2384},"2385":{"loc":{"start":{"line":3628,"column":12},"end":{"line":3628,"column":24}},"id":2385},"2386":{"loc":{"start":{"line":3628,"column":12},"end":{"line":3628,"column":23}},"id":2386},"2387":{"loc":{"start":{"line":3629,"column":12},"end":{"line":3629,"column":32}},"id":2387},"2388":{"loc":{"start":{"line":3629,"column":20},"end":{"line":3629,"column":31}},"id":2388},"2389":{"loc":{"start":{"line":3630,"column":16},"end":{"line":3630,"column":47}},"id":2389},"2390":{"loc":{"start":{"line":3631,"column":16},"end":{"line":3631,"column":39}},"id":2390},"2391":{"loc":{"start":{"line":3631,"column":16},"end":{"line":3631,"column":38}},"id":2391},"2392":{"loc":{"start":{"line":3631,"column":32},"end":{"line":3631,"column":37}},"id":2392},"2393":{"loc":{"start":{"line":3633,"column":12},"end":{"line":3633,"column":50}},"id":2393},"2394":{"loc":{"start":{"line":3633,"column":22},"end":{"line":3633,"column":47}},"id":2394},"2395":{"loc":{"start":{"line":3634,"column":12},"end":{"line":3634,"column":24}},"id":2395},"2396":{"loc":{"start":{"line":3634,"column":12},"end":{"line":3634,"column":23}},"id":2396},"2397":{"loc":{"start":{"line":3635,"column":12},"end":{"line":3640,"column":14}},"id":2397},"2398":{"loc":{"start":{"line":3638,"column":23},"end":{"line":3638,"column":63}},"id":2398},"2399":{"loc":{"start":{"line":3642,"column":12},"end":{"line":3642,"column":43}},"id":2399},"2400":{"loc":{"start":{"line":3642,"column":18},"end":{"line":3642,"column":42}},"id":2400},"2401":{"loc":{"start":{"line":3643,"column":12},"end":{"line":3643,"column":24}},"id":2401},"2402":{"loc":{"start":{"line":3643,"column":12},"end":{"line":3643,"column":23}},"id":2402},"2403":{"loc":{"start":{"line":3644,"column":17},"end":{"line":3644,"column":27}},"id":2403},"2404":{"loc":{"start":{"line":3645,"column":16},"end":{"line":3645,"column":66}},"id":2404},"2405":{"loc":{"start":{"line":3645,"column":31},"end":{"line":3645,"column":65}},"id":2405},"2406":{"loc":{"start":{"line":3647,"column":12},"end":{"line":3647,"column":24}},"id":2406},"2407":{"loc":{"start":{"line":3647,"column":12},"end":{"line":3647,"column":23}},"id":2407},"2408":{"loc":{"start":{"line":3649,"column":12},"end":{"line":3654,"column":14}},"id":2408},"2409":{"loc":{"start":{"line":3652,"column":23},"end":{"line":3652,"column":63}},"id":2409},"2410":{"loc":{"start":{"line":3657,"column":8},"end":{"line":3657,"column":49}},"id":2410},"2411":{"loc":{"start":{"line":3658,"column":8},"end":{"line":3658,"column":22}},"id":2411},"2412":{"loc":{"start":{"line":3662,"column":8},"end":{"line":3662,"column":52}},"id":2412},"2413":{"loc":{"start":{"line":3664,"column":8},"end":{"line":3664,"column":20}},"id":2413},"2414":{"loc":{"start":{"line":3664,"column":8},"end":{"line":3664,"column":19}},"id":2414},"2415":{"loc":{"start":{"line":3666,"column":15},"end":{"line":3666,"column":29}},"id":2415},"2416":{"loc":{"start":{"line":3667,"column":16},"end":{"line":3667,"column":26}},"id":2416},"2417":{"loc":{"start":{"line":3670,"column":12},"end":{"line":3670,"column":47}},"id":2417},"2418":{"loc":{"start":{"line":3670,"column":27},"end":{"line":3670,"column":46}},"id":2418},"2419":{"loc":{"start":{"line":3671,"column":16},"end":{"line":3671,"column":51}},"id":2419},"2420":{"loc":{"start":{"line":3672,"column":16},"end":{"line":3672,"column":49}},"id":2420},"2421":{"loc":{"start":{"line":3672,"column":16},"end":{"line":3672,"column":48}},"id":2421},"2422":{"loc":{"start":{"line":3676,"column":8},"end":{"line":3676,"column":20}},"id":2422},"2423":{"loc":{"start":{"line":3676,"column":8},"end":{"line":3676,"column":19}},"id":2423},"2424":{"loc":{"start":{"line":3678,"column":8},"end":{"line":3681,"column":10}},"id":2424},"2425":{"loc":{"start":{"line":3685,"column":8},"end":{"line":3685,"column":50}},"id":2425},"2426":{"loc":{"start":{"line":3687,"column":8},"end":{"line":3687,"column":31}},"id":2426},"2427":{"loc":{"start":{"line":3687,"column":8},"end":{"line":3687,"column":30}},"id":2427},"2428":{"loc":{"start":{"line":3689,"column":8},"end":{"line":3689,"column":28}},"id":2428},"2429":{"loc":{"start":{"line":3689,"column":16},"end":{"line":3689,"column":27}},"id":2429},"2430":{"loc":{"start":{"line":3690,"column":8},"end":{"line":3690,"column":39}},"id":2430},"2431":{"loc":{"start":{"line":3690,"column":13},"end":{"line":3690,"column":38}},"id":2431},"2432":{"loc":{"start":{"line":3693,"column":16},"end":{"line":3693,"column":45}},"id":2432},"2433":{"loc":{"start":{"line":3694,"column":16},"end":{"line":3694,"column":60}},"id":2433},"2434":{"loc":{"start":{"line":3694,"column":16},"end":{"line":3694,"column":59}},"id":2434},"2435":{"loc":{"start":{"line":3695,"column":23},"end":{"line":3695,"column":60}},"id":2435},"2436":{"loc":{"start":{"line":3696,"column":16},"end":{"line":3696,"column":63}},"id":2436},"2437":{"loc":{"start":{"line":3696,"column":16},"end":{"line":3696,"column":62}},"id":2437},"2438":{"loc":{"start":{"line":3700,"column":8},"end":{"line":3700,"column":28}},"id":2438},"2439":{"loc":{"start":{"line":3700,"column":16},"end":{"line":3700,"column":27}},"id":2439},"2440":{"loc":{"start":{"line":3701,"column":12},"end":{"line":3701,"column":37}},"id":2440},"2441":{"loc":{"start":{"line":3702,"column":12},"end":{"line":3702,"column":37}},"id":2441},"2442":{"loc":{"start":{"line":3702,"column":12},"end":{"line":3702,"column":36}},"id":2442},"2443":{"loc":{"start":{"line":3703,"column":12},"end":{"line":3703,"column":53}},"id":2443},"2444":{"loc":{"start":{"line":3703,"column":25},"end":{"line":3703,"column":52}},"id":2444},"2445":{"loc":{"start":{"line":3706,"column":8},"end":{"line":3706,"column":32}},"id":2445},"2446":{"loc":{"start":{"line":3706,"column":15},"end":{"line":3706,"column":31}},"id":2446},"2447":{"loc":{"start":{"line":3707,"column":8},"end":{"line":3712,"column":10}},"id":2447},"2448":{"loc":{"start":{"line":3718,"column":8},"end":{"line":3718,"column":32}},"id":2448},"2449":{"loc":{"start":{"line":3718,"column":20},"end":{"line":3718,"column":31}},"id":2449},"2450":{"loc":{"start":{"line":3720,"column":12},"end":{"line":3720,"column":40}},"id":2450},"2451":{"loc":{"start":{"line":3724,"column":16},"end":{"line":3724,"column":61}},"id":2451},"2452":{"loc":{"start":{"line":3724,"column":23},"end":{"line":3724,"column":60}},"id":2452},"2453":{"loc":{"start":{"line":3726,"column":16},"end":{"line":3726,"column":50}},"id":2453},"2454":{"loc":{"start":{"line":3726,"column":23},"end":{"line":3726,"column":49}},"id":2454},"2455":{"loc":{"start":{"line":3728,"column":16},"end":{"line":3728,"column":40}},"id":2455},"2456":{"loc":{"start":{"line":3728,"column":23},"end":{"line":3728,"column":39}},"id":2456},"2457":{"loc":{"start":{"line":3732,"column":12},"end":{"line":3732,"column":36}},"id":2457},"2458":{"loc":{"start":{"line":3733,"column":12},"end":{"line":3733,"column":36}},"id":2458},"2459":{"loc":{"start":{"line":3733,"column":19},"end":{"line":3733,"column":35}},"id":2459},"2460":{"loc":{"start":{"line":3738,"column":8},"end":{"line":3738,"column":32}},"id":2460},"2461":{"loc":{"start":{"line":3738,"column":20},"end":{"line":3738,"column":31}},"id":2461},"2462":{"loc":{"start":{"line":3740,"column":12},"end":{"line":3740,"column":40}},"id":2462},"2463":{"loc":{"start":{"line":3743,"column":16},"end":{"line":3743,"column":59}},"id":2463},"2464":{"loc":{"start":{"line":3743,"column":23},"end":{"line":3743,"column":58}},"id":2464},"2465":{"loc":{"start":{"line":3745,"column":16},"end":{"line":3745,"column":48}},"id":2465},"2466":{"loc":{"start":{"line":3745,"column":23},"end":{"line":3745,"column":47}},"id":2466},"2467":{"loc":{"start":{"line":3747,"column":16},"end":{"line":3747,"column":48}},"id":2467},"2468":{"loc":{"start":{"line":3747,"column":23},"end":{"line":3747,"column":47}},"id":2468},"2469":{"loc":{"start":{"line":3751,"column":8},"end":{"line":3751,"column":36}},"id":2469},"2470":{"loc":{"start":{"line":3751,"column":15},"end":{"line":3751,"column":35}},"id":2470},"2471":{"loc":{"start":{"line":3755,"column":8},"end":{"line":3755,"column":82}},"id":2471},"2472":{"loc":{"start":{"line":3757,"column":15},"end":{"line":3757,"column":29}},"id":2472},"2473":{"loc":{"start":{"line":3758,"column":12},"end":{"line":3758,"column":32}},"id":2473},"2474":{"loc":{"start":{"line":3758,"column":20},"end":{"line":3758,"column":31}},"id":2474},"2475":{"loc":{"start":{"line":3759,"column":16},"end":{"line":3759,"column":50}},"id":2475},"2476":{"loc":{"start":{"line":3763,"column":12},"end":{"line":3763,"column":50}},"id":2476},"2477":{"loc":{"start":{"line":3763,"column":28},"end":{"line":3763,"column":49}},"id":2477},"2478":{"loc":{"start":{"line":3764,"column":12},"end":{"line":3764,"column":47}},"id":2478},"2479":{"loc":{"start":{"line":3764,"column":12},"end":{"line":3764,"column":46}},"id":2479},"2480":{"loc":{"start":{"line":3765,"column":16},"end":{"line":3765,"column":64}},"id":2480},"2481":{"loc":{"start":{"line":3769,"column":12},"end":{"line":3769,"column":76}},"id":2481},"2482":{"loc":{"start":{"line":3769,"column":24},"end":{"line":3769,"column":75}},"id":2482},"2483":{"loc":{"start":{"line":3769,"column":36},"end":{"line":3769,"column":54}},"id":2483},"2484":{"loc":{"start":{"line":3769,"column":56},"end":{"line":3769,"column":74}},"id":2484},"2485":{"loc":{"start":{"line":3770,"column":16},"end":{"line":3770,"column":42}},"id":2485},"2486":{"loc":{"start":{"line":3771,"column":16},"end":{"line":3771,"column":30}},"id":2486},"2487":{"loc":{"start":{"line":3773,"column":20},"end":{"line":3773,"column":77}},"id":2487},"2488":{"loc":{"start":{"line":3773,"column":20},"end":{"line":3773,"column":76}},"id":2488},"2489":{"loc":{"start":{"line":3776,"column":20},"end":{"line":3776,"column":51}},"id":2489},"2490":{"loc":{"start":{"line":3777,"column":20},"end":{"line":3777,"column":44}},"id":2490},"2491":{"loc":{"start":{"line":3782,"column":15},"end":{"line":3782,"column":29}},"id":2491},"2492":{"loc":{"start":{"line":3783,"column":12},"end":{"line":3783,"column":50}},"id":2492},"2493":{"loc":{"start":{"line":3783,"column":28},"end":{"line":3783,"column":49}},"id":2493},"2494":{"loc":{"start":{"line":3784,"column":16},"end":{"line":3784,"column":52}},"id":2494},"2495":{"loc":{"start":{"line":3787,"column":12},"end":{"line":3787,"column":47}},"id":2495},"2496":{"loc":{"start":{"line":3787,"column":12},"end":{"line":3787,"column":46}},"id":2496},"2497":{"loc":{"start":{"line":3789,"column":8},"end":{"line":3789,"column":30}},"id":2497},"2498":{"loc":{"start":{"line":3793,"column":8},"end":{"line":3793,"column":37}},"id":2498},"2499":{"loc":{"start":{"line":3793,"column":15},"end":{"line":3793,"column":36}},"id":2499},"2500":{"loc":{"start":{"line":3797,"column":8},"end":{"line":3798,"column":22}},"id":2500},"2501":{"loc":{"start":{"line":3800,"column":15},"end":{"line":3800,"column":29}},"id":2501},"2502":{"loc":{"start":{"line":3801,"column":16},"end":{"line":3801,"column":26}},"id":2502},"2503":{"loc":{"start":{"line":3804,"column":12},"end":{"line":3804,"column":45}},"id":2503},"2504":{"loc":{"start":{"line":3804,"column":24},"end":{"line":3804,"column":44}},"id":2504},"2505":{"loc":{"start":{"line":3805,"column":16},"end":{"line":3805,"column":48}},"id":2505},"2506":{"loc":{"start":{"line":3808,"column":12},"end":{"line":3808,"column":33}},"id":2506},"2507":{"loc":{"start":{"line":3808,"column":12},"end":{"line":3808,"column":32}},"id":2507},"2508":{"loc":{"start":{"line":3811,"column":8},"end":{"line":3811,"column":20}},"id":2508},"2509":{"loc":{"start":{"line":3815,"column":8},"end":{"line":3815,"column":18}},"id":2509},"2510":{"loc":{"start":{"line":3817,"column":8},"end":{"line":3817,"column":20}},"id":2510},"2511":{"loc":{"start":{"line":3817,"column":8},"end":{"line":3817,"column":19}},"id":2511},"2512":{"loc":{"start":{"line":3819,"column":8},"end":{"line":3819,"column":38}},"id":2512},"2513":{"loc":{"start":{"line":3819,"column":16},"end":{"line":3819,"column":37}},"id":2513},"2514":{"loc":{"start":{"line":3821,"column":8},"end":{"line":3821,"column":20}},"id":2514},"2515":{"loc":{"start":{"line":3821,"column":8},"end":{"line":3821,"column":19}},"id":2515},"2516":{"loc":{"start":{"line":3823,"column":8},"end":{"line":3826,"column":10}},"id":2516},"2517":{"loc":{"start":{"line":3830,"column":8},"end":{"line":3830,"column":20}},"id":2517},"2518":{"loc":{"start":{"line":3831,"column":8},"end":{"line":3831,"column":23}},"id":2518},"2519":{"loc":{"start":{"line":3832,"column":8},"end":{"line":3835,"column":10}},"id":2519},"2520":{"loc":{"start":{"line":3834,"column":18},"end":{"line":3834,"column":40}},"id":2520},"2521":{"loc":{"start":{"line":3836,"column":8},"end":{"line":3836,"column":23}},"id":2521},"2522":{"loc":{"start":{"line":3843,"column":8},"end":{"line":3843,"column":78}},"id":2522},"2523":{"loc":{"start":{"line":3843,"column":8},"end":{"line":3843,"column":77}},"id":2523},"2524":{"loc":{"start":{"line":3843,"column":15},"end":{"line":3843,"column":40}},"id":2524},"2525":{"loc":{"start":{"line":3849,"column":12},"end":{"line":3849,"column":37}},"id":2525},"2526":{"loc":{"start":{"line":3850,"column":16},"end":{"line":3850,"column":74}},"id":2526},"2527":{"loc":{"start":{"line":3850,"column":31},"end":{"line":3850,"column":56}},"id":2527},"2528":{"loc":{"start":{"line":3851,"column":16},"end":{"line":3851,"column":23}},"id":2528},"2529":{"loc":{"start":{"line":3855,"column":8},"end":{"line":3859,"column":11}},"id":2529},"2530":{"loc":{"start":{"line":3855,"column":8},"end":{"line":3859,"column":10}},"id":2530},"2531":{"loc":{"start":{"line":3863,"column":8},"end":{"line":3863,"column":58}},"id":2531},"2532":{"loc":{"start":{"line":3865,"column":8},"end":{"line":3865,"column":21}},"id":2532},"2533":{"loc":{"start":{"line":3866,"column":8},"end":{"line":3866,"column":29}},"id":2533},"2534":{"loc":{"start":{"line":3867,"column":8},"end":{"line":3867,"column":28}},"id":2534},"2535":{"loc":{"start":{"line":3869,"column":15},"end":{"line":3869,"column":29}},"id":2535},"2536":{"loc":{"start":{"line":3870,"column":12},"end":{"line":3870,"column":31}},"id":2536},"2537":{"loc":{"start":{"line":3873,"column":16},"end":{"line":3873,"column":32}},"id":2537},"2538":{"loc":{"start":{"line":3873,"column":21},"end":{"line":3873,"column":31}},"id":2538},"2539":{"loc":{"start":{"line":3874,"column":20},"end":{"line":3874,"column":35}},"id":2539},"2540":{"loc":{"start":{"line":3875,"column":20},"end":{"line":3875,"column":40}},"id":2540},"2541":{"loc":{"start":{"line":3876,"column":20},"end":{"line":3876,"column":34}},"id":2541},"2542":{"loc":{"start":{"line":3877,"column":20},"end":{"line":3877,"column":62}},"id":2542},"2543":{"loc":{"start":{"line":3877,"column":20},"end":{"line":3877,"column":61}},"id":2543},"2544":{"loc":{"start":{"line":3878,"column":27},"end":{"line":3878,"column":47}},"id":2544},"2545":{"loc":{"start":{"line":3879,"column":20},"end":{"line":3879,"column":40}},"id":2545},"2546":{"loc":{"start":{"line":3880,"column":20},"end":{"line":3880,"column":62}},"id":2546},"2547":{"loc":{"start":{"line":3880,"column":20},"end":{"line":3880,"column":61}},"id":2547},"2548":{"loc":{"start":{"line":3881,"column":24},"end":{"line":3881,"column":61}},"id":2548},"2549":{"loc":{"start":{"line":3881,"column":24},"end":{"line":3881,"column":35}},"id":2549},"2550":{"loc":{"start":{"line":3881,"column":39},"end":{"line":3881,"column":61}},"id":2550},"2551":{"loc":{"start":{"line":3882,"column":24},"end":{"line":3882,"column":32}},"id":2551},"2552":{"loc":{"start":{"line":3882,"column":24},"end":{"line":3882,"column":31}},"id":2552},"2553":{"loc":{"start":{"line":3884,"column":20},"end":{"line":3884,"column":33}},"id":2553},"2554":{"loc":{"start":{"line":3884,"column":20},"end":{"line":3884,"column":32}},"id":2554},"2555":{"loc":{"start":{"line":3885,"column":20},"end":{"line":3885,"column":38}},"id":2555},"2556":{"loc":{"start":{"line":3886,"column":20},"end":{"line":3886,"column":33}},"id":2556},"2557":{"loc":{"start":{"line":3888,"column":20},"end":{"line":3888,"column":34}},"id":2557},"2558":{"loc":{"start":{"line":3891,"column":20},"end":{"line":3891,"column":40}},"id":2558},"2559":{"loc":{"start":{"line":3892,"column":24},"end":{"line":3892,"column":65}},"id":2559},"2560":{"loc":{"start":{"line":3892,"column":24},"end":{"line":3892,"column":35}},"id":2560},"2561":{"loc":{"start":{"line":3892,"column":39},"end":{"line":3892,"column":65}},"id":2561},"2562":{"loc":{"start":{"line":3892,"column":46},"end":{"line":3892,"column":55}},"id":2562},"2563":{"loc":{"start":{"line":3893,"column":24},"end":{"line":3893,"column":32}},"id":2563},"2564":{"loc":{"start":{"line":3893,"column":24},"end":{"line":3893,"column":31}},"id":2564},"2565":{"loc":{"start":{"line":3894,"column":24},"end":{"line":3894,"column":42}},"id":2565},"2566":{"loc":{"start":{"line":3896,"column":24},"end":{"line":3896,"column":38}},"id":2566},"2567":{"loc":{"start":{"line":3898,"column":20},"end":{"line":3898,"column":33}},"id":2567},"2568":{"loc":{"start":{"line":3898,"column":20},"end":{"line":3898,"column":32}},"id":2568},"2569":{"loc":{"start":{"line":3899,"column":20},"end":{"line":3899,"column":28}},"id":2569},"2570":{"loc":{"start":{"line":3899,"column":20},"end":{"line":3899,"column":27}},"id":2570},"2571":{"loc":{"start":{"line":3900,"column":20},"end":{"line":3900,"column":38}},"id":2571},"2572":{"loc":{"start":{"line":3901,"column":24},"end":{"line":3901,"column":39}},"id":2572},"2573":{"loc":{"start":{"line":3902,"column":24},"end":{"line":3902,"column":76}},"id":2573},"2574":{"loc":{"start":{"line":3902,"column":24},"end":{"line":3902,"column":75}},"id":2574},"2575":{"loc":{"start":{"line":3905,"column":20},"end":{"line":3905,"column":36}},"id":2575},"2576":{"loc":{"start":{"line":3905,"column":25},"end":{"line":3905,"column":35}},"id":2576},"2577":{"loc":{"start":{"line":3906,"column":24},"end":{"line":3906,"column":39}},"id":2577},"2578":{"loc":{"start":{"line":3907,"column":24},"end":{"line":3907,"column":76}},"id":2578},"2579":{"loc":{"start":{"line":3907,"column":24},"end":{"line":3907,"column":75}},"id":2579},"2580":{"loc":{"start":{"line":3909,"column":20},"end":{"line":3909,"column":34}},"id":2580},"2581":{"loc":{"start":{"line":3910,"column":24},"end":{"line":3910,"column":34}},"id":2581},"2582":{"loc":{"start":{"line":3911,"column":24},"end":{"line":3911,"column":43}},"id":2582},"2583":{"loc":{"start":{"line":3912,"column":28},"end":{"line":3912,"column":38}},"id":2583},"2584":{"loc":{"start":{"line":3913,"column":28},"end":{"line":3913,"column":76}},"id":2584},"2585":{"loc":{"start":{"line":3913,"column":38},"end":{"line":3913,"column":75}},"id":2585},"2586":{"loc":{"start":{"line":3913,"column":56},"end":{"line":3913,"column":74}},"id":2586},"2587":{"loc":{"start":{"line":3914,"column":28},"end":{"line":3914,"column":49}},"id":2587},"2588":{"loc":{"start":{"line":3915,"column":28},"end":{"line":3915,"column":36}},"id":2588},"2589":{"loc":{"start":{"line":3915,"column":28},"end":{"line":3915,"column":35}},"id":2589},"2590":{"loc":{"start":{"line":3916,"column":28},"end":{"line":3916,"column":71}},"id":2590},"2591":{"loc":{"start":{"line":3916,"column":28},"end":{"line":3916,"column":70}},"id":2591},"2592":{"loc":{"start":{"line":3917,"column":28},"end":{"line":3917,"column":41}},"id":2592},"2593":{"loc":{"start":{"line":3921,"column":23},"end":{"line":3921,"column":33}},"id":2593},"2594":{"loc":{"start":{"line":3922,"column":16},"end":{"line":3922,"column":39}},"id":2594},"2595":{"loc":{"start":{"line":3922,"column":28},"end":{"line":3922,"column":37}},"id":2595},"2596":{"loc":{"start":{"line":3923,"column":20},"end":{"line":3923,"column":30}},"id":2596},"2597":{"loc":{"start":{"line":3924,"column":20},"end":{"line":3924,"column":34}},"id":2597},"2598":{"loc":{"start":{"line":3925,"column":20},"end":{"line":3925,"column":31}},"id":2598},"2599":{"loc":{"start":{"line":3926,"column":20},"end":{"line":3926,"column":39}},"id":2599},"2600":{"loc":{"start":{"line":3927,"column":27},"end":{"line":3927,"column":37}},"id":2600},"2601":{"loc":{"start":{"line":3928,"column":20},"end":{"line":3928,"column":34}},"id":2601},"2602":{"loc":{"start":{"line":3929,"column":20},"end":{"line":3929,"column":31}},"id":2602},"2603":{"loc":{"start":{"line":3930,"column":20},"end":{"line":3930,"column":40}},"id":2603},"2604":{"loc":{"start":{"line":3931,"column":24},"end":{"line":3931,"column":39}},"id":2604},"2605":{"loc":{"start":{"line":3932,"column":24},"end":{"line":3932,"column":76}},"id":2605},"2606":{"loc":{"start":{"line":3932,"column":24},"end":{"line":3932,"column":75}},"id":2606},"2607":{"loc":{"start":{"line":3937,"column":23},"end":{"line":3937,"column":39}},"id":2607},"2608":{"loc":{"start":{"line":3938,"column":16},"end":{"line":3938,"column":24}},"id":2608},"2609":{"loc":{"start":{"line":3938,"column":16},"end":{"line":3938,"column":23}},"id":2609},"2610":{"loc":{"start":{"line":3939,"column":23},"end":{"line":3939,"column":43}},"id":2610},"2611":{"loc":{"start":{"line":3940,"column":16},"end":{"line":3940,"column":24}},"id":2611},"2612":{"loc":{"start":{"line":3940,"column":16},"end":{"line":3940,"column":23}},"id":2612},"2613":{"loc":{"start":{"line":3941,"column":20},"end":{"line":3941,"column":58}},"id":2613},"2614":{"loc":{"start":{"line":3941,"column":20},"end":{"line":3941,"column":32}},"id":2614},"2615":{"loc":{"start":{"line":3941,"column":36},"end":{"line":3941,"column":58}},"id":2615},"2616":{"loc":{"start":{"line":3942,"column":20},"end":{"line":3942,"column":28}},"id":2616},"2617":{"loc":{"start":{"line":3942,"column":20},"end":{"line":3942,"column":27}},"id":2617},"2618":{"loc":{"start":{"line":3944,"column":16},"end":{"line":3944,"column":29}},"id":2618},"2619":{"loc":{"start":{"line":3944,"column":16},"end":{"line":3944,"column":28}},"id":2619},"2620":{"loc":{"start":{"line":3945,"column":16},"end":{"line":3945,"column":34}},"id":2620},"2621":{"loc":{"start":{"line":3953,"column":8},"end":{"line":3955,"column":18}},"id":2621},"2622":{"loc":{"start":{"line":3953,"column":20},"end":{"line":3953,"column":35}},"id":2622},"2623":{"loc":{"start":{"line":3957,"column":12},"end":{"line":3957,"column":36}},"id":2623},"2624":{"loc":{"start":{"line":3958,"column":12},"end":{"line":3958,"column":53}},"id":2624},"2625":{"loc":{"start":{"line":3959,"column":12},"end":{"line":3959,"column":64}},"id":2625},"2626":{"loc":{"start":{"line":3959,"column":20},"end":{"line":3959,"column":63}},"id":2626},"2627":{"loc":{"start":{"line":3960,"column":12},"end":{"line":3964,"column":15}},"id":2627},"2628":{"loc":{"start":{"line":3960,"column":12},"end":{"line":3964,"column":14}},"id":2628},"2629":{"loc":{"start":{"line":3967,"column":8},"end":{"line":3967,"column":21}},"id":2629},"2630":{"loc":{"start":{"line":3971,"column":8},"end":{"line":3971,"column":30}},"id":2630},"2631":{"loc":{"start":{"line":3973,"column":8},"end":{"line":3973,"column":22}},"id":2631},"2632":{"loc":{"start":{"line":3973,"column":8},"end":{"line":3973,"column":21}},"id":2632},"2633":{"loc":{"start":{"line":3975,"column":8},"end":{"line":3975,"column":20}},"id":2633},"2634":{"loc":{"start":{"line":3976,"column":8},"end":{"line":3976,"column":35}},"id":2634},"2635":{"loc":{"start":{"line":3976,"column":16},"end":{"line":3976,"column":34}},"id":2635},"2636":{"loc":{"start":{"line":3979,"column":12},"end":{"line":3979,"column":35}},"id":2636},"2637":{"loc":{"start":{"line":3980,"column":12},"end":{"line":3980,"column":58}},"id":2637},"2638":{"loc":{"start":{"line":3980,"column":33},"end":{"line":3980,"column":56}},"id":2638},"2639":{"loc":{"start":{"line":3981,"column":16},"end":{"line":3981,"column":69}},"id":2639},"2640":{"loc":{"start":{"line":3981,"column":16},"end":{"line":3981,"column":38}},"id":2640},"2641":{"loc":{"start":{"line":3981,"column":42},"end":{"line":3981,"column":69}},"id":2641},"2642":{"loc":{"start":{"line":3982,"column":20},"end":{"line":3982,"column":63}},"id":2642},"2643":{"loc":{"start":{"line":3982,"column":20},"end":{"line":3982,"column":39}},"id":2643},"2644":{"loc":{"start":{"line":3982,"column":43},"end":{"line":3982,"column":63}},"id":2644},"2645":{"loc":{"start":{"line":3983,"column":20},"end":{"line":3983,"column":39}},"id":2645},"2646":{"loc":{"start":{"line":3983,"column":20},"end":{"line":3983,"column":38}},"id":2646},"2647":{"loc":{"start":{"line":3988,"column":8},"end":{"line":3992,"column":11}},"id":2647},"2648":{"loc":{"start":{"line":3988,"column":8},"end":{"line":3992,"column":10}},"id":2648},"2649":{"loc":{"start":{"line":3994,"column":8},"end":{"line":3994,"column":21}},"id":2649},"2650":{"loc":{"start":{"line":3998,"column":8},"end":{"line":4001,"column":10}},"id":2650},"2651":{"loc":{"start":{"line":4005,"column":8},"end":{"line":4009,"column":10}},"id":2651},"2652":{"loc":{"start":{"line":4008,"column":17},"end":{"line":4008,"column":60}},"id":2652},"2653":{"loc":{"start":{"line":4014,"column":8},"end":{"line":4093,"column":10}},"id":2653},"2654":{"loc":{"start":{"line":4017,"column":16},"end":{"line":4018,"column":58}},"id":2654},"2655":{"loc":{"start":{"line":4017,"column":23},"end":{"line":4018,"column":57}},"id":2655},"2656":{"loc":{"start":{"line":4017,"column":23},"end":{"line":4017,"column":61}},"id":2656},"2657":{"loc":{"start":{"line":4018,"column":20},"end":{"line":4018,"column":57}},"id":2657},"2658":{"loc":{"start":{"line":4022,"column":20},"end":{"line":4022,"column":39}},"id":2658},"2659":{"loc":{"start":{"line":4023,"column":20},"end":{"line":4023,"column":37}},"id":2659},"2660":{"loc":{"start":{"line":4023,"column":20},"end":{"line":4023,"column":36}},"id":2660},"2661":{"loc":{"start":{"line":4025,"column":20},"end":{"line":4025,"column":40}},"id":2661},"2662":{"loc":{"start":{"line":4026,"column":20},"end":{"line":4026,"column":38}},"id":2662},"2663":{"loc":{"start":{"line":4026,"column":20},"end":{"line":4026,"column":37}},"id":2663},"2664":{"loc":{"start":{"line":4029,"column":20},"end":{"line":4029,"column":62}},"id":2664},"2665":{"loc":{"start":{"line":4029,"column":29},"end":{"line":4029,"column":62}},"id":2665},"2666":{"loc":{"start":{"line":4030,"column":20},"end":{"line":4030,"column":75}},"id":2666},"2667":{"loc":{"start":{"line":4032,"column":20},"end":{"line":4032,"column":58}},"id":2667},"2668":{"loc":{"start":{"line":4032,"column":27},"end":{"line":4032,"column":58}},"id":2668},"2669":{"loc":{"start":{"line":4033,"column":20},"end":{"line":4036,"column":22}},"id":2669},"2670":{"loc":{"start":{"line":4040,"column":12},"end":{"line":4091,"column":14}},"id":2670},"2671":{"loc":{"start":{"line":4041,"column":16},"end":{"line":4041,"column":45}},"id":2671},"2672":{"loc":{"start":{"line":4043,"column":16},"end":{"line":4043,"column":30}},"id":2672},"2673":{"loc":{"start":{"line":4043,"column":16},"end":{"line":4043,"column":29}},"id":2673},"2674":{"loc":{"start":{"line":4044,"column":16},"end":{"line":4044,"column":39}},"id":2674},"2675":{"loc":{"start":{"line":4045,"column":16},"end":{"line":4050,"column":18}},"id":2675},"2676":{"loc":{"start":{"line":4048,"column":32},"end":{"line":4048,"column":49}},"id":2676},"2677":{"loc":{"start":{"line":4052,"column":16},"end":{"line":4052,"column":60}},"id":2677},"2678":{"loc":{"start":{"line":4052,"column":23},"end":{"line":4052,"column":59}},"id":2678},"2679":{"loc":{"start":{"line":4053,"column":20},"end":{"line":4053,"column":47}},"id":2679},"2680":{"loc":{"start":{"line":4056,"column":24},"end":{"line":4056,"column":45}},"id":2680},"2681":{"loc":{"start":{"line":4057,"column":24},"end":{"line":4057,"column":47}},"id":2681},"2682":{"loc":{"start":{"line":4061,"column":24},"end":{"line":4064,"column":26}},"id":2682},"2683":{"loc":{"start":{"line":4063,"column":36},"end":{"line":4063,"column":53}},"id":2683},"2684":{"loc":{"start":{"line":4065,"column":24},"end":{"line":4065,"column":43}},"id":2684},"2685":{"loc":{"start":{"line":4068,"column":24},"end":{"line":4068,"column":38}},"id":2685},"2686":{"loc":{"start":{"line":4069,"column":24},"end":{"line":4069,"column":36}},"id":2686},"2687":{"loc":{"start":{"line":4069,"column":24},"end":{"line":4069,"column":35}},"id":2687},"2688":{"loc":{"start":{"line":4072,"column":24},"end":{"line":4072,"column":61}},"id":2688},"2689":{"loc":{"start":{"line":4073,"column":28},"end":{"line":4073,"column":68}},"id":2689},"2690":{"loc":{"start":{"line":4074,"column":28},"end":{"line":4074,"column":65}},"id":2690},"2691":{"loc":{"start":{"line":4076,"column":28},"end":{"line":4076,"column":66}},"id":2691},"2692":{"loc":{"start":{"line":4077,"column":28},"end":{"line":4077,"column":67}},"id":2692},"2693":{"loc":{"start":{"line":4081,"column":24},"end":{"line":4081,"column":59}},"id":2693},"2694":{"loc":{"start":{"line":4082,"column":28},"end":{"line":4082,"column":68}},"id":2694},"2695":{"loc":{"start":{"line":4083,"column":28},"end":{"line":4083,"column":65}},"id":2695},"2696":{"loc":{"start":{"line":4085,"column":28},"end":{"line":4085,"column":66}},"id":2696},"2697":{"loc":{"start":{"line":4086,"column":28},"end":{"line":4086,"column":67}},"id":2697},"2698":{"loc":{"start":{"line":4089,"column":20},"end":{"line":4089,"column":32}},"id":2698},"2699":{"loc":{"start":{"line":4098,"column":8},"end":{"line":4098,"column":25}},"id":2699},"2700":{"loc":{"start":{"line":4101,"column":12},"end":{"line":4101,"column":44}},"id":2700},"2701":{"loc":{"start":{"line":4102,"column":12},"end":{"line":4102,"column":38}},"id":2701},"2702":{"loc":{"start":{"line":4106,"column":12},"end":{"line":4106,"column":48}},"id":2702},"2703":{"loc":{"start":{"line":4107,"column":12},"end":{"line":4107,"column":45}},"id":2703},"2704":{"loc":{"start":{"line":4110,"column":12},"end":{"line":4110,"column":36}},"id":2704},"2705":{"loc":{"start":{"line":4112,"column":12},"end":{"line":4112,"column":72}},"id":2705},"2706":{"loc":{"start":{"line":4112,"column":27},"end":{"line":4112,"column":71}},"id":2706},"2707":{"loc":{"start":{"line":4114,"column":12},"end":{"line":4114,"column":68}},"id":2707},"2708":{"loc":{"start":{"line":4115,"column":12},"end":{"line":4115,"column":72}},"id":2708},"2709":{"loc":{"start":{"line":4116,"column":12},"end":{"line":4116,"column":72}},"id":2709},"2710":{"loc":{"start":{"line":4117,"column":12},"end":{"line":4117,"column":70}},"id":2710},"2711":{"loc":{"start":{"line":4118,"column":12},"end":{"line":4118,"column":72}},"id":2711},"2712":{"loc":{"start":{"line":4119,"column":12},"end":{"line":4119,"column":42}},"id":2712},"2713":{"loc":{"start":{"line":4120,"column":12},"end":{"line":4120,"column":76}},"id":2713},"2714":{"loc":{"start":{"line":4121,"column":12},"end":{"line":4121,"column":52}},"id":2714},"2715":{"loc":{"start":{"line":4122,"column":12},"end":{"line":4122,"column":54}},"id":2715},"2716":{"loc":{"start":{"line":4123,"column":12},"end":{"line":4123,"column":60}},"id":2716},"2717":{"loc":{"start":{"line":4124,"column":12},"end":{"line":4124,"column":74}},"id":2717},"2718":{"loc":{"start":{"line":4125,"column":12},"end":{"line":4125,"column":70}},"id":2718},"2719":{"loc":{"start":{"line":4126,"column":12},"end":{"line":4126,"column":68}},"id":2719},"2720":{"loc":{"start":{"line":4127,"column":12},"end":{"line":4127,"column":66}},"id":2720},"2721":{"loc":{"start":{"line":4128,"column":12},"end":{"line":4128,"column":62}},"id":2721},"2722":{"loc":{"start":{"line":4129,"column":12},"end":{"line":4129,"column":84}},"id":2722},"2723":{"loc":{"start":{"line":4130,"column":12},"end":{"line":4130,"column":52}},"id":2723},"2724":{"loc":{"start":{"line":4131,"column":12},"end":{"line":4131,"column":76}},"id":2724},"2725":{"loc":{"start":{"line":4132,"column":12},"end":{"line":4132,"column":70}},"id":2725},"2726":{"loc":{"start":{"line":4133,"column":12},"end":{"line":4133,"column":68}},"id":2726},"2727":{"loc":{"start":{"line":4134,"column":12},"end":{"line":4134,"column":40}},"id":2727},"2728":{"loc":{"start":{"line":4135,"column":12},"end":{"line":4135,"column":66}},"id":2728},"2729":{"loc":{"start":{"line":4136,"column":12},"end":{"line":4136,"column":62}},"id":2729},"2730":{"loc":{"start":{"line":4137,"column":12},"end":{"line":4137,"column":72}},"id":2730},"2731":{"loc":{"start":{"line":4138,"column":12},"end":{"line":4138,"column":70}},"id":2731},"2732":{"loc":{"start":{"line":4139,"column":12},"end":{"line":4139,"column":80}},"id":2732},"2733":{"loc":{"start":{"line":4140,"column":12},"end":{"line":4140,"column":66}},"id":2733},"2734":{"loc":{"start":{"line":4141,"column":12},"end":{"line":4141,"column":54}},"id":2734},"2735":{"loc":{"start":{"line":4142,"column":12},"end":{"line":4142,"column":58}},"id":2735},"2736":{"loc":{"start":{"line":4143,"column":12},"end":{"line":4143,"column":66}},"id":2736},"2737":{"loc":{"start":{"line":4144,"column":12},"end":{"line":4144,"column":70}},"id":2737},"2738":{"loc":{"start":{"line":4145,"column":12},"end":{"line":4145,"column":60}},"id":2738},"2739":{"loc":{"start":{"line":4146,"column":12},"end":{"line":4146,"column":66}},"id":2739},"2740":{"loc":{"start":{"line":4147,"column":12},"end":{"line":4147,"column":40}},"id":2740},"2741":{"loc":{"start":{"line":4148,"column":12},"end":{"line":4148,"column":66}},"id":2741},"2742":{"loc":{"start":{"line":4149,"column":12},"end":{"line":4149,"column":66}},"id":2742},"2743":{"loc":{"start":{"line":4150,"column":12},"end":{"line":4150,"column":46}},"id":2743},"2744":{"loc":{"start":{"line":4151,"column":12},"end":{"line":4151,"column":64}},"id":2744},"2745":{"loc":{"start":{"line":4152,"column":12},"end":{"line":4152,"column":62}},"id":2745},"2746":{"loc":{"start":{"line":4153,"column":12},"end":{"line":4153,"column":72}},"id":2746},"2747":{"loc":{"start":{"line":4154,"column":12},"end":{"line":4154,"column":50}},"id":2747},"2748":{"loc":{"start":{"line":4155,"column":12},"end":{"line":4155,"column":62}},"id":2748},"2749":{"loc":{"start":{"line":4156,"column":12},"end":{"line":4156,"column":52}},"id":2749},"2750":{"loc":{"start":{"line":4157,"column":12},"end":{"line":4157,"column":62}},"id":2750},"2751":{"loc":{"start":{"line":4158,"column":12},"end":{"line":4158,"column":62}},"id":2751},"2752":{"loc":{"start":{"line":4159,"column":12},"end":{"line":4159,"column":70}},"id":2752},"2753":{"loc":{"start":{"line":4160,"column":12},"end":{"line":4160,"column":68}},"id":2753},"2754":{"loc":{"start":{"line":4161,"column":12},"end":{"line":4161,"column":56}},"id":2754},"2755":{"loc":{"start":{"line":4162,"column":12},"end":{"line":4162,"column":64}},"id":2755},"2756":{"loc":{"start":{"line":4163,"column":12},"end":{"line":4163,"column":50}},"id":2756},"2757":{"loc":{"start":{"line":4164,"column":12},"end":{"line":4164,"column":74}},"id":2757},"2758":{"loc":{"start":{"line":4166,"column":12},"end":{"line":4166,"column":82}},"id":2758},"2759":{"loc":{"start":{"line":4166,"column":38},"end":{"line":4166,"column":81}},"id":2759},"2760":{"loc":{"start":{"line":4167,"column":12},"end":{"line":4167,"column":86}},"id":2760},"2761":{"loc":{"start":{"line":4167,"column":40},"end":{"line":4167,"column":85}},"id":2761},"2762":{"loc":{"start":{"line":4168,"column":12},"end":{"line":4168,"column":86}},"id":2762},"2763":{"loc":{"start":{"line":4168,"column":40},"end":{"line":4168,"column":85}},"id":2763},"2764":{"loc":{"start":{"line":4169,"column":12},"end":{"line":4169,"column":84}},"id":2764},"2765":{"loc":{"start":{"line":4169,"column":39},"end":{"line":4169,"column":83}},"id":2765},"2766":{"loc":{"start":{"line":4170,"column":12},"end":{"line":4170,"column":86}},"id":2766},"2767":{"loc":{"start":{"line":4170,"column":40},"end":{"line":4170,"column":85}},"id":2767},"2768":{"loc":{"start":{"line":4171,"column":12},"end":{"line":4171,"column":56}},"id":2768},"2769":{"loc":{"start":{"line":4171,"column":25},"end":{"line":4171,"column":55}},"id":2769},"2770":{"loc":{"start":{"line":4172,"column":12},"end":{"line":4172,"column":90}},"id":2770},"2771":{"loc":{"start":{"line":4172,"column":42},"end":{"line":4172,"column":89}},"id":2771},"2772":{"loc":{"start":{"line":4173,"column":12},"end":{"line":4173,"column":66}},"id":2772},"2773":{"loc":{"start":{"line":4173,"column":30},"end":{"line":4173,"column":65}},"id":2773},"2774":{"loc":{"start":{"line":4174,"column":12},"end":{"line":4174,"column":68}},"id":2774},"2775":{"loc":{"start":{"line":4174,"column":31},"end":{"line":4174,"column":67}},"id":2775},"2776":{"loc":{"start":{"line":4175,"column":12},"end":{"line":4175,"column":74}},"id":2776},"2777":{"loc":{"start":{"line":4175,"column":34},"end":{"line":4175,"column":73}},"id":2777},"2778":{"loc":{"start":{"line":4176,"column":12},"end":{"line":4176,"column":88}},"id":2778},"2779":{"loc":{"start":{"line":4176,"column":41},"end":{"line":4176,"column":87}},"id":2779},"2780":{"loc":{"start":{"line":4177,"column":12},"end":{"line":4177,"column":84}},"id":2780},"2781":{"loc":{"start":{"line":4177,"column":39},"end":{"line":4177,"column":83}},"id":2781},"2782":{"loc":{"start":{"line":4178,"column":12},"end":{"line":4178,"column":74}},"id":2782},"2783":{"loc":{"start":{"line":4178,"column":37},"end":{"line":4178,"column":73}},"id":2783},"2784":{"loc":{"start":{"line":4179,"column":12},"end":{"line":4179,"column":70}},"id":2784},"2785":{"loc":{"start":{"line":4179,"column":35},"end":{"line":4179,"column":69}},"id":2785},"2786":{"loc":{"start":{"line":4180,"column":12},"end":{"line":4180,"column":92}},"id":2786},"2787":{"loc":{"start":{"line":4180,"column":46},"end":{"line":4180,"column":91}},"id":2787},"2788":{"loc":{"start":{"line":4181,"column":12},"end":{"line":4181,"column":82}},"id":2788},"2789":{"loc":{"start":{"line":4181,"column":38},"end":{"line":4181,"column":81}},"id":2789},"2790":{"loc":{"start":{"line":4182,"column":12},"end":{"line":4182,"column":66}},"id":2790},"2791":{"loc":{"start":{"line":4182,"column":30},"end":{"line":4182,"column":65}},"id":2791},"2792":{"loc":{"start":{"line":4183,"column":12},"end":{"line":4183,"column":90}},"id":2792},"2793":{"loc":{"start":{"line":4183,"column":42},"end":{"line":4183,"column":89}},"id":2793},"2794":{"loc":{"start":{"line":4184,"column":12},"end":{"line":4184,"column":84}},"id":2794},"2795":{"loc":{"start":{"line":4184,"column":39},"end":{"line":4184,"column":83}},"id":2795},"2796":{"loc":{"start":{"line":4185,"column":12},"end":{"line":4185,"column":82}},"id":2796},"2797":{"loc":{"start":{"line":4185,"column":38},"end":{"line":4185,"column":81}},"id":2797},"2798":{"loc":{"start":{"line":4186,"column":12},"end":{"line":4186,"column":54}},"id":2798},"2799":{"loc":{"start":{"line":4186,"column":24},"end":{"line":4186,"column":53}},"id":2799},"2800":{"loc":{"start":{"line":4187,"column":12},"end":{"line":4187,"column":80}},"id":2800},"2801":{"loc":{"start":{"line":4187,"column":37},"end":{"line":4187,"column":79}},"id":2801},"2802":{"loc":{"start":{"line":4188,"column":12},"end":{"line":4188,"column":76}},"id":2802},"2803":{"loc":{"start":{"line":4188,"column":35},"end":{"line":4188,"column":75}},"id":2803},"2804":{"loc":{"start":{"line":4189,"column":12},"end":{"line":4189,"column":86}},"id":2804},"2805":{"loc":{"start":{"line":4189,"column":40},"end":{"line":4189,"column":85}},"id":2805},"2806":{"loc":{"start":{"line":4190,"column":12},"end":{"line":4190,"column":84}},"id":2806},"2807":{"loc":{"start":{"line":4190,"column":39},"end":{"line":4190,"column":83}},"id":2807},"2808":{"loc":{"start":{"line":4191,"column":12},"end":{"line":4191,"column":94}},"id":2808},"2809":{"loc":{"start":{"line":4191,"column":44},"end":{"line":4191,"column":93}},"id":2809},"2810":{"loc":{"start":{"line":4192,"column":12},"end":{"line":4192,"column":80}},"id":2810},"2811":{"loc":{"start":{"line":4192,"column":37},"end":{"line":4192,"column":79}},"id":2811},"2812":{"loc":{"start":{"line":4193,"column":12},"end":{"line":4193,"column":68}},"id":2812},"2813":{"loc":{"start":{"line":4193,"column":31},"end":{"line":4193,"column":67}},"id":2813},"2814":{"loc":{"start":{"line":4194,"column":12},"end":{"line":4194,"column":72}},"id":2814},"2815":{"loc":{"start":{"line":4194,"column":33},"end":{"line":4194,"column":71}},"id":2815},"2816":{"loc":{"start":{"line":4195,"column":12},"end":{"line":4195,"column":80}},"id":2816},"2817":{"loc":{"start":{"line":4195,"column":37},"end":{"line":4195,"column":79}},"id":2817},"2818":{"loc":{"start":{"line":4196,"column":12},"end":{"line":4196,"column":84}},"id":2818},"2819":{"loc":{"start":{"line":4196,"column":39},"end":{"line":4196,"column":83}},"id":2819},"2820":{"loc":{"start":{"line":4197,"column":12},"end":{"line":4197,"column":74}},"id":2820},"2821":{"loc":{"start":{"line":4197,"column":34},"end":{"line":4197,"column":73}},"id":2821},"2822":{"loc":{"start":{"line":4198,"column":12},"end":{"line":4198,"column":80}},"id":2822},"2823":{"loc":{"start":{"line":4198,"column":37},"end":{"line":4198,"column":79}},"id":2823},"2824":{"loc":{"start":{"line":4199,"column":12},"end":{"line":4199,"column":54}},"id":2824},"2825":{"loc":{"start":{"line":4199,"column":24},"end":{"line":4199,"column":53}},"id":2825},"2826":{"loc":{"start":{"line":4200,"column":12},"end":{"line":4200,"column":80}},"id":2826},"2827":{"loc":{"start":{"line":4200,"column":37},"end":{"line":4200,"column":79}},"id":2827},"2828":{"loc":{"start":{"line":4201,"column":12},"end":{"line":4201,"column":80}},"id":2828},"2829":{"loc":{"start":{"line":4201,"column":37},"end":{"line":4201,"column":79}},"id":2829},"2830":{"loc":{"start":{"line":4202,"column":12},"end":{"line":4202,"column":60}},"id":2830},"2831":{"loc":{"start":{"line":4202,"column":27},"end":{"line":4202,"column":59}},"id":2831},"2832":{"loc":{"start":{"line":4203,"column":12},"end":{"line":4203,"column":78}},"id":2832},"2833":{"loc":{"start":{"line":4203,"column":36},"end":{"line":4203,"column":77}},"id":2833},"2834":{"loc":{"start":{"line":4204,"column":12},"end":{"line":4204,"column":70}},"id":2834},"2835":{"loc":{"start":{"line":4204,"column":35},"end":{"line":4204,"column":69}},"id":2835},"2836":{"loc":{"start":{"line":4205,"column":12},"end":{"line":4205,"column":86}},"id":2836},"2837":{"loc":{"start":{"line":4205,"column":40},"end":{"line":4205,"column":85}},"id":2837},"2838":{"loc":{"start":{"line":4206,"column":12},"end":{"line":4206,"column":64}},"id":2838},"2839":{"loc":{"start":{"line":4206,"column":29},"end":{"line":4206,"column":63}},"id":2839},"2840":{"loc":{"start":{"line":4207,"column":12},"end":{"line":4207,"column":76}},"id":2840},"2841":{"loc":{"start":{"line":4207,"column":35},"end":{"line":4207,"column":75}},"id":2841},"2842":{"loc":{"start":{"line":4208,"column":12},"end":{"line":4208,"column":66}},"id":2842},"2843":{"loc":{"start":{"line":4208,"column":30},"end":{"line":4208,"column":65}},"id":2843},"2844":{"loc":{"start":{"line":4209,"column":12},"end":{"line":4209,"column":76}},"id":2844},"2845":{"loc":{"start":{"line":4209,"column":35},"end":{"line":4209,"column":75}},"id":2845},"2846":{"loc":{"start":{"line":4210,"column":12},"end":{"line":4210,"column":76}},"id":2846},"2847":{"loc":{"start":{"line":4210,"column":35},"end":{"line":4210,"column":75}},"id":2847},"2848":{"loc":{"start":{"line":4211,"column":12},"end":{"line":4211,"column":84}},"id":2848},"2849":{"loc":{"start":{"line":4211,"column":39},"end":{"line":4211,"column":83}},"id":2849},"2850":{"loc":{"start":{"line":4212,"column":12},"end":{"line":4212,"column":82}},"id":2850},"2851":{"loc":{"start":{"line":4212,"column":38},"end":{"line":4212,"column":81}},"id":2851},"2852":{"loc":{"start":{"line":4213,"column":12},"end":{"line":4213,"column":70}},"id":2852},"2853":{"loc":{"start":{"line":4213,"column":32},"end":{"line":4213,"column":69}},"id":2853},"2854":{"loc":{"start":{"line":4214,"column":12},"end":{"line":4214,"column":78}},"id":2854},"2855":{"loc":{"start":{"line":4214,"column":36},"end":{"line":4214,"column":77}},"id":2855},"2856":{"loc":{"start":{"line":4215,"column":12},"end":{"line":4215,"column":64}},"id":2856},"2857":{"loc":{"start":{"line":4215,"column":29},"end":{"line":4215,"column":63}},"id":2857},"2858":{"loc":{"start":{"line":4216,"column":12},"end":{"line":4216,"column":88}},"id":2858},"2859":{"loc":{"start":{"line":4216,"column":41},"end":{"line":4216,"column":87}},"id":2859},"2860":{"loc":{"start":{"line":4219,"column":12},"end":{"line":4219,"column":47}},"id":2860},"2861":{"loc":{"start":{"line":4220,"column":12},"end":{"line":4220,"column":36}},"id":2861},"2862":{"loc":{"start":{"line":4221,"column":12},"end":{"line":4221,"column":42}},"id":2862},"2863":{"loc":{"start":{"line":4223,"column":12},"end":{"line":4223,"column":35}},"id":2863},"2864":{"loc":{"start":{"line":4224,"column":12},"end":{"line":4224,"column":38}},"id":2864},"2865":{"loc":{"start":{"line":4229,"column":12},"end":{"line":4229,"column":51}},"id":2865},"2866":{"loc":{"start":{"line":4230,"column":12},"end":{"line":4230,"column":44}},"id":2866},"2867":{"loc":{"start":{"line":4234,"column":12},"end":{"line":4234,"column":48}},"id":2867},"2868":{"loc":{"start":{"line":4237,"column":12},"end":{"line":4237,"column":36}},"id":2868},"2869":{"loc":{"start":{"line":4238,"column":12},"end":{"line":4238,"column":68}},"id":2869},"2870":{"loc":{"start":{"line":4239,"column":12},"end":{"line":4239,"column":72}},"id":2870},"2871":{"loc":{"start":{"line":4240,"column":12},"end":{"line":4240,"column":72}},"id":2871},"2872":{"loc":{"start":{"line":4241,"column":12},"end":{"line":4241,"column":70}},"id":2872},"2873":{"loc":{"start":{"line":4242,"column":12},"end":{"line":4242,"column":72}},"id":2873},"2874":{"loc":{"start":{"line":4243,"column":12},"end":{"line":4243,"column":42}},"id":2874},"2875":{"loc":{"start":{"line":4244,"column":12},"end":{"line":4244,"column":76}},"id":2875},"2876":{"loc":{"start":{"line":4245,"column":12},"end":{"line":4245,"column":52}},"id":2876},"2877":{"loc":{"start":{"line":4246,"column":12},"end":{"line":4246,"column":54}},"id":2877},"2878":{"loc":{"start":{"line":4247,"column":12},"end":{"line":4247,"column":60}},"id":2878},"2879":{"loc":{"start":{"line":4248,"column":12},"end":{"line":4248,"column":74}},"id":2879},"2880":{"loc":{"start":{"line":4249,"column":12},"end":{"line":4249,"column":70}},"id":2880},"2881":{"loc":{"start":{"line":4250,"column":12},"end":{"line":4250,"column":68}},"id":2881},"2882":{"loc":{"start":{"line":4251,"column":12},"end":{"line":4251,"column":66}},"id":2882},"2883":{"loc":{"start":{"line":4252,"column":12},"end":{"line":4252,"column":62}},"id":2883},"2884":{"loc":{"start":{"line":4253,"column":12},"end":{"line":4253,"column":84}},"id":2884},"2885":{"loc":{"start":{"line":4254,"column":12},"end":{"line":4254,"column":52}},"id":2885},"2886":{"loc":{"start":{"line":4255,"column":12},"end":{"line":4255,"column":76}},"id":2886},"2887":{"loc":{"start":{"line":4256,"column":12},"end":{"line":4256,"column":70}},"id":2887},"2888":{"loc":{"start":{"line":4257,"column":12},"end":{"line":4257,"column":68}},"id":2888},"2889":{"loc":{"start":{"line":4258,"column":12},"end":{"line":4258,"column":40}},"id":2889},"2890":{"loc":{"start":{"line":4259,"column":12},"end":{"line":4259,"column":66}},"id":2890},"2891":{"loc":{"start":{"line":4260,"column":12},"end":{"line":4260,"column":62}},"id":2891},"2892":{"loc":{"start":{"line":4261,"column":12},"end":{"line":4261,"column":72}},"id":2892},"2893":{"loc":{"start":{"line":4262,"column":12},"end":{"line":4262,"column":70}},"id":2893},"2894":{"loc":{"start":{"line":4263,"column":12},"end":{"line":4263,"column":80}},"id":2894},"2895":{"loc":{"start":{"line":4264,"column":12},"end":{"line":4264,"column":66}},"id":2895},"2896":{"loc":{"start":{"line":4265,"column":12},"end":{"line":4265,"column":54}},"id":2896},"2897":{"loc":{"start":{"line":4266,"column":12},"end":{"line":4266,"column":58}},"id":2897},"2898":{"loc":{"start":{"line":4267,"column":12},"end":{"line":4267,"column":66}},"id":2898},"2899":{"loc":{"start":{"line":4268,"column":12},"end":{"line":4268,"column":70}},"id":2899},"2900":{"loc":{"start":{"line":4269,"column":12},"end":{"line":4269,"column":60}},"id":2900},"2901":{"loc":{"start":{"line":4270,"column":12},"end":{"line":4270,"column":66}},"id":2901},"2902":{"loc":{"start":{"line":4271,"column":12},"end":{"line":4271,"column":40}},"id":2902},"2903":{"loc":{"start":{"line":4272,"column":12},"end":{"line":4272,"column":66}},"id":2903},"2904":{"loc":{"start":{"line":4273,"column":12},"end":{"line":4273,"column":66}},"id":2904},"2905":{"loc":{"start":{"line":4274,"column":12},"end":{"line":4274,"column":46}},"id":2905},"2906":{"loc":{"start":{"line":4275,"column":12},"end":{"line":4275,"column":64}},"id":2906},"2907":{"loc":{"start":{"line":4276,"column":12},"end":{"line":4276,"column":62}},"id":2907},"2908":{"loc":{"start":{"line":4277,"column":12},"end":{"line":4277,"column":72}},"id":2908},"2909":{"loc":{"start":{"line":4278,"column":12},"end":{"line":4278,"column":50}},"id":2909},"2910":{"loc":{"start":{"line":4279,"column":12},"end":{"line":4279,"column":62}},"id":2910},"2911":{"loc":{"start":{"line":4280,"column":12},"end":{"line":4280,"column":52}},"id":2911},"2912":{"loc":{"start":{"line":4281,"column":12},"end":{"line":4281,"column":62}},"id":2912},"2913":{"loc":{"start":{"line":4282,"column":12},"end":{"line":4282,"column":62}},"id":2913},"2914":{"loc":{"start":{"line":4283,"column":12},"end":{"line":4283,"column":70}},"id":2914},"2915":{"loc":{"start":{"line":4284,"column":12},"end":{"line":4284,"column":68}},"id":2915},"2916":{"loc":{"start":{"line":4285,"column":12},"end":{"line":4285,"column":56}},"id":2916},"2917":{"loc":{"start":{"line":4286,"column":12},"end":{"line":4286,"column":64}},"id":2917},"2918":{"loc":{"start":{"line":4287,"column":12},"end":{"line":4287,"column":50}},"id":2918},"2919":{"loc":{"start":{"line":4288,"column":12},"end":{"line":4288,"column":74}},"id":2919},"2920":{"loc":{"start":{"line":4291,"column":12},"end":{"line":4291,"column":50}},"id":2920},"2921":{"loc":{"start":{"line":4292,"column":12},"end":{"line":4292,"column":36}},"id":2921},"2922":{"loc":{"start":{"line":4293,"column":12},"end":{"line":4293,"column":42}},"id":2922},"2923":{"loc":{"start":{"line":4298,"column":8},"end":{"line":4300,"column":14}},"id":2923},"2924":{"loc":{"start":{"line":4301,"column":20},"end":{"line":4301,"column":30}},"id":2924},"2925":{"loc":{"start":{"line":4301,"column":32},"end":{"line":4301,"column":35}},"id":2925},"2926":{"loc":{"start":{"line":4302,"column":12},"end":{"line":4302,"column":38}},"id":2926},"2927":{"loc":{"start":{"line":4302,"column":24},"end":{"line":4302,"column":37}},"id":2927},"2928":{"loc":{"start":{"line":4304,"column":8},"end":{"line":4304,"column":22}},"id":2928},"2929":{"loc":{"start":{"line":4308,"column":8},"end":{"line":4308,"column":30}},"id":2929},"2930":{"loc":{"start":{"line":4310,"column":8},"end":{"line":4310,"column":26}},"id":2930},"2931":{"loc":{"start":{"line":4311,"column":12},"end":{"line":4311,"column":65}},"id":2931},"2932":{"loc":{"start":{"line":4311,"column":12},"end":{"line":4311,"column":36}},"id":2932},"2933":{"loc":{"start":{"line":4311,"column":41},"end":{"line":4311,"column":65}},"id":2933},"2934":{"loc":{"start":{"line":4312,"column":12},"end":{"line":4312,"column":34}},"id":2934},"2935":{"loc":{"start":{"line":4312,"column":19},"end":{"line":4312,"column":33}},"id":2935},"2936":{"loc":{"start":{"line":4315,"column":8},"end":{"line":4315,"column":22}},"id":2936},"2937":{"loc":{"start":{"line":4316,"column":8},"end":{"line":4316,"column":18}},"id":2937},"2938":{"loc":{"start":{"line":4317,"column":8},"end":{"line":4317,"column":49}},"id":2938},"2939":{"loc":{"start":{"line":4317,"column":43},"end":{"line":4317,"column":44}},"id":2939},"2940":{"loc":{"start":{"line":4317,"column":47},"end":{"line":4317,"column":48}},"id":2940},"2941":{"loc":{"start":{"line":4317,"column":21},"end":{"line":4317,"column":40}},"id":2941},"2942":{"loc":{"start":{"line":4318,"column":8},"end":{"line":4318,"column":22}},"id":2942},"2943":{"loc":{"start":{"line":4319,"column":8},"end":{"line":4319,"column":31}},"id":2943},"2944":{"loc":{"start":{"line":4320,"column":8},"end":{"line":4320,"column":22}},"id":2944},"2945":{"loc":{"start":{"line":4321,"column":8},"end":{"line":4328,"column":10}},"id":2945},"2946":{"loc":{"start":{"line":4330,"column":8},"end":{"line":4330,"column":19}},"id":2946},"2947":{"loc":{"start":{"line":4331,"column":12},"end":{"line":4331,"column":42}},"id":2947},"2948":{"loc":{"start":{"line":4332,"column":12},"end":{"line":4332,"column":80}},"id":2948},"2949":{"loc":{"start":{"line":4332,"column":26},"end":{"line":4332,"column":79}},"id":2949},"2950":{"loc":{"start":{"line":4332,"column":26},"end":{"line":4332,"column":62}},"id":2950},"2951":{"loc":{"start":{"line":4333,"column":12},"end":{"line":4333,"column":74}},"id":2951},"2952":{"loc":{"start":{"line":4333,"column":24},"end":{"line":4333,"column":73}},"id":2952},"2953":{"loc":{"start":{"line":4333,"column":24},"end":{"line":4333,"column":58}},"id":2953},"2954":{"loc":{"start":{"line":4334,"column":12},"end":{"line":4334,"column":74}},"id":2954},"2955":{"loc":{"start":{"line":4334,"column":24},"end":{"line":4334,"column":73}},"id":2955},"2956":{"loc":{"start":{"line":4334,"column":24},"end":{"line":4334,"column":58}},"id":2956},"2957":{"loc":{"start":{"line":4335,"column":16},"end":{"line":4335,"column":69}},"id":2957},"2958":{"loc":{"start":{"line":4335,"column":16},"end":{"line":4335,"column":51}},"id":2958},"2959":{"loc":{"start":{"line":4336,"column":16},"end":{"line":4336,"column":34}},"id":2959},"2960":{"loc":{"start":{"line":4338,"column":16},"end":{"line":4338,"column":71}},"id":2960},"2961":{"loc":{"start":{"line":4338,"column":16},"end":{"line":4338,"column":52}},"id":2961},"2962":{"loc":{"start":{"line":4339,"column":16},"end":{"line":4339,"column":36}},"id":2962},"2963":{"loc":{"start":{"line":4341,"column":16},"end":{"line":4341,"column":73}},"id":2963},"2964":{"loc":{"start":{"line":4341,"column":16},"end":{"line":4341,"column":53}},"id":2964},"2965":{"loc":{"start":{"line":4342,"column":16},"end":{"line":4342,"column":34}},"id":2965},"2966":{"loc":{"start":{"line":4346,"column":12},"end":{"line":4346,"column":22}},"id":2966},"2967":{"loc":{"start":{"line":4347,"column":16},"end":{"line":4347,"column":48}},"id":2967},"2968":{"loc":{"start":{"line":4351,"column":20},"end":{"line":4351,"column":42}},"id":2968},"2969":{"loc":{"start":{"line":4352,"column":20},"end":{"line":4352,"column":44}},"id":2969},"2970":{"loc":{"start":{"line":4352,"column":29},"end":{"line":4352,"column":43}},"id":2970},"2971":{"loc":{"start":{"line":4356,"column":20},"end":{"line":4356,"column":52}},"id":2971},"2972":{"loc":{"start":{"line":4357,"column":20},"end":{"line":4357,"column":49}},"id":2972},"2973":{"loc":{"start":{"line":4357,"column":29},"end":{"line":4357,"column":48}},"id":2973},"2974":{"loc":{"start":{"line":4362,"column":8},"end":{"line":4362,"column":16}},"id":2974},"2975":{"loc":{"start":{"line":4362,"column":8},"end":{"line":4362,"column":15}},"id":2975},"2976":{"loc":{"start":{"line":4364,"column":12},"end":{"line":4364,"column":37}},"id":2976},"2977":{"loc":{"start":{"line":4364,"column":22},"end":{"line":4364,"column":36}},"id":2977},"2978":{"loc":{"start":{"line":4365,"column":16},"end":{"line":4365,"column":53}},"id":2978},"2979":{"loc":{"start":{"line":4366,"column":16},"end":{"line":4366,"column":50}},"id":2979},"2980":{"loc":{"start":{"line":4368,"column":16},"end":{"line":4368,"column":51}},"id":2980},"2981":{"loc":{"start":{"line":4369,"column":16},"end":{"line":4369,"column":46}},"id":2981},"2982":{"loc":{"start":{"line":4371,"column":16},"end":{"line":4371,"column":51}},"id":2982},"2983":{"loc":{"start":{"line":4372,"column":16},"end":{"line":4372,"column":46}},"id":2983},"2984":{"loc":{"start":{"line":4375,"column":12},"end":{"line":4375,"column":20}},"id":2984},"2985":{"loc":{"start":{"line":4377,"column":12},"end":{"line":4377,"column":22}},"id":2985},"2986":{"loc":{"start":{"line":4377,"column":12},"end":{"line":4377,"column":21}},"id":2986},"2987":{"loc":{"start":{"line":4378,"column":12},"end":{"line":4378,"column":23}},"id":2987},"2988":{"loc":{"start":{"line":4381,"column":8},"end":{"line":4381,"column":23}},"id":2988},"2989":{"loc":{"start":{"line":4385,"column":4},"end":{"line":4385,"column":34}},"id":2989},"2990":{"loc":{"start":{"line":4387,"column":4},"end":{"line":4387,"column":26}},"id":2990},"2991":{"loc":{"start":{"line":4390,"column":4},"end":{"line":4408,"column":9}},"id":2991},"2992":{"loc":{"start":{"line":4390,"column":21},"end":{"line":4408,"column":8}},"id":2992},"2993":{"loc":{"start":{"line":4391,"column":8},"end":{"line":4391,"column":29}},"id":2993},"2994":{"loc":{"start":{"line":4393,"column":12},"end":{"line":4393,"column":47}},"id":2994},"2995":{"loc":{"start":{"line":4394,"column":12},"end":{"line":4394,"column":40}},"id":2995},"2996":{"loc":{"start":{"line":4394,"column":20},"end":{"line":4394,"column":39}},"id":2996},"2997":{"loc":{"start":{"line":4398,"column":16},"end":{"line":4398,"column":43}},"id":2997},"2998":{"loc":{"start":{"line":4399,"column":16},"end":{"line":4399,"column":43}},"id":2998},"2999":{"loc":{"start":{"line":4403,"column":12},"end":{"line":4403,"column":47}},"id":2999},"3000":{"loc":{"start":{"line":4404,"column":12},"end":{"line":4404,"column":33}},"id":3000},"3001":{"loc":{"start":{"line":4404,"column":12},"end":{"line":4404,"column":32}},"id":3001},"3002":{"loc":{"start":{"line":4407,"column":8},"end":{"line":4407,"column":21}},"id":3002},"3003":{"loc":{"start":{"line":4410,"column":35},"end":{"line":4410,"column":49}},"id":3003},"3004":{"loc":{"start":{"line":4410,"column":52},"end":{"line":4410,"column":59}},"id":3004},"3005":{"loc":{"start":{"line":4410,"column":2},"end":{"line":4410,"column":32}},"id":3005}}}}}}